{ This is an autogenerated unit using gobject introspection (gir2pascal). Do not Edit. }
unit Gtk4;

{$MODE OBJFPC}{$H+}

{$PACKRECORDS C}
{$MODESWITCH DUPLICATELOCALS+}

{$ifdef Unix}
{$LINKLIB libgtk-4.so.1}
{$endif}
interface
uses
  CTypes, Gdk4, Gsk4, GObject2, GLib2, Gio2, GdkPixbuf2, Pango1, cairo1, Graphene1;

const
  {$ifdef MsWindows}
  Gtk4_library = 'libgtk-4.so.dll';
  {$else}
  Gtk4_library = 'libgtk-4.so.1';
  {$endif}

  GTK_ACCESSIBLE_VALUE_UNDEFINED = -1;
  GTK_BINARY_AGE = 606;
  GTK_IM_MODULE_EXTENSION_POINT_NAME = 'gtk-im-module';
  GTK_INPUT_ERROR = -1;
  GTK_INTERFACE_AGE = 6;
  GTK_INVALID_LIST_POSITION = 4294967295;
  GTK_LEVEL_BAR_OFFSET_FULL = 'full';
  GTK_LEVEL_BAR_OFFSET_HIGH = 'high';
  GTK_LEVEL_BAR_OFFSET_LOW = 'low';
  GTK_MAJOR_VERSION = 4;
  GTK_MAX_COMPOSE_LEN = 7;
  GTK_MEDIA_FILE_EXTENSION_POINT_NAME = 'gtk-media-file';
  GTK_MICRO_VERSION = 6;
  GTK_MINOR_VERSION = 6;
  GTK_PAPER_NAME_A3 = 'iso_a3';
  GTK_PAPER_NAME_A4 = 'iso_a4';
  GTK_PAPER_NAME_A5 = 'iso_a5';
  GTK_PAPER_NAME_B5 = 'iso_b5';
  GTK_PAPER_NAME_EXECUTIVE = 'na_executive';
  GTK_PAPER_NAME_LEGAL = 'na_legal';
  GTK_PAPER_NAME_LETTER = 'na_letter';
  GTK_PRINT_SETTINGS_COLLATE = 'collate';
  GTK_PRINT_SETTINGS_DEFAULT_SOURCE = 'default-source';
  GTK_PRINT_SETTINGS_DITHER = 'dither';
  GTK_PRINT_SETTINGS_DUPLEX = 'duplex';
  GTK_PRINT_SETTINGS_FINISHINGS = 'finishings';
  GTK_PRINT_SETTINGS_MEDIA_TYPE = 'media-type';
  GTK_PRINT_SETTINGS_NUMBER_UP = 'number-up';
  GTK_PRINT_SETTINGS_NUMBER_UP_LAYOUT = 'number-up-layout';
  GTK_PRINT_SETTINGS_N_COPIES = 'n-copies';
  GTK_PRINT_SETTINGS_ORIENTATION = 'orientation';
  GTK_PRINT_SETTINGS_OUTPUT_BASENAME = 'output-basename';
  GTK_PRINT_SETTINGS_OUTPUT_BIN = 'output-bin';
  GTK_PRINT_SETTINGS_OUTPUT_DIR = 'output-dir';
  GTK_PRINT_SETTINGS_OUTPUT_FILE_FORMAT = 'output-file-format';
  GTK_PRINT_SETTINGS_OUTPUT_URI = 'output-uri';
  GTK_PRINT_SETTINGS_PAGE_RANGES = 'page-ranges';
  GTK_PRINT_SETTINGS_PAGE_SET = 'page-set';
  GTK_PRINT_SETTINGS_PAPER_FORMAT = 'paper-format';
  GTK_PRINT_SETTINGS_PAPER_HEIGHT = 'paper-height';
  GTK_PRINT_SETTINGS_PAPER_WIDTH = 'paper-width';
  GTK_PRINT_SETTINGS_PRINTER = 'printer';
  GTK_PRINT_SETTINGS_PRINTER_LPI = 'printer-lpi';
  GTK_PRINT_SETTINGS_PRINT_PAGES = 'print-pages';
  GTK_PRINT_SETTINGS_QUALITY = 'quality';
  GTK_PRINT_SETTINGS_RESOLUTION = 'resolution';
  GTK_PRINT_SETTINGS_RESOLUTION_X = 'resolution-x';
  GTK_PRINT_SETTINGS_RESOLUTION_Y = 'resolution-y';
  GTK_PRINT_SETTINGS_REVERSE = 'reverse';
  GTK_PRINT_SETTINGS_SCALE = 'scale';
  GTK_PRINT_SETTINGS_USE_COLOR = 'use-color';
  GTK_PRINT_SETTINGS_WIN32_DRIVER_EXTRA = 'win32-driver-extra';
  GTK_PRINT_SETTINGS_WIN32_DRIVER_VERSION = 'win32-driver-version';
  GTK_PRIORITY_RESIZE = 110;
  GTK_STYLE_PROVIDER_PRIORITY_APPLICATION = 600;
  GTK_STYLE_PROVIDER_PRIORITY_FALLBACK = 1;
  GTK_STYLE_PROVIDER_PRIORITY_SETTINGS = 400;
  GTK_STYLE_PROVIDER_PRIORITY_THEME = 200;
  GTK_STYLE_PROVIDER_PRIORITY_USER = 800;
  GTK_TEXT_VIEW_PRIORITY_VALIDATE = 125;
  GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID = -1;
  GTK_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID = -2;

type
  TGtkAccessibleRole = DWord;
const
  { GtkAccessibleRole }
  GTK_ACCESSIBLE_ROLE_ALERT: TGtkAccessibleRole = 0;
  GTK_ACCESSIBLE_ROLE_ALERT_DIALOG: TGtkAccessibleRole = 1;
  GTK_ACCESSIBLE_ROLE_BANNER: TGtkAccessibleRole = 2;
  GTK_ACCESSIBLE_ROLE_BUTTON: TGtkAccessibleRole = 3;
  GTK_ACCESSIBLE_ROLE_CAPTION: TGtkAccessibleRole = 4;
  GTK_ACCESSIBLE_ROLE_CELL: TGtkAccessibleRole = 5;
  GTK_ACCESSIBLE_ROLE_CHECKBOX: TGtkAccessibleRole = 6;
  GTK_ACCESSIBLE_ROLE_COLUMN_HEADER: TGtkAccessibleRole = 7;
  GTK_ACCESSIBLE_ROLE_COMBO_BOX: TGtkAccessibleRole = 8;
  GTK_ACCESSIBLE_ROLE_COMMAND: TGtkAccessibleRole = 9;
  GTK_ACCESSIBLE_ROLE_COMPOSITE: TGtkAccessibleRole = 10;
  GTK_ACCESSIBLE_ROLE_DIALOG: TGtkAccessibleRole = 11;
  GTK_ACCESSIBLE_ROLE_DOCUMENT: TGtkAccessibleRole = 12;
  GTK_ACCESSIBLE_ROLE_FEED: TGtkAccessibleRole = 13;
  GTK_ACCESSIBLE_ROLE_FORM: TGtkAccessibleRole = 14;
  GTK_ACCESSIBLE_ROLE_GENERIC: TGtkAccessibleRole = 15;
  GTK_ACCESSIBLE_ROLE_GRID: TGtkAccessibleRole = 16;
  GTK_ACCESSIBLE_ROLE_GRID_CELL: TGtkAccessibleRole = 17;
  GTK_ACCESSIBLE_ROLE_GROUP: TGtkAccessibleRole = 18;
  GTK_ACCESSIBLE_ROLE_HEADING: TGtkAccessibleRole = 19;
  GTK_ACCESSIBLE_ROLE_IMG: TGtkAccessibleRole = 20;
  GTK_ACCESSIBLE_ROLE_INPUT: TGtkAccessibleRole = 21;
  GTK_ACCESSIBLE_ROLE_LABEL: TGtkAccessibleRole = 22;
  GTK_ACCESSIBLE_ROLE_LANDMARK: TGtkAccessibleRole = 23;
  GTK_ACCESSIBLE_ROLE_LEGEND: TGtkAccessibleRole = 24;
  GTK_ACCESSIBLE_ROLE_LINK: TGtkAccessibleRole = 25;
  GTK_ACCESSIBLE_ROLE_LIST: TGtkAccessibleRole = 26;
  GTK_ACCESSIBLE_ROLE_LIST_BOX: TGtkAccessibleRole = 27;
  GTK_ACCESSIBLE_ROLE_LIST_ITEM: TGtkAccessibleRole = 28;
  GTK_ACCESSIBLE_ROLE_LOG: TGtkAccessibleRole = 29;
  GTK_ACCESSIBLE_ROLE_MAIN: TGtkAccessibleRole = 30;
  GTK_ACCESSIBLE_ROLE_MARQUEE: TGtkAccessibleRole = 31;
  GTK_ACCESSIBLE_ROLE_MATH: TGtkAccessibleRole = 32;
  GTK_ACCESSIBLE_ROLE_METER: TGtkAccessibleRole = 33;
  GTK_ACCESSIBLE_ROLE_MENU: TGtkAccessibleRole = 34;
  GTK_ACCESSIBLE_ROLE_MENU_BAR: TGtkAccessibleRole = 35;
  GTK_ACCESSIBLE_ROLE_MENU_ITEM: TGtkAccessibleRole = 36;
  GTK_ACCESSIBLE_ROLE_MENU_ITEM_CHECKBOX: TGtkAccessibleRole = 37;
  GTK_ACCESSIBLE_ROLE_MENU_ITEM_RADIO: TGtkAccessibleRole = 38;
  GTK_ACCESSIBLE_ROLE_NAVIGATION: TGtkAccessibleRole = 39;
  GTK_ACCESSIBLE_ROLE_NONE: TGtkAccessibleRole = 40;
  GTK_ACCESSIBLE_ROLE_NOTE: TGtkAccessibleRole = 41;
  GTK_ACCESSIBLE_ROLE_OPTION: TGtkAccessibleRole = 42;
  GTK_ACCESSIBLE_ROLE_PRESENTATION: TGtkAccessibleRole = 43;
  GTK_ACCESSIBLE_ROLE_PROGRESS_BAR: TGtkAccessibleRole = 44;
  GTK_ACCESSIBLE_ROLE_RADIO: TGtkAccessibleRole = 45;
  GTK_ACCESSIBLE_ROLE_RADIO_GROUP: TGtkAccessibleRole = 46;
  GTK_ACCESSIBLE_ROLE_RANGE: TGtkAccessibleRole = 47;
  GTK_ACCESSIBLE_ROLE_REGION: TGtkAccessibleRole = 48;
  GTK_ACCESSIBLE_ROLE_ROW: TGtkAccessibleRole = 49;
  GTK_ACCESSIBLE_ROLE_ROW_GROUP: TGtkAccessibleRole = 50;
  GTK_ACCESSIBLE_ROLE_ROW_HEADER: TGtkAccessibleRole = 51;
  GTK_ACCESSIBLE_ROLE_SCROLLBAR: TGtkAccessibleRole = 52;
  GTK_ACCESSIBLE_ROLE_SEARCH: TGtkAccessibleRole = 53;
  GTK_ACCESSIBLE_ROLE_SEARCH_BOX: TGtkAccessibleRole = 54;
  GTK_ACCESSIBLE_ROLE_SECTION: TGtkAccessibleRole = 55;
  GTK_ACCESSIBLE_ROLE_SECTION_HEAD: TGtkAccessibleRole = 56;
  GTK_ACCESSIBLE_ROLE_SELECT: TGtkAccessibleRole = 57;
  GTK_ACCESSIBLE_ROLE_SEPARATOR: TGtkAccessibleRole = 58;
  GTK_ACCESSIBLE_ROLE_SLIDER: TGtkAccessibleRole = 59;
  GTK_ACCESSIBLE_ROLE_SPIN_BUTTON: TGtkAccessibleRole = 60;
  GTK_ACCESSIBLE_ROLE_STATUS: TGtkAccessibleRole = 61;
  GTK_ACCESSIBLE_ROLE_STRUCTURE: TGtkAccessibleRole = 62;
  GTK_ACCESSIBLE_ROLE_SWITCH: TGtkAccessibleRole = 63;
  GTK_ACCESSIBLE_ROLE_TAB: TGtkAccessibleRole = 64;
  GTK_ACCESSIBLE_ROLE_TABLE: TGtkAccessibleRole = 65;
  GTK_ACCESSIBLE_ROLE_TAB_LIST: TGtkAccessibleRole = 66;
  GTK_ACCESSIBLE_ROLE_TAB_PANEL: TGtkAccessibleRole = 67;
  GTK_ACCESSIBLE_ROLE_TEXT_BOX: TGtkAccessibleRole = 68;
  GTK_ACCESSIBLE_ROLE_TIME: TGtkAccessibleRole = 69;
  GTK_ACCESSIBLE_ROLE_TIMER: TGtkAccessibleRole = 70;
  GTK_ACCESSIBLE_ROLE_TOOLBAR: TGtkAccessibleRole = 71;
  GTK_ACCESSIBLE_ROLE_TOOLTIP: TGtkAccessibleRole = 72;
  GTK_ACCESSIBLE_ROLE_TREE: TGtkAccessibleRole = 73;
  GTK_ACCESSIBLE_ROLE_TREE_GRID: TGtkAccessibleRole = 74;
  GTK_ACCESSIBLE_ROLE_TREE_ITEM: TGtkAccessibleRole = 75;
  GTK_ACCESSIBLE_ROLE_WIDGET: TGtkAccessibleRole = 76;
  GTK_ACCESSIBLE_ROLE_WINDOW: TGtkAccessibleRole = 77;

type
  TGtkAccessibleProperty = DWord;
const
  { GtkAccessibleProperty }
  GTK_ACCESSIBLE_PROPERTY_AUTOCOMPLETE: TGtkAccessibleProperty = 0;
  GTK_ACCESSIBLE_PROPERTY_DESCRIPTION: TGtkAccessibleProperty = 1;
  GTK_ACCESSIBLE_PROPERTY_HAS_POPUP: TGtkAccessibleProperty = 2;
  GTK_ACCESSIBLE_PROPERTY_KEY_SHORTCUTS: TGtkAccessibleProperty = 3;
  GTK_ACCESSIBLE_PROPERTY_LABEL: TGtkAccessibleProperty = 4;
  GTK_ACCESSIBLE_PROPERTY_LEVEL: TGtkAccessibleProperty = 5;
  GTK_ACCESSIBLE_PROPERTY_MODAL: TGtkAccessibleProperty = 6;
  GTK_ACCESSIBLE_PROPERTY_MULTI_LINE: TGtkAccessibleProperty = 7;
  GTK_ACCESSIBLE_PROPERTY_MULTI_SELECTABLE: TGtkAccessibleProperty = 8;
  GTK_ACCESSIBLE_PROPERTY_ORIENTATION: TGtkAccessibleProperty = 9;
  GTK_ACCESSIBLE_PROPERTY_PLACEHOLDER: TGtkAccessibleProperty = 10;
  GTK_ACCESSIBLE_PROPERTY_READ_ONLY: TGtkAccessibleProperty = 11;
  GTK_ACCESSIBLE_PROPERTY_REQUIRED: TGtkAccessibleProperty = 12;
  GTK_ACCESSIBLE_PROPERTY_ROLE_DESCRIPTION: TGtkAccessibleProperty = 13;
  GTK_ACCESSIBLE_PROPERTY_SORT: TGtkAccessibleProperty = 14;
  GTK_ACCESSIBLE_PROPERTY_VALUE_MAX: TGtkAccessibleProperty = 15;
  GTK_ACCESSIBLE_PROPERTY_VALUE_MIN: TGtkAccessibleProperty = 16;
  GTK_ACCESSIBLE_PROPERTY_VALUE_NOW: TGtkAccessibleProperty = 17;
  GTK_ACCESSIBLE_PROPERTY_VALUE_TEXT: TGtkAccessibleProperty = 18;

type
  TGtkAccessibleRelation = DWord;
const
  { GtkAccessibleRelation }
  GTK_ACCESSIBLE_RELATION_ACTIVE_DESCENDANT: TGtkAccessibleRelation = 0;
  GTK_ACCESSIBLE_RELATION_COL_COUNT: TGtkAccessibleRelation = 1;
  GTK_ACCESSIBLE_RELATION_COL_INDEX: TGtkAccessibleRelation = 2;
  GTK_ACCESSIBLE_RELATION_COL_INDEX_TEXT: TGtkAccessibleRelation = 3;
  GTK_ACCESSIBLE_RELATION_COL_SPAN: TGtkAccessibleRelation = 4;
  GTK_ACCESSIBLE_RELATION_CONTROLS: TGtkAccessibleRelation = 5;
  GTK_ACCESSIBLE_RELATION_DESCRIBED_BY: TGtkAccessibleRelation = 6;
  GTK_ACCESSIBLE_RELATION_DETAILS: TGtkAccessibleRelation = 7;
  GTK_ACCESSIBLE_RELATION_ERROR_MESSAGE: TGtkAccessibleRelation = 8;
  GTK_ACCESSIBLE_RELATION_FLOW_TO: TGtkAccessibleRelation = 9;
  GTK_ACCESSIBLE_RELATION_LABELLED_BY: TGtkAccessibleRelation = 10;
  GTK_ACCESSIBLE_RELATION_OWNS: TGtkAccessibleRelation = 11;
  GTK_ACCESSIBLE_RELATION_POS_IN_SET: TGtkAccessibleRelation = 12;
  GTK_ACCESSIBLE_RELATION_ROW_COUNT: TGtkAccessibleRelation = 13;
  GTK_ACCESSIBLE_RELATION_ROW_INDEX: TGtkAccessibleRelation = 14;
  GTK_ACCESSIBLE_RELATION_ROW_INDEX_TEXT: TGtkAccessibleRelation = 15;
  GTK_ACCESSIBLE_RELATION_ROW_SPAN: TGtkAccessibleRelation = 16;
  GTK_ACCESSIBLE_RELATION_SET_SIZE: TGtkAccessibleRelation = 17;

type
  TGtkAccessibleState = DWord;
const
  { GtkAccessibleState }
  GTK_ACCESSIBLE_STATE_BUSY: TGtkAccessibleState = 0;
  GTK_ACCESSIBLE_STATE_CHECKED: TGtkAccessibleState = 1;
  GTK_ACCESSIBLE_STATE_DISABLED: TGtkAccessibleState = 2;
  GTK_ACCESSIBLE_STATE_EXPANDED: TGtkAccessibleState = 3;
  GTK_ACCESSIBLE_STATE_HIDDEN: TGtkAccessibleState = 4;
  GTK_ACCESSIBLE_STATE_INVALID: TGtkAccessibleState = 5;
  GTK_ACCESSIBLE_STATE_PRESSED: TGtkAccessibleState = 6;
  GTK_ACCESSIBLE_STATE_SELECTED: TGtkAccessibleState = 7;

type
  TGtkTextDirection = DWord;
const
  { GtkTextDirection }
  GTK_TEXT_DIR_NONE: TGtkTextDirection = 0;
  GTK_TEXT_DIR_LTR: TGtkTextDirection = 1;
  GTK_TEXT_DIR_RTL: TGtkTextDirection = 2;

type
  TGtkDirectionType = DWord;
const
  { GtkDirectionType }
  GTK_DIR_TAB_FORWARD: TGtkDirectionType = 0;
  GTK_DIR_TAB_BACKWARD: TGtkDirectionType = 1;
  GTK_DIR_UP: TGtkDirectionType = 2;
  GTK_DIR_DOWN: TGtkDirectionType = 3;
  GTK_DIR_LEFT: TGtkDirectionType = 4;
  GTK_DIR_RIGHT: TGtkDirectionType = 5;

type
  TGtkOrientation = DWord;
const
  { GtkOrientation }
  GTK_ORIENTATION_HORIZONTAL: TGtkOrientation = 0;
  GTK_ORIENTATION_VERTICAL: TGtkOrientation = 1;

type
  TGtkStateFlags = DWord;
const
  { GtkStateFlags }
  GTK_STATE_FLAG_NORMAL: TGtkStateFlags = 0;
  GTK_STATE_FLAG_ACTIVE: TGtkStateFlags = 1;
  GTK_STATE_FLAG_PRELIGHT: TGtkStateFlags = 2;
  GTK_STATE_FLAG_SELECTED: TGtkStateFlags = 4;
  GTK_STATE_FLAG_INSENSITIVE: TGtkStateFlags = 8;
  GTK_STATE_FLAG_INCONSISTENT: TGtkStateFlags = 16;
  GTK_STATE_FLAG_FOCUSED: TGtkStateFlags = 32;
  GTK_STATE_FLAG_BACKDROP: TGtkStateFlags = 64;
  GTK_STATE_FLAG_DIR_LTR: TGtkStateFlags = 128;
  GTK_STATE_FLAG_DIR_RTL: TGtkStateFlags = 256;
  GTK_STATE_FLAG_LINK: TGtkStateFlags = 512;
  GTK_STATE_FLAG_VISITED: TGtkStateFlags = 1024;
  GTK_STATE_FLAG_CHECKED: TGtkStateFlags = 2048;
  GTK_STATE_FLAG_DROP_ACTIVE: TGtkStateFlags = 4096;
  GTK_STATE_FLAG_FOCUS_VISIBLE: TGtkStateFlags = 8192;
  GTK_STATE_FLAG_FOCUS_WITHIN: TGtkStateFlags = 16384;

type
  TGtkPickFlags = DWord;
const
  { GtkPickFlags }
  GTK_PICK_DEFAULT: TGtkPickFlags = 0;
  GTK_PICK_INSENSITIVE: TGtkPickFlags = 1;
  GTK_PICK_NON_TARGETABLE: TGtkPickFlags = 2;

type
  TGtkAlign = DWord;
const
  { GtkAlign }
  GTK_ALIGN_FILL: TGtkAlign = 0;
  GTK_ALIGN_START: TGtkAlign = 1;
  GTK_ALIGN_END: TGtkAlign = 2;
  GTK_ALIGN_CENTER: TGtkAlign = 3;
  GTK_ALIGN_BASELINE: TGtkAlign = 4;

type
  TGtkOverflow = DWord;
const
  { GtkOverflow }
  GTK_OVERFLOW_VISIBLE: TGtkOverflow = 0;
  GTK_OVERFLOW_HIDDEN: TGtkOverflow = 1;

type
  TGtkLicense = DWord;
const
  { GtkLicense }
  GTK_LICENSE_UNKNOWN: TGtkLicense = 0;
  GTK_LICENSE_CUSTOM: TGtkLicense = 1;
  GTK_LICENSE_GPL_2_0: TGtkLicense = 2;
  GTK_LICENSE_GPL_3_0: TGtkLicense = 3;
  GTK_LICENSE_LGPL_2_1: TGtkLicense = 4;
  GTK_LICENSE_LGPL_3_0: TGtkLicense = 5;
  GTK_LICENSE_BSD: TGtkLicense = 6;
  GTK_LICENSE_MIT_X11: TGtkLicense = 7;
  GTK_LICENSE_ARTISTIC: TGtkLicense = 8;
  GTK_LICENSE_GPL_2_0_ONLY: TGtkLicense = 9;
  GTK_LICENSE_GPL_3_0_ONLY: TGtkLicense = 10;
  GTK_LICENSE_LGPL_2_1_ONLY: TGtkLicense = 11;
  GTK_LICENSE_LGPL_3_0_ONLY: TGtkLicense = 12;
  GTK_LICENSE_AGPL_3_0: TGtkLicense = 13;
  GTK_LICENSE_AGPL_3_0_ONLY: TGtkLicense = 14;
  GTK_LICENSE_BSD_3: TGtkLicense = 15;
  GTK_LICENSE_APACHE_2_0: TGtkLicense = 16;
  GTK_LICENSE_MPL_2_0: TGtkLicense = 17;

type
  TGtkAccessibleAutocomplete = DWord;
const
  { GtkAccessibleAutocomplete }
  GTK_ACCESSIBLE_AUTOCOMPLETE_NONE: TGtkAccessibleAutocomplete = 0;
  GTK_ACCESSIBLE_AUTOCOMPLETE_INLINE: TGtkAccessibleAutocomplete = 1;
  GTK_ACCESSIBLE_AUTOCOMPLETE_LIST: TGtkAccessibleAutocomplete = 2;
  GTK_ACCESSIBLE_AUTOCOMPLETE_BOTH: TGtkAccessibleAutocomplete = 3;

type
  TGtkAccessibleInvalidState = DWord;
const
  { GtkAccessibleInvalidState }
  GTK_ACCESSIBLE_INVALID_FALSE: TGtkAccessibleInvalidState = 0;
  GTK_ACCESSIBLE_INVALID_TRUE: TGtkAccessibleInvalidState = 1;
  GTK_ACCESSIBLE_INVALID_GRAMMAR: TGtkAccessibleInvalidState = 2;
  GTK_ACCESSIBLE_INVALID_SPELLING: TGtkAccessibleInvalidState = 3;

type
  TGtkAccessibleSort = DWord;
const
  { GtkAccessibleSort }
  GTK_ACCESSIBLE_SORT_NONE: TGtkAccessibleSort = 0;
  GTK_ACCESSIBLE_SORT_ASCENDING: TGtkAccessibleSort = 1;
  GTK_ACCESSIBLE_SORT_DESCENDING: TGtkAccessibleSort = 2;
  GTK_ACCESSIBLE_SORT_OTHER: TGtkAccessibleSort = 3;

type
  TGtkAccessibleTristate = DWord;
const
  { GtkAccessibleTristate }
  GTK_ACCESSIBLE_TRISTATE_FALSE: TGtkAccessibleTristate = 0;
  GTK_ACCESSIBLE_TRISTATE_TRUE: TGtkAccessibleTristate = 1;
  GTK_ACCESSIBLE_TRISTATE_MIXED: TGtkAccessibleTristate = 2;

type
  TGtkDialogFlags = DWord;
const
  { GtkDialogFlags }
  GTK_DIALOG_MODAL: TGtkDialogFlags = 1;
  GTK_DIALOG_DESTROY_WITH_PARENT: TGtkDialogFlags = 2;
  GTK_DIALOG_USE_HEADER_BAR: TGtkDialogFlags = 4;

type
  TGtkApplicationInhibitFlags = DWord;
const
  { GtkApplicationInhibitFlags }
  GTK_APPLICATION_INHIBIT_LOGOUT: TGtkApplicationInhibitFlags = 1;
  GTK_APPLICATION_INHIBIT_SWITCH: TGtkApplicationInhibitFlags = 2;
  GTK_APPLICATION_INHIBIT_SUSPEND: TGtkApplicationInhibitFlags = 4;
  GTK_APPLICATION_INHIBIT_IDLE: TGtkApplicationInhibitFlags = 8;

type
  TGtkSystemSetting = DWord;
const
  { GtkSystemSetting }
  GTK_SYSTEM_SETTING_DPI: TGtkSystemSetting = 0;
  GTK_SYSTEM_SETTING_FONT_NAME: TGtkSystemSetting = 1;
  GTK_SYSTEM_SETTING_FONT_CONFIG: TGtkSystemSetting = 2;
  GTK_SYSTEM_SETTING_DISPLAY: TGtkSystemSetting = 3;
  GTK_SYSTEM_SETTING_ICON_THEME: TGtkSystemSetting = 4;

type
  TGtkArrowType = DWord;
const
  { GtkArrowType }
  GTK_ARROW_UP: TGtkArrowType = 0;
  GTK_ARROW_DOWN: TGtkArrowType = 1;
  GTK_ARROW_LEFT: TGtkArrowType = 2;
  GTK_ARROW_RIGHT: TGtkArrowType = 3;
  GTK_ARROW_NONE: TGtkArrowType = 4;

type
  TGtkAssistantPageType = DWord;
const
  { GtkAssistantPageType }
  GTK_ASSISTANT_PAGE_CONTENT: TGtkAssistantPageType = 0;
  GTK_ASSISTANT_PAGE_INTRO: TGtkAssistantPageType = 1;
  GTK_ASSISTANT_PAGE_CONFIRM: TGtkAssistantPageType = 2;
  GTK_ASSISTANT_PAGE_SUMMARY: TGtkAssistantPageType = 3;
  GTK_ASSISTANT_PAGE_PROGRESS: TGtkAssistantPageType = 4;
  GTK_ASSISTANT_PAGE_CUSTOM: TGtkAssistantPageType = 5;

type
  TGtkBaselinePosition = DWord;
const
  { GtkBaselinePosition }
  GTK_BASELINE_POSITION_TOP: TGtkBaselinePosition = 0;
  GTK_BASELINE_POSITION_CENTER: TGtkBaselinePosition = 1;
  GTK_BASELINE_POSITION_BOTTOM: TGtkBaselinePosition = 2;

type
  TGtkBorderStyle = DWord;
const
  { GtkBorderStyle }
  GTK_BORDER_STYLE_NONE: TGtkBorderStyle = 0;
  GTK_BORDER_STYLE_HIDDEN: TGtkBorderStyle = 1;
  GTK_BORDER_STYLE_SOLID: TGtkBorderStyle = 2;
  GTK_BORDER_STYLE_INSET: TGtkBorderStyle = 3;
  GTK_BORDER_STYLE_OUTSET: TGtkBorderStyle = 4;
  GTK_BORDER_STYLE_DOTTED: TGtkBorderStyle = 5;
  GTK_BORDER_STYLE_DASHED: TGtkBorderStyle = 6;
  GTK_BORDER_STYLE_DOUBLE: TGtkBorderStyle = 7;
  GTK_BORDER_STYLE_GROOVE: TGtkBorderStyle = 8;
  GTK_BORDER_STYLE_RIDGE: TGtkBorderStyle = 9;

type
  TGtkBuilderClosureFlags = DWord;
const
  { GtkBuilderClosureFlags }
  GTK_BUILDER_CLOSURE_SWAPPED: TGtkBuilderClosureFlags = 1;

type
  TGtkBuilderError = DWord;
const
  { GtkBuilderError }
  GTK_BUILDER_ERROR_INVALID_TYPE_FUNCTION: TGtkBuilderError = 0;
  GTK_BUILDER_ERROR_UNHANDLED_TAG: TGtkBuilderError = 1;
  GTK_BUILDER_ERROR_MISSING_ATTRIBUTE: TGtkBuilderError = 2;
  GTK_BUILDER_ERROR_INVALID_ATTRIBUTE: TGtkBuilderError = 3;
  GTK_BUILDER_ERROR_INVALID_TAG: TGtkBuilderError = 4;
  GTK_BUILDER_ERROR_MISSING_PROPERTY_VALUE: TGtkBuilderError = 5;
  GTK_BUILDER_ERROR_INVALID_VALUE: TGtkBuilderError = 6;
  GTK_BUILDER_ERROR_VERSION_MISMATCH: TGtkBuilderError = 7;
  GTK_BUILDER_ERROR_DUPLICATE_ID: TGtkBuilderError = 8;
  GTK_BUILDER_ERROR_OBJECT_TYPE_REFUSED: TGtkBuilderError = 9;
  GTK_BUILDER_ERROR_TEMPLATE_MISMATCH: TGtkBuilderError = 10;
  GTK_BUILDER_ERROR_INVALID_PROPERTY: TGtkBuilderError = 11;
  GTK_BUILDER_ERROR_INVALID_SIGNAL: TGtkBuilderError = 12;
  GTK_BUILDER_ERROR_INVALID_ID: TGtkBuilderError = 13;
  GTK_BUILDER_ERROR_INVALID_FUNCTION: TGtkBuilderError = 14;

type
  TGtkButtonsType = DWord;
const
  { GtkButtonsType }
  GTK_BUTTONS_NONE: TGtkButtonsType = 0;
  GTK_BUTTONS_OK: TGtkButtonsType = 1;
  GTK_BUTTONS_CLOSE: TGtkButtonsType = 2;
  GTK_BUTTONS_CANCEL: TGtkButtonsType = 3;
  GTK_BUTTONS_YES_NO: TGtkButtonsType = 4;
  GTK_BUTTONS_OK_CANCEL: TGtkButtonsType = 5;

type
  TGtkCellRendererState = DWord;
const
  { GtkCellRendererState }
  GTK_CELL_RENDERER_SELECTED: TGtkCellRendererState = 1;
  GTK_CELL_RENDERER_PRELIT: TGtkCellRendererState = 2;
  GTK_CELL_RENDERER_INSENSITIVE: TGtkCellRendererState = 4;
  GTK_CELL_RENDERER_SORTED: TGtkCellRendererState = 8;
  GTK_CELL_RENDERER_FOCUSED: TGtkCellRendererState = 16;
  GTK_CELL_RENDERER_EXPANDABLE: TGtkCellRendererState = 32;
  GTK_CELL_RENDERER_EXPANDED: TGtkCellRendererState = 64;

type
  TGtkTreeModelFlags = DWord;
const
  { GtkTreeModelFlags }
  GTK_TREE_MODEL_ITERS_PERSIST: TGtkTreeModelFlags = 1;
  GTK_TREE_MODEL_LIST_ONLY: TGtkTreeModelFlags = 2;

type
  TGtkSizeRequestMode = DWord;
const
  { GtkSizeRequestMode }
  GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH: TGtkSizeRequestMode = 0;
  GTK_SIZE_REQUEST_WIDTH_FOR_HEIGHT: TGtkSizeRequestMode = 1;
  GTK_SIZE_REQUEST_CONSTANT_SIZE: TGtkSizeRequestMode = 2;

type
  TGtkCellRendererMode = DWord;
const
  { GtkCellRendererMode }
  GTK_CELL_RENDERER_MODE_INERT: TGtkCellRendererMode = 0;
  GTK_CELL_RENDERER_MODE_ACTIVATABLE: TGtkCellRendererMode = 1;
  GTK_CELL_RENDERER_MODE_EDITABLE: TGtkCellRendererMode = 2;

type
  TGtkCellRendererAccelMode = DWord;
const
  { GtkCellRendererAccelMode }
  GTK_CELL_RENDERER_ACCEL_MODE_GTK: TGtkCellRendererAccelMode = 0;
  GTK_CELL_RENDERER_ACCEL_MODE_OTHER: TGtkCellRendererAccelMode = 1;

type
  TGtkIconSize = DWord;
const
  { GtkIconSize }
  GTK_ICON_SIZE_INHERIT: TGtkIconSize = 0;
  GTK_ICON_SIZE_NORMAL: TGtkIconSize = 1;
  GTK_ICON_SIZE_LARGE: TGtkIconSize = 2;

type
  TGtkScrollablePolicy = DWord;
const
  { GtkScrollablePolicy }
  GTK_SCROLL_MINIMUM: TGtkScrollablePolicy = 0;
  GTK_SCROLL_NATURAL: TGtkScrollablePolicy = 1;

type
  TGtkSortType = DWord;
const
  { GtkSortType }
  GTK_SORT_ASCENDING: TGtkSortType = 0;
  GTK_SORT_DESCENDING: TGtkSortType = 1;

type
  TGtkSorterChange = DWord;
const
  { GtkSorterChange }
  GTK_SORTER_CHANGE_DIFFERENT: TGtkSorterChange = 0;
  GTK_SORTER_CHANGE_INVERTED: TGtkSorterChange = 1;
  GTK_SORTER_CHANGE_LESS_STRICT: TGtkSorterChange = 2;
  GTK_SORTER_CHANGE_MORE_STRICT: TGtkSorterChange = 3;

type
  TGtkSensitivityType = DWord;
const
  { GtkSensitivityType }
  GTK_SENSITIVITY_AUTO: TGtkSensitivityType = 0;
  GTK_SENSITIVITY_ON: TGtkSensitivityType = 1;
  GTK_SENSITIVITY_OFF: TGtkSensitivityType = 2;

type
  TGtkScrollType = DWord;
const
  { GtkScrollType }
  GTK_SCROLL_NONE: TGtkScrollType = 0;
  GTK_SCROLL_JUMP: TGtkScrollType = 1;
  GTK_SCROLL_STEP_BACKWARD: TGtkScrollType = 2;
  GTK_SCROLL_STEP_FORWARD: TGtkScrollType = 3;
  GTK_SCROLL_PAGE_BACKWARD: TGtkScrollType = 4;
  GTK_SCROLL_PAGE_FORWARD: TGtkScrollType = 5;
  GTK_SCROLL_STEP_UP: TGtkScrollType = 6;
  GTK_SCROLL_STEP_DOWN: TGtkScrollType = 7;
  GTK_SCROLL_PAGE_UP: TGtkScrollType = 8;
  GTK_SCROLL_PAGE_DOWN: TGtkScrollType = 9;
  GTK_SCROLL_STEP_LEFT: TGtkScrollType = 10;
  GTK_SCROLL_STEP_RIGHT: TGtkScrollType = 11;
  GTK_SCROLL_PAGE_LEFT: TGtkScrollType = 12;
  GTK_SCROLL_PAGE_RIGHT: TGtkScrollType = 13;
  GTK_SCROLL_START: TGtkScrollType = 14;
  GTK_SCROLL_END: TGtkScrollType = 15;

type
  TGtkConstraintAttribute = DWord;
const
  { GtkConstraintAttribute }
  GTK_CONSTRAINT_ATTRIBUTE_NONE: TGtkConstraintAttribute = 0;
  GTK_CONSTRAINT_ATTRIBUTE_LEFT: TGtkConstraintAttribute = 1;
  GTK_CONSTRAINT_ATTRIBUTE_RIGHT: TGtkConstraintAttribute = 2;
  GTK_CONSTRAINT_ATTRIBUTE_TOP: TGtkConstraintAttribute = 3;
  GTK_CONSTRAINT_ATTRIBUTE_BOTTOM: TGtkConstraintAttribute = 4;
  GTK_CONSTRAINT_ATTRIBUTE_START: TGtkConstraintAttribute = 5;
  GTK_CONSTRAINT_ATTRIBUTE_END: TGtkConstraintAttribute = 6;
  GTK_CONSTRAINT_ATTRIBUTE_WIDTH: TGtkConstraintAttribute = 7;
  GTK_CONSTRAINT_ATTRIBUTE_HEIGHT: TGtkConstraintAttribute = 8;
  GTK_CONSTRAINT_ATTRIBUTE_CENTER_X: TGtkConstraintAttribute = 9;
  GTK_CONSTRAINT_ATTRIBUTE_CENTER_Y: TGtkConstraintAttribute = 10;
  GTK_CONSTRAINT_ATTRIBUTE_BASELINE: TGtkConstraintAttribute = 11;

type
  TGtkConstraintRelation = Integer;
const
  { GtkConstraintRelation }
  GTK_CONSTRAINT_RELATION_LE: TGtkConstraintRelation = -1;
  GTK_CONSTRAINT_RELATION_EQ: TGtkConstraintRelation = 0;
  GTK_CONSTRAINT_RELATION_GE: TGtkConstraintRelation = 1;

type
  TGtkConstraintStrength = DWord;
const
  { GtkConstraintStrength }
  GTK_CONSTRAINT_STRENGTH_REQUIRED: TGtkConstraintStrength = 1001001000;
  GTK_CONSTRAINT_STRENGTH_STRONG: TGtkConstraintStrength = 1000000000;
  GTK_CONSTRAINT_STRENGTH_MEDIUM: TGtkConstraintStrength = 1000;
  GTK_CONSTRAINT_STRENGTH_WEAK: TGtkConstraintStrength = 1;

type
  TGtkConstraintVflParserError = DWord;
const
  { GtkConstraintVflParserError }
  GTK_CONSTRAINT_VFL_PARSER_ERROR_INVALID_SYMBOL: TGtkConstraintVflParserError = 0;
  GTK_CONSTRAINT_VFL_PARSER_ERROR_INVALID_ATTRIBUTE: TGtkConstraintVflParserError = 1;
  GTK_CONSTRAINT_VFL_PARSER_ERROR_INVALID_VIEW: TGtkConstraintVflParserError = 2;
  GTK_CONSTRAINT_VFL_PARSER_ERROR_INVALID_METRIC: TGtkConstraintVflParserError = 3;
  GTK_CONSTRAINT_VFL_PARSER_ERROR_INVALID_PRIORITY: TGtkConstraintVflParserError = 4;
  GTK_CONSTRAINT_VFL_PARSER_ERROR_INVALID_RELATION: TGtkConstraintVflParserError = 5;

type
  TGtkCornerType = DWord;
const
  { GtkCornerType }
  GTK_CORNER_TOP_LEFT: TGtkCornerType = 0;
  GTK_CORNER_BOTTOM_LEFT: TGtkCornerType = 1;
  GTK_CORNER_TOP_RIGHT: TGtkCornerType = 2;
  GTK_CORNER_BOTTOM_RIGHT: TGtkCornerType = 3;

type
  TGtkCssParserError = DWord;
const
  { GtkCssParserError }
  GTK_CSS_PARSER_ERROR_FAILED: TGtkCssParserError = 0;
  GTK_CSS_PARSER_ERROR_SYNTAX: TGtkCssParserError = 1;
  GTK_CSS_PARSER_ERROR_IMPORT: TGtkCssParserError = 2;
  GTK_CSS_PARSER_ERROR_NAME: TGtkCssParserError = 3;
  GTK_CSS_PARSER_ERROR_UNKNOWN_VALUE: TGtkCssParserError = 4;

type
  TGtkCssParserWarning = DWord;
const
  { GtkCssParserWarning }
  GTK_CSS_PARSER_WARNING_DEPRECATED: TGtkCssParserWarning = 0;
  GTK_CSS_PARSER_WARNING_SYNTAX: TGtkCssParserWarning = 1;
  GTK_CSS_PARSER_WARNING_UNIMPLEMENTED: TGtkCssParserWarning = 2;

type
  TGtkDebugFlags = DWord;
const
  { GtkDebugFlags }
  GTK_DEBUG_TEXT: TGtkDebugFlags = 1;
  GTK_DEBUG_TREE: TGtkDebugFlags = 2;
  GTK_DEBUG_KEYBINDINGS: TGtkDebugFlags = 4;
  GTK_DEBUG_MODULES: TGtkDebugFlags = 8;
  GTK_DEBUG_GEOMETRY: TGtkDebugFlags = 16;
  GTK_DEBUG_ICONTHEME: TGtkDebugFlags = 32;
  GTK_DEBUG_PRINTING: TGtkDebugFlags = 64;
  GTK_DEBUG_BUILDER: TGtkDebugFlags = 128;
  GTK_DEBUG_SIZE_REQUEST: TGtkDebugFlags = 256;
  GTK_DEBUG_NO_CSS_CACHE: TGtkDebugFlags = 512;
  GTK_DEBUG_INTERACTIVE: TGtkDebugFlags = 1024;
  GTK_DEBUG_TOUCHSCREEN: TGtkDebugFlags = 2048;
  GTK_DEBUG_ACTIONS: TGtkDebugFlags = 4096;
  GTK_DEBUG_LAYOUT: TGtkDebugFlags = 8192;
  GTK_DEBUG_SNAPSHOT: TGtkDebugFlags = 16384;
  GTK_DEBUG_CONSTRAINTS: TGtkDebugFlags = 32768;
  GTK_DEBUG_BUILDER_OBJECTS: TGtkDebugFlags = 65536;
  GTK_DEBUG_A11Y: TGtkDebugFlags = 131072;
  GTK_DEBUG_ICONFALLBACK: TGtkDebugFlags = 262144;

type
  TGtkDeleteType = DWord;
const
  { GtkDeleteType }
  GTK_DELETE_CHARS: TGtkDeleteType = 0;
  GTK_DELETE_WORD_ENDS: TGtkDeleteType = 1;
  GTK_DELETE_WORDS: TGtkDeleteType = 2;
  GTK_DELETE_DISPLAY_LINES: TGtkDeleteType = 3;
  GTK_DELETE_DISPLAY_LINE_ENDS: TGtkDeleteType = 4;
  GTK_DELETE_PARAGRAPH_ENDS: TGtkDeleteType = 5;
  GTK_DELETE_PARAGRAPHS: TGtkDeleteType = 6;
  GTK_DELETE_WHITESPACE: TGtkDeleteType = 7;

type
  TGtkPropagationLimit = DWord;
const
  { GtkPropagationLimit }
  GTK_LIMIT_NONE: TGtkPropagationLimit = 0;
  GTK_LIMIT_SAME_NATIVE: TGtkPropagationLimit = 1;

type
  TGtkPropagationPhase = DWord;
const
  { GtkPropagationPhase }
  GTK_PHASE_NONE: TGtkPropagationPhase = 0;
  GTK_PHASE_CAPTURE: TGtkPropagationPhase = 1;
  GTK_PHASE_BUBBLE: TGtkPropagationPhase = 2;
  GTK_PHASE_TARGET: TGtkPropagationPhase = 3;

type
  TGtkEditableProperties = DWord;
const
  { GtkEditableProperties }
  GTK_EDITABLE_PROP_TEXT: TGtkEditableProperties = 0;
  GTK_EDITABLE_PROP_CURSOR_POSITION: TGtkEditableProperties = 1;
  GTK_EDITABLE_PROP_SELECTION_BOUND: TGtkEditableProperties = 2;
  GTK_EDITABLE_PROP_EDITABLE: TGtkEditableProperties = 3;
  GTK_EDITABLE_PROP_WIDTH_CHARS: TGtkEditableProperties = 4;
  GTK_EDITABLE_PROP_MAX_WIDTH_CHARS: TGtkEditableProperties = 5;
  GTK_EDITABLE_PROP_XALIGN: TGtkEditableProperties = 6;
  GTK_EDITABLE_PROP_ENABLE_UNDO: TGtkEditableProperties = 7;
  GTK_EDITABLE_NUM_PROPERTIES: TGtkEditableProperties = 8;

type
  TGtkEntryIconPosition = DWord;
const
  { GtkEntryIconPosition }
  GTK_ENTRY_ICON_PRIMARY: TGtkEntryIconPosition = 0;
  GTK_ENTRY_ICON_SECONDARY: TGtkEntryIconPosition = 1;

type
  TGtkInputHints = DWord;
const
  { GtkInputHints }
  GTK_INPUT_HINT_NONE: TGtkInputHints = 0;
  GTK_INPUT_HINT_SPELLCHECK: TGtkInputHints = 1;
  GTK_INPUT_HINT_NO_SPELLCHECK: TGtkInputHints = 2;
  GTK_INPUT_HINT_WORD_COMPLETION: TGtkInputHints = 4;
  GTK_INPUT_HINT_LOWERCASE: TGtkInputHints = 8;
  GTK_INPUT_HINT_UPPERCASE_CHARS: TGtkInputHints = 16;
  GTK_INPUT_HINT_UPPERCASE_WORDS: TGtkInputHints = 32;
  GTK_INPUT_HINT_UPPERCASE_SENTENCES: TGtkInputHints = 64;
  GTK_INPUT_HINT_INHIBIT_OSK: TGtkInputHints = 128;
  GTK_INPUT_HINT_VERTICAL_WRITING: TGtkInputHints = 256;
  GTK_INPUT_HINT_EMOJI: TGtkInputHints = 512;
  GTK_INPUT_HINT_NO_EMOJI: TGtkInputHints = 1024;
  GTK_INPUT_HINT_PRIVATE: TGtkInputHints = 2048;

type
  TGtkInputPurpose = DWord;
const
  { GtkInputPurpose }
  GTK_INPUT_PURPOSE_FREE_FORM: TGtkInputPurpose = 0;
  GTK_INPUT_PURPOSE_ALPHA: TGtkInputPurpose = 1;
  GTK_INPUT_PURPOSE_DIGITS: TGtkInputPurpose = 2;
  GTK_INPUT_PURPOSE_NUMBER: TGtkInputPurpose = 3;
  GTK_INPUT_PURPOSE_PHONE: TGtkInputPurpose = 4;
  GTK_INPUT_PURPOSE_URL: TGtkInputPurpose = 5;
  GTK_INPUT_PURPOSE_EMAIL: TGtkInputPurpose = 6;
  GTK_INPUT_PURPOSE_NAME: TGtkInputPurpose = 7;
  GTK_INPUT_PURPOSE_PASSWORD: TGtkInputPurpose = 8;
  GTK_INPUT_PURPOSE_PIN: TGtkInputPurpose = 9;
  GTK_INPUT_PURPOSE_TERMINAL: TGtkInputPurpose = 10;

type
  TGtkImageType = DWord;
const
  { GtkImageType }
  GTK_IMAGE_EMPTY: TGtkImageType = 0;
  GTK_IMAGE_ICON_NAME: TGtkImageType = 1;
  GTK_IMAGE_GICON: TGtkImageType = 2;
  GTK_IMAGE_PAINTABLE: TGtkImageType = 3;

type
  TGtkEventControllerScrollFlags = DWord;
const
  { GtkEventControllerScrollFlags }
  GTK_EVENT_CONTROLLER_SCROLL_NONE: TGtkEventControllerScrollFlags = 0;
  GTK_EVENT_CONTROLLER_SCROLL_VERTICAL: TGtkEventControllerScrollFlags = 1;
  GTK_EVENT_CONTROLLER_SCROLL_HORIZONTAL: TGtkEventControllerScrollFlags = 2;
  GTK_EVENT_CONTROLLER_SCROLL_DISCRETE: TGtkEventControllerScrollFlags = 4;
  GTK_EVENT_CONTROLLER_SCROLL_KINETIC: TGtkEventControllerScrollFlags = 8;
  GTK_EVENT_CONTROLLER_SCROLL_BOTH_AXES: TGtkEventControllerScrollFlags = 3;

type
  TGtkEventSequenceState = DWord;
const
  { GtkEventSequenceState }
  GTK_EVENT_SEQUENCE_NONE: TGtkEventSequenceState = 0;
  GTK_EVENT_SEQUENCE_CLAIMED: TGtkEventSequenceState = 1;
  GTK_EVENT_SEQUENCE_DENIED: TGtkEventSequenceState = 2;

type
  TGtkFileChooserAction = DWord;
const
  { GtkFileChooserAction }
  GTK_FILE_CHOOSER_ACTION_OPEN: TGtkFileChooserAction = 0;
  GTK_FILE_CHOOSER_ACTION_SAVE: TGtkFileChooserAction = 1;
  GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER: TGtkFileChooserAction = 2;

type
  TGtkFileChooserError = DWord;
const
  { GtkFileChooserError }
  GTK_FILE_CHOOSER_ERROR_NONEXISTENT: TGtkFileChooserError = 0;
  GTK_FILE_CHOOSER_ERROR_BAD_FILENAME: TGtkFileChooserError = 1;
  GTK_FILE_CHOOSER_ERROR_ALREADY_EXISTS: TGtkFileChooserError = 2;
  GTK_FILE_CHOOSER_ERROR_INCOMPLETE_HOSTNAME: TGtkFileChooserError = 3;

type
  TGtkFilterMatch = DWord;
const
  { GtkFilterMatch }
  GTK_FILTER_MATCH_SOME: TGtkFilterMatch = 0;
  GTK_FILTER_MATCH_NONE: TGtkFilterMatch = 1;
  GTK_FILTER_MATCH_ALL: TGtkFilterMatch = 2;

type
  TGtkFilterChange = DWord;
const
  { GtkFilterChange }
  GTK_FILTER_CHANGE_DIFFERENT: TGtkFilterChange = 0;
  GTK_FILTER_CHANGE_LESS_STRICT: TGtkFilterChange = 1;
  GTK_FILTER_CHANGE_MORE_STRICT: TGtkFilterChange = 2;

type
  TGtkSelectionMode = DWord;
const
  { GtkSelectionMode }
  GTK_SELECTION_NONE: TGtkSelectionMode = 0;
  GTK_SELECTION_SINGLE: TGtkSelectionMode = 1;
  GTK_SELECTION_BROWSE: TGtkSelectionMode = 2;
  GTK_SELECTION_MULTIPLE: TGtkSelectionMode = 3;

type
  TGtkMovementStep = DWord;
const
  { GtkMovementStep }
  GTK_MOVEMENT_LOGICAL_POSITIONS: TGtkMovementStep = 0;
  GTK_MOVEMENT_VISUAL_POSITIONS: TGtkMovementStep = 1;
  GTK_MOVEMENT_WORDS: TGtkMovementStep = 2;
  GTK_MOVEMENT_DISPLAY_LINES: TGtkMovementStep = 3;
  GTK_MOVEMENT_DISPLAY_LINE_ENDS: TGtkMovementStep = 4;
  GTK_MOVEMENT_PARAGRAPHS: TGtkMovementStep = 5;
  GTK_MOVEMENT_PARAGRAPH_ENDS: TGtkMovementStep = 6;
  GTK_MOVEMENT_PAGES: TGtkMovementStep = 7;
  GTK_MOVEMENT_BUFFER_ENDS: TGtkMovementStep = 8;
  GTK_MOVEMENT_HORIZONTAL_PAGES: TGtkMovementStep = 9;

type
  TGtkFontChooserLevel = DWord;
const
  { GtkFontChooserLevel }
  GTK_FONT_CHOOSER_LEVEL_FAMILY: TGtkFontChooserLevel = 0;
  GTK_FONT_CHOOSER_LEVEL_STYLE: TGtkFontChooserLevel = 1;
  GTK_FONT_CHOOSER_LEVEL_SIZE: TGtkFontChooserLevel = 2;
  GTK_FONT_CHOOSER_LEVEL_VARIATIONS: TGtkFontChooserLevel = 4;
  GTK_FONT_CHOOSER_LEVEL_FEATURES: TGtkFontChooserLevel = 8;

type
  TGtkPanDirection = DWord;
const
  { GtkPanDirection }
  GTK_PAN_DIRECTION_LEFT: TGtkPanDirection = 0;
  GTK_PAN_DIRECTION_RIGHT: TGtkPanDirection = 1;
  GTK_PAN_DIRECTION_UP: TGtkPanDirection = 2;
  GTK_PAN_DIRECTION_DOWN: TGtkPanDirection = 3;

type
  TGtkPositionType = DWord;
const
  { GtkPositionType }
  GTK_POS_LEFT: TGtkPositionType = 0;
  GTK_POS_RIGHT: TGtkPositionType = 1;
  GTK_POS_TOP: TGtkPositionType = 2;
  GTK_POS_BOTTOM: TGtkPositionType = 3;

type
  TGtkIconLookupFlags = DWord;
const
  { GtkIconLookupFlags }
  GTK_ICON_LOOKUP_FORCE_REGULAR: TGtkIconLookupFlags = 1;
  GTK_ICON_LOOKUP_FORCE_SYMBOLIC: TGtkIconLookupFlags = 2;
  GTK_ICON_LOOKUP_PRELOAD: TGtkIconLookupFlags = 4;

type
  TGtkIconThemeError = DWord;
const
  { GtkIconThemeError }
  GTK_ICON_THEME_NOT_FOUND: TGtkIconThemeError = 0;
  GTK_ICON_THEME_FAILED: TGtkIconThemeError = 1;

type
  TGtkIconViewDropPosition = DWord;
const
  { GtkIconViewDropPosition }
  GTK_ICON_VIEW_NO_DROP: TGtkIconViewDropPosition = 0;
  GTK_ICON_VIEW_DROP_INTO: TGtkIconViewDropPosition = 1;
  GTK_ICON_VIEW_DROP_LEFT: TGtkIconViewDropPosition = 2;
  GTK_ICON_VIEW_DROP_RIGHT: TGtkIconViewDropPosition = 3;
  GTK_ICON_VIEW_DROP_ABOVE: TGtkIconViewDropPosition = 4;
  GTK_ICON_VIEW_DROP_BELOW: TGtkIconViewDropPosition = 5;

type
  TGtkMessageType = DWord;
const
  { GtkMessageType }
  GTK_MESSAGE_INFO: TGtkMessageType = 0;
  GTK_MESSAGE_WARNING: TGtkMessageType = 1;
  GTK_MESSAGE_QUESTION: TGtkMessageType = 2;
  GTK_MESSAGE_ERROR: TGtkMessageType = 3;
  GTK_MESSAGE_OTHER: TGtkMessageType = 4;

type
  TGtkJustification = DWord;
const
  { GtkJustification }
  GTK_JUSTIFY_LEFT: TGtkJustification = 0;
  GTK_JUSTIFY_RIGHT: TGtkJustification = 1;
  GTK_JUSTIFY_CENTER: TGtkJustification = 2;
  GTK_JUSTIFY_FILL: TGtkJustification = 3;

type
  TGtkNaturalWrapMode = DWord;
const
  { GtkNaturalWrapMode }
  GTK_NATURAL_WRAP_INHERIT: TGtkNaturalWrapMode = 0;
  GTK_NATURAL_WRAP_NONE: TGtkNaturalWrapMode = 1;
  GTK_NATURAL_WRAP_WORD: TGtkNaturalWrapMode = 2;

type
  TGtkLevelBarMode = DWord;
const
  { GtkLevelBarMode }
  GTK_LEVEL_BAR_MODE_CONTINUOUS: TGtkLevelBarMode = 0;
  GTK_LEVEL_BAR_MODE_DISCRETE: TGtkLevelBarMode = 1;

type
  TGtkPackType = DWord;
const
  { GtkPackType }
  GTK_PACK_START: TGtkPackType = 0;
  GTK_PACK_END: TGtkPackType = 1;

type
  TGtkNotebookTab = DWord;
const
  { GtkNotebookTab }
  GTK_NOTEBOOK_TAB_FIRST: TGtkNotebookTab = 0;
  GTK_NOTEBOOK_TAB_LAST: TGtkNotebookTab = 1;

type
  TGtkNumberUpLayout = DWord;
const
  { GtkNumberUpLayout }
  GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_TOP_TO_BOTTOM: TGtkNumberUpLayout = 0;
  GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_BOTTOM_TO_TOP: TGtkNumberUpLayout = 1;
  GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_TOP_TO_BOTTOM: TGtkNumberUpLayout = 2;
  GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_BOTTOM_TO_TOP: TGtkNumberUpLayout = 3;
  GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_LEFT_TO_RIGHT: TGtkNumberUpLayout = 4;
  GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_RIGHT_TO_LEFT: TGtkNumberUpLayout = 5;
  GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_LEFT_TO_RIGHT: TGtkNumberUpLayout = 6;
  GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_RIGHT_TO_LEFT: TGtkNumberUpLayout = 7;

type
  TGtkOrdering = Integer;
const
  { GtkOrdering }
  GTK_ORDERING_SMALLER: TGtkOrdering = -1;
  GTK_ORDERING_EQUAL: TGtkOrdering = 0;
  GTK_ORDERING_LARGER: TGtkOrdering = 1;

type
  TGtkPadActionType = DWord;
const
  { GtkPadActionType }
  GTK_PAD_ACTION_BUTTON: TGtkPadActionType = 0;
  GTK_PAD_ACTION_RING: TGtkPadActionType = 1;
  GTK_PAD_ACTION_STRIP: TGtkPadActionType = 2;

type
  TGtkPageOrientation = DWord;
const
  { GtkPageOrientation }
  GTK_PAGE_ORIENTATION_PORTRAIT: TGtkPageOrientation = 0;
  GTK_PAGE_ORIENTATION_LANDSCAPE: TGtkPageOrientation = 1;
  GTK_PAGE_ORIENTATION_REVERSE_PORTRAIT: TGtkPageOrientation = 2;
  GTK_PAGE_ORIENTATION_REVERSE_LANDSCAPE: TGtkPageOrientation = 3;

type
  TGtkPageSet = DWord;
const
  { GtkPageSet }
  GTK_PAGE_SET_ALL: TGtkPageSet = 0;
  GTK_PAGE_SET_EVEN: TGtkPageSet = 1;
  GTK_PAGE_SET_ODD: TGtkPageSet = 2;

type
  TGtkUnit = DWord;
const
  { GtkUnit }
  GTK_UNIT_NONE: TGtkUnit = 0;
  GTK_UNIT_POINTS: TGtkUnit = 1;
  GTK_UNIT_INCH: TGtkUnit = 2;
  GTK_UNIT_MM: TGtkUnit = 3;

type
  TGtkPrintDuplex = DWord;
const
  { GtkPrintDuplex }
  GTK_PRINT_DUPLEX_SIMPLEX: TGtkPrintDuplex = 0;
  GTK_PRINT_DUPLEX_HORIZONTAL: TGtkPrintDuplex = 1;
  GTK_PRINT_DUPLEX_VERTICAL: TGtkPrintDuplex = 2;

type
  TGtkPrintPages = DWord;
const
  { GtkPrintPages }
  GTK_PRINT_PAGES_ALL: TGtkPrintPages = 0;
  GTK_PRINT_PAGES_CURRENT: TGtkPrintPages = 1;
  GTK_PRINT_PAGES_RANGES: TGtkPrintPages = 2;
  GTK_PRINT_PAGES_SELECTION: TGtkPrintPages = 3;

type
  TGtkPrintQuality = DWord;
const
  { GtkPrintQuality }
  GTK_PRINT_QUALITY_LOW: TGtkPrintQuality = 0;
  GTK_PRINT_QUALITY_NORMAL: TGtkPrintQuality = 1;
  GTK_PRINT_QUALITY_HIGH: TGtkPrintQuality = 2;
  GTK_PRINT_QUALITY_DRAFT: TGtkPrintQuality = 3;

type
  TGtkPolicyType = DWord;
const
  { GtkPolicyType }
  GTK_POLICY_ALWAYS: TGtkPolicyType = 0;
  GTK_POLICY_AUTOMATIC: TGtkPolicyType = 1;
  GTK_POLICY_NEVER: TGtkPolicyType = 2;
  GTK_POLICY_EXTERNAL: TGtkPolicyType = 3;

type
  TGtkPopoverMenuFlags = DWord;
const
  { GtkPopoverMenuFlags }
  GTK_POPOVER_MENU_NESTED: TGtkPopoverMenuFlags = 1;

type
  TGtkPrintCapabilities = DWord;
const
  { GtkPrintCapabilities }
  GTK_PRINT_CAPABILITY_PAGE_SET: TGtkPrintCapabilities = 1;
  GTK_PRINT_CAPABILITY_COPIES: TGtkPrintCapabilities = 2;
  GTK_PRINT_CAPABILITY_COLLATE: TGtkPrintCapabilities = 4;
  GTK_PRINT_CAPABILITY_REVERSE: TGtkPrintCapabilities = 8;
  GTK_PRINT_CAPABILITY_SCALE: TGtkPrintCapabilities = 16;
  GTK_PRINT_CAPABILITY_GENERATE_PDF: TGtkPrintCapabilities = 32;
  GTK_PRINT_CAPABILITY_GENERATE_PS: TGtkPrintCapabilities = 64;
  GTK_PRINT_CAPABILITY_PREVIEW: TGtkPrintCapabilities = 128;
  GTK_PRINT_CAPABILITY_NUMBER_UP: TGtkPrintCapabilities = 256;
  GTK_PRINT_CAPABILITY_NUMBER_UP_LAYOUT: TGtkPrintCapabilities = 512;

type
  TGtkPrintError = DWord;
const
  { GtkPrintError }
  GTK_PRINT_ERROR_GENERAL: TGtkPrintError = 0;
  GTK_PRINT_ERROR_INTERNAL_ERROR: TGtkPrintError = 1;
  GTK_PRINT_ERROR_NOMEM: TGtkPrintError = 2;
  GTK_PRINT_ERROR_INVALID_FILE: TGtkPrintError = 3;

type
  TGtkPrintStatus = DWord;
const
  { GtkPrintStatus }
  GTK_PRINT_STATUS_INITIAL: TGtkPrintStatus = 0;
  GTK_PRINT_STATUS_PREPARING: TGtkPrintStatus = 1;
  GTK_PRINT_STATUS_GENERATING_DATA: TGtkPrintStatus = 2;
  GTK_PRINT_STATUS_SENDING_DATA: TGtkPrintStatus = 3;
  GTK_PRINT_STATUS_PENDING: TGtkPrintStatus = 4;
  GTK_PRINT_STATUS_PENDING_ISSUE: TGtkPrintStatus = 5;
  GTK_PRINT_STATUS_PRINTING: TGtkPrintStatus = 6;
  GTK_PRINT_STATUS_FINISHED: TGtkPrintStatus = 7;
  GTK_PRINT_STATUS_FINISHED_ABORTED: TGtkPrintStatus = 8;

type
  TGtkPrintOperationAction = DWord;
const
  { GtkPrintOperationAction }
  GTK_PRINT_OPERATION_ACTION_PRINT_DIALOG: TGtkPrintOperationAction = 0;
  GTK_PRINT_OPERATION_ACTION_PRINT: TGtkPrintOperationAction = 1;
  GTK_PRINT_OPERATION_ACTION_PREVIEW: TGtkPrintOperationAction = 2;
  GTK_PRINT_OPERATION_ACTION_EXPORT: TGtkPrintOperationAction = 3;

type
  TGtkPrintOperationResult = DWord;
const
  { GtkPrintOperationResult }
  GTK_PRINT_OPERATION_RESULT_ERROR: TGtkPrintOperationResult = 0;
  GTK_PRINT_OPERATION_RESULT_APPLY: TGtkPrintOperationResult = 1;
  GTK_PRINT_OPERATION_RESULT_CANCEL: TGtkPrintOperationResult = 2;
  GTK_PRINT_OPERATION_RESULT_IN_PROGRESS: TGtkPrintOperationResult = 3;

type
  TGtkRecentManagerError = DWord;
const
  { GtkRecentManagerError }
  GTK_RECENT_MANAGER_ERROR_NOT_FOUND: TGtkRecentManagerError = 0;
  GTK_RECENT_MANAGER_ERROR_INVALID_URI: TGtkRecentManagerError = 1;
  GTK_RECENT_MANAGER_ERROR_INVALID_ENCODING: TGtkRecentManagerError = 2;
  GTK_RECENT_MANAGER_ERROR_NOT_REGISTERED: TGtkRecentManagerError = 3;
  GTK_RECENT_MANAGER_ERROR_READ: TGtkRecentManagerError = 4;
  GTK_RECENT_MANAGER_ERROR_WRITE: TGtkRecentManagerError = 5;
  GTK_RECENT_MANAGER_ERROR_UNKNOWN: TGtkRecentManagerError = 6;

type
  TGtkResponseType = Integer;
const
  { GtkResponseType }
  GTK_RESPONSE_NONE: TGtkResponseType = -1;
  GTK_RESPONSE_REJECT: TGtkResponseType = -2;
  GTK_RESPONSE_ACCEPT: TGtkResponseType = -3;
  GTK_RESPONSE_DELETE_EVENT: TGtkResponseType = -4;
  GTK_RESPONSE_OK: TGtkResponseType = -5;
  GTK_RESPONSE_CANCEL: TGtkResponseType = -6;
  GTK_RESPONSE_CLOSE: TGtkResponseType = -7;
  GTK_RESPONSE_YES: TGtkResponseType = -8;
  GTK_RESPONSE_NO: TGtkResponseType = -9;
  GTK_RESPONSE_APPLY: TGtkResponseType = -10;
  GTK_RESPONSE_HELP: TGtkResponseType = -11;

type
  TGtkRevealerTransitionType = DWord;
const
  { GtkRevealerTransitionType }
  GTK_REVEALER_TRANSITION_TYPE_NONE: TGtkRevealerTransitionType = 0;
  GTK_REVEALER_TRANSITION_TYPE_CROSSFADE: TGtkRevealerTransitionType = 1;
  GTK_REVEALER_TRANSITION_TYPE_SLIDE_RIGHT: TGtkRevealerTransitionType = 2;
  GTK_REVEALER_TRANSITION_TYPE_SLIDE_LEFT: TGtkRevealerTransitionType = 3;
  GTK_REVEALER_TRANSITION_TYPE_SLIDE_UP: TGtkRevealerTransitionType = 4;
  GTK_REVEALER_TRANSITION_TYPE_SLIDE_DOWN: TGtkRevealerTransitionType = 5;
  GTK_REVEALER_TRANSITION_TYPE_SWING_RIGHT: TGtkRevealerTransitionType = 6;
  GTK_REVEALER_TRANSITION_TYPE_SWING_LEFT: TGtkRevealerTransitionType = 7;
  GTK_REVEALER_TRANSITION_TYPE_SWING_UP: TGtkRevealerTransitionType = 8;
  GTK_REVEALER_TRANSITION_TYPE_SWING_DOWN: TGtkRevealerTransitionType = 9;

type
  TGtkScrollStep = DWord;
const
  { GtkScrollStep }
  GTK_SCROLL_STEPS: TGtkScrollStep = 0;
  GTK_SCROLL_PAGES: TGtkScrollStep = 1;
  GTK_SCROLL_ENDS: TGtkScrollStep = 2;
  GTK_SCROLL_HORIZONTAL_STEPS: TGtkScrollStep = 3;
  GTK_SCROLL_HORIZONTAL_PAGES: TGtkScrollStep = 4;
  GTK_SCROLL_HORIZONTAL_ENDS: TGtkScrollStep = 5;

type
  TGtkShortcutActionFlags = DWord;
const
  { GtkShortcutActionFlags }
  GTK_SHORTCUT_ACTION_EXCLUSIVE: TGtkShortcutActionFlags = 1;

type
  TGtkShortcutScope = DWord;
const
  { GtkShortcutScope }
  GTK_SHORTCUT_SCOPE_LOCAL: TGtkShortcutScope = 0;
  GTK_SHORTCUT_SCOPE_MANAGED: TGtkShortcutScope = 1;
  GTK_SHORTCUT_SCOPE_GLOBAL: TGtkShortcutScope = 2;

type
  TGtkShortcutType = DWord;
const
  { GtkShortcutType }
  GTK_SHORTCUT_ACCELERATOR: TGtkShortcutType = 0;
  GTK_SHORTCUT_GESTURE_PINCH: TGtkShortcutType = 1;
  GTK_SHORTCUT_GESTURE_STRETCH: TGtkShortcutType = 2;
  GTK_SHORTCUT_GESTURE_ROTATE_CLOCKWISE: TGtkShortcutType = 3;
  GTK_SHORTCUT_GESTURE_ROTATE_COUNTERCLOCKWISE: TGtkShortcutType = 4;
  GTK_SHORTCUT_GESTURE_TWO_FINGER_SWIPE_LEFT: TGtkShortcutType = 5;
  GTK_SHORTCUT_GESTURE_TWO_FINGER_SWIPE_RIGHT: TGtkShortcutType = 6;
  GTK_SHORTCUT_GESTURE: TGtkShortcutType = 7;
  GTK_SHORTCUT_GESTURE_SWIPE_LEFT: TGtkShortcutType = 8;
  GTK_SHORTCUT_GESTURE_SWIPE_RIGHT: TGtkShortcutType = 9;

type
  TGtkSizeGroupMode = DWord;
const
  { GtkSizeGroupMode }
  GTK_SIZE_GROUP_NONE: TGtkSizeGroupMode = 0;
  GTK_SIZE_GROUP_HORIZONTAL: TGtkSizeGroupMode = 1;
  GTK_SIZE_GROUP_VERTICAL: TGtkSizeGroupMode = 2;
  GTK_SIZE_GROUP_BOTH: TGtkSizeGroupMode = 3;

type
  TGtkStyleContextPrintFlags = DWord;
const
  { GtkStyleContextPrintFlags }
  GTK_STYLE_CONTEXT_PRINT_NONE: TGtkStyleContextPrintFlags = 0;
  GTK_STYLE_CONTEXT_PRINT_RECURSE: TGtkStyleContextPrintFlags = 1;
  GTK_STYLE_CONTEXT_PRINT_SHOW_STYLE: TGtkStyleContextPrintFlags = 2;
  GTK_STYLE_CONTEXT_PRINT_SHOW_CHANGE: TGtkStyleContextPrintFlags = 4;

type
  TGtkSorterOrder = DWord;
const
  { GtkSorterOrder }
  GTK_SORTER_ORDER_PARTIAL: TGtkSorterOrder = 0;
  GTK_SORTER_ORDER_NONE: TGtkSorterOrder = 1;
  GTK_SORTER_ORDER_TOTAL: TGtkSorterOrder = 2;

type
  TGtkSpinButtonUpdatePolicy = DWord;
const
  { GtkSpinButtonUpdatePolicy }
  GTK_UPDATE_ALWAYS: TGtkSpinButtonUpdatePolicy = 0;
  GTK_UPDATE_IF_VALID: TGtkSpinButtonUpdatePolicy = 1;

type
  TGtkSpinType = DWord;
const
  { GtkSpinType }
  GTK_SPIN_STEP_FORWARD: TGtkSpinType = 0;
  GTK_SPIN_STEP_BACKWARD: TGtkSpinType = 1;
  GTK_SPIN_PAGE_FORWARD: TGtkSpinType = 2;
  GTK_SPIN_PAGE_BACKWARD: TGtkSpinType = 3;
  GTK_SPIN_HOME: TGtkSpinType = 4;
  GTK_SPIN_END: TGtkSpinType = 5;
  GTK_SPIN_USER_DEFINED: TGtkSpinType = 6;

type
  TGtkStackTransitionType = DWord;
const
  { GtkStackTransitionType }
  GTK_STACK_TRANSITION_TYPE_NONE: TGtkStackTransitionType = 0;
  GTK_STACK_TRANSITION_TYPE_CROSSFADE: TGtkStackTransitionType = 1;
  GTK_STACK_TRANSITION_TYPE_SLIDE_RIGHT: TGtkStackTransitionType = 2;
  GTK_STACK_TRANSITION_TYPE_SLIDE_LEFT: TGtkStackTransitionType = 3;
  GTK_STACK_TRANSITION_TYPE_SLIDE_UP: TGtkStackTransitionType = 4;
  GTK_STACK_TRANSITION_TYPE_SLIDE_DOWN: TGtkStackTransitionType = 5;
  GTK_STACK_TRANSITION_TYPE_SLIDE_LEFT_RIGHT: TGtkStackTransitionType = 6;
  GTK_STACK_TRANSITION_TYPE_SLIDE_UP_DOWN: TGtkStackTransitionType = 7;
  GTK_STACK_TRANSITION_TYPE_OVER_UP: TGtkStackTransitionType = 8;
  GTK_STACK_TRANSITION_TYPE_OVER_DOWN: TGtkStackTransitionType = 9;
  GTK_STACK_TRANSITION_TYPE_OVER_LEFT: TGtkStackTransitionType = 10;
  GTK_STACK_TRANSITION_TYPE_OVER_RIGHT: TGtkStackTransitionType = 11;
  GTK_STACK_TRANSITION_TYPE_UNDER_UP: TGtkStackTransitionType = 12;
  GTK_STACK_TRANSITION_TYPE_UNDER_DOWN: TGtkStackTransitionType = 13;
  GTK_STACK_TRANSITION_TYPE_UNDER_LEFT: TGtkStackTransitionType = 14;
  GTK_STACK_TRANSITION_TYPE_UNDER_RIGHT: TGtkStackTransitionType = 15;
  GTK_STACK_TRANSITION_TYPE_OVER_UP_DOWN: TGtkStackTransitionType = 16;
  GTK_STACK_TRANSITION_TYPE_OVER_DOWN_UP: TGtkStackTransitionType = 17;
  GTK_STACK_TRANSITION_TYPE_OVER_LEFT_RIGHT: TGtkStackTransitionType = 18;
  GTK_STACK_TRANSITION_TYPE_OVER_RIGHT_LEFT: TGtkStackTransitionType = 19;
  GTK_STACK_TRANSITION_TYPE_ROTATE_LEFT: TGtkStackTransitionType = 20;
  GTK_STACK_TRANSITION_TYPE_ROTATE_RIGHT: TGtkStackTransitionType = 21;
  GTK_STACK_TRANSITION_TYPE_ROTATE_LEFT_RIGHT: TGtkStackTransitionType = 22;

type
  TGtkStringFilterMatchMode = DWord;
const
  { GtkStringFilterMatchMode }
  GTK_STRING_FILTER_MATCH_MODE_EXACT: TGtkStringFilterMatchMode = 0;
  GTK_STRING_FILTER_MATCH_MODE_SUBSTRING: TGtkStringFilterMatchMode = 1;
  GTK_STRING_FILTER_MATCH_MODE_PREFIX: TGtkStringFilterMatchMode = 2;

type
  TGtkSymbolicColor = DWord;
const
  { GtkSymbolicColor }
  GTK_SYMBOLIC_COLOR_FOREGROUND: TGtkSymbolicColor = 0;
  GTK_SYMBOLIC_COLOR_ERROR: TGtkSymbolicColor = 1;
  GTK_SYMBOLIC_COLOR_WARNING: TGtkSymbolicColor = 2;
  GTK_SYMBOLIC_COLOR_SUCCESS: TGtkSymbolicColor = 3;

type
  TGtkTextSearchFlags = DWord;
const
  { GtkTextSearchFlags }
  GTK_TEXT_SEARCH_VISIBLE_ONLY: TGtkTextSearchFlags = 1;
  GTK_TEXT_SEARCH_TEXT_ONLY: TGtkTextSearchFlags = 2;
  GTK_TEXT_SEARCH_CASE_INSENSITIVE: TGtkTextSearchFlags = 4;

type
  TGtkTextExtendSelection = DWord;
const
  { GtkTextExtendSelection }
  GTK_TEXT_EXTEND_SELECTION_WORD: TGtkTextExtendSelection = 0;
  GTK_TEXT_EXTEND_SELECTION_LINE: TGtkTextExtendSelection = 1;

type
  TGtkWrapMode = DWord;
const
  { GtkWrapMode }
  GTK_WRAP_NONE: TGtkWrapMode = 0;
  GTK_WRAP_CHAR: TGtkWrapMode = 1;
  GTK_WRAP_WORD: TGtkWrapMode = 2;
  GTK_WRAP_WORD_CHAR: TGtkWrapMode = 3;

type
  TGtkTextWindowType = DWord;
const
  { GtkTextWindowType }
  GTK_TEXT_WINDOW_WIDGET: TGtkTextWindowType = 1;
  GTK_TEXT_WINDOW_TEXT: TGtkTextWindowType = 2;
  GTK_TEXT_WINDOW_LEFT: TGtkTextWindowType = 3;
  GTK_TEXT_WINDOW_RIGHT: TGtkTextWindowType = 4;
  GTK_TEXT_WINDOW_TOP: TGtkTextWindowType = 5;
  GTK_TEXT_WINDOW_BOTTOM: TGtkTextWindowType = 6;

type
  TGtkTextViewLayer = DWord;
const
  { GtkTextViewLayer }
  GTK_TEXT_VIEW_LAYER_BELOW_TEXT: TGtkTextViewLayer = 0;
  GTK_TEXT_VIEW_LAYER_ABOVE_TEXT: TGtkTextViewLayer = 1;

type
  TGtkTreeViewColumnSizing = DWord;
const
  { GtkTreeViewColumnSizing }
  GTK_TREE_VIEW_COLUMN_GROW_ONLY: TGtkTreeViewColumnSizing = 0;
  GTK_TREE_VIEW_COLUMN_AUTOSIZE: TGtkTreeViewColumnSizing = 1;
  GTK_TREE_VIEW_COLUMN_FIXED: TGtkTreeViewColumnSizing = 2;

type
  TGtkTreeViewDropPosition = DWord;
const
  { GtkTreeViewDropPosition }
  GTK_TREE_VIEW_DROP_BEFORE: TGtkTreeViewDropPosition = 0;
  GTK_TREE_VIEW_DROP_AFTER: TGtkTreeViewDropPosition = 1;
  GTK_TREE_VIEW_DROP_INTO_OR_BEFORE: TGtkTreeViewDropPosition = 2;
  GTK_TREE_VIEW_DROP_INTO_OR_AFTER: TGtkTreeViewDropPosition = 3;

type
  TGtkTreeViewGridLines = DWord;
const
  { GtkTreeViewGridLines }
  GTK_TREE_VIEW_GRID_LINES_NONE: TGtkTreeViewGridLines = 0;
  GTK_TREE_VIEW_GRID_LINES_HORIZONTAL: TGtkTreeViewGridLines = 1;
  GTK_TREE_VIEW_GRID_LINES_VERTICAL: TGtkTreeViewGridLines = 2;
  GTK_TREE_VIEW_GRID_LINES_BOTH: TGtkTreeViewGridLines = 3;
type

  PPGtkAllocation = ^PGtkAllocation;
  PGtkAllocation = ^TGtkAllocation;
  TGtkAllocation = TGdkRectangle;

  PPGtkATContext = ^PGtkATContext;
  PGtkATContext = ^TGtkATContext;

  PPGtkAccessibleRole = ^PGtkAccessibleRole;
  PGtkAccessibleRole = ^TGtkAccessibleRole;

  PPGtkAccessible = ^PGtkAccessible;
  PGtkAccessible = ^TGtkAccessible;
  TGtkATContext = object(TGObject)
    function create(accessible_role: TGtkAccessibleRole; accessible: PGtkAccessible; display: PGdkDisplay): PGtkATContext; cdecl; inline; static;
    function get_accessible: PGtkAccessible; cdecl; inline;
    function get_accessible_role: TGtkAccessibleRole; cdecl; inline;
    property accessible: PGtkAccessible read get_accessible  { property is writeable but setter not declared } ;
    property accessible_role: TGtkAccessibleRole read get_accessible_role  { property is writeable but setter not declared } ;
    //property display: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_display  { property is writeable but setter not declared } ;
  end;

  PPGtkAccessibleProperty = ^PGtkAccessibleProperty;
  PGtkAccessibleProperty = ^TGtkAccessibleProperty;

  PPGtkAccessibleRelation = ^PGtkAccessibleRelation;
  PGtkAccessibleRelation = ^TGtkAccessibleRelation;

  PPGtkAccessibleState = ^PGtkAccessibleState;
  PGtkAccessibleState = ^TGtkAccessibleState;
  TGtkAccessible = object
    function get_accessible_role: TGtkAccessibleRole; cdecl; inline;
    procedure reset_property(property_: TGtkAccessibleProperty); cdecl; inline;
    procedure reset_relation(relation: TGtkAccessibleRelation); cdecl; inline;
    procedure reset_state(state: TGtkAccessibleState); cdecl; inline;
    //procedure update_property(first_property: TGtkAccessibleProperty; args: array of const); cdecl; inline;
    procedure update_property_value(n_properties: gint; properties: PGtkAccessibleProperty; values: PGValue); cdecl; inline;
    //procedure update_relation(first_relation: TGtkAccessibleRelation; args: array of const); cdecl; inline;
    procedure update_relation_value(n_relations: gint; relations: PGtkAccessibleRelation; values: PGValue); cdecl; inline;
    //procedure update_state(first_state: TGtkAccessibleState; args: array of const); cdecl; inline;
    procedure update_state_value(n_states: gint; states: PGtkAccessibleState; values: PGValue); cdecl; inline;
    property accessible_role: TGtkAccessibleRole read get_accessible_role  { property is writeable but setter not declared } ;
  end;

  PPGtkATContextClass = ^PGtkATContextClass;
  PGtkATContextClass = ^TGtkATContextClass;
  TGtkATContextClass = object
  end;

  PPGtkBuildable = ^PGtkBuildable;
  PGtkBuildable = ^TGtkBuildable;
  TGtkBuildable = object
    function get_buildable_id: Pgchar; cdecl; inline;
  end;

  PPGtkConstraintTarget = ^PGtkConstraintTarget;
  PGtkConstraintTarget = ^TGtkConstraintTarget;
  TGtkConstraintTarget = object
  end;

  PPGtkNative = ^PGtkNative;
  PGtkNative = ^TGtkNative;
  TGtkNative = object
    function get_for_surface(surface: PGdkSurface): PGtkNative; cdecl; inline; static;
    function get_renderer: PGskRenderer; cdecl; inline;
    function get_surface: PGdkSurface; cdecl; inline;
    procedure get_surface_transform(x: Pgdouble; y: Pgdouble); cdecl; inline;
    procedure realize; cdecl; inline;
    procedure unrealize; cdecl; inline;
  end;

  PPGtkRoot = ^PGtkRoot;
  PGtkRoot = ^TGtkRoot;

  PPGtkWidget = ^PGtkWidget;
  PGtkWidget = ^TGtkWidget;
  TGtkRoot = object
    function get_display: PGdkDisplay; cdecl; inline;
    function get_focus: PGtkWidget; cdecl; inline;
    procedure set_focus(focus: PGtkWidget); cdecl; inline;
  end;

  PPGtkShortcutManager = ^PGtkShortcutManager;
  PGtkShortcutManager = ^TGtkShortcutManager;
  TGtkShortcutManager = object
  end;

  PPGtkTextDirection = ^PGtkTextDirection;
  PGtkTextDirection = ^TGtkTextDirection;

  PPGtkEventController = ^PGtkEventController;
  PGtkEventController = ^TGtkEventController;

  PPGtkTickCallback = ^PGtkTickCallback;
  PGtkTickCallback = ^TGtkTickCallback;
  TGtkTickCallback = function(widget: PGtkWidget; frame_clock: PGdkFrameClock; user_data: gpointer): gboolean; cdecl;

  PPGtkDirectionType = ^PGtkDirectionType;
  PGtkDirectionType = ^TGtkDirectionType;

  PPGtkOrientation = ^PGtkOrientation;
  PGtkOrientation = ^TGtkOrientation;

  PPGtkAlign = ^PGtkAlign;
  PGtkAlign = ^TGtkAlign;

  PPGtkLayoutManager = ^PGtkLayoutManager;
  PGtkLayoutManager = ^TGtkLayoutManager;

  PPGtkOverflow = ^PGtkOverflow;
  PGtkOverflow = ^TGtkOverflow;

  PPGtkRequisition = ^PGtkRequisition;
  PGtkRequisition = ^TGtkRequisition;

  PPGtkSizeRequestMode = ^PGtkSizeRequestMode;
  PGtkSizeRequestMode = ^TGtkSizeRequestMode;

  PPGtkSettings = ^PGtkSettings;
  PGtkSettings = ^TGtkSettings;

  PPGtkStateFlags = ^PGtkStateFlags;
  PGtkStateFlags = ^TGtkStateFlags;

  PPGtkStyleContext = ^PGtkStyleContext;
  PGtkStyleContext = ^TGtkStyleContext;

  PPGtkPickFlags = ^PGtkPickFlags;
  PGtkPickFlags = ^TGtkPickFlags;

  PPGtkSnapshot = ^PGtkSnapshot;
  PGtkSnapshot = ^TGtkSnapshot;

  PPGtkWidgetPrivate = ^PGtkWidgetPrivate;
  PGtkWidgetPrivate = ^TGtkWidgetPrivate;
  TGtkWidget = object(TGInitiallyUnowned)
    priv: PGtkWidgetPrivate;
    function get_default_direction: TGtkTextDirection; cdecl; inline; static;
    procedure set_default_direction(dir: TGtkTextDirection); cdecl; inline; static;
    procedure action_set_enabled(action_name: Pgchar; enabled: gboolean); cdecl; inline;
    function activate: gboolean; cdecl; inline;
    //function activate_action(name: Pgchar; format_string: Pgchar; args: array of const): gboolean; cdecl; inline;
    function activate_action_variant(name: Pgchar; args: PGVariant): gboolean; cdecl; inline;
    procedure activate_default; cdecl; inline;
    procedure add_controller(controller: PGtkEventController); cdecl; inline;
    procedure add_css_class(css_class: Pgchar); cdecl; inline;
    procedure add_mnemonic_label(label_: PGtkWidget); cdecl; inline;
    function add_tick_callback(callback: TGtkTickCallback; user_data: gpointer; notify: TGDestroyNotify): guint; cdecl; inline;
    procedure allocate(width: gint; height: gint; baseline: gint; transform: PGskTransform); cdecl; inline;
    function child_focus(direction: TGtkDirectionType): gboolean; cdecl; inline;
    function compute_bounds(target: PGtkWidget; out_bounds: Pgraphene_rect_t): gboolean; cdecl; inline;
    function compute_expand(orientation: TGtkOrientation): gboolean; cdecl; inline;
    function compute_point(target: PGtkWidget; point: Pgraphene_point_t; out_point: Pgraphene_point_t): gboolean; cdecl; inline;
    function compute_transform(target: PGtkWidget; out_transform: Pgraphene_matrix_t): gboolean; cdecl; inline;
    function contains(x: gdouble; y: gdouble): gboolean; cdecl; inline;
    function create_pango_context: PPangoContext; cdecl; inline;
    function create_pango_layout(text: Pgchar): PPangoLayout; cdecl; inline;
    function drag_check_threshold(start_x: gint; start_y: gint; current_x: gint; current_y: gint): gboolean; cdecl; inline;
    procedure error_bell; cdecl; inline;
    function get_allocated_baseline: gint; cdecl; inline;
    function get_allocated_height: gint; cdecl; inline;
    function get_allocated_width: gint; cdecl; inline;
    procedure get_allocation(allocation: PGtkAllocation); cdecl; inline;
    function get_ancestor(widget_type: TGType): PGtkWidget; cdecl; inline;
    function get_can_focus: gboolean; cdecl; inline;
    function get_can_target: gboolean; cdecl; inline;
    function get_child_visible: gboolean; cdecl; inline;
    function get_clipboard: PGdkClipboard; cdecl; inline;
    function get_css_classes: PPgchar; cdecl; inline;
    function get_css_name: Pgchar; cdecl; inline;
    function get_cursor: PGdkCursor; cdecl; inline;
    function get_direction: TGtkTextDirection; cdecl; inline;
    function get_display: PGdkDisplay; cdecl; inline;
    function get_first_child: PGtkWidget; cdecl; inline;
    function get_focus_child: PGtkWidget; cdecl; inline;
    function get_focus_on_click: gboolean; cdecl; inline;
    function get_focusable: gboolean; cdecl; inline;
    function get_font_map: PPangoFontMap; cdecl; inline;
    function get_font_options: Pcairo_font_options_t; cdecl; inline;
    function get_frame_clock: PGdkFrameClock; cdecl; inline;
    function get_halign: TGtkAlign; cdecl; inline;
    function get_has_tooltip: gboolean; cdecl; inline;
    function get_height: gint; cdecl; inline;
    function get_hexpand: gboolean; cdecl; inline;
    function get_hexpand_set: gboolean; cdecl; inline;
    function get_last_child: PGtkWidget; cdecl; inline;
    function get_layout_manager: PGtkLayoutManager; cdecl; inline;
    function get_mapped: gboolean; cdecl; inline;
    function get_margin_bottom: gint; cdecl; inline;
    function get_margin_end: gint; cdecl; inline;
    function get_margin_start: gint; cdecl; inline;
    function get_margin_top: gint; cdecl; inline;
    function get_name: Pgchar; cdecl; inline;
    function get_native: PGtkNative; cdecl; inline;
    function get_next_sibling: PGtkWidget; cdecl; inline;
    function get_opacity: gdouble; cdecl; inline;
    function get_overflow: TGtkOverflow; cdecl; inline;
    function get_pango_context: PPangoContext; cdecl; inline;
    function get_parent: PGtkWidget; cdecl; inline;
    procedure get_preferred_size(minimum_size: PGtkRequisition; natural_size: PGtkRequisition); cdecl; inline;
    function get_prev_sibling: PGtkWidget; cdecl; inline;
    function get_primary_clipboard: PGdkClipboard; cdecl; inline;
    function get_realized: gboolean; cdecl; inline;
    function get_receives_default: gboolean; cdecl; inline;
    function get_request_mode: TGtkSizeRequestMode; cdecl; inline;
    function get_root: PGtkRoot; cdecl; inline;
    function get_scale_factor: gint; cdecl; inline;
    function get_sensitive: gboolean; cdecl; inline;
    function get_settings: PGtkSettings; cdecl; inline;
    function get_size(orientation: TGtkOrientation): gint; cdecl; inline;
    procedure get_size_request(width: Pgint; height: Pgint); cdecl; inline;
    function get_state_flags: TGtkStateFlags; cdecl; inline;
    function get_style_context: PGtkStyleContext; cdecl; inline;
    function get_template_child(widget_type: TGType; name: Pgchar): PGObject; cdecl; inline;
    function get_tooltip_markup: Pgchar; cdecl; inline;
    function get_tooltip_text: Pgchar; cdecl; inline;
    function get_valign: TGtkAlign; cdecl; inline;
    function get_vexpand: gboolean; cdecl; inline;
    function get_vexpand_set: gboolean; cdecl; inline;
    function get_visible: gboolean; cdecl; inline;
    function get_width: gint; cdecl; inline;
    function grab_focus: gboolean; cdecl; inline;
    function has_css_class(css_class: Pgchar): gboolean; cdecl; inline;
    function has_default: gboolean; cdecl; inline;
    function has_focus: gboolean; cdecl; inline;
    function has_visible_focus: gboolean; cdecl; inline;
    procedure hide; cdecl; inline;
    function in_destruction: gboolean; cdecl; inline;
    procedure init_template; cdecl; inline;
    procedure insert_action_group(name: Pgchar; group: PGActionGroup); cdecl; inline;
    procedure insert_after(parent: PGtkWidget; previous_sibling: PGtkWidget); cdecl; inline;
    procedure insert_before(parent: PGtkWidget; next_sibling: PGtkWidget); cdecl; inline;
    function is_ancestor(ancestor: PGtkWidget): gboolean; cdecl; inline;
    function is_drawable: gboolean; cdecl; inline;
    function is_focus: gboolean; cdecl; inline;
    function is_sensitive: gboolean; cdecl; inline;
    function is_visible: gboolean; cdecl; inline;
    function keynav_failed(direction: TGtkDirectionType): gboolean; cdecl; inline;
    function list_mnemonic_labels: PGList; cdecl; inline;
    procedure map; cdecl; inline;
    procedure measure(orientation: TGtkOrientation; for_size: gint; minimum: Pgint; natural: Pgint; minimum_baseline: Pgint; natural_baseline: Pgint); cdecl; inline;
    function mnemonic_activate(group_cycling: gboolean): gboolean; cdecl; inline;
    function observe_children: PGListModel; cdecl; inline;
    function observe_controllers: PGListModel; cdecl; inline;
    function pick(x: gdouble; y: gdouble; flags: TGtkPickFlags): PGtkWidget; cdecl; inline;
    procedure queue_allocate; cdecl; inline;
    procedure queue_draw; cdecl; inline;
    procedure queue_resize; cdecl; inline;
    procedure realize; cdecl; inline;
    procedure remove_controller(controller: PGtkEventController); cdecl; inline;
    procedure remove_css_class(css_class: Pgchar); cdecl; inline;
    procedure remove_mnemonic_label(label_: PGtkWidget); cdecl; inline;
    procedure remove_tick_callback(id: guint); cdecl; inline;
    procedure set_can_focus(can_focus: gboolean); cdecl; inline;
    procedure set_can_target(can_target: gboolean); cdecl; inline;
    procedure set_child_visible(child_visible: gboolean); cdecl; inline;
    procedure set_css_classes(classes: PPgchar); cdecl; inline;
    procedure set_cursor(cursor: PGdkCursor); cdecl; inline;
    procedure set_cursor_from_name(name: Pgchar); cdecl; inline;
    procedure set_direction(dir: TGtkTextDirection); cdecl; inline;
    procedure set_focus_child(child: PGtkWidget); cdecl; inline;
    procedure set_focus_on_click(focus_on_click: gboolean); cdecl; inline;
    procedure set_focusable(focusable: gboolean); cdecl; inline;
    procedure set_font_map(font_map: PPangoFontMap); cdecl; inline;
    procedure set_font_options(options: Pcairo_font_options_t); cdecl; inline;
    procedure set_halign(align: TGtkAlign); cdecl; inline;
    procedure set_has_tooltip(has_tooltip: gboolean); cdecl; inline;
    procedure set_hexpand(expand: gboolean); cdecl; inline;
    procedure set_hexpand_set(set_: gboolean); cdecl; inline;
    procedure set_layout_manager(layout_manager: PGtkLayoutManager); cdecl; inline;
    procedure set_margin_bottom(margin: gint); cdecl; inline;
    procedure set_margin_end(margin: gint); cdecl; inline;
    procedure set_margin_start(margin: gint); cdecl; inline;
    procedure set_margin_top(margin: gint); cdecl; inline;
    procedure set_name(name: Pgchar); cdecl; inline;
    procedure set_opacity(opacity: gdouble); cdecl; inline;
    procedure set_overflow(overflow: TGtkOverflow); cdecl; inline;
    procedure set_parent(parent: PGtkWidget); cdecl; inline;
    procedure set_receives_default(receives_default: gboolean); cdecl; inline;
    procedure set_sensitive(sensitive: gboolean); cdecl; inline;
    procedure set_size_request(width: gint; height: gint); cdecl; inline;
    procedure set_state_flags(flags: TGtkStateFlags; clear: gboolean); cdecl; inline;
    procedure set_tooltip_markup(markup: Pgchar); cdecl; inline;
    procedure set_tooltip_text(text: Pgchar); cdecl; inline;
    procedure set_valign(align: TGtkAlign); cdecl; inline;
    procedure set_vexpand(expand: gboolean); cdecl; inline;
    procedure set_vexpand_set(set_: gboolean); cdecl; inline;
    procedure set_visible(visible: gboolean); cdecl; inline;
    function should_layout: gboolean; cdecl; inline;
    procedure show; cdecl; inline;
    procedure size_allocate(allocation: PGtkAllocation; baseline: gint); cdecl; inline;
    procedure snapshot_child(child: PGtkWidget; snapshot: PGtkSnapshot); cdecl; inline;
    function translate_coordinates(dest_widget: PGtkWidget; src_x: gdouble; src_y: gdouble; dest_x: Pgdouble; dest_y: Pgdouble): gboolean; cdecl; inline;
    procedure trigger_tooltip_query; cdecl; inline;
    procedure unmap; cdecl; inline;
    procedure unparent; cdecl; inline;
    procedure unrealize; cdecl; inline;
    procedure unset_state_flags(flags: TGtkStateFlags); cdecl; inline;
    property can_focus: gboolean read get_can_focus write set_can_focus;
    property can_target: gboolean read get_can_target write set_can_target;
    property css_classes: PPgchar read get_css_classes write set_css_classes;
    property css_name: Pgchar read get_css_name  { property is writeable but setter not declared } ;
    property cursor: PGdkCursor read get_cursor write set_cursor;
    property focus_on_click: gboolean read get_focus_on_click write set_focus_on_click;
    property focusable: gboolean read get_focusable write set_focusable;
    property halign: TGtkAlign read get_halign write set_halign;
    //property has_default1: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_has_default ;
    //property has_focus1: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_has_focus ;
    property has_tooltip: gboolean read get_has_tooltip write set_has_tooltip;
    //property height_request: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_height_request  { property is writeable but setter not declared } ;
    property hexpand: gboolean read get_hexpand write set_hexpand;
    property hexpand_set: gboolean read get_hexpand_set write set_hexpand_set;
    property layout_manager: PGtkLayoutManager read get_layout_manager write set_layout_manager;
    property margin_bottom: gint read get_margin_bottom write set_margin_bottom;
    property margin_end: gint read get_margin_end write set_margin_end;
    property margin_start: gint read get_margin_start write set_margin_start;
    property margin_top: gint read get_margin_top write set_margin_top;
    property name: Pgchar read get_name write set_name;
    property opacity: gdouble read get_opacity write set_opacity;
    property overflow: TGtkOverflow read get_overflow write set_overflow;
    property parent: PGtkWidget read get_parent ;
    property receives_default: gboolean read get_receives_default write set_receives_default;
    property root: PGtkRoot read get_root ;
    property scale_factor: gint read get_scale_factor ;
    property sensitive: gboolean read get_sensitive write set_sensitive;
    property tooltip_markup: Pgchar read get_tooltip_markup write set_tooltip_markup;
    property tooltip_text: Pgchar read get_tooltip_text write set_tooltip_text;
    property valign: TGtkAlign read get_valign write set_valign;
    property vexpand: gboolean read get_vexpand write set_vexpand;
    property vexpand_set: gboolean read get_vexpand_set write set_vexpand_set;
    property visible: gboolean read get_visible write set_visible;
    //property width_request: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_width_request  { property is writeable but setter not declared } ;
  end;

  PPGtkAboutDialog = ^PGtkAboutDialog;
  PGtkAboutDialog = ^TGtkAboutDialog;

  PPGtkLicense = ^PGtkLicense;
  PGtkLicense = ^TGtkLicense;
  TGtkAboutDialog = object
    function new: PGtkAboutDialog; cdecl; inline; static;
    procedure add_credit_section(section_name: Pgchar; people: PPgchar); cdecl; inline;
    function get_artists: PPgchar; cdecl; inline;
    function get_authors: PPgchar; cdecl; inline;
    function get_comments: Pgchar; cdecl; inline;
    function get_copyright: Pgchar; cdecl; inline;
    function get_documenters: PPgchar; cdecl; inline;
    function get_license: Pgchar; cdecl; inline;
    function get_license_type: TGtkLicense; cdecl; inline;
    function get_logo: PGdkPaintable; cdecl; inline;
    function get_logo_icon_name: Pgchar; cdecl; inline;
    function get_program_name: Pgchar; cdecl; inline;
    function get_system_information: Pgchar; cdecl; inline;
    function get_translator_credits: Pgchar; cdecl; inline;
    function get_version: Pgchar; cdecl; inline;
    function get_website: Pgchar; cdecl; inline;
    function get_website_label: Pgchar; cdecl; inline;
    function get_wrap_license: gboolean; cdecl; inline;
    procedure set_artists(artists: PPgchar); cdecl; inline;
    procedure set_authors(authors: PPgchar); cdecl; inline;
    procedure set_comments(comments: Pgchar); cdecl; inline;
    procedure set_copyright(copyright: Pgchar); cdecl; inline;
    procedure set_documenters(documenters: PPgchar); cdecl; inline;
    procedure set_license(license: Pgchar); cdecl; inline;
    procedure set_license_type(license_type: TGtkLicense); cdecl; inline;
    procedure set_logo(logo: PGdkPaintable); cdecl; inline;
    procedure set_logo_icon_name(icon_name: Pgchar); cdecl; inline;
    procedure set_program_name(name: Pgchar); cdecl; inline;
    procedure set_system_information(system_information: Pgchar); cdecl; inline;
    procedure set_translator_credits(translator_credits: Pgchar); cdecl; inline;
    procedure set_version(version: Pgchar); cdecl; inline;
    procedure set_website(website: Pgchar); cdecl; inline;
    procedure set_website_label(website_label: Pgchar); cdecl; inline;
    procedure set_wrap_license(wrap_license: gboolean); cdecl; inline;
    property artists: PPgchar read get_artists write set_artists;
    property authors: PPgchar read get_authors write set_authors;
    property comments: Pgchar read get_comments write set_comments;
    property copyright: Pgchar read get_copyright write set_copyright;
    property documenters: PPgchar read get_documenters write set_documenters;
    property license: Pgchar read get_license write set_license;
    property license_type: TGtkLicense read get_license_type write set_license_type;
    property logo: PGdkPaintable read get_logo write set_logo;
    property logo_icon_name: Pgchar read get_logo_icon_name write set_logo_icon_name;
    property program_name: Pgchar read get_program_name write set_program_name;
    property system_information: Pgchar read get_system_information write set_system_information;
    property translator_credits: Pgchar read get_translator_credits write set_translator_credits;
    property version: Pgchar read get_version write set_version;
    property website: Pgchar read get_website write set_website;
    property website_label: Pgchar read get_website_label write set_website_label;
    property wrap_license: gboolean read get_wrap_license write set_wrap_license;
  end;

  PPGtkAccessibleAutocomplete = ^PGtkAccessibleAutocomplete;
  PGtkAccessibleAutocomplete = ^TGtkAccessibleAutocomplete;

  PPGtkAccessibleInterface = ^PGtkAccessibleInterface;
  PGtkAccessibleInterface = ^TGtkAccessibleInterface;
  TGtkAccessibleInterface = object
  end;

  PPGtkAccessibleInvalidState = ^PGtkAccessibleInvalidState;
  PGtkAccessibleInvalidState = ^TGtkAccessibleInvalidState;

  PPGtkAccessibleSort = ^PGtkAccessibleSort;
  PGtkAccessibleSort = ^TGtkAccessibleSort;

  PPGtkAccessibleTristate = ^PGtkAccessibleTristate;
  PGtkAccessibleTristate = ^TGtkAccessibleTristate;

  PPGtkActionBar = ^PGtkActionBar;
  PGtkActionBar = ^TGtkActionBar;
  TGtkActionBar = object(TGtkWidget)
    function new: PGtkActionBar; cdecl; inline; static;
    function get_center_widget: PGtkWidget; cdecl; inline;
    function get_revealed: gboolean; cdecl; inline;
    procedure pack_end(child: PGtkWidget); cdecl; inline;
    procedure pack_start(child: PGtkWidget); cdecl; inline;
    procedure remove(child: PGtkWidget); cdecl; inline;
    procedure set_center_widget(center_widget: PGtkWidget); cdecl; inline;
    procedure set_revealed(revealed: gboolean); cdecl; inline;
    property revealed: gboolean read get_revealed write set_revealed;
  end;

  PPGtkActionable = ^PGtkActionable;
  PGtkActionable = ^TGtkActionable;
  TGtkActionable = object
    function get_action_name: Pgchar; cdecl; inline;
    function get_action_target_value: PGVariant; cdecl; inline;
    procedure set_action_name(action_name: Pgchar); cdecl; inline;
    //procedure set_action_target(format_string: Pgchar; args: array of const); cdecl; inline;
    procedure set_action_target_value(target_value: PGVariant); cdecl; inline;
    procedure set_detailed_action_name(detailed_action_name: Pgchar); cdecl; inline;
    property action_name: Pgchar read get_action_name write set_action_name;
    //property action_target: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_action_target  { property is writeable but setter not declared } ;
  end;

  PPGtkActionableInterface = ^PGtkActionableInterface;
  PGtkActionableInterface = ^TGtkActionableInterface;
  TGtkActionableInterface = object
    g_iface: TGTypeInterface;
    get_action_name: function(actionable: PGtkActionable): Pgchar; cdecl;
    set_action_name: procedure(actionable: PGtkActionable; action_name: Pgchar); cdecl;
    get_action_target_value: function(actionable: PGtkActionable): PGVariant; cdecl;
    set_action_target_value: procedure(actionable: PGtkActionable; target_value: PGVariant); cdecl;
  end;

  PPGtkActivateAction = ^PGtkActivateAction;
  PGtkActivateAction = ^TGtkActivateAction;
  TGtkActivateAction = object
    function get: PGtkActivateAction; cdecl; inline; static;
  end;

  PPGtkActivateActionClass = ^PGtkActivateActionClass;
  PGtkActivateActionClass = ^TGtkActivateActionClass;
  TGtkActivateActionClass = object
  end;

  PPGtkAdjustment = ^PGtkAdjustment;
  PGtkAdjustment = ^TGtkAdjustment;
  TGtkAdjustment = object(TGInitiallyUnowned)
    function new(value: gdouble; lower: gdouble; upper: gdouble; step_increment: gdouble; page_increment: gdouble; page_size: gdouble): PGtkAdjustment; cdecl; inline; static;
    procedure clamp_page(lower: gdouble; upper: gdouble); cdecl; inline;
    procedure configure(value: gdouble; lower: gdouble; upper: gdouble; step_increment: gdouble; page_increment: gdouble; page_size: gdouble); cdecl; inline;
    function get_lower: gdouble; cdecl; inline;
    function get_minimum_increment: gdouble; cdecl; inline;
    function get_page_increment: gdouble; cdecl; inline;
    function get_page_size: gdouble; cdecl; inline;
    function get_step_increment: gdouble; cdecl; inline;
    function get_upper: gdouble; cdecl; inline;
    function get_value: gdouble; cdecl; inline;
    procedure set_lower(lower: gdouble); cdecl; inline;
    procedure set_page_increment(page_increment: gdouble); cdecl; inline;
    procedure set_page_size(page_size: gdouble); cdecl; inline;
    procedure set_step_increment(step_increment: gdouble); cdecl; inline;
    procedure set_upper(upper: gdouble); cdecl; inline;
    procedure set_value(value: gdouble); cdecl; inline;
    property lower: gdouble read get_lower write set_lower;
    property page_increment: gdouble read get_page_increment write set_page_increment;
    property page_size: gdouble read get_page_size write set_page_size;
    property step_increment: gdouble read get_step_increment write set_step_increment;
    property upper: gdouble read get_upper write set_upper;
    property value: gdouble read get_value write set_value;
  end;

  PPGtkAdjustmentClass = ^PGtkAdjustmentClass;
  PGtkAdjustmentClass = ^TGtkAdjustmentClass;
  TGtkAdjustmentClass = object
    parent_class: TGInitiallyUnownedClass;
    changed: procedure(adjustment: PGtkAdjustment); cdecl;
    value_changed: procedure(adjustment: PGtkAdjustment); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkShortcutTrigger = ^PGtkShortcutTrigger;
  PGtkShortcutTrigger = ^TGtkShortcutTrigger;
  TGtkShortcutTrigger = object(TGObject)
    function parse_string(string_: Pgchar): PGtkShortcutTrigger; cdecl; inline; static;
    function compare(trigger2: PGtkShortcutTrigger): gint; cdecl; inline;
    function equal(trigger2: PGtkShortcutTrigger): gboolean; cdecl; inline;
    function hash: guint; cdecl; inline;
    procedure print(string_: PGString); cdecl; inline;
    function print_label(display: PGdkDisplay; string_: PGString): gboolean; cdecl; inline;
    function to_label(display: PGdkDisplay): Pgchar; cdecl; inline;
    function to_string: Pgchar; cdecl; inline;
    function trigger(event: PGdkEvent; enable_mnemonics: gboolean): TGdkKeyMatch; cdecl; inline;
  end;

  PPGtkAlternativeTrigger = ^PGtkAlternativeTrigger;
  PGtkAlternativeTrigger = ^TGtkAlternativeTrigger;
  TGtkAlternativeTrigger = object(TGtkShortcutTrigger)
    function new(first: PGtkShortcutTrigger; second: PGtkShortcutTrigger): PGtkAlternativeTrigger; cdecl; inline; static;
    function get_first: PGtkShortcutTrigger; cdecl; inline;
    function get_second: PGtkShortcutTrigger; cdecl; inline;
    property first: PGtkShortcutTrigger read get_first  { property is writeable but setter not declared } ;
    property second: PGtkShortcutTrigger read get_second  { property is writeable but setter not declared } ;
  end;

  PPGtkAlternativeTriggerClass = ^PGtkAlternativeTriggerClass;
  PGtkAlternativeTriggerClass = ^TGtkAlternativeTriggerClass;
  TGtkAlternativeTriggerClass = object
  end;

  PPGtkAnyFilter = ^PGtkAnyFilter;
  PGtkAnyFilter = ^TGtkAnyFilter;
  TGtkAnyFilter = object
    function new: PGtkAnyFilter; cdecl; inline; static;
  end;

  PPGtkAnyFilterClass = ^PGtkAnyFilterClass;
  PGtkAnyFilterClass = ^TGtkAnyFilterClass;
  TGtkAnyFilterClass = object
  end;

  PPGtkAppChooser = ^PGtkAppChooser;
  PGtkAppChooser = ^TGtkAppChooser;
  TGtkAppChooser = object
    function get_app_info: PGAppInfo; cdecl; inline;
    function get_content_type: Pgchar; cdecl; inline;
    procedure refresh; cdecl; inline;
    property content_type: Pgchar read get_content_type  { property is writeable but setter not declared } ;
  end;

  PPGtkAppChooserButton = ^PGtkAppChooserButton;
  PGtkAppChooserButton = ^TGtkAppChooserButton;
  TGtkAppChooserButton = object(TGtkWidget)
    function new(content_type: Pgchar): PGtkAppChooserButton; cdecl; inline; static;
    procedure append_custom_item(name: Pgchar; label_: Pgchar; icon: PGIcon); cdecl; inline;
    procedure append_separator; cdecl; inline;
    function get_heading: Pgchar; cdecl; inline;
    function get_modal: gboolean; cdecl; inline;
    function get_show_default_item: gboolean; cdecl; inline;
    function get_show_dialog_item: gboolean; cdecl; inline;
    procedure set_active_custom_item(name: Pgchar); cdecl; inline;
    procedure set_heading(heading: Pgchar); cdecl; inline;
    procedure set_modal(modal: gboolean); cdecl; inline;
    procedure set_show_default_item(setting: gboolean); cdecl; inline;
    procedure set_show_dialog_item(setting: gboolean); cdecl; inline;
    property heading: Pgchar read get_heading write set_heading;
    property modal: gboolean read get_modal write set_modal;
    property show_default_item: gboolean read get_show_default_item write set_show_default_item;
    property show_dialog_item: gboolean read get_show_dialog_item write set_show_dialog_item;
  end;

  PPGtkWindow = ^PGtkWindow;
  PGtkWindow = ^TGtkWindow;

  PPGtkApplication = ^PGtkApplication;
  PGtkApplication = ^TGtkApplication;

  PPGtkWindowGroup = ^PGtkWindowGroup;
  PGtkWindowGroup = ^TGtkWindowGroup;
  TGtkWindow = object(TGtkWidget)
    function new: PGtkWindow; cdecl; inline; static;
    function get_default_icon_name: Pgchar; cdecl; inline; static;
    function get_toplevels: PGListModel; cdecl; inline; static;
    function list_toplevels: PGList; cdecl; inline; static;
    procedure set_auto_startup_notification(setting: gboolean); cdecl; inline; static;
    procedure set_default_icon_name(name: Pgchar); cdecl; inline; static;
    procedure set_interactive_debugging(enable: gboolean); cdecl; inline; static;
    procedure close; cdecl; inline;
    procedure destroy_; cdecl; inline;
    procedure fullscreen; cdecl; inline;
    procedure fullscreen_on_monitor(monitor: PGdkMonitor); cdecl; inline;
    function get_application: PGtkApplication; cdecl; inline;
    function get_child: PGtkWidget; cdecl; inline;
    function get_decorated: gboolean; cdecl; inline;
    procedure get_default_size(width: Pgint; height: Pgint); cdecl; inline;
    function get_default_widget: PGtkWidget; cdecl; inline;
    function get_deletable: gboolean; cdecl; inline;
    function get_destroy_with_parent: gboolean; cdecl; inline;
    function get_focus: PGtkWidget; cdecl; inline;
    function get_focus_visible: gboolean; cdecl; inline;
    function get_group: PGtkWindowGroup; cdecl; inline;
    function get_handle_menubar_accel: gboolean; cdecl; inline;
    function get_hide_on_close: gboolean; cdecl; inline;
    function get_icon_name: Pgchar; cdecl; inline;
    function get_mnemonics_visible: gboolean; cdecl; inline;
    function get_modal: gboolean; cdecl; inline;
    function get_resizable: gboolean; cdecl; inline;
    function get_title: Pgchar; cdecl; inline;
    function get_titlebar: PGtkWidget; cdecl; inline;
    function get_transient_for: PGtkWindow; cdecl; inline;
    function has_group: gboolean; cdecl; inline;
    function is_active: gboolean; cdecl; inline;
    function is_fullscreen: gboolean; cdecl; inline;
    function is_maximized: gboolean; cdecl; inline;
    procedure maximize; cdecl; inline;
    procedure minimize; cdecl; inline;
    procedure present; cdecl; inline;
    procedure present_with_time(timestamp: guint32); cdecl; inline;
    procedure set_application(application: PGtkApplication); cdecl; inline;
    procedure set_child(child: PGtkWidget); cdecl; inline;
    procedure set_decorated(setting: gboolean); cdecl; inline;
    procedure set_default_size(width: gint; height: gint); cdecl; inline;
    procedure set_default_widget(default_widget: PGtkWidget); cdecl; inline;
    procedure set_deletable(setting: gboolean); cdecl; inline;
    procedure set_destroy_with_parent(setting: gboolean); cdecl; inline;
    procedure set_display(display: PGdkDisplay); cdecl; inline;
    procedure set_focus(focus: PGtkWidget); cdecl; inline;
    procedure set_focus_visible(setting: gboolean); cdecl; inline;
    procedure set_handle_menubar_accel(handle_menubar_accel: gboolean); cdecl; inline;
    procedure set_hide_on_close(setting: gboolean); cdecl; inline;
    procedure set_icon_name(name: Pgchar); cdecl; inline;
    procedure set_mnemonics_visible(setting: gboolean); cdecl; inline;
    procedure set_modal(modal: gboolean); cdecl; inline;
    procedure set_resizable(resizable: gboolean); cdecl; inline;
    procedure set_startup_id(startup_id: Pgchar); cdecl; inline;
    procedure set_title(title: Pgchar); cdecl; inline;
    procedure set_titlebar(titlebar: PGtkWidget); cdecl; inline;
    procedure set_transient_for(parent: PGtkWindow); cdecl; inline;
    procedure unfullscreen; cdecl; inline;
    procedure unmaximize; cdecl; inline;
    procedure unminimize; cdecl; inline;
    property application: PGtkApplication read get_application write set_application;
    property child: PGtkWidget read get_child write set_child;
    property decorated: gboolean read get_decorated write set_decorated;
    //property default_height: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_default_height  { property is writeable but setter not declared } ;
    property default_widget: PGtkWidget read get_default_widget write set_default_widget;
    //property default_width: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_default_width  { property is writeable but setter not declared } ;
    property deletable: gboolean read get_deletable write set_deletable;
    property destroy_with_parent: gboolean read get_destroy_with_parent write set_destroy_with_parent;
    //property display: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_display  { property is writeable but setter not declared } ;
    property focus_visible: gboolean read get_focus_visible write set_focus_visible;
    //property focus_widget: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_focus_widget  { property is writeable but setter not declared } ;
    //property fullscreened: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_fullscreened  { property is writeable but setter not declared } ;
    property handle_menubar_accel: gboolean read get_handle_menubar_accel write set_handle_menubar_accel;
    property hide_on_close: gboolean read get_hide_on_close write set_hide_on_close;
    property icon_name: Pgchar read get_icon_name write set_icon_name;
    //property is_active1: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_is_active ;
    //property maximized: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_maximized  { property is writeable but setter not declared } ;
    property mnemonics_visible: gboolean read get_mnemonics_visible write set_mnemonics_visible;
    property modal: gboolean read get_modal write set_modal;
    property resizable: gboolean read get_resizable write set_resizable;
    //property startup_id: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_startup_id  { property is writeable but setter not declared } ;
    property title: Pgchar read get_title write set_title;
    property titlebar: PGtkWidget read get_titlebar write set_titlebar;
    property transient_for: PGtkWindow read get_transient_for write set_transient_for;
  end;

  PPGtkDialogFlags = ^PGtkDialogFlags;
  PGtkDialogFlags = ^TGtkDialogFlags;

  PPGtkAppChooserDialog = ^PGtkAppChooserDialog;
  PGtkAppChooserDialog = ^TGtkAppChooserDialog;
  TGtkAppChooserDialog = object
    function new(parent: PGtkWindow; flags: TGtkDialogFlags; file_: PGFile): PGtkAppChooserDialog; cdecl; inline; static;
    function new_for_content_type(parent: PGtkWindow; flags: TGtkDialogFlags; content_type: Pgchar): PGtkAppChooserDialog; cdecl; inline; static;
    function get_heading: Pgchar; cdecl; inline;
    function get_widget: PGtkWidget; cdecl; inline;
    procedure set_heading(heading: Pgchar); cdecl; inline;
    //property gfile: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gfile  { property is writeable but setter not declared } ;
    property heading: Pgchar read get_heading write set_heading;
  end;

  PPGtkAppChooserWidget = ^PGtkAppChooserWidget;
  PGtkAppChooserWidget = ^TGtkAppChooserWidget;
  TGtkAppChooserWidget = object(TGtkWidget)
    function new(content_type: Pgchar): PGtkAppChooserWidget; cdecl; inline; static;
    function get_default_text: Pgchar; cdecl; inline;
    function get_show_all: gboolean; cdecl; inline;
    function get_show_default: gboolean; cdecl; inline;
    function get_show_fallback: gboolean; cdecl; inline;
    function get_show_other: gboolean; cdecl; inline;
    function get_show_recommended: gboolean; cdecl; inline;
    procedure set_default_text(text: Pgchar); cdecl; inline;
    procedure set_show_all(setting: gboolean); cdecl; inline;
    procedure set_show_default(setting: gboolean); cdecl; inline;
    procedure set_show_fallback(setting: gboolean); cdecl; inline;
    procedure set_show_other(setting: gboolean); cdecl; inline;
    procedure set_show_recommended(setting: gboolean); cdecl; inline;
    property default_text: Pgchar read get_default_text write set_default_text;
    property show_all: gboolean read get_show_all write set_show_all;
    property show_default: gboolean read get_show_default write set_show_default;
    property show_fallback: gboolean read get_show_fallback write set_show_fallback;
    property show_other: gboolean read get_show_other write set_show_other;
    property show_recommended: gboolean read get_show_recommended write set_show_recommended;
  end;

  PPGtkApplicationInhibitFlags = ^PGtkApplicationInhibitFlags;
  PGtkApplicationInhibitFlags = ^TGtkApplicationInhibitFlags;
  TGtkApplication = object(TGApplication)
    function new(application_id: Pgchar; flags: TGApplicationFlags): PGtkApplication; cdecl; inline; static;
    procedure add_window(window: PGtkWindow); cdecl; inline;
    function get_accels_for_action(detailed_action_name: Pgchar): PPgchar; cdecl; inline;
    function get_actions_for_accel(accel: Pgchar): PPgchar; cdecl; inline;
    function get_active_window: PGtkWindow; cdecl; inline;
    function get_menu_by_id(id: Pgchar): PGMenu; cdecl; inline;
    function get_menubar: PGMenuModel; cdecl; inline;
    function get_window_by_id(id: guint): PGtkWindow; cdecl; inline;
    function get_windows: PGList; cdecl; inline;
    function inhibit(window: PGtkWindow; flags: TGtkApplicationInhibitFlags; reason: Pgchar): guint; cdecl; inline;
    function list_action_descriptions: PPgchar; cdecl; inline;
    procedure remove_window(window: PGtkWindow); cdecl; inline;
    procedure set_accels_for_action(detailed_action_name: Pgchar; accels: PPgchar); cdecl; inline;
    procedure set_menubar(menubar: PGMenuModel); cdecl; inline;
    procedure uninhibit(cookie: guint); cdecl; inline;
    property active_window: PGtkWindow read get_active_window ;
    property menubar: PGMenuModel read get_menubar write set_menubar;
    //property register_session: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_register_session  { property is writeable but setter not declared } ;
    //property screensaver_active: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_screensaver_active ;
  end;

  PPGtkApplicationClass = ^PGtkApplicationClass;
  PGtkApplicationClass = ^TGtkApplicationClass;
  TGtkApplicationClass = object
    parent_class: TGApplicationClass;
    window_added: procedure(application: PGtkApplication; window: PGtkWindow); cdecl;
    window_removed: procedure(application: PGtkApplication; window: PGtkWindow); cdecl;
    padding: array [0..7] of gpointer;
  end;

  PPGtkShortcutsWindow = ^PGtkShortcutsWindow;
  PGtkShortcutsWindow = ^TGtkShortcutsWindow;
  TGtkShortcutsWindow = object(TGtkWindow)
    //property section_name: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_section_name  { property is writeable but setter not declared } ;
    //property view_name: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_view_name  { property is writeable but setter not declared } ;
  end;

  PPGtkApplicationWindow = ^PGtkApplicationWindow;
  PGtkApplicationWindow = ^TGtkApplicationWindow;
  TGtkApplicationWindow = object(TGtkWindow)
    function new(application: PGtkApplication): PGtkApplicationWindow; cdecl; inline; static;
    function get_help_overlay: PGtkShortcutsWindow; cdecl; inline;
    function get_id: guint; cdecl; inline;
    function get_show_menubar: gboolean; cdecl; inline;
    procedure set_help_overlay(help_overlay: PGtkShortcutsWindow); cdecl; inline;
    procedure set_show_menubar(show_menubar: gboolean); cdecl; inline;
    property show_menubar: gboolean read get_show_menubar write set_show_menubar;
  end;

  PPGtkWindowClass = ^PGtkWindowClass;
  PGtkWindowClass = ^TGtkWindowClass;

  PPGtkWidgetClass = ^PGtkWidgetClass;
  PGtkWidgetClass = ^TGtkWidgetClass;

  PPGtkShortcutFunc = ^PGtkShortcutFunc;
  PGtkShortcutFunc = ^TGtkShortcutFunc;
  TGtkShortcutFunc = function(widget: PGtkWidget; args: PGVariant; user_data: gpointer): gboolean; cdecl;

  PPGtkShortcut = ^PGtkShortcut;
  PGtkShortcut = ^TGtkShortcut;

  PPGtkWidgetActionActivateFunc = ^PGtkWidgetActionActivateFunc;
  PGtkWidgetActionActivateFunc = ^TGtkWidgetActionActivateFunc;
  TGtkWidgetActionActivateFunc = procedure(widget: PGtkWidget; action_name: Pgchar; parameter: PGVariant); cdecl;

  PPGtkBuilderScope = ^PGtkBuilderScope;
  PGtkBuilderScope = ^TGtkBuilderScope;

  PPGtkTooltip = ^PGtkTooltip;
  PGtkTooltip = ^TGtkTooltip;

  PPGtkCssStyleChange = ^PGtkCssStyleChange;
  PGtkCssStyleChange = ^TGtkCssStyleChange;

  PPGtkSystemSetting = ^PGtkSystemSetting;
  PGtkSystemSetting = ^TGtkSystemSetting;

  PPGtkWidgetClassPrivate = ^PGtkWidgetClassPrivate;
  PGtkWidgetClassPrivate = ^TGtkWidgetClassPrivate;
  TGtkWidgetClass = object
    parent_class: TGInitiallyUnownedClass;
    show: procedure(widget: PGtkWidget); cdecl;
    hide: procedure(widget: PGtkWidget); cdecl;
    map: procedure(widget: PGtkWidget); cdecl;
    unmap: procedure(widget: PGtkWidget); cdecl;
    realize: procedure(widget: PGtkWidget); cdecl;
    unrealize: procedure(widget: PGtkWidget); cdecl;
    root: procedure(widget: PGtkWidget); cdecl;
    unroot: procedure(widget: PGtkWidget); cdecl;
    size_allocate: procedure(widget: PGtkWidget; width: gint; height: gint; baseline: gint); cdecl;
    state_flags_changed: procedure(widget: PGtkWidget; previous_state_flags: TGtkStateFlags); cdecl;
    direction_changed: procedure(widget: PGtkWidget; previous_direction: TGtkTextDirection); cdecl;
    get_request_mode: function(widget: PGtkWidget): TGtkSizeRequestMode; cdecl;
    measure: procedure(widget: PGtkWidget; orientation: TGtkOrientation; for_size: gint; minimum: Pgint; natural: Pgint; minimum_baseline: Pgint; natural_baseline: Pgint); cdecl;
    mnemonic_activate: function(widget: PGtkWidget; group_cycling: gboolean): gboolean; cdecl;
    grab_focus: function(widget: PGtkWidget): gboolean; cdecl;
    focus: function(widget: PGtkWidget; direction: TGtkDirectionType): gboolean; cdecl;
    set_focus_child: procedure(widget: PGtkWidget; child: PGtkWidget); cdecl;
    move_focus: procedure(widget: PGtkWidget; direction: TGtkDirectionType); cdecl;
    keynav_failed: function(widget: PGtkWidget; direction: TGtkDirectionType): gboolean; cdecl;
    query_tooltip: function(widget: PGtkWidget; x: gint; y: gint; keyboard_tooltip: gboolean; tooltip: PGtkTooltip): gboolean; cdecl;
    compute_expand: procedure(widget: PGtkWidget; hexpand_p: Pgboolean; vexpand_p: Pgboolean); cdecl;
    css_changed: procedure(widget: PGtkWidget; change: PGtkCssStyleChange); cdecl;
    system_setting_changed: procedure(widget: PGtkWidget; settings: TGtkSystemSetting); cdecl;
    snapshot: procedure(widget: PGtkWidget; snapshot: PGtkSnapshot); cdecl;
    contains: function(widget: PGtkWidget; x: gdouble; y: gdouble): gboolean; cdecl;
    priv: PGtkWidgetClassPrivate;
    padding: array [0..7] of gpointer;
    //procedure add_binding(keyval: guint; mods: TGdkModifierType; callback: TGtkShortcutFunc; format_string: Pgchar; args: array of const); cdecl; inline;
    //procedure add_binding_action(keyval: guint; mods: TGdkModifierType; action_name: Pgchar; format_string: Pgchar; args: array of const); cdecl; inline;
    //procedure add_binding_signal(keyval: guint; mods: TGdkModifierType; signal: Pgchar; format_string: Pgchar; args: array of const); cdecl; inline;
    procedure add_shortcut(shortcut: PGtkShortcut); cdecl; inline;
    procedure bind_template_callback_full(callback_name: Pgchar; callback_symbol: TGCallback); cdecl; inline;
    procedure bind_template_child_full(name: Pgchar; internal_child: gboolean; struct_offset: gssize); cdecl; inline;
    function get_accessible_role: TGtkAccessibleRole; cdecl; inline;
    function get_activate_signal: guint; cdecl; inline;
    function get_css_name: Pgchar; cdecl; inline;
    function get_layout_manager_type: TGType; cdecl; inline;
    procedure install_action(action_name: Pgchar; parameter_type: Pgchar; activate: TGtkWidgetActionActivateFunc); cdecl; inline;
    procedure install_property_action(action_name: Pgchar; property_name: Pgchar); cdecl; inline;
    function query_action(index_: guint; owner: PGType; action_name: PPgchar; parameter_type: PPGVariantType; property_name: PPgchar): gboolean; cdecl; inline;
    procedure set_accessible_role(accessible_role: TGtkAccessibleRole); cdecl; inline;
    procedure set_activate_signal(signal_id: guint); cdecl; inline;
    procedure set_activate_signal_from_name(signal_name: Pgchar); cdecl; inline;
    procedure set_css_name(name: Pgchar); cdecl; inline;
    procedure set_layout_manager_type(type_: TGType); cdecl; inline;
    procedure set_template(template_bytes: PGBytes); cdecl; inline;
    procedure set_template_from_resource(resource_name: Pgchar); cdecl; inline;
    procedure set_template_scope(scope: PGtkBuilderScope); cdecl; inline;
  end;
  TGtkWindowClass = object
    parent_class: TGtkWidgetClass;
    activate_focus: procedure(window: PGtkWindow); cdecl;
    activate_default: procedure(window: PGtkWindow); cdecl;
    keys_changed: procedure(window: PGtkWindow); cdecl;
    enable_debugging: function(window: PGtkWindow; toggle: gboolean): gboolean; cdecl;
    close_request: function(window: PGtkWindow): gboolean; cdecl;
    padding: array [0..7] of gpointer;
  end;

  PPGtkApplicationWindowClass = ^PGtkApplicationWindowClass;
  PGtkApplicationWindowClass = ^TGtkApplicationWindowClass;
  TGtkApplicationWindowClass = object
    parent_class: TGtkWindowClass;
    padding: array [0..7] of gpointer;
  end;

  PPGtkArrowType = ^PGtkArrowType;
  PGtkArrowType = ^TGtkArrowType;

  PPGtkAspectFrame = ^PGtkAspectFrame;
  PGtkAspectFrame = ^TGtkAspectFrame;
  TGtkAspectFrame = object(TGtkWidget)
    function new(xalign: gfloat; yalign: gfloat; ratio: gfloat; obey_child: gboolean): PGtkAspectFrame; cdecl; inline; static;
    function get_child: PGtkWidget; cdecl; inline;
    function get_obey_child: gboolean; cdecl; inline;
    function get_ratio: gfloat; cdecl; inline;
    function get_xalign: gfloat; cdecl; inline;
    function get_yalign: gfloat; cdecl; inline;
    procedure set_child(child: PGtkWidget); cdecl; inline;
    procedure set_obey_child(obey_child: gboolean); cdecl; inline;
    procedure set_ratio(ratio: gfloat); cdecl; inline;
    procedure set_xalign(xalign: gfloat); cdecl; inline;
    procedure set_yalign(yalign: gfloat); cdecl; inline;
    property child: PGtkWidget read get_child write set_child;
    property obey_child: gboolean read get_obey_child write set_obey_child;
    property ratio: gfloat read get_ratio write set_ratio;
    property xalign: gfloat read get_xalign write set_xalign;
    property yalign: gfloat read get_yalign write set_yalign;
  end;

  PPGtkAssistant = ^PGtkAssistant;
  PGtkAssistant = ^TGtkAssistant;

  PPGtkAssistantPage = ^PGtkAssistantPage;
  PGtkAssistantPage = ^TGtkAssistantPage;

  PPGtkAssistantPageType = ^PGtkAssistantPageType;
  PGtkAssistantPageType = ^TGtkAssistantPageType;

  PPGtkAssistantPageFunc = ^PGtkAssistantPageFunc;
  PGtkAssistantPageFunc = ^TGtkAssistantPageFunc;
  TGtkAssistantPageFunc = function(current_page: gint; data: gpointer): gint; cdecl;
  TGtkAssistant = object(TGtkWindow)
    function new: PGtkAssistant; cdecl; inline; static;
    procedure add_action_widget(child: PGtkWidget); cdecl; inline;
    function append_page(page: PGtkWidget): gint; cdecl; inline;
    procedure commit; cdecl; inline;
    function get_current_page: gint; cdecl; inline;
    function get_n_pages: gint; cdecl; inline;
    function get_nth_page(page_num: gint): PGtkWidget; cdecl; inline;
    function get_page(child: PGtkWidget): PGtkAssistantPage; cdecl; inline;
    function get_page_complete(page: PGtkWidget): gboolean; cdecl; inline;
    function get_page_title(page: PGtkWidget): Pgchar; cdecl; inline;
    function get_page_type(page: PGtkWidget): TGtkAssistantPageType; cdecl; inline;
    function get_pages: PGListModel; cdecl; inline;
    function insert_page(page: PGtkWidget; position: gint): gint; cdecl; inline;
    procedure next_page; cdecl; inline;
    function prepend_page(page: PGtkWidget): gint; cdecl; inline;
    procedure previous_page; cdecl; inline;
    procedure remove_action_widget(child: PGtkWidget); cdecl; inline;
    procedure remove_page(page_num: gint); cdecl; inline;
    procedure set_current_page(page_num: gint); cdecl; inline;
    procedure set_forward_page_func(page_func: TGtkAssistantPageFunc; data: gpointer; destroy_: TGDestroyNotify); cdecl; inline;
    procedure set_page_complete(page: PGtkWidget; complete: gboolean); cdecl; inline;
    procedure set_page_title(page: PGtkWidget; title: Pgchar); cdecl; inline;
    procedure set_page_type(page: PGtkWidget; type_: TGtkAssistantPageType); cdecl; inline;
    procedure update_buttons_state; cdecl; inline;
    property pages: PGListModel read get_pages ;
    //property use_header_bar: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_use_header_bar  { property is writeable but setter not declared } ;
  end;
  TGtkAssistantPage = object(TGObject)
    function get_child: PGtkWidget; cdecl; inline;
    property child: PGtkWidget read get_child  { property is writeable but setter not declared } ;
    //property complete: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_complete  { property is writeable but setter not declared } ;
    //property page_type: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_page_type  { property is writeable but setter not declared } ;
    //property title: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_title  { property is writeable but setter not declared } ;
  end;

  PPGtkBaselinePosition = ^PGtkBaselinePosition;
  PGtkBaselinePosition = ^TGtkBaselinePosition;

  PPGtkLayoutChild = ^PGtkLayoutChild;
  PGtkLayoutChild = ^TGtkLayoutChild;
  TGtkLayoutManager = object(TGObject)
    procedure allocate(widget: PGtkWidget; width: gint; height: gint; baseline: gint); cdecl; inline;
    function get_layout_child(child: PGtkWidget): PGtkLayoutChild; cdecl; inline;
    function get_request_mode: TGtkSizeRequestMode; cdecl; inline;
    function get_widget: PGtkWidget; cdecl; inline;
    procedure layout_changed; cdecl; inline;
    procedure measure(widget: PGtkWidget; orientation: TGtkOrientation; for_size: gint; minimum: Pgint; natural: Pgint; minimum_baseline: Pgint; natural_baseline: Pgint); cdecl; inline;
  end;

  PPGtkBinLayout = ^PGtkBinLayout;
  PGtkBinLayout = ^TGtkBinLayout;
  TGtkBinLayout = object(TGtkLayoutManager)
    function new: PGtkBinLayout; cdecl; inline; static;
  end;

  PPGtkLayoutManagerClass = ^PGtkLayoutManagerClass;
  PGtkLayoutManagerClass = ^TGtkLayoutManagerClass;
  TGtkLayoutManagerClass = object
    parent_class: TGObjectClass;
    get_request_mode: function(manager: PGtkLayoutManager; widget: PGtkWidget): TGtkSizeRequestMode; cdecl;
    measure: procedure(manager: PGtkLayoutManager; widget: PGtkWidget; orientation: TGtkOrientation; for_size: gint; minimum: Pgint; natural: Pgint; minimum_baseline: Pgint; natural_baseline: Pgint); cdecl;
    allocate: procedure(manager: PGtkLayoutManager; widget: PGtkWidget; width: gint; height: gint; baseline: gint); cdecl;
    layout_child_type: TGType;
    create_layout_child: function(manager: PGtkLayoutManager; widget: PGtkWidget; for_child: PGtkWidget): PGtkLayoutChild; cdecl;
    root: procedure(manager: PGtkLayoutManager); cdecl;
    unroot: procedure(manager: PGtkLayoutManager); cdecl;
    _padding: array [0..15] of gpointer;
  end;

  PPGtkBinLayoutClass = ^PGtkBinLayoutClass;
  PGtkBinLayoutClass = ^TGtkBinLayoutClass;
  TGtkBinLayoutClass = object
    parent_class: TGtkLayoutManagerClass;
  end;

  PPGtkBitset = ^PGtkBitset;
  PGtkBitset = ^TGtkBitset;
  TGtkBitset = object
    function new_empty: PGtkBitset; cdecl; inline; static;
    function new_range(start: guint; n_items: guint): PGtkBitset; cdecl; inline; static;
    function add(value: guint): gboolean; cdecl; inline;
    procedure add_range(start: guint; n_items: guint); cdecl; inline;
    procedure add_range_closed(first: guint; last: guint); cdecl; inline;
    procedure add_rectangle(start: guint; width: guint; height: guint; stride: guint); cdecl; inline;
    function contains(value: guint): gboolean; cdecl; inline;
    function copy: PGtkBitset; cdecl; inline;
    procedure difference(other: PGtkBitset); cdecl; inline;
    function equals(other: PGtkBitset): gboolean; cdecl; inline;
    function get_maximum: guint; cdecl; inline;
    function get_minimum: guint; cdecl; inline;
    function get_nth(nth: guint): guint; cdecl; inline;
    function get_size: guint64; cdecl; inline;
    function get_size_in_range(first: guint; last: guint): guint64; cdecl; inline;
    procedure intersect(other: PGtkBitset); cdecl; inline;
    function is_empty: gboolean; cdecl; inline;
    function ref: PGtkBitset; cdecl; inline;
    function remove(value: guint): gboolean; cdecl; inline;
    procedure remove_all; cdecl; inline;
    procedure remove_range(start: guint; n_items: guint); cdecl; inline;
    procedure remove_range_closed(first: guint; last: guint); cdecl; inline;
    procedure remove_rectangle(start: guint; width: guint; height: guint; stride: guint); cdecl; inline;
    procedure shift_left(amount: guint); cdecl; inline;
    procedure shift_right(amount: guint); cdecl; inline;
    procedure splice(position: guint; removed: guint; added: guint); cdecl; inline;
    procedure subtract(other: PGtkBitset); cdecl; inline;
    procedure union(other: PGtkBitset); cdecl; inline;
    procedure unref; cdecl; inline;
  end;

  PPGtkBitsetIter = ^PGtkBitsetIter;
  PGtkBitsetIter = ^TGtkBitsetIter;
  TGtkBitsetIter = object
    private_data: array [0..9] of gpointer;
    function get_value: guint; cdecl; inline;
    function is_valid: gboolean; cdecl; inline;
    function next(value: Pguint): gboolean; cdecl; inline;
    function previous(value: Pguint): gboolean; cdecl; inline;
    function init_at(iter: PGtkBitsetIter; set_: PGtkBitset; target: guint; value: Pguint): gboolean; cdecl; inline; static;
    function init_first(iter: PGtkBitsetIter; set_: PGtkBitset; value: Pguint): gboolean; cdecl; inline; static;
    function init_last(iter: PGtkBitsetIter; set_: PGtkBitset; value: Pguint): gboolean; cdecl; inline; static;
  end;

  PPGtkBookmarkList = ^PGtkBookmarkList;
  PGtkBookmarkList = ^TGtkBookmarkList;
  TGtkBookmarkList = object(TGObject)
    function new(filename: Pgchar; attributes: Pgchar): PGtkBookmarkList; cdecl; inline; static;
    function get_attributes: Pgchar; cdecl; inline;
    function get_filename: Pgchar; cdecl; inline;
    function get_io_priority: gint; cdecl; inline;
    function is_loading: gboolean; cdecl; inline;
    procedure set_attributes(attributes: Pgchar); cdecl; inline;
    procedure set_io_priority(io_priority: gint); cdecl; inline;
    property attributes: Pgchar read get_attributes write set_attributes;
    property filename: Pgchar read get_filename  { property is writeable but setter not declared } ;
    property io_priority: gint read get_io_priority write set_io_priority;
    //property loading: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_loading ;
  end;

  PPGtkBookmarkListClass = ^PGtkBookmarkListClass;
  PGtkBookmarkListClass = ^TGtkBookmarkListClass;
  TGtkBookmarkListClass = object
    parent_class: TGObjectClass;
  end;

  PPGtkBoolFilter = ^PGtkBoolFilter;
  PGtkBoolFilter = ^TGtkBoolFilter;

  PPGtkExpression = ^PGtkExpression;
  PGtkExpression = ^TGtkExpression;
  TGtkBoolFilter = object
    function new(expression: PGtkExpression): PGtkBoolFilter; cdecl; inline; static;
    function get_expression: PGtkExpression; cdecl; inline;
    function get_invert: gboolean; cdecl; inline;
    procedure set_expression(expression: PGtkExpression); cdecl; inline;
    procedure set_invert(invert: gboolean); cdecl; inline;
    property expression: PGtkExpression read get_expression write set_expression;
    property invert: gboolean read get_invert write set_invert;
  end;

  PPGtkExpressionWatch = ^PGtkExpressionWatch;
  PGtkExpressionWatch = ^TGtkExpressionWatch;

  PPGtkExpressionNotify = ^PGtkExpressionNotify;
  PGtkExpressionNotify = ^TGtkExpressionNotify;
  TGtkExpressionNotify = procedure(user_data: gpointer); cdecl;
  TGtkExpression = object
    function bind(target: PGObject; property_: Pgchar; this_: PGObject): PGtkExpressionWatch; cdecl; inline;
    function evaluate(this_: PGObject; value: PGValue): gboolean; cdecl; inline;
    function get_value_type: TGType; cdecl; inline;
    function is_static: gboolean; cdecl; inline;
    function ref: PGtkExpression; cdecl; inline;
    procedure unref; cdecl; inline;
    function watch(this_: PGObject; notify: TGtkExpressionNotify; user_data: gpointer; user_destroy: TGDestroyNotify): PGtkExpressionWatch; cdecl; inline;
  end;

  PPGtkFilterClass = ^PGtkFilterClass;
  PGtkFilterClass = ^TGtkFilterClass;

  PPGtkFilter = ^PGtkFilter;
  PGtkFilter = ^TGtkFilter;

  PPGtkFilterMatch = ^PGtkFilterMatch;
  PGtkFilterMatch = ^TGtkFilterMatch;
  TGtkFilterClass = object
    parent_class: TGObjectClass;
    match: function(self: PGtkFilter; item: PGObject): gboolean; cdecl;
    get_strictness: function(self: PGtkFilter): TGtkFilterMatch; cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
    _gtk_reserved5: procedure; cdecl;
    _gtk_reserved6: procedure; cdecl;
    _gtk_reserved7: procedure; cdecl;
    _gtk_reserved8: procedure; cdecl;
  end;

  PPGtkBoolFilterClass = ^PGtkBoolFilterClass;
  PGtkBoolFilterClass = ^TGtkBoolFilterClass;
  TGtkBoolFilterClass = object
    parent_class: TGtkFilterClass;
  end;

  PPGtkBorder = ^PGtkBorder;
  PGtkBorder = ^TGtkBorder;
  TGtkBorder = object
    left: gint16;
    right: gint16;
    top: gint16;
    bottom: gint16;
    function new: PGtkBorder; cdecl; inline; static;
    function copy: PGtkBorder; cdecl; inline;
    procedure free; cdecl; inline;
  end;

  PPGtkBorderStyle = ^PGtkBorderStyle;
  PGtkBorderStyle = ^TGtkBorderStyle;

  PPGtkOrientable = ^PGtkOrientable;
  PGtkOrientable = ^TGtkOrientable;
  TGtkOrientable = object
    function get_orientation: TGtkOrientation; cdecl; inline;
    procedure set_orientation(orientation: TGtkOrientation); cdecl; inline;
    property orientation: TGtkOrientation read get_orientation write set_orientation;
  end;

  PPGtkBox = ^PGtkBox;
  PGtkBox = ^TGtkBox;
  TGtkBox = object(TGtkWidget)
    function new(orientation: TGtkOrientation; spacing: gint): PGtkBox; cdecl; inline; static;
    procedure append(child: PGtkWidget); cdecl; inline;
    function get_baseline_position: TGtkBaselinePosition; cdecl; inline;
    function get_homogeneous: gboolean; cdecl; inline;
    function get_spacing: gint; cdecl; inline;
    procedure insert_child_after(child: PGtkWidget; sibling: PGtkWidget); cdecl; inline;
    procedure prepend(child: PGtkWidget); cdecl; inline;
    procedure remove(child: PGtkWidget); cdecl; inline;
    procedure reorder_child_after(child: PGtkWidget; sibling: PGtkWidget); cdecl; inline;
    procedure set_baseline_position(position: TGtkBaselinePosition); cdecl; inline;
    procedure set_homogeneous(homogeneous: gboolean); cdecl; inline;
    procedure set_spacing(spacing: gint); cdecl; inline;
    property baseline_position: TGtkBaselinePosition read get_baseline_position write set_baseline_position;
    property homogeneous: gboolean read get_homogeneous write set_homogeneous;
    property spacing: gint read get_spacing write set_spacing;
  end;

  PPGtkBoxClass = ^PGtkBoxClass;
  PGtkBoxClass = ^TGtkBoxClass;
  TGtkBoxClass = object
    parent_class: TGtkWidgetClass;
    padding: array [0..7] of gpointer;
  end;

  PPGtkBoxLayout = ^PGtkBoxLayout;
  PGtkBoxLayout = ^TGtkBoxLayout;
  TGtkBoxLayout = object(TGtkLayoutManager)
    function new(orientation: TGtkOrientation): PGtkBoxLayout; cdecl; inline; static;
    function get_baseline_position: TGtkBaselinePosition; cdecl; inline;
    function get_homogeneous: gboolean; cdecl; inline;
    function get_spacing: guint; cdecl; inline;
    procedure set_baseline_position(position: TGtkBaselinePosition); cdecl; inline;
    procedure set_homogeneous(homogeneous: gboolean); cdecl; inline;
    procedure set_spacing(spacing: guint); cdecl; inline;
    property baseline_position: TGtkBaselinePosition read get_baseline_position write set_baseline_position;
    property homogeneous: gboolean read get_homogeneous write set_homogeneous;
    property spacing: guint read get_spacing write set_spacing;
  end;

  PPGtkBoxLayoutClass = ^PGtkBoxLayoutClass;
  PGtkBoxLayoutClass = ^TGtkBoxLayoutClass;
  TGtkBoxLayoutClass = object
    parent_class: TGtkLayoutManagerClass;
  end;

  PPGtkBuilder = ^PGtkBuilder;
  PGtkBuilder = ^TGtkBuilder;

  PPGtkBuilderClosureFlags = ^PGtkBuilderClosureFlags;
  PGtkBuilderClosureFlags = ^TGtkBuilderClosureFlags;
  TGtkBuilder = object(TGObject)
    function new: PGtkBuilder; cdecl; inline; static;
    function new_from_file(filename: Pgchar): PGtkBuilder; cdecl; inline; static;
    function new_from_resource(resource_path: Pgchar): PGtkBuilder; cdecl; inline; static;
    function new_from_string(string_: Pgchar; length: gssize): PGtkBuilder; cdecl; inline; static;
    function add_from_file(filename: Pgchar; error: PPGError): gboolean; cdecl; inline;
    function add_from_resource(resource_path: Pgchar; error: PPGError): gboolean; cdecl; inline;
    function add_from_string(buffer: Pgchar; length: gssize; error: PPGError): gboolean; cdecl; inline;
    function add_objects_from_file(filename: Pgchar; object_ids: PPgchar; error: PPGError): gboolean; cdecl; inline;
    function add_objects_from_resource(resource_path: Pgchar; object_ids: PPgchar; error: PPGError): gboolean; cdecl; inline;
    function add_objects_from_string(buffer: Pgchar; length: gssize; object_ids: PPgchar; error: PPGError): gboolean; cdecl; inline;
    function create_closure(function_name: Pgchar; flags: TGtkBuilderClosureFlags; object_: PGObject; error: PPGError): PGClosure; cdecl; inline;
    procedure expose_object(name: Pgchar; object_: PGObject); cdecl; inline;
    function extend_with_template(object_: PGObject; template_type: TGType; buffer: Pgchar; length: gssize; error: PPGError): gboolean; cdecl; inline;
    function get_current_object: PGObject; cdecl; inline;
    function get_object(name: Pgchar): PGObject; cdecl; inline;
    function get_objects: PGSList; cdecl; inline;
    function get_scope: PGtkBuilderScope; cdecl; inline;
    function get_translation_domain: Pgchar; cdecl; inline;
    function get_type_from_name(type_name: Pgchar): TGType; cdecl; inline;
    procedure set_current_object(current_object: PGObject); cdecl; inline;
    procedure set_scope(scope: PGtkBuilderScope); cdecl; inline;
    procedure set_translation_domain(domain: Pgchar); cdecl; inline;
    function value_from_string(pspec: PGParamSpec; string_: Pgchar; value: PGValue; error: PPGError): gboolean; cdecl; inline;
    function value_from_string_type(type_: TGType; string_: Pgchar; value: PGValue; error: PPGError): gboolean; cdecl; inline;
    property current_object: PGObject read get_current_object write set_current_object;
    property scope: PGtkBuilderScope read get_scope write set_scope;
    property translation_domain: Pgchar read get_translation_domain write set_translation_domain;
  end;

  PPGtkBuildableParser = ^PGtkBuildableParser;
  PGtkBuildableParser = ^TGtkBuildableParser;

  PPGtkBuildableParseContext = ^PGtkBuildableParseContext;
  PGtkBuildableParseContext = ^TGtkBuildableParseContext;

  TGtkBuildableParser = record
    start_element: procedure(context: PGtkBuildableParseContext; element_name: Pgchar; attribute_names: PPgchar; attribute_values: PPgchar; user_data: gpointer; error: PPGError); cdecl;
    end_element: procedure(context: PGtkBuildableParseContext; element_name: Pgchar; user_data: gpointer; error: PPGError); cdecl;
    text: procedure(context: PGtkBuildableParseContext; text: Pgchar; text_len: gsize; user_data: gpointer; error: PPGError); cdecl;
    error: procedure(context: PGtkBuildableParseContext; error: PGError; user_data: gpointer); cdecl;
    padding: array [0..3] of gpointer;
  end;



  PPGtkBuildableIface = ^PGtkBuildableIface;
  PGtkBuildableIface = ^TGtkBuildableIface;
  TGtkBuildableIface = object
    g_iface: TGTypeInterface;
    set_id: procedure(buildable: PGtkBuildable; id: Pgchar); cdecl;
    get_id: function(buildable: PGtkBuildable): Pgchar; cdecl;
    add_child: procedure(buildable: PGtkBuildable; builder: PGtkBuilder; child: PGObject; type_: Pgchar); cdecl;
    set_buildable_property: procedure(buildable: PGtkBuildable; builder: PGtkBuilder; name: Pgchar; value: PGValue); cdecl;
    construct_child: function(buildable: PGtkBuildable; builder: PGtkBuilder; name: Pgchar): PGObject; cdecl;
    custom_tag_start: function(buildable: PGtkBuildable; builder: PGtkBuilder; child: PGObject; tagname: Pgchar; parser: PGtkBuildableParser; data: Pgpointer): gboolean; cdecl;
    custom_tag_end: procedure(buildable: PGtkBuildable; builder: PGtkBuilder; child: PGObject; tagname: Pgchar; data: gpointer); cdecl;
    custom_finished: procedure(buildable: PGtkBuildable; builder: PGtkBuilder; child: PGObject; tagname: Pgchar; data: gpointer); cdecl;
    parser_finished: procedure(buildable: PGtkBuildable; builder: PGtkBuilder); cdecl;
    get_internal_child: function(buildable: PGtkBuildable; builder: PGtkBuilder; childname: Pgchar): PGObject; cdecl;
  end;
  TGtkBuildableParseContext = object
    function get_element: Pgchar; cdecl; inline;
    function get_element_stack: Pgchar; cdecl; inline;
    procedure get_position(line_number: Pgint; char_number: Pgint); cdecl; inline;
    function pop: gpointer; cdecl; inline;
    procedure push(parser: PGtkBuildableParser; user_data: gpointer); cdecl; inline;
  end;
  TGtkBuilderScope = object
  end;

  PPGtkBuilderCScope = ^PGtkBuilderCScope;
  PGtkBuilderCScope = ^TGtkBuilderCScope;
  TGtkBuilderCScope = object(TGObject)
    function new: PGtkBuilderCScope; cdecl; inline; static;
    procedure add_callback_symbol(callback_name: Pgchar; callback_symbol: TGCallback); cdecl; inline;
    //procedure add_callback_symbols(first_callback_name: Pgchar; first_callback_symbol: TGCallback; args: array of const); cdecl; inline;
    function lookup_callback_symbol(callback_name: Pgchar): TGCallback; cdecl; inline;
  end;

  PPGtkBuilderCScopeClass = ^PGtkBuilderCScopeClass;
  PGtkBuilderCScopeClass = ^TGtkBuilderCScopeClass;
  TGtkBuilderCScopeClass = object
    parent_class: TGObjectClass;
  end;

  PPGtkBuilderClass = ^PGtkBuilderClass;
  PGtkBuilderClass = ^TGtkBuilderClass;
  TGtkBuilderClass = object
  end;

  PPGtkBuilderError = ^PGtkBuilderError;
  PGtkBuilderError = ^TGtkBuilderError;

  PPGtkListItemFactory = ^PGtkListItemFactory;
  PGtkListItemFactory = ^TGtkListItemFactory;
  TGtkListItemFactory = object(TGObject)
  end;

  PPGtkBuilderListItemFactory = ^PGtkBuilderListItemFactory;
  PGtkBuilderListItemFactory = ^TGtkBuilderListItemFactory;
  TGtkBuilderListItemFactory = object(TGtkListItemFactory)
    function new_from_bytes(scope: PGtkBuilderScope; bytes: PGBytes): PGtkBuilderListItemFactory; cdecl; inline; static;
    function new_from_resource(scope: PGtkBuilderScope; resource_path: Pgchar): PGtkBuilderListItemFactory; cdecl; inline; static;
    function get_bytes: PGBytes; cdecl; inline;
    function get_resource: Pgchar; cdecl; inline;
    function get_scope: PGtkBuilderScope; cdecl; inline;
    property bytes: PGBytes read get_bytes  { property is writeable but setter not declared } ;
    property resource: Pgchar read get_resource  { property is writeable but setter not declared } ;
    property scope: PGtkBuilderScope read get_scope  { property is writeable but setter not declared } ;
  end;

  PPGtkBuilderListItemFactoryClass = ^PGtkBuilderListItemFactoryClass;
  PGtkBuilderListItemFactoryClass = ^TGtkBuilderListItemFactoryClass;
  TGtkBuilderListItemFactoryClass = object
  end;

  PPGtkBuilderScopeInterface = ^PGtkBuilderScopeInterface;
  PGtkBuilderScopeInterface = ^TGtkBuilderScopeInterface;
  TGtkBuilderScopeInterface = object
    g_iface: TGTypeInterface;
    get_type_from_name: function(self: PGtkBuilderScope; builder: PGtkBuilder; type_name: Pgchar): TGType; cdecl;
    get_type_from_function: function(self: PGtkBuilderScope; builder: PGtkBuilder; function_name: Pgchar): TGType; cdecl;
    create_closure: function(self: PGtkBuilderScope; builder: PGtkBuilder; function_name: Pgchar; flags: TGtkBuilderClosureFlags; object_: PGObject; error: PPGError): PGClosure; cdecl;
  end;

  PPGtkButton = ^PGtkButton;
  PGtkButton = ^TGtkButton;
  TGtkButton = object(TGtkWidget)
    function new: PGtkButton; cdecl; inline; static;
    function new_from_icon_name(icon_name: Pgchar): PGtkButton; cdecl; inline; static;
    function new_with_label(label_: Pgchar): PGtkButton; cdecl; inline; static;
    function new_with_mnemonic(label_: Pgchar): PGtkButton; cdecl; inline; static;
    function get_child: PGtkWidget; cdecl; inline;
    function get_has_frame: gboolean; cdecl; inline;
    function get_icon_name: Pgchar; cdecl; inline;
    function get_label: Pgchar; cdecl; inline;
    function get_use_underline: gboolean; cdecl; inline;
    procedure set_child(child: PGtkWidget); cdecl; inline;
    procedure set_has_frame(has_frame: gboolean); cdecl; inline;
    procedure set_icon_name(icon_name: Pgchar); cdecl; inline;
    procedure set_label(label_: Pgchar); cdecl; inline;
    procedure set_use_underline(use_underline: gboolean); cdecl; inline;
    property child: PGtkWidget read get_child write set_child;
    property has_frame: gboolean read get_has_frame write set_has_frame;
    property icon_name: Pgchar read get_icon_name write set_icon_name;
    property label_: Pgchar read get_label write set_label;
    property use_underline: gboolean read get_use_underline write set_use_underline;
  end;

  PPGtkButtonClass = ^PGtkButtonClass;
  PGtkButtonClass = ^TGtkButtonClass;
  TGtkButtonClass = object
    parent_class: TGtkWidgetClass;
    clicked: procedure(button: PGtkButton); cdecl;
    activate: procedure(button: PGtkButton); cdecl;
    padding: array [0..7] of gpointer;
  end;

  PPGtkButtonPrivate = ^PGtkButtonPrivate;
  PGtkButtonPrivate = ^TGtkButtonPrivate;

  TGtkButtonPrivate = record
  end;



  PPGtkButtonsType = ^PGtkButtonsType;
  PGtkButtonsType = ^TGtkButtonsType;

  PPGtkCClosureExpression = ^PGtkCClosureExpression;
  PGtkCClosureExpression = ^TGtkCClosureExpression;
  TGtkCClosureExpression = object(TGtkExpression)
    function new(value_type: TGType; marshal: TGClosureMarshal; n_params: guint; params: PPGtkExpression; callback_func: TGCallback; user_data: gpointer; user_destroy: TGClosureNotify): PGtkCClosureExpression; cdecl; inline; static;
  end;

  PPGtkCalendar = ^PGtkCalendar;
  PGtkCalendar = ^TGtkCalendar;
  TGtkCalendar = object(TGtkWidget)
    function new: PGtkCalendar; cdecl; inline; static;
    procedure clear_marks; cdecl; inline;
    function get_date: PGDateTime; cdecl; inline;
    function get_day_is_marked(day: guint): gboolean; cdecl; inline;
    function get_show_day_names: gboolean; cdecl; inline;
    function get_show_heading: gboolean; cdecl; inline;
    function get_show_week_numbers: gboolean; cdecl; inline;
    procedure mark_day(day: guint); cdecl; inline;
    procedure select_day(date: PGDateTime); cdecl; inline;
    procedure set_show_day_names(value: gboolean); cdecl; inline;
    procedure set_show_heading(value: gboolean); cdecl; inline;
    procedure set_show_week_numbers(value: gboolean); cdecl; inline;
    procedure unmark_day(day: guint); cdecl; inline;
    //property day: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_day  { property is writeable but setter not declared } ;
    //property month: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_month  { property is writeable but setter not declared } ;
    property show_day_names: gboolean read get_show_day_names write set_show_day_names;
    property show_heading: gboolean read get_show_heading write set_show_heading;
    property show_week_numbers: gboolean read get_show_week_numbers write set_show_week_numbers;
    //property year: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_year  { property is writeable but setter not declared } ;
  end;

  PPGtkCallbackAction = ^PGtkCallbackAction;
  PGtkCallbackAction = ^TGtkCallbackAction;
  TGtkCallbackAction = object
    function new(callback: TGtkShortcutFunc; data: gpointer; destroy_: TGDestroyNotify): PGtkCallbackAction; cdecl; inline; static;
  end;

  PPGtkCallbackActionClass = ^PGtkCallbackActionClass;
  PGtkCallbackActionClass = ^TGtkCallbackActionClass;
  TGtkCallbackActionClass = object
  end;

  PPGtkCellRenderer = ^PGtkCellRenderer;
  PGtkCellRenderer = ^TGtkCellRenderer;

  PPGtkCellRendererState = ^PGtkCellRendererState;
  PGtkCellRendererState = ^TGtkCellRendererState;

  PPGtkCellEditable = ^PGtkCellEditable;
  PGtkCellEditable = ^TGtkCellEditable;

  PPGtkCellRendererPrivate = ^PGtkCellRendererPrivate;
  PGtkCellRendererPrivate = ^TGtkCellRendererPrivate;
  TGtkCellRenderer = object(TGInitiallyUnowned)
    priv: PGtkCellRendererPrivate;
    function activate(event: PGdkEvent; widget: PGtkWidget; path: Pgchar; background_area: PGdkRectangle; cell_area: PGdkRectangle; flags: TGtkCellRendererState): gboolean; cdecl; inline;
    procedure get_aligned_area(widget: PGtkWidget; flags: TGtkCellRendererState; cell_area: PGdkRectangle; aligned_area: PGdkRectangle); cdecl; inline;
    procedure get_alignment(xalign: Pgfloat; yalign: Pgfloat); cdecl; inline;
    procedure get_fixed_size(width: Pgint; height: Pgint); cdecl; inline;
    function get_is_expanded: gboolean; cdecl; inline;
    function get_is_expander: gboolean; cdecl; inline;
    procedure get_padding(xpad: Pgint; ypad: Pgint); cdecl; inline;
    procedure get_preferred_height(widget: PGtkWidget; minimum_size: Pgint; natural_size: Pgint); cdecl; inline;
    procedure get_preferred_height_for_width(widget: PGtkWidget; width: gint; minimum_height: Pgint; natural_height: Pgint); cdecl; inline;
    procedure get_preferred_size(widget: PGtkWidget; minimum_size: PGtkRequisition; natural_size: PGtkRequisition); cdecl; inline;
    procedure get_preferred_width(widget: PGtkWidget; minimum_size: Pgint; natural_size: Pgint); cdecl; inline;
    procedure get_preferred_width_for_height(widget: PGtkWidget; height: gint; minimum_width: Pgint; natural_width: Pgint); cdecl; inline;
    function get_request_mode: TGtkSizeRequestMode; cdecl; inline;
    function get_sensitive: gboolean; cdecl; inline;
    function get_state(widget: PGtkWidget; cell_state: TGtkCellRendererState): TGtkStateFlags; cdecl; inline;
    function get_visible: gboolean; cdecl; inline;
    function is_activatable: gboolean; cdecl; inline;
    procedure set_alignment(xalign: gfloat; yalign: gfloat); cdecl; inline;
    procedure set_fixed_size(width: gint; height: gint); cdecl; inline;
    procedure set_is_expanded(is_expanded: gboolean); cdecl; inline;
    procedure set_is_expander(is_expander: gboolean); cdecl; inline;
    procedure set_padding(xpad: gint; ypad: gint); cdecl; inline;
    procedure set_sensitive(sensitive: gboolean); cdecl; inline;
    procedure set_visible(visible: gboolean); cdecl; inline;
    procedure snapshot(snapshot: PGtkSnapshot; widget: PGtkWidget; background_area: PGdkRectangle; cell_area: PGdkRectangle; flags: TGtkCellRendererState); cdecl; inline;
    function start_editing(event: PGdkEvent; widget: PGtkWidget; path: Pgchar; background_area: PGdkRectangle; cell_area: PGdkRectangle; flags: TGtkCellRendererState): PGtkCellEditable; cdecl; inline;
    procedure stop_editing(canceled: gboolean); cdecl; inline;
    //property cell_background: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_cell_background  { property is writeable but setter not declared } ;
    //property cell_background_rgba: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_cell_background_rgba  { property is writeable but setter not declared } ;
    //property cell_background_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_cell_background_set  { property is writeable but setter not declared } ;
    //property editing: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_editing ;
    //property height: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_height  { property is writeable but setter not declared } ;
    property is_expanded: gboolean read get_is_expanded write set_is_expanded;
    property is_expander: gboolean read get_is_expander write set_is_expander;
    //property mode: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_mode  { property is writeable but setter not declared } ;
    property sensitive: gboolean read get_sensitive write set_sensitive;
    property visible: gboolean read get_visible write set_visible;
    //property width: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_width  { property is writeable but setter not declared } ;
    //property xalign: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_xalign  { property is writeable but setter not declared } ;
    //property xpad: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_xpad  { property is writeable but setter not declared } ;
    //property yalign: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_yalign  { property is writeable but setter not declared } ;
    //property ypad: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_ypad  { property is writeable but setter not declared } ;
  end;
  TGtkCellAllocCallback = function(renderer: PGtkCellRenderer; cell_area: PGdkRectangle; cell_background: PGdkRectangle; data: gpointer): gboolean; cdecl;

  PPGtkCellLayout = ^PGtkCellLayout;
  PGtkCellLayout = ^TGtkCellLayout;

  PPGtkCellArea = ^PGtkCellArea;
  PGtkCellArea = ^TGtkCellArea;

  PPGtkCellLayoutDataFunc = ^PGtkCellLayoutDataFunc;
  PGtkCellLayoutDataFunc = ^TGtkCellLayoutDataFunc;

  PPGtkTreeModel = ^PGtkTreeModel;
  PGtkTreeModel = ^TGtkTreeModel;

  PPGtkTreeIter = ^PGtkTreeIter;
  PGtkTreeIter = ^TGtkTreeIter;
  TGtkCellLayoutDataFunc = procedure(cell_layout: PGtkCellLayout; cell: PGtkCellRenderer; tree_model: PGtkTreeModel; iter: PGtkTreeIter; data: gpointer); cdecl;
  TGtkCellLayout = object
    procedure add_attribute(cell: PGtkCellRenderer; attribute: Pgchar; column: gint); cdecl; inline;
    procedure clear; cdecl; inline;
    procedure clear_attributes(cell: PGtkCellRenderer); cdecl; inline;
    function get_area: PGtkCellArea; cdecl; inline;
    function get_cells: PGList; cdecl; inline;
    procedure pack_end(cell: PGtkCellRenderer; expand: gboolean); cdecl; inline;
    procedure pack_start(cell: PGtkCellRenderer; expand: gboolean); cdecl; inline;
    procedure reorder(cell: PGtkCellRenderer; position: gint); cdecl; inline;
    //procedure set_attributes(cell: PGtkCellRenderer; args: array of const); cdecl; inline;
    procedure set_cell_data_func(cell: PGtkCellRenderer; func: TGtkCellLayoutDataFunc; func_data: gpointer; destroy_: TGDestroyNotify); cdecl; inline;
  end;

  PPGtkCellAreaContext = ^PGtkCellAreaContext;
  PGtkCellAreaContext = ^TGtkCellAreaContext;

  PPGtkCellCallback = ^PGtkCellCallback;
  PGtkCellCallback = ^TGtkCellCallback;
  TGtkCellCallback = function(renderer: PGtkCellRenderer; data: gpointer): gboolean; cdecl;

  PPGtkCellAllocCallback = ^PGtkCellAllocCallback;
  PGtkCellAllocCallback = ^TGtkCellAllocCallback;
  TGtkCellArea = object(TGInitiallyUnowned)
    function activate(context: PGtkCellAreaContext; widget: PGtkWidget; cell_area: PGdkRectangle; flags: TGtkCellRendererState; edit_only: gboolean): gboolean; cdecl; inline;
    function activate_cell(widget: PGtkWidget; renderer: PGtkCellRenderer; event: PGdkEvent; cell_area: PGdkRectangle; flags: TGtkCellRendererState): gboolean; cdecl; inline;
    procedure add(renderer: PGtkCellRenderer); cdecl; inline;
    procedure add_focus_sibling(renderer: PGtkCellRenderer; sibling: PGtkCellRenderer); cdecl; inline;
    //procedure add_with_properties(renderer: PGtkCellRenderer; first_prop_name: Pgchar; args: array of const); cdecl; inline;
    procedure apply_attributes(tree_model: PGtkTreeModel; iter: PGtkTreeIter; is_expander: gboolean; is_expanded: gboolean); cdecl; inline;
    procedure attribute_connect(renderer: PGtkCellRenderer; attribute: Pgchar; column: gint); cdecl; inline;
    procedure attribute_disconnect(renderer: PGtkCellRenderer; attribute: Pgchar); cdecl; inline;
    function attribute_get_column(renderer: PGtkCellRenderer; attribute: Pgchar): gint; cdecl; inline;
    //procedure cell_get(renderer: PGtkCellRenderer; first_prop_name: Pgchar; args: array of const); cdecl; inline;
    procedure cell_get_property(renderer: PGtkCellRenderer; property_name: Pgchar; value: PGValue); cdecl; inline;
    //procedure cell_get_valist(renderer: PGtkCellRenderer; first_property_name: Pgchar; var_args: Tva_list); cdecl; inline;
    //procedure cell_set(renderer: PGtkCellRenderer; first_prop_name: Pgchar; args: array of const); cdecl; inline;
    procedure cell_set_property(renderer: PGtkCellRenderer; property_name: Pgchar; value: PGValue); cdecl; inline;
    //procedure cell_set_valist(renderer: PGtkCellRenderer; first_property_name: Pgchar; var_args: Tva_list); cdecl; inline;
    function copy_context(context: PGtkCellAreaContext): PGtkCellAreaContext; cdecl; inline;
    function create_context: PGtkCellAreaContext; cdecl; inline;
    function event(context: PGtkCellAreaContext; widget: PGtkWidget; event: PGdkEvent; cell_area: PGdkRectangle; flags: TGtkCellRendererState): gint; cdecl; inline;
    function focus(direction: TGtkDirectionType): gboolean; cdecl; inline;
    procedure foreach(callback: TGtkCellCallback; callback_data: gpointer); cdecl; inline;
    procedure foreach_alloc(context: PGtkCellAreaContext; widget: PGtkWidget; cell_area: PGdkRectangle; background_area: PGdkRectangle; callback: TGtkCellAllocCallback; callback_data: gpointer); cdecl; inline;
    procedure get_cell_allocation(context: PGtkCellAreaContext; widget: PGtkWidget; renderer: PGtkCellRenderer; cell_area: PGdkRectangle; allocation: PGdkRectangle); cdecl; inline;
    function get_cell_at_position(context: PGtkCellAreaContext; widget: PGtkWidget; cell_area: PGdkRectangle; x: gint; y: gint; alloc_area: PGdkRectangle): PGtkCellRenderer; cdecl; inline;
    function get_current_path_string: Pgchar; cdecl; inline;
    function get_edit_widget: PGtkCellEditable; cdecl; inline;
    function get_edited_cell: PGtkCellRenderer; cdecl; inline;
    function get_focus_cell: PGtkCellRenderer; cdecl; inline;
    function get_focus_from_sibling(renderer: PGtkCellRenderer): PGtkCellRenderer; cdecl; inline;
    function get_focus_siblings(renderer: PGtkCellRenderer): PGList; cdecl; inline;
    procedure get_preferred_height(context: PGtkCellAreaContext; widget: PGtkWidget; minimum_height: Pgint; natural_height: Pgint); cdecl; inline;
    procedure get_preferred_height_for_width(context: PGtkCellAreaContext; widget: PGtkWidget; width: gint; minimum_height: Pgint; natural_height: Pgint); cdecl; inline;
    procedure get_preferred_width(context: PGtkCellAreaContext; widget: PGtkWidget; minimum_width: Pgint; natural_width: Pgint); cdecl; inline;
    procedure get_preferred_width_for_height(context: PGtkCellAreaContext; widget: PGtkWidget; height: gint; minimum_width: Pgint; natural_width: Pgint); cdecl; inline;
    function get_request_mode: TGtkSizeRequestMode; cdecl; inline;
    function has_renderer(renderer: PGtkCellRenderer): gboolean; cdecl; inline;
    procedure inner_cell_area(widget: PGtkWidget; cell_area: PGdkRectangle; inner_area: PGdkRectangle); cdecl; inline;
    function is_activatable: gboolean; cdecl; inline;
    function is_focus_sibling(renderer: PGtkCellRenderer; sibling: PGtkCellRenderer): gboolean; cdecl; inline;
    procedure remove(renderer: PGtkCellRenderer); cdecl; inline;
    procedure remove_focus_sibling(renderer: PGtkCellRenderer; sibling: PGtkCellRenderer); cdecl; inline;
    procedure request_renderer(renderer: PGtkCellRenderer; orientation: TGtkOrientation; widget: PGtkWidget; for_size: gint; minimum_size: Pgint; natural_size: Pgint); cdecl; inline;
    procedure set_focus_cell(renderer: PGtkCellRenderer); cdecl; inline;
    procedure snapshot(context: PGtkCellAreaContext; widget: PGtkWidget; snapshot: PGtkSnapshot; background_area: PGdkRectangle; cell_area: PGdkRectangle; flags: TGtkCellRendererState; paint_focus: gboolean); cdecl; inline;
    procedure stop_editing(canceled: gboolean); cdecl; inline;
    property edit_widget: PGtkCellEditable read get_edit_widget ;
    property edited_cell: PGtkCellRenderer read get_edited_cell ;
    property focus_cell: PGtkCellRenderer read get_focus_cell write set_focus_cell;
  end;
  TGtkCellAreaContext = object(TGObject)
    procedure allocate(width: gint; height: gint); cdecl; inline;
    procedure get_allocation(width: Pgint; height: Pgint); cdecl; inline;
    function get_area: PGtkCellArea; cdecl; inline;
    procedure get_preferred_height(minimum_height: Pgint; natural_height: Pgint); cdecl; inline;
    procedure get_preferred_height_for_width(width: gint; minimum_height: Pgint; natural_height: Pgint); cdecl; inline;
    procedure get_preferred_width(minimum_width: Pgint; natural_width: Pgint); cdecl; inline;
    procedure get_preferred_width_for_height(height: gint; minimum_width: Pgint; natural_width: Pgint); cdecl; inline;
    procedure push_preferred_height(minimum_height: gint; natural_height: gint); cdecl; inline;
    procedure push_preferred_width(minimum_width: gint; natural_width: gint); cdecl; inline;
    procedure reset; cdecl; inline;
    property area: PGtkCellArea read get_area  { property is writeable but setter not declared } ;
    //property minimum_height: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_minimum_height ;
    //property minimum_width: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_minimum_width ;
    //property natural_height: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_natural_height ;
    //property natural_width: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_natural_width ;
  end;

  PPGtkTreePath = ^PGtkTreePath;
  PGtkTreePath = ^TGtkTreePath;

  PPGtkTreeModelForeachFunc = ^PGtkTreeModelForeachFunc;
  PGtkTreeModelForeachFunc = ^TGtkTreeModelForeachFunc;
  TGtkTreeModelForeachFunc = function(model: PGtkTreeModel; path: PGtkTreePath; iter: PGtkTreeIter; data: gpointer): gboolean; cdecl;

  PPGtkTreeModelFlags = ^PGtkTreeModelFlags;
  PGtkTreeModelFlags = ^TGtkTreeModelFlags;
  TGtkTreePath = object
    function new: PGtkTreePath; cdecl; inline; static;
    function new_first: PGtkTreePath; cdecl; inline; static;
    //function new_from_indices(first_index: gint; args: array of const): PGtkTreePath; cdecl; inline; static;
    function new_from_indicesv(indices: Pgint; length: gsize): PGtkTreePath; cdecl; inline; static;
    function new_from_string(path: Pgchar): PGtkTreePath; cdecl; inline; static;
    procedure append_index(index_: gint); cdecl; inline;
    function compare(b: PGtkTreePath): gint; cdecl; inline;
    function copy: PGtkTreePath; cdecl; inline;
    procedure down; cdecl; inline;
    procedure free; cdecl; inline;
    function get_depth: gint; cdecl; inline;
    function get_indices: Pgint; cdecl; inline;
    function get_indices_with_depth(depth: Pgint): Pgint; cdecl; inline;
    function is_ancestor(descendant: PGtkTreePath): gboolean; cdecl; inline;
    function is_descendant(ancestor: PGtkTreePath): gboolean; cdecl; inline;
    procedure next; cdecl; inline;
    procedure prepend_index(index_: gint); cdecl; inline;
    function prev: gboolean; cdecl; inline;
    function to_string: Pgchar; cdecl; inline;
    function up: gboolean; cdecl; inline;
  end;
  TGtkTreeIter = object
    stamp: gint;
    user_data: gpointer;
    user_data2: gpointer;
    user_data3: gpointer;
    function copy: PGtkTreeIter; cdecl; inline;
    procedure free; cdecl; inline;
  end;
  TGtkTreeModel = object
    row_changed1: procedure(path: TGtkTreePath; iter: TGtkTreeIter); cdecl;
    row_deleted1: procedure(path: TGtkTreePath); cdecl;
    row_has_child_toggled1: procedure(path: TGtkTreePath; iter: TGtkTreeIter); cdecl;
    row_inserted1: procedure(path: TGtkTreePath; iter: TGtkTreeIter); cdecl;
    rows_reordered1: procedure(path: TGtkTreePath; iter: TGtkTreeIter; new_order: gpointer); cdecl;
    function filter_new(root: PGtkTreePath): PGtkTreeModel; cdecl; inline;
    procedure foreach(func: TGtkTreeModelForeachFunc; user_data: gpointer); cdecl; inline;
    //procedure get(iter: PGtkTreeIter; args: array of const); cdecl; inline;
    function get_column_type(index_: gint): TGType; cdecl; inline;
    function get_flags: TGtkTreeModelFlags; cdecl; inline;
    function get_iter(iter: PGtkTreeIter; path: PGtkTreePath): gboolean; cdecl; inline;
    function get_iter_first(iter: PGtkTreeIter): gboolean; cdecl; inline;
    function get_iter_from_string(iter: PGtkTreeIter; path_string: Pgchar): gboolean; cdecl; inline;
    function get_n_columns: gint; cdecl; inline;
    function get_path(iter: PGtkTreeIter): PGtkTreePath; cdecl; inline;
    function get_string_from_iter(iter: PGtkTreeIter): Pgchar; cdecl; inline;
    //procedure get_valist(iter: PGtkTreeIter; var_args: Tva_list); cdecl; inline;
    procedure get_value(iter: PGtkTreeIter; column: gint; value: PGValue); cdecl; inline;
    function iter_children(iter: PGtkTreeIter; parent: PGtkTreeIter): gboolean; cdecl; inline;
    function iter_has_child(iter: PGtkTreeIter): gboolean; cdecl; inline;
    function iter_n_children(iter: PGtkTreeIter): gint; cdecl; inline;
    function iter_next(iter: PGtkTreeIter): gboolean; cdecl; inline;
    function iter_nth_child(iter: PGtkTreeIter; parent: PGtkTreeIter; n: gint): gboolean; cdecl; inline;
    function iter_parent(iter: PGtkTreeIter; child: PGtkTreeIter): gboolean; cdecl; inline;
    function iter_previous(iter: PGtkTreeIter): gboolean; cdecl; inline;
    procedure ref_node(iter: PGtkTreeIter); cdecl; inline;
    procedure row_changed(path: PGtkTreePath; iter: PGtkTreeIter); cdecl; inline;
    procedure row_deleted(path: PGtkTreePath); cdecl; inline;
    procedure row_has_child_toggled(path: PGtkTreePath; iter: PGtkTreeIter); cdecl; inline;
    procedure row_inserted(path: PGtkTreePath; iter: PGtkTreeIter); cdecl; inline;
    procedure rows_reordered(path: PGtkTreePath; iter: PGtkTreeIter; new_order: Pgint); cdecl; inline;
    procedure rows_reordered_with_length(path: PGtkTreePath; iter: PGtkTreeIter; new_order: Pgint; length: gint); cdecl; inline;
    procedure unref_node(iter: PGtkTreeIter); cdecl; inline;
  end;
  TGtkSnapshot = object(TGdkSnapshot)
    function new: PGtkSnapshot; cdecl; inline; static;
    procedure append_border(outline: PGskRoundedRect; border_width: Pgfloat; border_color: PGdkRGBA); cdecl; inline;
    function append_cairo(bounds: Pgraphene_rect_t): Pcairo_t; cdecl; inline;
    procedure append_color(color: PGdkRGBA; bounds: Pgraphene_rect_t); cdecl; inline;
    procedure append_conic_gradient(bounds: Pgraphene_rect_t; center: Pgraphene_point_t; rotation: gfloat; stops: PGskColorStop; n_stops: gsize); cdecl; inline;
    procedure append_inset_shadow(outline: PGskRoundedRect; color: PGdkRGBA; dx: gfloat; dy: gfloat; spread: gfloat; blur_radius: gfloat); cdecl; inline;
    procedure append_layout(layout: PPangoLayout; color: PGdkRGBA); cdecl; inline;
    procedure append_linear_gradient(bounds: Pgraphene_rect_t; start_point: Pgraphene_point_t; end_point: Pgraphene_point_t; stops: PGskColorStop; n_stops: gsize); cdecl; inline;
    procedure append_node(node: PGskRenderNode); cdecl; inline;
    procedure append_outset_shadow(outline: PGskRoundedRect; color: PGdkRGBA; dx: gfloat; dy: gfloat; spread: gfloat; blur_radius: gfloat); cdecl; inline;
    procedure append_radial_gradient(bounds: Pgraphene_rect_t; center: Pgraphene_point_t; hradius: gfloat; vradius: gfloat; start: gfloat; end_: gfloat; stops: PGskColorStop; n_stops: gsize); cdecl; inline;
    procedure append_repeating_linear_gradient(bounds: Pgraphene_rect_t; start_point: Pgraphene_point_t; end_point: Pgraphene_point_t; stops: PGskColorStop; n_stops: gsize); cdecl; inline;
    procedure append_repeating_radial_gradient(bounds: Pgraphene_rect_t; center: Pgraphene_point_t; hradius: gfloat; vradius: gfloat; start: gfloat; end_: gfloat; stops: PGskColorStop; n_stops: gsize); cdecl; inline;
    procedure append_texture(texture: PGdkTexture; bounds: Pgraphene_rect_t); cdecl; inline;
    function free_to_node: PGskRenderNode; cdecl; inline;
    function free_to_paintable(size: Pgraphene_size_t): PGdkPaintable; cdecl; inline;
    procedure gl_shader_pop_texture; cdecl; inline;
    procedure perspective(depth: gfloat); cdecl; inline;
    procedure pop; cdecl; inline;
    procedure push_blend(blend_mode: TGskBlendMode); cdecl; inline;
    procedure push_blur(radius: gdouble); cdecl; inline;
    procedure push_clip(bounds: Pgraphene_rect_t); cdecl; inline;
    procedure push_color_matrix(color_matrix: Pgraphene_matrix_t; color_offset: Pgraphene_vec4_t); cdecl; inline;
    procedure push_cross_fade(progress: gdouble); cdecl; inline;
    //procedure push_debug(message: Pgchar; args: array of const); cdecl; inline;
    procedure push_gl_shader(shader: PGskGLShader; bounds: Pgraphene_rect_t; take_args: PGBytes); cdecl; inline;
    procedure push_opacity(opacity: gdouble); cdecl; inline;
    procedure push_repeat(bounds: Pgraphene_rect_t; child_bounds: Pgraphene_rect_t); cdecl; inline;
    procedure push_rounded_clip(bounds: PGskRoundedRect); cdecl; inline;
    procedure push_shadow(shadow: PGskShadow; n_shadows: gsize); cdecl; inline;
    procedure render_background(context: PGtkStyleContext; x: gdouble; y: gdouble; width: gdouble; height: gdouble); cdecl; inline;
    procedure render_focus(context: PGtkStyleContext; x: gdouble; y: gdouble; width: gdouble; height: gdouble); cdecl; inline;
    procedure render_frame(context: PGtkStyleContext; x: gdouble; y: gdouble; width: gdouble; height: gdouble); cdecl; inline;
    procedure render_insertion_cursor(context: PGtkStyleContext; x: gdouble; y: gdouble; layout: PPangoLayout; index: gint; direction: TPangoDirection); cdecl; inline;
    procedure render_layout(context: PGtkStyleContext; x: gdouble; y: gdouble; layout: PPangoLayout); cdecl; inline;
    procedure restore; cdecl; inline;
    procedure rotate(angle: gfloat); cdecl; inline;
    procedure rotate_3d(angle: gfloat; axis: Pgraphene_vec3_t); cdecl; inline;
    procedure save; cdecl; inline;
    procedure scale(factor_x: gfloat; factor_y: gfloat); cdecl; inline;
    procedure scale_3d(factor_x: gfloat; factor_y: gfloat; factor_z: gfloat); cdecl; inline;
    function to_node: PGskRenderNode; cdecl; inline;
    function to_paintable(size: Pgraphene_size_t): PGdkPaintable; cdecl; inline;
    procedure transform(transform: PGskTransform); cdecl; inline;
    procedure transform_matrix(matrix: Pgraphene_matrix_t); cdecl; inline;
    procedure translate(point: Pgraphene_point_t); cdecl; inline;
    procedure translate_3d(point: Pgraphene_point3d_t); cdecl; inline;
  end;
  TGtkCellEditable = object
    editing_done1: procedure; cdecl;
    remove_widget1: procedure; cdecl;
    procedure editing_done; cdecl; inline;
    procedure remove_widget; cdecl; inline;
    procedure start_editing(event: PGdkEvent); cdecl; inline;
    //property editing_canceled: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_editing_canceled  { property is writeable but setter not declared } ;
  end;

  PPGtkCellAreaBox = ^PGtkCellAreaBox;
  PGtkCellAreaBox = ^TGtkCellAreaBox;
  TGtkCellAreaBox = object(TGtkCellArea)
    function new: PGtkCellAreaBox; cdecl; inline; static;
    function get_spacing: gint; cdecl; inline;
    procedure pack_end(renderer: PGtkCellRenderer; expand: gboolean; align: gboolean; fixed: gboolean); cdecl; inline;
    procedure pack_start(renderer: PGtkCellRenderer; expand: gboolean; align: gboolean; fixed: gboolean); cdecl; inline;
    procedure set_spacing(spacing: gint); cdecl; inline;
    property spacing: gint read get_spacing write set_spacing;
  end;

  PPGtkCellAreaClass = ^PGtkCellAreaClass;
  PGtkCellAreaClass = ^TGtkCellAreaClass;
  TGtkCellAreaClass = object
    parent_class: TGInitiallyUnownedClass;
    add: procedure(area: PGtkCellArea; renderer: PGtkCellRenderer); cdecl;
    remove: procedure(area: PGtkCellArea; renderer: PGtkCellRenderer); cdecl;
    foreach: procedure(area: PGtkCellArea; callback: TGtkCellCallback; callback_data: gpointer); cdecl;
    foreach_alloc: procedure(area: PGtkCellArea; context: PGtkCellAreaContext; widget: PGtkWidget; cell_area: PGdkRectangle; background_area: PGdkRectangle; callback: TGtkCellAllocCallback; callback_data: gpointer); cdecl;
    event: function(area: PGtkCellArea; context: PGtkCellAreaContext; widget: PGtkWidget; event: PGdkEvent; cell_area: PGdkRectangle; flags: TGtkCellRendererState): gint; cdecl;
    snapshot: procedure(area: PGtkCellArea; context: PGtkCellAreaContext; widget: PGtkWidget; snapshot: PGtkSnapshot; background_area: PGdkRectangle; cell_area: PGdkRectangle; flags: TGtkCellRendererState; paint_focus: gboolean); cdecl;
    apply_attributes: procedure(area: PGtkCellArea; tree_model: PGtkTreeModel; iter: PGtkTreeIter; is_expander: gboolean; is_expanded: gboolean); cdecl;
    create_context: function(area: PGtkCellArea): PGtkCellAreaContext; cdecl;
    copy_context: function(area: PGtkCellArea; context: PGtkCellAreaContext): PGtkCellAreaContext; cdecl;
    get_request_mode: function(area: PGtkCellArea): TGtkSizeRequestMode; cdecl;
    get_preferred_width: procedure(area: PGtkCellArea; context: PGtkCellAreaContext; widget: PGtkWidget; minimum_width: Pgint; natural_width: Pgint); cdecl;
    get_preferred_height_for_width: procedure(area: PGtkCellArea; context: PGtkCellAreaContext; widget: PGtkWidget; width: gint; minimum_height: Pgint; natural_height: Pgint); cdecl;
    get_preferred_height: procedure(area: PGtkCellArea; context: PGtkCellAreaContext; widget: PGtkWidget; minimum_height: Pgint; natural_height: Pgint); cdecl;
    get_preferred_width_for_height: procedure(area: PGtkCellArea; context: PGtkCellAreaContext; widget: PGtkWidget; height: gint; minimum_width: Pgint; natural_width: Pgint); cdecl;
    set_cell_property: procedure(area: PGtkCellArea; renderer: PGtkCellRenderer; property_id: guint; value: PGValue; pspec: PGParamSpec); cdecl;
    get_cell_property: procedure(area: PGtkCellArea; renderer: PGtkCellRenderer; property_id: guint; value: PGValue; pspec: PGParamSpec); cdecl;
    focus: function(area: PGtkCellArea; direction: TGtkDirectionType): gboolean; cdecl;
    is_activatable: function(area: PGtkCellArea): gboolean; cdecl;
    activate: function(area: PGtkCellArea; context: PGtkCellAreaContext; widget: PGtkWidget; cell_area: PGdkRectangle; flags: TGtkCellRendererState; edit_only: gboolean): gboolean; cdecl;
    padding: array [0..7] of gpointer;
    function find_cell_property(property_name: Pgchar): PGParamSpec; cdecl; inline;
    procedure install_cell_property(property_id: guint; pspec: PGParamSpec); cdecl; inline;
    function list_cell_properties(n_properties: Pguint): PPGParamSpec; cdecl; inline;
  end;

  PPGtkCellAreaContextClass = ^PGtkCellAreaContextClass;
  PGtkCellAreaContextClass = ^TGtkCellAreaContextClass;
  TGtkCellAreaContextClass = object
    parent_class: TGObjectClass;
    allocate: procedure(context: PGtkCellAreaContext; width: gint; height: gint); cdecl;
    reset: procedure(context: PGtkCellAreaContext); cdecl;
    get_preferred_height_for_width: procedure(context: PGtkCellAreaContext; width: gint; minimum_height: Pgint; natural_height: Pgint); cdecl;
    get_preferred_width_for_height: procedure(context: PGtkCellAreaContext; height: gint; minimum_width: Pgint; natural_width: Pgint); cdecl;
    padding: array [0..7] of gpointer;
  end;

  PPGtkCellAreaContextPrivate = ^PGtkCellAreaContextPrivate;
  PGtkCellAreaContextPrivate = ^TGtkCellAreaContextPrivate;

  TGtkCellAreaContextPrivate = record
  end;



  PPGtkCellEditableIface = ^PGtkCellEditableIface;
  PGtkCellEditableIface = ^TGtkCellEditableIface;
  TGtkCellEditableIface = object
    g_iface: TGTypeInterface;
    editing_done: procedure(cell_editable: PGtkCellEditable); cdecl;
    remove_widget: procedure(cell_editable: PGtkCellEditable); cdecl;
    start_editing: procedure(cell_editable: PGtkCellEditable; event: PGdkEvent); cdecl;
  end;

  PPGtkCellLayoutIface = ^PGtkCellLayoutIface;
  PGtkCellLayoutIface = ^TGtkCellLayoutIface;
  TGtkCellLayoutIface = object
    g_iface: TGTypeInterface;
    pack_start: procedure(cell_layout: PGtkCellLayout; cell: PGtkCellRenderer; expand: gboolean); cdecl;
    pack_end: procedure(cell_layout: PGtkCellLayout; cell: PGtkCellRenderer; expand: gboolean); cdecl;
    clear: procedure(cell_layout: PGtkCellLayout); cdecl;
    add_attribute: procedure(cell_layout: PGtkCellLayout; cell: PGtkCellRenderer; attribute: Pgchar; column: gint); cdecl;
    set_cell_data_func: procedure(cell_layout: PGtkCellLayout; cell: PGtkCellRenderer; func: TGtkCellLayoutDataFunc; func_data: gpointer; destroy_: TGDestroyNotify); cdecl;
    clear_attributes: procedure(cell_layout: PGtkCellLayout; cell: PGtkCellRenderer); cdecl;
    reorder: procedure(cell_layout: PGtkCellLayout; cell: PGtkCellRenderer; position: gint); cdecl;
    get_cells: function(cell_layout: PGtkCellLayout): PGList; cdecl;
    get_area: function(cell_layout: PGtkCellLayout): PGtkCellArea; cdecl;
  end;
  TGtkRequisition = object
    width: gint;
    height: gint;
    function new: PGtkRequisition; cdecl; inline; static;
    function copy: PGtkRequisition; cdecl; inline;
    procedure free; cdecl; inline;
  end;

  PPGtkCellRendererMode = ^PGtkCellRendererMode;
  PGtkCellRendererMode = ^TGtkCellRendererMode;

  TGtkCellRendererPrivate = record
  end;



  PPGtkCellRendererAccelMode = ^PGtkCellRendererAccelMode;
  PGtkCellRendererAccelMode = ^TGtkCellRendererAccelMode;

  PPGtkCellRendererAccel = ^PGtkCellRendererAccel;
  PGtkCellRendererAccel = ^TGtkCellRendererAccel;
  TGtkCellRendererAccel = object
    function new: PGtkCellRendererAccel; cdecl; inline; static;
    //property accel_key: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_accel_key  { property is writeable but setter not declared } ;
    //property accel_mode: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_accel_mode  { property is writeable but setter not declared } ;
    //property accel_mods: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_accel_mods  { property is writeable but setter not declared } ;
    //property keycode: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_keycode  { property is writeable but setter not declared } ;
  end;

  PPGtkCellRendererClass = ^PGtkCellRendererClass;
  PGtkCellRendererClass = ^TGtkCellRendererClass;
  TGtkCellRendererClass = object
    parent_class: TGInitiallyUnownedClass;
    get_request_mode: function(cell: PGtkCellRenderer): TGtkSizeRequestMode; cdecl;
    get_preferred_width: procedure(cell: PGtkCellRenderer; widget: PGtkWidget; minimum_size: Pgint; natural_size: Pgint); cdecl;
    get_preferred_height_for_width: procedure(cell: PGtkCellRenderer; widget: PGtkWidget; width: gint; minimum_height: Pgint; natural_height: Pgint); cdecl;
    get_preferred_height: procedure(cell: PGtkCellRenderer; widget: PGtkWidget; minimum_size: Pgint; natural_size: Pgint); cdecl;
    get_preferred_width_for_height: procedure(cell: PGtkCellRenderer; widget: PGtkWidget; height: gint; minimum_width: Pgint; natural_width: Pgint); cdecl;
    get_aligned_area: procedure(cell: PGtkCellRenderer; widget: PGtkWidget; flags: TGtkCellRendererState; cell_area: PGdkRectangle; aligned_area: PGdkRectangle); cdecl;
    snapshot: procedure(cell: PGtkCellRenderer; snapshot: PGtkSnapshot; widget: PGtkWidget; background_area: PGdkRectangle; cell_area: PGdkRectangle; flags: TGtkCellRendererState); cdecl;
    activate: function(cell: PGtkCellRenderer; event: PGdkEvent; widget: PGtkWidget; path: Pgchar; background_area: PGdkRectangle; cell_area: PGdkRectangle; flags: TGtkCellRendererState): gboolean; cdecl;
    start_editing: function(cell: PGtkCellRenderer; event: PGdkEvent; widget: PGtkWidget; path: Pgchar; background_area: PGdkRectangle; cell_area: PGdkRectangle; flags: TGtkCellRendererState): PGtkCellEditable; cdecl;
    editing_canceled: procedure(cell: PGtkCellRenderer); cdecl;
    editing_started: procedure(cell: PGtkCellRenderer; editable: PGtkCellEditable; path: Pgchar); cdecl;
    padding: array [0..7] of gpointer;
  end;

  PPGtkCellRendererClassPrivate = ^PGtkCellRendererClassPrivate;
  PGtkCellRendererClassPrivate = ^TGtkCellRendererClassPrivate;

  TGtkCellRendererClassPrivate = record
  end;



  PPGtkCellRendererCombo = ^PGtkCellRendererCombo;
  PGtkCellRendererCombo = ^TGtkCellRendererCombo;
  TGtkCellRendererCombo = object
    function new: PGtkCellRendererCombo; cdecl; inline; static;
    //property has_entry: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_has_entry  { property is writeable but setter not declared } ;
    //property model: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_model  { property is writeable but setter not declared } ;
    //property text_column: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_text_column  { property is writeable but setter not declared } ;
  end;

  PPGtkIconSize = ^PGtkIconSize;
  PGtkIconSize = ^TGtkIconSize;

  PPGtkCellRendererPixbuf = ^PGtkCellRendererPixbuf;
  PGtkCellRendererPixbuf = ^TGtkCellRendererPixbuf;
  TGtkCellRendererPixbuf = object(TGtkCellRenderer)
    function new: PGtkCellRendererPixbuf; cdecl; inline; static;
    //property gicon: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gicon  { property is writeable but setter not declared } ;
    //property icon_name: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_icon_name  { property is writeable but setter not declared } ;
    //property icon_size: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_icon_size  { property is writeable but setter not declared } ;
    //property pixbuf: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_pixbuf  { property is writeable but setter not declared } ;
    //property pixbuf_expander_closed: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_pixbuf_expander_closed  { property is writeable but setter not declared } ;
    //property pixbuf_expander_open: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_pixbuf_expander_open  { property is writeable but setter not declared } ;
    //property texture: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_texture  { property is writeable but setter not declared } ;
  end;

  PPGtkCellRendererProgress = ^PGtkCellRendererProgress;
  PGtkCellRendererProgress = ^TGtkCellRendererProgress;
  TGtkCellRendererProgress = object(TGtkCellRenderer)
    function new: PGtkCellRendererProgress; cdecl; inline; static;
    //property inverted: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_inverted  { property is writeable but setter not declared } ;
    //property pulse: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_pulse  { property is writeable but setter not declared } ;
    //property text: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_text  { property is writeable but setter not declared } ;
    //property text_xalign: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_text_xalign  { property is writeable but setter not declared } ;
    //property text_yalign: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_text_yalign  { property is writeable but setter not declared } ;
    //property value: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_value  { property is writeable but setter not declared } ;
  end;

  PPGtkCellRendererSpin = ^PGtkCellRendererSpin;
  PGtkCellRendererSpin = ^TGtkCellRendererSpin;
  TGtkCellRendererSpin = object
    function new: PGtkCellRendererSpin; cdecl; inline; static;
    //property adjustment: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_adjustment  { property is writeable but setter not declared } ;
    //property climb_rate: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_climb_rate  { property is writeable but setter not declared } ;
    //property digits: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_digits  { property is writeable but setter not declared } ;
  end;

  PPGtkCellRendererSpinner = ^PGtkCellRendererSpinner;
  PGtkCellRendererSpinner = ^TGtkCellRendererSpinner;
  TGtkCellRendererSpinner = object(TGtkCellRenderer)
    function new: PGtkCellRendererSpinner; cdecl; inline; static;
    //property active: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_active  { property is writeable but setter not declared } ;
    //property pulse: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_pulse  { property is writeable but setter not declared } ;
    //property size: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_size  { property is writeable but setter not declared } ;
  end;

  PPGtkCellRendererText = ^PGtkCellRendererText;
  PGtkCellRendererText = ^TGtkCellRendererText;
  TGtkCellRendererText = object(TGtkCellRenderer)
    function new: PGtkCellRendererText; cdecl; inline; static;
    procedure set_fixed_height_from_font(number_of_rows: gint); cdecl; inline;
    //property align_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_align_set  { property is writeable but setter not declared } ;
    //property alignment: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_alignment  { property is writeable but setter not declared } ;
    //property attributes: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_attributes  { property is writeable but setter not declared } ;
    //property background: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_background  { property is writeable but setter not declared } ;
    //property background_rgba: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_background_rgba  { property is writeable but setter not declared } ;
    //property background_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_background_set  { property is writeable but setter not declared } ;
    //property editable: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_editable  { property is writeable but setter not declared } ;
    //property editable_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_editable_set  { property is writeable but setter not declared } ;
    //property ellipsize: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_ellipsize  { property is writeable but setter not declared } ;
    //property ellipsize_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_ellipsize_set  { property is writeable but setter not declared } ;
    //property family: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_family  { property is writeable but setter not declared } ;
    //property family_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_family_set  { property is writeable but setter not declared } ;
    //property font: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_font  { property is writeable but setter not declared } ;
    //property font_desc: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_font_desc  { property is writeable but setter not declared } ;
    //property foreground: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_foreground  { property is writeable but setter not declared } ;
    //property foreground_rgba: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_foreground_rgba  { property is writeable but setter not declared } ;
    //property foreground_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_foreground_set  { property is writeable but setter not declared } ;
    //property language: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_language  { property is writeable but setter not declared } ;
    //property language_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_language_set  { property is writeable but setter not declared } ;
    //property markup: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_markup  { property is writeable but setter not declared } ;
    //property max_width_chars: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_max_width_chars  { property is writeable but setter not declared } ;
    //property placeholder_text: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_placeholder_text  { property is writeable but setter not declared } ;
    //property rise: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_rise  { property is writeable but setter not declared } ;
    //property rise_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_rise_set  { property is writeable but setter not declared } ;
    //property scale: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_scale  { property is writeable but setter not declared } ;
    //property scale_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_scale_set  { property is writeable but setter not declared } ;
    //property single_paragraph_mode: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_single_paragraph_mode  { property is writeable but setter not declared } ;
    //property size: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_size  { property is writeable but setter not declared } ;
    //property size_points: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_size_points  { property is writeable but setter not declared } ;
    //property size_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_size_set  { property is writeable but setter not declared } ;
    //property stretch: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_stretch  { property is writeable but setter not declared } ;
    //property stretch_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_stretch_set  { property is writeable but setter not declared } ;
    //property strikethrough: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_strikethrough  { property is writeable but setter not declared } ;
    //property strikethrough_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_strikethrough_set  { property is writeable but setter not declared } ;
    //property style: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_style  { property is writeable but setter not declared } ;
    //property style_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_style_set  { property is writeable but setter not declared } ;
    //property text: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_text  { property is writeable but setter not declared } ;
    //property underline: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_underline  { property is writeable but setter not declared } ;
    //property underline_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_underline_set  { property is writeable but setter not declared } ;
    //property variant: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_variant  { property is writeable but setter not declared } ;
    //property variant_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_variant_set  { property is writeable but setter not declared } ;
    //property weight: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_weight  { property is writeable but setter not declared } ;
    //property weight_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_weight_set  { property is writeable but setter not declared } ;
    //property width_chars: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_width_chars  { property is writeable but setter not declared } ;
    //property wrap_mode: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_wrap_mode  { property is writeable but setter not declared } ;
    //property wrap_width: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_wrap_width  { property is writeable but setter not declared } ;
  end;

  PPGtkCellRendererTextClass = ^PGtkCellRendererTextClass;
  PGtkCellRendererTextClass = ^TGtkCellRendererTextClass;
  TGtkCellRendererTextClass = object
    parent_class: TGtkCellRendererClass;
    edited: procedure(cell_renderer_text: PGtkCellRendererText; path: Pgchar; new_text: Pgchar); cdecl;
    padding: array [0..7] of gpointer;
  end;

  PPGtkCellRendererToggle = ^PGtkCellRendererToggle;
  PGtkCellRendererToggle = ^TGtkCellRendererToggle;
  TGtkCellRendererToggle = object(TGtkCellRenderer)
    function new: PGtkCellRendererToggle; cdecl; inline; static;
    function get_activatable: gboolean; cdecl; inline;
    function get_active: gboolean; cdecl; inline;
    function get_radio: gboolean; cdecl; inline;
    procedure set_activatable(setting: gboolean); cdecl; inline;
    procedure set_active(setting: gboolean); cdecl; inline;
    procedure set_radio(radio: gboolean); cdecl; inline;
    property activatable: gboolean read get_activatable write set_activatable;
    property active: gboolean read get_active write set_active;
    //property inconsistent: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_inconsistent  { property is writeable but setter not declared } ;
    property radio: gboolean read get_radio write set_radio;
  end;

  PPGtkCellView = ^PGtkCellView;
  PGtkCellView = ^TGtkCellView;
  TGtkCellView = object(TGtkWidget)
    function new: PGtkCellView; cdecl; inline; static;
    function new_with_context(area: PGtkCellArea; context: PGtkCellAreaContext): PGtkCellView; cdecl; inline; static;
    function new_with_markup(markup: Pgchar): PGtkCellView; cdecl; inline; static;
    function new_with_text(text: Pgchar): PGtkCellView; cdecl; inline; static;
    function new_with_texture(texture: PGdkTexture): PGtkCellView; cdecl; inline; static;
    function get_displayed_row: PGtkTreePath; cdecl; inline;
    function get_draw_sensitive: gboolean; cdecl; inline;
    function get_fit_model: gboolean; cdecl; inline;
    function get_model: PGtkTreeModel; cdecl; inline;
    procedure set_displayed_row(path: PGtkTreePath); cdecl; inline;
    procedure set_draw_sensitive(draw_sensitive: gboolean); cdecl; inline;
    procedure set_fit_model(fit_model: gboolean); cdecl; inline;
    procedure set_model(model: PGtkTreeModel); cdecl; inline;
    //property cell_area: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_cell_area  { property is writeable but setter not declared } ;
    //property cell_area_context: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_cell_area_context  { property is writeable but setter not declared } ;
    property draw_sensitive: gboolean read get_draw_sensitive write set_draw_sensitive;
    property fit_model: gboolean read get_fit_model write set_fit_model;
    property model: PGtkTreeModel read get_model write set_model;
  end;

  PPGtkCenterBox = ^PGtkCenterBox;
  PGtkCenterBox = ^TGtkCenterBox;
  TGtkCenterBox = object(TGtkWidget)
    function new: PGtkCenterBox; cdecl; inline; static;
    function get_baseline_position: TGtkBaselinePosition; cdecl; inline;
    function get_center_widget: PGtkWidget; cdecl; inline;
    function get_end_widget: PGtkWidget; cdecl; inline;
    function get_start_widget: PGtkWidget; cdecl; inline;
    procedure set_baseline_position(position: TGtkBaselinePosition); cdecl; inline;
    procedure set_center_widget(child: PGtkWidget); cdecl; inline;
    procedure set_end_widget(child: PGtkWidget); cdecl; inline;
    procedure set_start_widget(child: PGtkWidget); cdecl; inline;
    property baseline_position: TGtkBaselinePosition read get_baseline_position write set_baseline_position;
  end;

  PPGtkCenterBoxClass = ^PGtkCenterBoxClass;
  PGtkCenterBoxClass = ^TGtkCenterBoxClass;
  TGtkCenterBoxClass = object
  end;

  PPGtkCenterLayout = ^PGtkCenterLayout;
  PGtkCenterLayout = ^TGtkCenterLayout;
  TGtkCenterLayout = object(TGtkLayoutManager)
    function new: PGtkCenterLayout; cdecl; inline; static;
    function get_baseline_position: TGtkBaselinePosition; cdecl; inline;
    function get_center_widget: PGtkWidget; cdecl; inline;
    function get_end_widget: PGtkWidget; cdecl; inline;
    function get_orientation: TGtkOrientation; cdecl; inline;
    function get_start_widget: PGtkWidget; cdecl; inline;
    procedure set_baseline_position(baseline_position: TGtkBaselinePosition); cdecl; inline;
    procedure set_center_widget(widget: PGtkWidget); cdecl; inline;
    procedure set_end_widget(widget: PGtkWidget); cdecl; inline;
    procedure set_orientation(orientation: TGtkOrientation); cdecl; inline;
    procedure set_start_widget(widget: PGtkWidget); cdecl; inline;
  end;

  PPGtkCenterLayoutClass = ^PGtkCenterLayoutClass;
  PGtkCenterLayoutClass = ^TGtkCenterLayoutClass;
  TGtkCenterLayoutClass = object
    parent_class: TGtkLayoutManagerClass;
  end;

  PPGtkCheckButton = ^PGtkCheckButton;
  PGtkCheckButton = ^TGtkCheckButton;
  TGtkCheckButton = object(TGtkWidget)
    function new: PGtkCheckButton; cdecl; inline; static;
    function new_with_label(label_: Pgchar): PGtkCheckButton; cdecl; inline; static;
    function new_with_mnemonic(label_: Pgchar): PGtkCheckButton; cdecl; inline; static;
    function get_active: gboolean; cdecl; inline;
    function get_inconsistent: gboolean; cdecl; inline;
    function get_label: Pgchar; cdecl; inline;
    function get_use_underline: gboolean; cdecl; inline;
    procedure set_active(setting: gboolean); cdecl; inline;
    procedure set_group(group: PGtkCheckButton); cdecl; inline;
    procedure set_inconsistent(inconsistent: gboolean); cdecl; inline;
    procedure set_label(label_: Pgchar); cdecl; inline;
    procedure set_use_underline(setting: gboolean); cdecl; inline;
    property active: gboolean read get_active write set_active;
    //property group: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_group  { property is writeable but setter not declared } ;
    property inconsistent: gboolean read get_inconsistent write set_inconsistent;
    property label_: Pgchar read get_label write set_label;
    property use_underline: gboolean read get_use_underline write set_use_underline;
  end;

  PPGtkCheckButtonClass = ^PGtkCheckButtonClass;
  PGtkCheckButtonClass = ^TGtkCheckButtonClass;
  TGtkCheckButtonClass = object
    parent_class: TGtkWidgetClass;
    toggled: procedure(check_button: PGtkCheckButton); cdecl;
    activate: procedure(check_button: PGtkCheckButton); cdecl;
    padding: array [0..6] of gpointer;
  end;

  PPGtkClosureExpression = ^PGtkClosureExpression;
  PGtkClosureExpression = ^TGtkClosureExpression;
  TGtkClosureExpression = object(TGtkExpression)
    function new(value_type: TGType; closure: PGClosure; n_params: guint; params: PPGtkExpression): PGtkClosureExpression; cdecl; inline; static;
  end;

  PPGtkColorChooser = ^PGtkColorChooser;
  PGtkColorChooser = ^TGtkColorChooser;
  TGtkColorChooser = object
    color_activated: procedure(color: TGdkRGBA); cdecl;
    procedure add_palette(orientation: TGtkOrientation; colors_per_line: gint; n_colors: gint; colors: PGdkRGBA); cdecl; inline;
    procedure get_rgba(color: PGdkRGBA); cdecl; inline;
    function get_use_alpha: gboolean; cdecl; inline;
    procedure set_rgba(color: PGdkRGBA); cdecl; inline;
    procedure set_use_alpha(use_alpha: gboolean); cdecl; inline;
    //property rgba: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_rgba  { property is writeable but setter not declared } ;
    property use_alpha: gboolean read get_use_alpha write set_use_alpha;
  end;

  PPGtkColorButton = ^PGtkColorButton;
  PGtkColorButton = ^TGtkColorButton;
  TGtkColorButton = object(TGtkWidget)
    function new: PGtkColorButton; cdecl; inline; static;
    function new_with_rgba(rgba: PGdkRGBA): PGtkColorButton; cdecl; inline; static;
    function get_modal: gboolean; cdecl; inline;
    function get_title: Pgchar; cdecl; inline;
    procedure set_modal(modal: gboolean); cdecl; inline;
    procedure set_title(title: Pgchar); cdecl; inline;
    property modal: gboolean read get_modal write set_modal;
    //property show_editor: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_show_editor  { property is writeable but setter not declared } ;
    property title: Pgchar read get_title write set_title;
  end;

  PPGtkColorChooserDialog = ^PGtkColorChooserDialog;
  PGtkColorChooserDialog = ^TGtkColorChooserDialog;
  TGtkColorChooserDialog = object
    function new(title: Pgchar; parent: PGtkWindow): PGtkColorChooserDialog; cdecl; inline; static;
    //property show_editor: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_show_editor  { property is writeable but setter not declared } ;
  end;

  PPGtkColorChooserInterface = ^PGtkColorChooserInterface;
  PGtkColorChooserInterface = ^TGtkColorChooserInterface;
  TGtkColorChooserInterface = object
    base_interface: TGTypeInterface;
    get_rgba: procedure(chooser: PGtkColorChooser; color: PGdkRGBA); cdecl;
    set_rgba: procedure(chooser: PGtkColorChooser; color: PGdkRGBA); cdecl;
    add_palette: procedure(chooser: PGtkColorChooser; orientation: TGtkOrientation; colors_per_line: gint; n_colors: gint; colors: PGdkRGBA); cdecl;
    color_activated: procedure(chooser: PGtkColorChooser; color: PGdkRGBA); cdecl;
    padding: array [0..11] of gpointer;
  end;

  PPGtkColorChooserWidget = ^PGtkColorChooserWidget;
  PGtkColorChooserWidget = ^TGtkColorChooserWidget;
  TGtkColorChooserWidget = object(TGtkWidget)
    function new: PGtkColorChooserWidget; cdecl; inline; static;
    //property show_editor: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_show_editor  { property is writeable but setter not declared } ;
  end;

  PPGtkScrollable = ^PGtkScrollable;
  PGtkScrollable = ^TGtkScrollable;

  PPGtkScrollablePolicy = ^PGtkScrollablePolicy;
  PGtkScrollablePolicy = ^TGtkScrollablePolicy;
  TGtkScrollable = object
    function get_border(border: PGtkBorder): gboolean; cdecl; inline;
    function get_hadjustment: PGtkAdjustment; cdecl; inline;
    function get_hscroll_policy: TGtkScrollablePolicy; cdecl; inline;
    function get_vadjustment: PGtkAdjustment; cdecl; inline;
    function get_vscroll_policy: TGtkScrollablePolicy; cdecl; inline;
    procedure set_hadjustment(hadjustment: PGtkAdjustment); cdecl; inline;
    procedure set_hscroll_policy(policy: TGtkScrollablePolicy); cdecl; inline;
    procedure set_vadjustment(vadjustment: PGtkAdjustment); cdecl; inline;
    procedure set_vscroll_policy(policy: TGtkScrollablePolicy); cdecl; inline;
    property hadjustment: PGtkAdjustment read get_hadjustment write set_hadjustment;
    property hscroll_policy: TGtkScrollablePolicy read get_hscroll_policy write set_hscroll_policy;
    property vadjustment: PGtkAdjustment read get_vadjustment write set_vadjustment;
    property vscroll_policy: TGtkScrollablePolicy read get_vscroll_policy write set_vscroll_policy;
  end;

  PPGtkSelectionModel = ^PGtkSelectionModel;
  PGtkSelectionModel = ^TGtkSelectionModel;
  TGtkSelectionModel = object
    selection_changed1: procedure(position: guint; n_items: guint); cdecl;
    function get_selection: PGtkBitset; cdecl; inline;
    function get_selection_in_range(position: guint; n_items: guint): PGtkBitset; cdecl; inline;
    function is_selected(position: guint): gboolean; cdecl; inline;
    function select_all: gboolean; cdecl; inline;
    function select_item(position: guint; unselect_rest: gboolean): gboolean; cdecl; inline;
    function select_range(position: guint; n_items: guint; unselect_rest: gboolean): gboolean; cdecl; inline;
    procedure selection_changed(position: guint; n_items: guint); cdecl; inline;
    function set_selection(selected: PGtkBitset; mask: PGtkBitset): gboolean; cdecl; inline;
    function unselect_all: gboolean; cdecl; inline;
    function unselect_item(position: guint): gboolean; cdecl; inline;
    function unselect_range(position: guint; n_items: guint): gboolean; cdecl; inline;
  end;

  PPGtkColumnView = ^PGtkColumnView;
  PGtkColumnView = ^TGtkColumnView;

  PPGtkColumnViewColumn = ^PGtkColumnViewColumn;
  PGtkColumnViewColumn = ^TGtkColumnViewColumn;

  PPGtkSorter = ^PGtkSorter;
  PGtkSorter = ^TGtkSorter;

  PPGtkSortType = ^PGtkSortType;
  PGtkSortType = ^TGtkSortType;
  TGtkColumnView = object(TGtkWidget)
    function new(model: PGtkSelectionModel): PGtkColumnView; cdecl; inline; static;
    procedure append_column(column: PGtkColumnViewColumn); cdecl; inline;
    function get_columns: PGListModel; cdecl; inline;
    function get_enable_rubberband: gboolean; cdecl; inline;
    function get_model: PGtkSelectionModel; cdecl; inline;
    function get_reorderable: gboolean; cdecl; inline;
    function get_show_column_separators: gboolean; cdecl; inline;
    function get_show_row_separators: gboolean; cdecl; inline;
    function get_single_click_activate: gboolean; cdecl; inline;
    function get_sorter: PGtkSorter; cdecl; inline;
    procedure insert_column(position: guint; column: PGtkColumnViewColumn); cdecl; inline;
    procedure remove_column(column: PGtkColumnViewColumn); cdecl; inline;
    procedure set_enable_rubberband(enable_rubberband: gboolean); cdecl; inline;
    procedure set_model(model: PGtkSelectionModel); cdecl; inline;
    procedure set_reorderable(reorderable: gboolean); cdecl; inline;
    procedure set_show_column_separators(show_column_separators: gboolean); cdecl; inline;
    procedure set_show_row_separators(show_row_separators: gboolean); cdecl; inline;
    procedure set_single_click_activate(single_click_activate: gboolean); cdecl; inline;
    procedure sort_by_column(column: PGtkColumnViewColumn; direction: TGtkSortType); cdecl; inline;
    property columns: PGListModel read get_columns ;
    property enable_rubberband: gboolean read get_enable_rubberband write set_enable_rubberband;
    property model: PGtkSelectionModel read get_model write set_model;
    property reorderable: gboolean read get_reorderable write set_reorderable;
    property show_column_separators: gboolean read get_show_column_separators write set_show_column_separators;
    property show_row_separators: gboolean read get_show_row_separators write set_show_row_separators;
    property single_click_activate: gboolean read get_single_click_activate write set_single_click_activate;
    property sorter: PGtkSorter read get_sorter ;
  end;
  TGtkColumnViewColumn = object(TGObject)
    function new(title: Pgchar; factory: PGtkListItemFactory): PGtkColumnViewColumn; cdecl; inline; static;
    function get_column_view: PGtkColumnView; cdecl; inline;
    function get_expand: gboolean; cdecl; inline;
    function get_factory: PGtkListItemFactory; cdecl; inline;
    function get_fixed_width: gint; cdecl; inline;
    function get_header_menu: PGMenuModel; cdecl; inline;
    function get_resizable: gboolean; cdecl; inline;
    function get_sorter: PGtkSorter; cdecl; inline;
    function get_title: Pgchar; cdecl; inline;
    function get_visible: gboolean; cdecl; inline;
    procedure set_expand(expand: gboolean); cdecl; inline;
    procedure set_factory(factory: PGtkListItemFactory); cdecl; inline;
    procedure set_fixed_width(fixed_width: gint); cdecl; inline;
    procedure set_header_menu(menu: PGMenuModel); cdecl; inline;
    procedure set_resizable(resizable: gboolean); cdecl; inline;
    procedure set_sorter(sorter: PGtkSorter); cdecl; inline;
    procedure set_title(title: Pgchar); cdecl; inline;
    procedure set_visible(visible: gboolean); cdecl; inline;
    property column_view: PGtkColumnView read get_column_view ;
    property expand: gboolean read get_expand write set_expand;
    property factory: PGtkListItemFactory read get_factory write set_factory;
    property fixed_width: gint read get_fixed_width write set_fixed_width;
    property header_menu: PGMenuModel read get_header_menu write set_header_menu;
    property resizable: gboolean read get_resizable write set_resizable;
    property sorter: PGtkSorter read get_sorter write set_sorter;
    property title: Pgchar read get_title write set_title;
    property visible: gboolean read get_visible write set_visible;
  end;

  PPGtkSorterChange = ^PGtkSorterChange;
  PGtkSorterChange = ^TGtkSorterChange;

  PPGtkOrdering = ^PGtkOrdering;
  PGtkOrdering = ^TGtkOrdering;

  PPGtkSorterOrder = ^PGtkSorterOrder;
  PGtkSorterOrder = ^TGtkSorterOrder;
  TGtkSorter = object(TGObject)
    procedure changed(change: TGtkSorterChange); cdecl; inline;
    function compare(item1: PGObject; item2: PGObject): TGtkOrdering; cdecl; inline;
    function get_order: TGtkSorterOrder; cdecl; inline;
  end;

  PPGtkColumnViewClass = ^PGtkColumnViewClass;
  PGtkColumnViewClass = ^TGtkColumnViewClass;
  TGtkColumnViewClass = object
  end;

  PPGtkColumnViewColumnClass = ^PGtkColumnViewColumnClass;
  PGtkColumnViewColumnClass = ^TGtkColumnViewColumnClass;
  TGtkColumnViewColumnClass = object
  end;

  PPGtkComboBox = ^PGtkComboBox;
  PGtkComboBox = ^TGtkComboBox;

  PPGtkSensitivityType = ^PGtkSensitivityType;
  PGtkSensitivityType = ^TGtkSensitivityType;

  PPGtkTreeViewRowSeparatorFunc = ^PGtkTreeViewRowSeparatorFunc;
  PGtkTreeViewRowSeparatorFunc = ^TGtkTreeViewRowSeparatorFunc;
  TGtkTreeViewRowSeparatorFunc = function(model: PGtkTreeModel; iter: PGtkTreeIter; data: gpointer): gboolean; cdecl;
  TGtkComboBox = object(TGtkWidget)
    function new: PGtkComboBox; cdecl; inline; static;
    function new_with_entry: PGtkComboBox; cdecl; inline; static;
    function new_with_model(model: PGtkTreeModel): PGtkComboBox; cdecl; inline; static;
    function new_with_model_and_entry(model: PGtkTreeModel): PGtkComboBox; cdecl; inline; static;
    function get_active: gint; cdecl; inline;
    function get_active_id: Pgchar; cdecl; inline;
    function get_active_iter(iter: PGtkTreeIter): gboolean; cdecl; inline;
    function get_button_sensitivity: TGtkSensitivityType; cdecl; inline;
    function get_child: PGtkWidget; cdecl; inline;
    function get_entry_text_column: gint; cdecl; inline;
    function get_has_entry: gboolean; cdecl; inline;
    function get_id_column: gint; cdecl; inline;
    function get_model: PGtkTreeModel; cdecl; inline;
    function get_popup_fixed_width: gboolean; cdecl; inline;
    function get_row_separator_func: TGtkTreeViewRowSeparatorFunc; cdecl; inline;
    procedure popdown; cdecl; inline;
    procedure popup; cdecl; inline;
    procedure popup_for_device(device: PGdkDevice); cdecl; inline;
    procedure set_active(index_: gint); cdecl; inline;
    function set_active_id(active_id: Pgchar): gboolean; cdecl; inline;
    procedure set_active_iter(iter: PGtkTreeIter); cdecl; inline;
    procedure set_button_sensitivity(sensitivity: TGtkSensitivityType); cdecl; inline;
    procedure set_child(child: PGtkWidget); cdecl; inline;
    procedure set_entry_text_column(text_column: gint); cdecl; inline;
    procedure set_id_column(id_column: gint); cdecl; inline;
    procedure set_model(model: PGtkTreeModel); cdecl; inline;
    procedure set_popup_fixed_width(fixed: gboolean); cdecl; inline;
    procedure set_row_separator_func(func: TGtkTreeViewRowSeparatorFunc; data: gpointer; destroy_: TGDestroyNotify); cdecl; inline;
    property active: gint read get_active write set_active;
    property active_id: Pgchar read get_active_id  { property is writeable but setter not declared } ;
    property button_sensitivity: TGtkSensitivityType read get_button_sensitivity write set_button_sensitivity;
    property child: PGtkWidget read get_child write set_child;
    property entry_text_column: gint read get_entry_text_column write set_entry_text_column;
    property has_entry: gboolean read get_has_entry  { property is writeable but setter not declared } ;
    //property has_frame: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_has_frame  { property is writeable but setter not declared } ;
    property id_column: gint read get_id_column write set_id_column;
    property model: PGtkTreeModel read get_model write set_model;
    property popup_fixed_width: gboolean read get_popup_fixed_width write set_popup_fixed_width;
    //property popup_shown: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_popup_shown ;
  end;

  PPGtkScrollType = ^PGtkScrollType;
  PGtkScrollType = ^TGtkScrollType;

  PPGtkComboBoxClass = ^PGtkComboBoxClass;
  PGtkComboBoxClass = ^TGtkComboBoxClass;
  TGtkComboBoxClass = object
    parent_class: TGtkWidgetClass;
    changed: procedure(combo_box: PGtkComboBox); cdecl;
    format_entry_text: function(combo_box: PGtkComboBox; path: Pgchar): Pgchar; cdecl;
    activate: procedure(combo_box: PGtkComboBox); cdecl;
    padding: array [0..6] of gpointer;
  end;

  PPGtkComboBoxText = ^PGtkComboBoxText;
  PGtkComboBoxText = ^TGtkComboBoxText;
  TGtkComboBoxText = object(TGtkComboBox)
    function new: PGtkComboBoxText; cdecl; inline; static;
    function new_with_entry: PGtkComboBoxText; cdecl; inline; static;
    procedure append(id: Pgchar; text: Pgchar); cdecl; inline;
    procedure append_text(text: Pgchar); cdecl; inline;
    function get_active_text: Pgchar; cdecl; inline;
    procedure insert(position: gint; id: Pgchar; text: Pgchar); cdecl; inline;
    procedure insert_text(position: gint; text: Pgchar); cdecl; inline;
    procedure prepend(id: Pgchar; text: Pgchar); cdecl; inline;
    procedure prepend_text(text: Pgchar); cdecl; inline;
    procedure remove(position: gint); cdecl; inline;
    procedure remove_all; cdecl; inline;
  end;

  PPGtkConstantExpression = ^PGtkConstantExpression;
  PGtkConstantExpression = ^TGtkConstantExpression;
  TGtkConstantExpression = object(TGtkExpression)
    //function new(value_type: TGType; args: array of const): PGtkConstantExpression; cdecl; inline; static;
    function new_for_value(value: PGValue): PGtkConstantExpression; cdecl; inline; static;
    function get_value: PGValue; cdecl; inline;
  end;

  PPGtkConstraint = ^PGtkConstraint;
  PGtkConstraint = ^TGtkConstraint;

  PPGtkConstraintAttribute = ^PGtkConstraintAttribute;
  PGtkConstraintAttribute = ^TGtkConstraintAttribute;

  PPGtkConstraintRelation = ^PGtkConstraintRelation;
  PGtkConstraintRelation = ^TGtkConstraintRelation;
  TGtkConstraint = object(TGObject)
    function new(target: PGtkConstraintTarget; target_attribute: TGtkConstraintAttribute; relation: TGtkConstraintRelation; source: PGtkConstraintTarget; source_attribute: TGtkConstraintAttribute; multiplier: gdouble; constant: gdouble; strength: gint): PGtkConstraint; cdecl; inline; static;
    function new_constant(target: PGtkConstraintTarget; target_attribute: TGtkConstraintAttribute; relation: TGtkConstraintRelation; constant: gdouble; strength: gint): PGtkConstraint; cdecl; inline; static;
    function get_constant: gdouble; cdecl; inline;
    function get_multiplier: gdouble; cdecl; inline;
    function get_relation: TGtkConstraintRelation; cdecl; inline;
    function get_source: PGtkConstraintTarget; cdecl; inline;
    function get_source_attribute: TGtkConstraintAttribute; cdecl; inline;
    function get_strength: gint; cdecl; inline;
    function get_target: PGtkConstraintTarget; cdecl; inline;
    function get_target_attribute: TGtkConstraintAttribute; cdecl; inline;
    function is_attached: gboolean; cdecl; inline;
    function is_constant: gboolean; cdecl; inline;
    function is_required: gboolean; cdecl; inline;
    property constant: gdouble read get_constant  { property is writeable but setter not declared } ;
    property multiplier: gdouble read get_multiplier  { property is writeable but setter not declared } ;
    property relation: TGtkConstraintRelation read get_relation  { property is writeable but setter not declared } ;
    property source: PGtkConstraintTarget read get_source  { property is writeable but setter not declared } ;
    property source_attribute: TGtkConstraintAttribute read get_source_attribute  { property is writeable but setter not declared } ;
    property strength: gint read get_strength  { property is writeable but setter not declared } ;
    property target: PGtkConstraintTarget read get_target  { property is writeable but setter not declared } ;
    property target_attribute: TGtkConstraintAttribute read get_target_attribute  { property is writeable but setter not declared } ;
  end;

  PPGtkConstraintClass = ^PGtkConstraintClass;
  PGtkConstraintClass = ^TGtkConstraintClass;
  TGtkConstraintClass = object
    parent_class: TGObjectClass;
  end;

  PPGtkConstraintGuide = ^PGtkConstraintGuide;
  PGtkConstraintGuide = ^TGtkConstraintGuide;

  PPGtkConstraintStrength = ^PGtkConstraintStrength;
  PGtkConstraintStrength = ^TGtkConstraintStrength;
  TGtkConstraintGuide = object(TGObject)
    function new: PGtkConstraintGuide; cdecl; inline; static;
    procedure get_max_size(width: Pgint; height: Pgint); cdecl; inline;
    procedure get_min_size(width: Pgint; height: Pgint); cdecl; inline;
    function get_name: Pgchar; cdecl; inline;
    procedure get_nat_size(width: Pgint; height: Pgint); cdecl; inline;
    function get_strength: TGtkConstraintStrength; cdecl; inline;
    procedure set_max_size(width: gint; height: gint); cdecl; inline;
    procedure set_min_size(width: gint; height: gint); cdecl; inline;
    procedure set_name(name: Pgchar); cdecl; inline;
    procedure set_nat_size(width: gint; height: gint); cdecl; inline;
    procedure set_strength(strength: TGtkConstraintStrength); cdecl; inline;
    //property max_height: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_max_height  { property is writeable but setter not declared } ;
    //property max_width: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_max_width  { property is writeable but setter not declared } ;
    //property min_height: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_min_height  { property is writeable but setter not declared } ;
    //property min_width: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_min_width  { property is writeable but setter not declared } ;
    property name: Pgchar read get_name write set_name;
    //property nat_height: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_nat_height  { property is writeable but setter not declared } ;
    //property nat_width: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_nat_width  { property is writeable but setter not declared } ;
    property strength: TGtkConstraintStrength read get_strength write set_strength;
  end;

  PPGtkConstraintGuideClass = ^PGtkConstraintGuideClass;
  PGtkConstraintGuideClass = ^TGtkConstraintGuideClass;
  TGtkConstraintGuideClass = object
    parent_class: TGObjectClass;
  end;

  PPGtkConstraintLayout = ^PGtkConstraintLayout;
  PGtkConstraintLayout = ^TGtkConstraintLayout;
  TGtkConstraintLayout = object(TGtkLayoutManager)
    function new: PGtkConstraintLayout; cdecl; inline; static;
    procedure add_constraint(constraint: PGtkConstraint); cdecl; inline;
    //function add_constraints_from_description(lines: PPgchar; n_lines: gsize; hspacing: gint; vspacing: gint; error: PPGError; first_view: Pgchar; args: array of const): PGList; cdecl; inline;
    function add_constraints_from_descriptionv(lines: PPgchar; n_lines: gsize; hspacing: gint; vspacing: gint; views: PGHashTable; error: PPGError): PGList; cdecl; inline;
    procedure add_guide(guide: PGtkConstraintGuide); cdecl; inline;
    function observe_constraints: PGListModel; cdecl; inline;
    function observe_guides: PGListModel; cdecl; inline;
    procedure remove_all_constraints; cdecl; inline;
    procedure remove_constraint(constraint: PGtkConstraint); cdecl; inline;
    procedure remove_guide(guide: PGtkConstraintGuide); cdecl; inline;
  end;

  PPGtkConstraintLayoutChild = ^PGtkConstraintLayoutChild;
  PGtkConstraintLayoutChild = ^TGtkConstraintLayoutChild;
  TGtkConstraintLayoutChild = object
  end;

  PPGtkLayoutChildClass = ^PGtkLayoutChildClass;
  PGtkLayoutChildClass = ^TGtkLayoutChildClass;
  TGtkLayoutChildClass = object
    parent_class: TGObjectClass;
  end;

  PPGtkConstraintLayoutChildClass = ^PGtkConstraintLayoutChildClass;
  PGtkConstraintLayoutChildClass = ^TGtkConstraintLayoutChildClass;
  TGtkConstraintLayoutChildClass = object
    parent_class: TGtkLayoutChildClass;
  end;

  PPGtkConstraintLayoutClass = ^PGtkConstraintLayoutClass;
  PGtkConstraintLayoutClass = ^TGtkConstraintLayoutClass;
  TGtkConstraintLayoutClass = object
    parent_class: TGtkLayoutManagerClass;
  end;

  PPGtkConstraintTargetInterface = ^PGtkConstraintTargetInterface;
  PGtkConstraintTargetInterface = ^TGtkConstraintTargetInterface;
  TGtkConstraintTargetInterface = object
  end;

  PPGtkConstraintVflParserError = ^PGtkConstraintVflParserError;
  PGtkConstraintVflParserError = ^TGtkConstraintVflParserError;

  PPGtkCornerType = ^PGtkCornerType;
  PGtkCornerType = ^TGtkCornerType;

  PPGtkCssLocation = ^PGtkCssLocation;
  PGtkCssLocation = ^TGtkCssLocation;

  TGtkCssLocation = record
    bytes: gsize;
    chars: gsize;
    lines: gsize;
    line_bytes: gsize;
    line_chars: gsize;
  end;



  PPGtkCssParserError = ^PGtkCssParserError;
  PGtkCssParserError = ^TGtkCssParserError;

  PPGtkCssParserWarning = ^PGtkCssParserWarning;
  PGtkCssParserWarning = ^TGtkCssParserWarning;

  PPGtkStyleProvider = ^PGtkStyleProvider;
  PGtkStyleProvider = ^TGtkStyleProvider;
  TGtkStyleProvider = object
    gtk_private_changed: procedure; cdecl;
  end;

  PPGtkCssProvider = ^PGtkCssProvider;
  PGtkCssProvider = ^TGtkCssProvider;
  TGtkCssProvider = object(TGObject)
    function new: PGtkCssProvider; cdecl; inline; static;
    procedure load_from_data(data: Pgchar; length: gssize); cdecl; inline;
    procedure load_from_file(file_: PGFile); cdecl; inline;
    procedure load_from_path(path: Pgchar); cdecl; inline;
    procedure load_from_resource(resource_path: Pgchar); cdecl; inline;
    procedure load_named(name: Pgchar; variant: Pgchar); cdecl; inline;
    function to_string: Pgchar; cdecl; inline;
  end;

  PPGtkCssSection = ^PGtkCssSection;
  PGtkCssSection = ^TGtkCssSection;
  TGtkCssSection = object
    function new(file_: PGFile; start: PGtkCssLocation; end_: PGtkCssLocation): PGtkCssSection; cdecl; inline; static;
    function get_end_location: PGtkCssLocation; cdecl; inline;
    function get_file: PGFile; cdecl; inline;
    function get_parent: PGtkCssSection; cdecl; inline;
    function get_start_location: PGtkCssLocation; cdecl; inline;
    procedure print(string_: PGString); cdecl; inline;
    function ref: PGtkCssSection; cdecl; inline;
    function to_string: Pgchar; cdecl; inline;
    procedure unref; cdecl; inline;
  end;

  PPGtkCssProviderClass = ^PGtkCssProviderClass;
  PGtkCssProviderClass = ^TGtkCssProviderClass;
  TGtkCssProviderClass = object
  end;

  PPGtkCssProviderPrivate = ^PGtkCssProviderPrivate;
  PGtkCssProviderPrivate = ^TGtkCssProviderPrivate;

  TGtkCssProviderPrivate = record
  end;



  TGtkCssStyleChange = record
  end;


  TGtkCustomAllocateFunc = procedure(widget: PGtkWidget; width: gint; height: gint; baseline: gint); cdecl;

  PPGtkCustomFilter = ^PGtkCustomFilter;
  PGtkCustomFilter = ^TGtkCustomFilter;

  PPGtkCustomFilterFunc = ^PGtkCustomFilterFunc;
  PGtkCustomFilterFunc = ^TGtkCustomFilterFunc;
  TGtkCustomFilterFunc = function(item: PGObject; user_data: gpointer): gboolean; cdecl;
  TGtkCustomFilter = object
    function new(match_func: TGtkCustomFilterFunc; user_data: gpointer; user_destroy: TGDestroyNotify): PGtkCustomFilter; cdecl; inline; static;
    procedure set_filter_func(match_func: TGtkCustomFilterFunc; user_data: gpointer; user_destroy: TGDestroyNotify); cdecl; inline;
  end;

  PPGtkCustomFilterClass = ^PGtkCustomFilterClass;
  PGtkCustomFilterClass = ^TGtkCustomFilterClass;
  TGtkCustomFilterClass = object
    parent_class: TGtkFilterClass;
  end;
  TGtkCustomRequestModeFunc = function(widget: PGtkWidget): TGtkSizeRequestMode; cdecl;
  TGtkCustomMeasureFunc = procedure(widget: PGtkWidget; orientation: TGtkOrientation; for_size: gint; minimum: Pgint; natural: Pgint; minimum_baseline: Pgint; natural_baseline: Pgint); cdecl;

  PPGtkCustomLayout = ^PGtkCustomLayout;
  PGtkCustomLayout = ^TGtkCustomLayout;

  PPGtkCustomRequestModeFunc = ^PGtkCustomRequestModeFunc;
  PGtkCustomRequestModeFunc = ^TGtkCustomRequestModeFunc;

  PPGtkCustomMeasureFunc = ^PGtkCustomMeasureFunc;
  PGtkCustomMeasureFunc = ^TGtkCustomMeasureFunc;

  PPGtkCustomAllocateFunc = ^PGtkCustomAllocateFunc;
  PGtkCustomAllocateFunc = ^TGtkCustomAllocateFunc;
  TGtkCustomLayout = object(TGtkLayoutManager)
    function new(request_mode: TGtkCustomRequestModeFunc; measure: TGtkCustomMeasureFunc; allocate: TGtkCustomAllocateFunc): PGtkCustomLayout; cdecl; inline; static;
  end;

  PPGtkCustomLayoutClass = ^PGtkCustomLayoutClass;
  PGtkCustomLayoutClass = ^TGtkCustomLayoutClass;
  TGtkCustomLayoutClass = object
    parent_class: TGtkLayoutManagerClass;
  end;

  PPGtkCustomSorter = ^PGtkCustomSorter;
  PGtkCustomSorter = ^TGtkCustomSorter;
  TGtkCustomSorter = object(TGtkSorter)
    function new(sort_func: TGCompareDataFunc; user_data: gpointer; user_destroy: TGDestroyNotify): PGtkCustomSorter; cdecl; inline; static;
    procedure set_sort_func(sort_func: TGCompareDataFunc; user_data: gpointer; user_destroy: TGDestroyNotify); cdecl; inline;
  end;

  PPGtkSorterClass = ^PGtkSorterClass;
  PGtkSorterClass = ^TGtkSorterClass;
  TGtkSorterClass = object
    parent_class: TGObjectClass;
    compare: function(self: PGtkSorter; item1: PGObject; item2: PGObject): TGtkOrdering; cdecl;
    get_order: function(self: PGtkSorter): TGtkSorterOrder; cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
    _gtk_reserved5: procedure; cdecl;
    _gtk_reserved6: procedure; cdecl;
    _gtk_reserved7: procedure; cdecl;
    _gtk_reserved8: procedure; cdecl;
  end;

  PPGtkCustomSorterClass = ^PGtkCustomSorterClass;
  PGtkCustomSorterClass = ^TGtkCustomSorterClass;
  TGtkCustomSorterClass = object
    parent_class: TGtkSorterClass;
  end;

  PPGtkDebugFlags = ^PGtkDebugFlags;
  PGtkDebugFlags = ^TGtkDebugFlags;

  PPGtkDeleteType = ^PGtkDeleteType;
  PGtkDeleteType = ^TGtkDeleteType;

  PPGtkDialog = ^PGtkDialog;
  PGtkDialog = ^TGtkDialog;

  PPGtkHeaderBar = ^PGtkHeaderBar;
  PGtkHeaderBar = ^TGtkHeaderBar;
  TGtkDialog = object(TGtkWindow)
    function new: PGtkDialog; cdecl; inline; static;
    //function new_with_buttons(title: Pgchar; parent: PGtkWindow; flags: TGtkDialogFlags; first_button_text: Pgchar; args: array of const): PGtkDialog; cdecl; inline; static;
    procedure add_action_widget(child: PGtkWidget; response_id: gint); cdecl; inline;
    function add_button(button_text: Pgchar; response_id: gint): PGtkWidget; cdecl; inline;
    //procedure add_buttons(first_button_text: Pgchar; args: array of const); cdecl; inline;
    function get_content_area: PGtkBox; cdecl; inline;
    function get_header_bar: PGtkHeaderBar; cdecl; inline;
    function get_response_for_widget(widget: PGtkWidget): gint; cdecl; inline;
    function get_widget_for_response(response_id: gint): PGtkWidget; cdecl; inline;
    procedure response(response_id: gint); cdecl; inline;
    procedure set_default_response(response_id: gint); cdecl; inline;
    procedure set_response_sensitive(response_id: gint; setting: gboolean); cdecl; inline;
    //property use_header_bar: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_use_header_bar  { property is writeable but setter not declared } ;
  end;
  TGtkHeaderBar = object(TGtkWidget)
    function new: PGtkHeaderBar; cdecl; inline; static;
    function get_decoration_layout: Pgchar; cdecl; inline;
    function get_show_title_buttons: gboolean; cdecl; inline;
    function get_title_widget: PGtkWidget; cdecl; inline;
    procedure pack_end(child: PGtkWidget); cdecl; inline;
    procedure pack_start(child: PGtkWidget); cdecl; inline;
    procedure remove(child: PGtkWidget); cdecl; inline;
    procedure set_decoration_layout(layout: Pgchar); cdecl; inline;
    procedure set_show_title_buttons(setting: gboolean); cdecl; inline;
    procedure set_title_widget(title_widget: PGtkWidget); cdecl; inline;
    property decoration_layout: Pgchar read get_decoration_layout write set_decoration_layout;
    property show_title_buttons: gboolean read get_show_title_buttons write set_show_title_buttons;
    property title_widget: PGtkWidget read get_title_widget write set_title_widget;
  end;

  PPGtkDialogClass = ^PGtkDialogClass;
  PGtkDialogClass = ^TGtkDialogClass;
  TGtkDialogClass = object
    parent_class: TGtkWindowClass;
    response: procedure(dialog: PGtkDialog; response_id: gint); cdecl;
    close: procedure(dialog: PGtkDialog); cdecl;
    padding: array [0..7] of gpointer;
  end;

  PPGtkDirectoryList = ^PGtkDirectoryList;
  PGtkDirectoryList = ^TGtkDirectoryList;
  TGtkDirectoryList = object(TGObject)
    function new(attributes: Pgchar; file_: PGFile): PGtkDirectoryList; cdecl; inline; static;
    function get_attributes: Pgchar; cdecl; inline;
    function get_error: PGError; cdecl; inline;
    function get_file: PGFile; cdecl; inline;
    function get_io_priority: gint; cdecl; inline;
    function get_monitored: gboolean; cdecl; inline;
    function is_loading: gboolean; cdecl; inline;
    procedure set_attributes(attributes: Pgchar); cdecl; inline;
    procedure set_file(file_: PGFile); cdecl; inline;
    procedure set_io_priority(io_priority: gint); cdecl; inline;
    procedure set_monitored(monitored: gboolean); cdecl; inline;
    property attributes: Pgchar read get_attributes write set_attributes;
    property error: PGError read get_error ;
    property file_: PGFile read get_file write set_file;
    property io_priority: gint read get_io_priority write set_io_priority;
    //property loading: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_loading ;
    property monitored: gboolean read get_monitored write set_monitored;
  end;

  PPGtkDirectoryListClass = ^PGtkDirectoryListClass;
  PGtkDirectoryListClass = ^TGtkDirectoryListClass;
  TGtkDirectoryListClass = object
    parent_class: TGObjectClass;
  end;

  PPGtkDragIcon = ^PGtkDragIcon;
  PGtkDragIcon = ^TGtkDragIcon;
  TGtkDragIcon = object(TGtkWidget)
    function create_widget_for_value(value: PGValue): PGtkWidget; cdecl; inline; static;
    function get_for_drag(drag: PGdkDrag): PGtkWidget; cdecl; inline; static;
    procedure set_from_paintable(drag: PGdkDrag; paintable: PGdkPaintable; hot_x: gint; hot_y: gint); cdecl; inline; static;
    function get_child: PGtkWidget; cdecl; inline;
    procedure set_child(child: PGtkWidget); cdecl; inline;
    property child: PGtkWidget read get_child write set_child;
  end;

  PPGtkDragIconClass = ^PGtkDragIconClass;
  PGtkDragIconClass = ^TGtkDragIconClass;
  TGtkDragIconClass = object
    parent_class: TGtkWidgetClass;
  end;

  PPGtkDragSource = ^PGtkDragSource;
  PGtkDragSource = ^TGtkDragSource;
  TGtkDragSource = object
    function new: PGtkDragSource; cdecl; inline; static;
    procedure drag_cancel; cdecl; inline;
    function get_actions: TGdkDragAction; cdecl; inline;
    function get_content: PGdkContentProvider; cdecl; inline;
    function get_drag: PGdkDrag; cdecl; inline;
    procedure set_actions(actions: TGdkDragAction); cdecl; inline;
    procedure set_content(content: PGdkContentProvider); cdecl; inline;
    procedure set_icon(paintable: PGdkPaintable; hot_x: gint; hot_y: gint); cdecl; inline;
    property actions: TGdkDragAction read get_actions write set_actions;
    property content: PGdkContentProvider read get_content write set_content;
  end;

  PPGtkDragSourceClass = ^PGtkDragSourceClass;
  PGtkDragSourceClass = ^TGtkDragSourceClass;
  TGtkDragSourceClass = object
  end;

  PPGtkDrawingArea = ^PGtkDrawingArea;
  PGtkDrawingArea = ^TGtkDrawingArea;

  PPGtkDrawingAreaDrawFunc = ^PGtkDrawingAreaDrawFunc;
  PGtkDrawingAreaDrawFunc = ^TGtkDrawingAreaDrawFunc;
  TGtkDrawingAreaDrawFunc = procedure(drawing_area: PGtkDrawingArea; cr: Pcairo_t; width: gint; height: gint; user_data: gpointer); cdecl;
  TGtkDrawingArea = object(TGtkWidget)
    function new: PGtkDrawingArea; cdecl; inline; static;
    function get_content_height: gint; cdecl; inline;
    function get_content_width: gint; cdecl; inline;
    procedure set_content_height(height: gint); cdecl; inline;
    procedure set_content_width(width: gint); cdecl; inline;
    procedure set_draw_func(draw_func: TGtkDrawingAreaDrawFunc; user_data: gpointer; destroy_: TGDestroyNotify); cdecl; inline;
    property content_height: gint read get_content_height write set_content_height;
    property content_width: gint read get_content_width write set_content_width;
  end;

  PPGtkDrawingAreaClass = ^PGtkDrawingAreaClass;
  PGtkDrawingAreaClass = ^TGtkDrawingAreaClass;
  TGtkDrawingAreaClass = object
    parent_class: TGtkWidgetClass;
    resize: procedure(area: PGtkDrawingArea; width: gint; height: gint); cdecl;
    padding: array [0..7] of gpointer;
  end;

  PPGtkPropagationLimit = ^PGtkPropagationLimit;
  PGtkPropagationLimit = ^TGtkPropagationLimit;

  PPGtkPropagationPhase = ^PGtkPropagationPhase;
  PGtkPropagationPhase = ^TGtkPropagationPhase;
  TGtkEventController = object(TGObject)
    function get_current_event: PGdkEvent; cdecl; inline;
    function get_current_event_device: PGdkDevice; cdecl; inline;
    function get_current_event_state: TGdkModifierType; cdecl; inline;
    function get_current_event_time: guint32; cdecl; inline;
    function get_name: Pgchar; cdecl; inline;
    function get_propagation_limit: TGtkPropagationLimit; cdecl; inline;
    function get_propagation_phase: TGtkPropagationPhase; cdecl; inline;
    function get_widget: PGtkWidget; cdecl; inline;
    procedure reset; cdecl; inline;
    procedure set_name(name: Pgchar); cdecl; inline;
    procedure set_propagation_limit(limit: TGtkPropagationLimit); cdecl; inline;
    procedure set_propagation_phase(phase: TGtkPropagationPhase); cdecl; inline;
    property name: Pgchar read get_name write set_name;
    property propagation_limit: TGtkPropagationLimit read get_propagation_limit write set_propagation_limit;
    property propagation_phase: TGtkPropagationPhase read get_propagation_phase write set_propagation_phase;
    property widget: PGtkWidget read get_widget ;
  end;

  PPGtkDropControllerMotion = ^PGtkDropControllerMotion;
  PGtkDropControllerMotion = ^TGtkDropControllerMotion;
  TGtkDropControllerMotion = object(TGtkEventController)
    function new: PGtkDropControllerMotion; cdecl; inline; static;
    function contains_pointer: gboolean; cdecl; inline;
    function get_drop: PGdkDrop; cdecl; inline;
    function is_pointer: gboolean; cdecl; inline;
    //property contains_pointer1: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_contains_pointer ;
    property drop: PGdkDrop read get_drop ;
    //property is_pointer1: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_is_pointer ;
  end;

  PPGtkDropControllerMotionClass = ^PGtkDropControllerMotionClass;
  PGtkDropControllerMotionClass = ^TGtkDropControllerMotionClass;
  TGtkDropControllerMotionClass = object
  end;

  PPGtkDropDown = ^PGtkDropDown;
  PGtkDropDown = ^TGtkDropDown;
  TGtkDropDown = object(TGtkWidget)
    function new(model: PGListModel; expression: PGtkExpression): PGtkDropDown; cdecl; inline; static;
    function new_from_strings(strings: PPgchar): PGtkDropDown; cdecl; inline; static;
    function get_enable_search: gboolean; cdecl; inline;
    function get_expression: PGtkExpression; cdecl; inline;
    function get_factory: PGtkListItemFactory; cdecl; inline;
    function get_list_factory: PGtkListItemFactory; cdecl; inline;
    function get_model: PGListModel; cdecl; inline;
    function get_selected: guint; cdecl; inline;
    function get_selected_item: PGObject; cdecl; inline;
    function get_show_arrow: gboolean; cdecl; inline;
    procedure set_enable_search(enable_search: gboolean); cdecl; inline;
    procedure set_expression(expression: PGtkExpression); cdecl; inline;
    procedure set_factory(factory: PGtkListItemFactory); cdecl; inline;
    procedure set_list_factory(factory: PGtkListItemFactory); cdecl; inline;
    procedure set_model(model: PGListModel); cdecl; inline;
    procedure set_selected(position: guint); cdecl; inline;
    procedure set_show_arrow(show_arrow: gboolean); cdecl; inline;
    property enable_search: gboolean read get_enable_search write set_enable_search;
    property expression: PGtkExpression read get_expression write set_expression;
    property factory: PGtkListItemFactory read get_factory write set_factory;
    property list_factory: PGtkListItemFactory read get_list_factory write set_list_factory;
    property model: PGListModel read get_model write set_model;
    property selected: guint read get_selected write set_selected;
    property selected_item: PGObject read get_selected_item ;
    property show_arrow: gboolean read get_show_arrow write set_show_arrow;
  end;

  PPGtkDropDownClass = ^PGtkDropDownClass;
  PGtkDropDownClass = ^TGtkDropDownClass;
  TGtkDropDownClass = object
    parent_class: TGtkWidgetClass;
  end;

  PPGtkDropTarget = ^PGtkDropTarget;
  PGtkDropTarget = ^TGtkDropTarget;
  TGtkDropTarget = object(TGtkEventController)
    function new(type_: TGType; actions: TGdkDragAction): PGtkDropTarget; cdecl; inline; static;
    function get_actions: TGdkDragAction; cdecl; inline;
    function get_current_drop: PGdkDrop; cdecl; inline;
    function get_formats: PGdkContentFormats; cdecl; inline;
    function get_gtypes(n_types: Pgsize): PGType; cdecl; inline;
    function get_preload: gboolean; cdecl; inline;
    function get_value: PGValue; cdecl; inline;
    procedure reject; cdecl; inline;
    procedure set_actions(actions: TGdkDragAction); cdecl; inline;
    procedure set_gtypes(types: PGType; n_types: gsize); cdecl; inline;
    procedure set_preload(preload: gboolean); cdecl; inline;
    property actions: TGdkDragAction read get_actions write set_actions;
    property current_drop: PGdkDrop read get_current_drop ;
    property formats: PGdkContentFormats read get_formats  { property is writeable but setter not declared } ;
    property preload: gboolean read get_preload write set_preload;
    property value: PGValue read get_value ;
  end;

  PPGtkDropTargetAsync = ^PGtkDropTargetAsync;
  PGtkDropTargetAsync = ^TGtkDropTargetAsync;
  TGtkDropTargetAsync = object(TGtkEventController)
    function new(formats: PGdkContentFormats; actions: TGdkDragAction): PGtkDropTargetAsync; cdecl; inline; static;
    function get_actions: TGdkDragAction; cdecl; inline;
    function get_formats: PGdkContentFormats; cdecl; inline;
    procedure reject_drop(drop: PGdkDrop); cdecl; inline;
    procedure set_actions(actions: TGdkDragAction); cdecl; inline;
    procedure set_formats(formats: PGdkContentFormats); cdecl; inline;
    property actions: TGdkDragAction read get_actions write set_actions;
    property formats: PGdkContentFormats read get_formats write set_formats;
  end;

  PPGtkDropTargetAsyncClass = ^PGtkDropTargetAsyncClass;
  PGtkDropTargetAsyncClass = ^TGtkDropTargetAsyncClass;
  TGtkDropTargetAsyncClass = object
  end;

  PPGtkDropTargetClass = ^PGtkDropTargetClass;
  PGtkDropTargetClass = ^TGtkDropTargetClass;
  TGtkDropTargetClass = object
  end;

  PPGtkEditable = ^PGtkEditable;
  PGtkEditable = ^TGtkEditable;
  TGtkEditable = object
    changed: procedure; cdecl;
    delete_text1: procedure(start_pos: gint; end_pos: gint); cdecl;
    insert_text1: procedure(text: Pgchar; length: gint; position: Pgint); cdecl;
    function delegate_get_property(object_: PGObject; prop_id: guint; value: PGValue; pspec: PGParamSpec): gboolean; cdecl; inline; static;
    function delegate_set_property(object_: PGObject; prop_id: guint; value: PGValue; pspec: PGParamSpec): gboolean; cdecl; inline; static;
    function install_properties(object_class: PGObjectClass; first_prop: guint): guint; cdecl; inline; static;
    procedure delete_selection; cdecl; inline;
    procedure delete_text(start_pos: gint; end_pos: gint); cdecl; inline;
    procedure finish_delegate; cdecl; inline;
    function get_alignment: gfloat; cdecl; inline;
    function get_chars(start_pos: gint; end_pos: gint): Pgchar; cdecl; inline;
    function get_delegate: PGtkEditable; cdecl; inline;
    function get_editable: gboolean; cdecl; inline;
    function get_enable_undo: gboolean; cdecl; inline;
    function get_max_width_chars: gint; cdecl; inline;
    function get_position: gint; cdecl; inline;
    function get_selection_bounds(start_pos: Pgint; end_pos: Pgint): gboolean; cdecl; inline;
    function get_text: Pgchar; cdecl; inline;
    function get_width_chars: gint; cdecl; inline;
    procedure init_delegate; cdecl; inline;
    procedure insert_text(text: Pgchar; length: gint; position: Pgint); cdecl; inline;
    procedure select_region(start_pos: gint; end_pos: gint); cdecl; inline;
    procedure set_alignment(xalign: gfloat); cdecl; inline;
    procedure set_editable(is_editable: gboolean); cdecl; inline;
    procedure set_enable_undo(enable_undo: gboolean); cdecl; inline;
    procedure set_max_width_chars(n_chars: gint); cdecl; inline;
    procedure set_position(position: gint); cdecl; inline;
    procedure set_text(text: Pgchar); cdecl; inline;
    procedure set_width_chars(n_chars: gint); cdecl; inline;
    //property cursor_position: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_cursor_position ;
    property editable: gboolean read get_editable write set_editable;
    property enable_undo: gboolean read get_enable_undo write set_enable_undo;
    property max_width_chars: gint read get_max_width_chars write set_max_width_chars;
    //property selection_bound: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_selection_bound ;
    property text: Pgchar read get_text write set_text;
    property width_chars: gint read get_width_chars write set_width_chars;
    //property xalign: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_xalign  { property is writeable but setter not declared } ;
  end;

  PPGtkEditableInterface = ^PGtkEditableInterface;
  PGtkEditableInterface = ^TGtkEditableInterface;
  TGtkEditableInterface = object
    base_iface: TGTypeInterface;
    insert_text: procedure(editable: PGtkEditable; text: Pgchar; length: gint; position: Pgint); cdecl;
    delete_text: procedure(editable: PGtkEditable; start_pos: gint; end_pos: gint); cdecl;
    changed: procedure(editable: PGtkEditable); cdecl;
    get_text: function(editable: PGtkEditable): Pgchar; cdecl;
    do_insert_text: procedure(editable: PGtkEditable; text: Pgchar; length: gint; position: Pgint); cdecl;
    do_delete_text: procedure(editable: PGtkEditable; start_pos: gint; end_pos: gint); cdecl;
    get_selection_bounds: function(editable: PGtkEditable; start_pos: Pgint; end_pos: Pgint): gboolean; cdecl;
    set_selection_bounds: procedure(editable: PGtkEditable; start_pos: gint; end_pos: gint); cdecl;
    get_delegate: function(editable: PGtkEditable): PGtkEditable; cdecl;
  end;

  PPGtkEditableLabel = ^PGtkEditableLabel;
  PGtkEditableLabel = ^TGtkEditableLabel;
  TGtkEditableLabel = object(TGtkWidget)
    function new(str: Pgchar): PGtkEditableLabel; cdecl; inline; static;
    function get_editing: gboolean; cdecl; inline;
    procedure start_editing; cdecl; inline;
    procedure stop_editing(commit: gboolean); cdecl; inline;
    property editing: gboolean read get_editing ;
  end;

  PPGtkEditableLabelClass = ^PGtkEditableLabelClass;
  PGtkEditableLabelClass = ^TGtkEditableLabelClass;
  TGtkEditableLabelClass = object
    parent_class: TGtkWidgetClass;
  end;

  PPGtkEditableProperties = ^PGtkEditableProperties;
  PGtkEditableProperties = ^TGtkEditableProperties;

  PPGtkEmojiChooser = ^PGtkEmojiChooser;
  PGtkEmojiChooser = ^TGtkEmojiChooser;
  TGtkEmojiChooser = object
    function new: PGtkEmojiChooser; cdecl; inline; static;
  end;

  PPGtkEmojiChooserClass = ^PGtkEmojiChooserClass;
  PGtkEmojiChooserClass = ^TGtkEmojiChooserClass;
  TGtkEmojiChooserClass = object
  end;

  PPGtkEntryBuffer = ^PGtkEntryBuffer;
  PGtkEntryBuffer = ^TGtkEntryBuffer;
  TGtkEntryBuffer = object(TGObject)
    function new(initial_chars: Pgchar; n_initial_chars: gint): PGtkEntryBuffer; cdecl; inline; static;
    function delete_text(position: guint; n_chars: gint): guint; cdecl; inline;
    procedure emit_deleted_text(position: guint; n_chars: guint); cdecl; inline;
    procedure emit_inserted_text(position: guint; chars: Pgchar; n_chars: guint); cdecl; inline;
    function get_bytes: gsize; cdecl; inline;
    function get_length: guint; cdecl; inline;
    function get_max_length: gint; cdecl; inline;
    function get_text: Pgchar; cdecl; inline;
    function insert_text(position: guint; chars: Pgchar; n_chars: gint): guint; cdecl; inline;
    procedure set_max_length(max_length: gint); cdecl; inline;
    procedure set_text(chars: Pgchar; n_chars: gint); cdecl; inline;
    property length: guint read get_length ;
    property max_length: gint read get_max_length write set_max_length;
    property text: Pgchar read get_text  { property is writeable but setter not declared } ;
  end;

  PPGtkEntry = ^PGtkEntry;
  PGtkEntry = ^TGtkEntry;

  PPGtkEntryCompletion = ^PGtkEntryCompletion;
  PGtkEntryCompletion = ^TGtkEntryCompletion;

  PPGtkEntryIconPosition = ^PGtkEntryIconPosition;
  PGtkEntryIconPosition = ^TGtkEntryIconPosition;

  PPGtkImageType = ^PGtkImageType;
  PGtkImageType = ^TGtkImageType;

  PPGtkInputHints = ^PGtkInputHints;
  PGtkInputHints = ^TGtkInputHints;

  PPGtkInputPurpose = ^PGtkInputPurpose;
  PGtkInputPurpose = ^TGtkInputPurpose;
  TGtkEntry = object(TGtkWidget)
    function new: PGtkEntry; cdecl; inline; static;
    function new_with_buffer(buffer: PGtkEntryBuffer): PGtkEntry; cdecl; inline; static;
    function get_activates_default: gboolean; cdecl; inline;
    function get_alignment: gfloat; cdecl; inline;
    function get_attributes: PPangoAttrList; cdecl; inline;
    function get_buffer: PGtkEntryBuffer; cdecl; inline;
    function get_completion: PGtkEntryCompletion; cdecl; inline;
    function get_current_icon_drag_source: gint; cdecl; inline;
    function get_extra_menu: PGMenuModel; cdecl; inline;
    function get_has_frame: gboolean; cdecl; inline;
    function get_icon_activatable(icon_pos: TGtkEntryIconPosition): gboolean; cdecl; inline;
    procedure get_icon_area(icon_pos: TGtkEntryIconPosition; icon_area: PGdkRectangle); cdecl; inline;
    function get_icon_at_pos(x: gint; y: gint): gint; cdecl; inline;
    function get_icon_gicon(icon_pos: TGtkEntryIconPosition): PGIcon; cdecl; inline;
    function get_icon_name(icon_pos: TGtkEntryIconPosition): Pgchar; cdecl; inline;
    function get_icon_paintable(icon_pos: TGtkEntryIconPosition): PGdkPaintable; cdecl; inline;
    function get_icon_sensitive(icon_pos: TGtkEntryIconPosition): gboolean; cdecl; inline;
    function get_icon_storage_type(icon_pos: TGtkEntryIconPosition): TGtkImageType; cdecl; inline;
    function get_icon_tooltip_markup(icon_pos: TGtkEntryIconPosition): Pgchar; cdecl; inline;
    function get_icon_tooltip_text(icon_pos: TGtkEntryIconPosition): Pgchar; cdecl; inline;
    function get_input_hints: TGtkInputHints; cdecl; inline;
    function get_input_purpose: TGtkInputPurpose; cdecl; inline;
    function get_invisible_char: gunichar; cdecl; inline;
    function get_max_length: gint; cdecl; inline;
    function get_overwrite_mode: gboolean; cdecl; inline;
    function get_placeholder_text: Pgchar; cdecl; inline;
    function get_progress_fraction: gdouble; cdecl; inline;
    function get_progress_pulse_step: gdouble; cdecl; inline;
    function get_tabs: PPangoTabArray; cdecl; inline;
    function get_text_length: guint16; cdecl; inline;
    function get_visibility: gboolean; cdecl; inline;
    function grab_focus_without_selecting: gboolean; cdecl; inline;
    procedure progress_pulse; cdecl; inline;
    procedure reset_im_context; cdecl; inline;
    procedure set_activates_default(setting: gboolean); cdecl; inline;
    procedure set_alignment(xalign: gfloat); cdecl; inline;
    procedure set_attributes(attrs: PPangoAttrList); cdecl; inline;
    procedure set_buffer(buffer: PGtkEntryBuffer); cdecl; inline;
    procedure set_completion(completion: PGtkEntryCompletion); cdecl; inline;
    procedure set_extra_menu(model: PGMenuModel); cdecl; inline;
    procedure set_has_frame(setting: gboolean); cdecl; inline;
    procedure set_icon_activatable(icon_pos: TGtkEntryIconPosition; activatable: gboolean); cdecl; inline;
    procedure set_icon_drag_source(icon_pos: TGtkEntryIconPosition; provider: PGdkContentProvider; actions: TGdkDragAction); cdecl; inline;
    procedure set_icon_from_gicon(icon_pos: TGtkEntryIconPosition; icon: PGIcon); cdecl; inline;
    procedure set_icon_from_icon_name(icon_pos: TGtkEntryIconPosition; icon_name: Pgchar); cdecl; inline;
    procedure set_icon_from_paintable(icon_pos: TGtkEntryIconPosition; paintable: PGdkPaintable); cdecl; inline;
    procedure set_icon_sensitive(icon_pos: TGtkEntryIconPosition; sensitive: gboolean); cdecl; inline;
    procedure set_icon_tooltip_markup(icon_pos: TGtkEntryIconPosition; tooltip: Pgchar); cdecl; inline;
    procedure set_icon_tooltip_text(icon_pos: TGtkEntryIconPosition; tooltip: Pgchar); cdecl; inline;
    procedure set_input_hints(hints: TGtkInputHints); cdecl; inline;
    procedure set_input_purpose(purpose: TGtkInputPurpose); cdecl; inline;
    procedure set_invisible_char(ch: gunichar); cdecl; inline;
    procedure set_max_length(max: gint); cdecl; inline;
    procedure set_overwrite_mode(overwrite: gboolean); cdecl; inline;
    procedure set_placeholder_text(text: Pgchar); cdecl; inline;
    procedure set_progress_fraction(fraction: gdouble); cdecl; inline;
    procedure set_progress_pulse_step(fraction: gdouble); cdecl; inline;
    procedure set_tabs(tabs: PPangoTabArray); cdecl; inline;
    procedure set_visibility(visible: gboolean); cdecl; inline;
    procedure unset_invisible_char; cdecl; inline;
    property activates_default: gboolean read get_activates_default write set_activates_default;
    property attributes: PPangoAttrList read get_attributes write set_attributes;
    property buffer: PGtkEntryBuffer read get_buffer write set_buffer;
    property completion: PGtkEntryCompletion read get_completion write set_completion;
    //property enable_emoji_completion: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_enable_emoji_completion  { property is writeable but setter not declared } ;
    property extra_menu: PGMenuModel read get_extra_menu write set_extra_menu;
    property has_frame: gboolean read get_has_frame write set_has_frame;
    //property im_module: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_im_module  { property is writeable but setter not declared } ;
    property input_hints: TGtkInputHints read get_input_hints write set_input_hints;
    property input_purpose: TGtkInputPurpose read get_input_purpose write set_input_purpose;
    property invisible_char: gunichar read get_invisible_char write set_invisible_char;
    //property invisible_char_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_invisible_char_set  { property is writeable but setter not declared } ;
    property max_length: gint read get_max_length write set_max_length;
    property overwrite_mode: gboolean read get_overwrite_mode write set_overwrite_mode;
    property placeholder_text: Pgchar read get_placeholder_text write set_placeholder_text;
    //property primary_icon_activatable: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_primary_icon_activatable  { property is writeable but setter not declared } ;
    //property primary_icon_gicon: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_primary_icon_gicon  { property is writeable but setter not declared } ;
    //property primary_icon_name: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_primary_icon_name  { property is writeable but setter not declared } ;
    //property primary_icon_paintable: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_primary_icon_paintable  { property is writeable but setter not declared } ;
    //property primary_icon_sensitive: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_primary_icon_sensitive  { property is writeable but setter not declared } ;
    //property primary_icon_storage_type: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_primary_icon_storage_type ;
    //property primary_icon_tooltip_markup: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_primary_icon_tooltip_markup  { property is writeable but setter not declared } ;
    //property primary_icon_tooltip_text: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_primary_icon_tooltip_text  { property is writeable but setter not declared } ;
    property progress_fraction: gdouble read get_progress_fraction write set_progress_fraction;
    property progress_pulse_step: gdouble read get_progress_pulse_step write set_progress_pulse_step;
    //property scroll_offset: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_scroll_offset ;
    //property secondary_icon_activatable: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_secondary_icon_activatable  { property is writeable but setter not declared } ;
    //property secondary_icon_gicon: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_secondary_icon_gicon  { property is writeable but setter not declared } ;
    //property secondary_icon_name: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_secondary_icon_name  { property is writeable but setter not declared } ;
    //property secondary_icon_paintable: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_secondary_icon_paintable  { property is writeable but setter not declared } ;
    //property secondary_icon_sensitive: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_secondary_icon_sensitive  { property is writeable but setter not declared } ;
    //property secondary_icon_storage_type: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_secondary_icon_storage_type ;
    //property secondary_icon_tooltip_markup: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_secondary_icon_tooltip_markup  { property is writeable but setter not declared } ;
    //property secondary_icon_tooltip_text: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_secondary_icon_tooltip_text  { property is writeable but setter not declared } ;
    //property show_emoji_icon: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_show_emoji_icon  { property is writeable but setter not declared } ;
    property tabs: PPangoTabArray read get_tabs write set_tabs;
    property text_length: guint16 read get_text_length ;
    //property truncate_multiline: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_truncate_multiline  { property is writeable but setter not declared } ;
    property visibility: gboolean read get_visibility write set_visibility;
  end;

  PPGtkEntryCompletionMatchFunc = ^PGtkEntryCompletionMatchFunc;
  PGtkEntryCompletionMatchFunc = ^TGtkEntryCompletionMatchFunc;
  TGtkEntryCompletionMatchFunc = function(completion: PGtkEntryCompletion; key: Pgchar; iter: PGtkTreeIter; user_data: gpointer): gboolean; cdecl;
  TGtkEntryCompletion = object(TGObject)
    function new: PGtkEntryCompletion; cdecl; inline; static;
    function new_with_area(area: PGtkCellArea): PGtkEntryCompletion; cdecl; inline; static;
    procedure complete; cdecl; inline;
    function compute_prefix(key: Pgchar): Pgchar; cdecl; inline;
    function get_completion_prefix: Pgchar; cdecl; inline;
    function get_entry: PGtkWidget; cdecl; inline;
    function get_inline_completion: gboolean; cdecl; inline;
    function get_inline_selection: gboolean; cdecl; inline;
    function get_minimum_key_length: gint; cdecl; inline;
    function get_model: PGtkTreeModel; cdecl; inline;
    function get_popup_completion: gboolean; cdecl; inline;
    function get_popup_set_width: gboolean; cdecl; inline;
    function get_popup_single_match: gboolean; cdecl; inline;
    function get_text_column: gint; cdecl; inline;
    procedure insert_prefix; cdecl; inline;
    procedure set_inline_completion(inline_completion: gboolean); cdecl; inline;
    procedure set_inline_selection(inline_selection: gboolean); cdecl; inline;
    procedure set_match_func(func: TGtkEntryCompletionMatchFunc; func_data: gpointer; func_notify: TGDestroyNotify); cdecl; inline;
    procedure set_minimum_key_length(length: gint); cdecl; inline;
    procedure set_model(model: PGtkTreeModel); cdecl; inline;
    procedure set_popup_completion(popup_completion: gboolean); cdecl; inline;
    procedure set_popup_set_width(popup_set_width: gboolean); cdecl; inline;
    procedure set_popup_single_match(popup_single_match: gboolean); cdecl; inline;
    procedure set_text_column(column: gint); cdecl; inline;
    //property cell_area: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_cell_area  { property is writeable but setter not declared } ;
    property inline_completion: gboolean read get_inline_completion write set_inline_completion;
    property inline_selection: gboolean read get_inline_selection write set_inline_selection;
    property minimum_key_length: gint read get_minimum_key_length write set_minimum_key_length;
    property model: PGtkTreeModel read get_model write set_model;
    property popup_completion: gboolean read get_popup_completion write set_popup_completion;
    property popup_set_width: gboolean read get_popup_set_width write set_popup_set_width;
    property popup_single_match: gboolean read get_popup_single_match write set_popup_single_match;
    property text_column: gint read get_text_column write set_text_column;
  end;

  PPGtkEntryBufferClass = ^PGtkEntryBufferClass;
  PGtkEntryBufferClass = ^TGtkEntryBufferClass;
  TGtkEntryBufferClass = object
    parent_class: TGObjectClass;
    inserted_text: procedure(buffer: PGtkEntryBuffer; position: guint; chars: Pgchar; n_chars: guint); cdecl;
    deleted_text: procedure(buffer: PGtkEntryBuffer; position: guint; n_chars: guint); cdecl;
    get_text: function(buffer: PGtkEntryBuffer; n_bytes: Pgsize): Pgchar; cdecl;
    get_length: function(buffer: PGtkEntryBuffer): guint; cdecl;
    insert_text: function(buffer: PGtkEntryBuffer; position: guint; chars: Pgchar; n_chars: guint): guint; cdecl;
    delete_text: function(buffer: PGtkEntryBuffer; position: guint; n_chars: guint): guint; cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
    _gtk_reserved5: procedure; cdecl;
    _gtk_reserved6: procedure; cdecl;
    _gtk_reserved7: procedure; cdecl;
    _gtk_reserved8: procedure; cdecl;
  end;

  PPGtkEntryClass = ^PGtkEntryClass;
  PGtkEntryClass = ^TGtkEntryClass;
  TGtkEntryClass = object
    parent_class: TGtkWidgetClass;
    activate: procedure(entry: PGtkEntry); cdecl;
    padding: array [0..7] of gpointer;
  end;

  PPGtkEventControllerClass = ^PGtkEventControllerClass;
  PGtkEventControllerClass = ^TGtkEventControllerClass;
  TGtkEventControllerClass = object
  end;

  PPGtkEventControllerFocus = ^PGtkEventControllerFocus;
  PGtkEventControllerFocus = ^TGtkEventControllerFocus;
  TGtkEventControllerFocus = object(TGtkEventController)
    function new: PGtkEventControllerFocus; cdecl; inline; static;
    function contains_focus: gboolean; cdecl; inline;
    function is_focus: gboolean; cdecl; inline;
    //property contains_focus1: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_contains_focus ;
    //property is_focus1: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_is_focus ;
  end;

  PPGtkEventControllerFocusClass = ^PGtkEventControllerFocusClass;
  PGtkEventControllerFocusClass = ^TGtkEventControllerFocusClass;
  TGtkEventControllerFocusClass = object
  end;

  PPGtkEventControllerKey = ^PGtkEventControllerKey;
  PGtkEventControllerKey = ^TGtkEventControllerKey;

  PPGtkIMContext = ^PGtkIMContext;
  PGtkIMContext = ^TGtkIMContext;
  TGtkEventControllerKey = object(TGtkEventController)
    function new: PGtkEventControllerKey; cdecl; inline; static;
    function forward(widget: PGtkWidget): gboolean; cdecl; inline;
    function get_group: guint; cdecl; inline;
    function get_im_context: PGtkIMContext; cdecl; inline;
    procedure set_im_context(im_context: PGtkIMContext); cdecl; inline;
  end;
  TGtkIMContext = object(TGObject)
    function delete_surrounding(offset: gint; n_chars: gint): gboolean; cdecl; inline;
    function filter_key(press: gboolean; surface: PGdkSurface; device: PGdkDevice; time: guint32; keycode: guint; state: TGdkModifierType; group: gint): gboolean; cdecl; inline;
    function filter_keypress(event: PGdkEvent): gboolean; cdecl; inline;
    procedure focus_in; cdecl; inline;
    procedure focus_out; cdecl; inline;
    procedure get_preedit_string(str: PPgchar; attrs: PPPangoAttrList; cursor_pos: Pgint); cdecl; inline;
    function get_surrounding_with_selection(text: PPgchar; cursor_index: Pgint; anchor_index: Pgint): gboolean; cdecl; inline;
    procedure reset; cdecl; inline;
    procedure set_client_widget(widget: PGtkWidget); cdecl; inline;
    procedure set_cursor_location(area: PGdkRectangle); cdecl; inline;
    procedure set_surrounding_with_selection(text: Pgchar; len: gint; cursor_index: gint; anchor_index: gint); cdecl; inline;
    procedure set_use_preedit(use_preedit: gboolean); cdecl; inline;
    //property input_hints: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_input_hints  { property is writeable but setter not declared } ;
    //property input_purpose: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_input_purpose  { property is writeable but setter not declared } ;
  end;

  PPGtkEventControllerKeyClass = ^PGtkEventControllerKeyClass;
  PGtkEventControllerKeyClass = ^TGtkEventControllerKeyClass;
  TGtkEventControllerKeyClass = object
  end;

  PPGtkEventControllerLegacy = ^PGtkEventControllerLegacy;
  PGtkEventControllerLegacy = ^TGtkEventControllerLegacy;
  TGtkEventControllerLegacy = object(TGtkEventController)
    function new: PGtkEventControllerLegacy; cdecl; inline; static;
  end;

  PPGtkEventControllerLegacyClass = ^PGtkEventControllerLegacyClass;
  PGtkEventControllerLegacyClass = ^TGtkEventControllerLegacyClass;
  TGtkEventControllerLegacyClass = object
  end;

  PPGtkEventControllerMotion = ^PGtkEventControllerMotion;
  PGtkEventControllerMotion = ^TGtkEventControllerMotion;
  TGtkEventControllerMotion = object(TGtkEventController)
    function new: PGtkEventControllerMotion; cdecl; inline; static;
    function contains_pointer: gboolean; cdecl; inline;
    function is_pointer: gboolean; cdecl; inline;
    //property contains_pointer1: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_contains_pointer ;
    //property is_pointer1: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_is_pointer ;
  end;

  PPGtkEventControllerMotionClass = ^PGtkEventControllerMotionClass;
  PGtkEventControllerMotionClass = ^TGtkEventControllerMotionClass;
  TGtkEventControllerMotionClass = object
  end;

  PPGtkEventControllerScrollFlags = ^PGtkEventControllerScrollFlags;
  PGtkEventControllerScrollFlags = ^TGtkEventControllerScrollFlags;

  PPGtkEventControllerScroll = ^PGtkEventControllerScroll;
  PGtkEventControllerScroll = ^TGtkEventControllerScroll;
  TGtkEventControllerScroll = object(TGtkEventController)
    function new(flags: TGtkEventControllerScrollFlags): PGtkEventControllerScroll; cdecl; inline; static;
    function get_flags: TGtkEventControllerScrollFlags; cdecl; inline;
    procedure set_flags(flags: TGtkEventControllerScrollFlags); cdecl; inline;
    property flags: TGtkEventControllerScrollFlags read get_flags write set_flags;
  end;

  PPGtkEventControllerScrollClass = ^PGtkEventControllerScrollClass;
  PGtkEventControllerScrollClass = ^TGtkEventControllerScrollClass;
  TGtkEventControllerScrollClass = object
  end;

  PPGtkEventSequenceState = ^PGtkEventSequenceState;
  PGtkEventSequenceState = ^TGtkEventSequenceState;

  PPGtkEveryFilter = ^PGtkEveryFilter;
  PGtkEveryFilter = ^TGtkEveryFilter;
  TGtkEveryFilter = object
    function new: PGtkEveryFilter; cdecl; inline; static;
  end;

  PPGtkEveryFilterClass = ^PGtkEveryFilterClass;
  PGtkEveryFilterClass = ^TGtkEveryFilterClass;
  TGtkEveryFilterClass = object
  end;

  PPGtkExpander = ^PGtkExpander;
  PGtkExpander = ^TGtkExpander;
  TGtkExpander = object(TGtkWidget)
    function new(label_: Pgchar): PGtkExpander; cdecl; inline; static;
    function new_with_mnemonic(label_: Pgchar): PGtkExpander; cdecl; inline; static;
    function get_child: PGtkWidget; cdecl; inline;
    function get_expanded: gboolean; cdecl; inline;
    function get_label: Pgchar; cdecl; inline;
    function get_label_widget: PGtkWidget; cdecl; inline;
    function get_resize_toplevel: gboolean; cdecl; inline;
    function get_use_markup: gboolean; cdecl; inline;
    function get_use_underline: gboolean; cdecl; inline;
    procedure set_child(child: PGtkWidget); cdecl; inline;
    procedure set_expanded(expanded: gboolean); cdecl; inline;
    procedure set_label(label_: Pgchar); cdecl; inline;
    procedure set_label_widget(label_widget: PGtkWidget); cdecl; inline;
    procedure set_resize_toplevel(resize_toplevel: gboolean); cdecl; inline;
    procedure set_use_markup(use_markup: gboolean); cdecl; inline;
    procedure set_use_underline(use_underline: gboolean); cdecl; inline;
    property child: PGtkWidget read get_child write set_child;
    property expanded: gboolean read get_expanded write set_expanded;
    property label_: Pgchar read get_label write set_label;
    property label_widget: PGtkWidget read get_label_widget write set_label_widget;
    property resize_toplevel: gboolean read get_resize_toplevel write set_resize_toplevel;
    property use_markup: gboolean read get_use_markup write set_use_markup;
    property use_underline: gboolean read get_use_underline write set_use_underline;
  end;
  TGtkExpressionWatch = object
    function evaluate(value: PGValue): gboolean; cdecl; inline;
    function ref: PGtkExpressionWatch; cdecl; inline;
    procedure unref; cdecl; inline;
    procedure unwatch; cdecl; inline;
  end;

  PPGtkFileChooser = ^PGtkFileChooser;
  PGtkFileChooser = ^TGtkFileChooser;

  PPGtkFileFilter = ^PGtkFileFilter;
  PGtkFileFilter = ^TGtkFileFilter;

  PPGtkFileChooserAction = ^PGtkFileChooserAction;
  PGtkFileChooserAction = ^TGtkFileChooserAction;
  TGtkFileChooser = object
    procedure add_choice(id: Pgchar; label_: Pgchar; options: PPgchar; option_labels: PPgchar); cdecl; inline;
    procedure add_filter(filter: PGtkFileFilter); cdecl; inline;
    function add_shortcut_folder(folder: PGFile; error: PPGError): gboolean; cdecl; inline;
    function get_action: TGtkFileChooserAction; cdecl; inline;
    function get_choice(id: Pgchar): Pgchar; cdecl; inline;
    function get_create_folders: gboolean; cdecl; inline;
    function get_current_folder: PGFile; cdecl; inline;
    function get_current_name: Pgchar; cdecl; inline;
    function get_file: PGFile; cdecl; inline;
    function get_files: PGListModel; cdecl; inline;
    function get_filter: PGtkFileFilter; cdecl; inline;
    function get_filters: PGListModel; cdecl; inline;
    function get_select_multiple: gboolean; cdecl; inline;
    function get_shortcut_folders: PGListModel; cdecl; inline;
    procedure remove_choice(id: Pgchar); cdecl; inline;
    procedure remove_filter(filter: PGtkFileFilter); cdecl; inline;
    function remove_shortcut_folder(folder: PGFile; error: PPGError): gboolean; cdecl; inline;
    procedure set_action(action: TGtkFileChooserAction); cdecl; inline;
    procedure set_choice(id: Pgchar; option: Pgchar); cdecl; inline;
    procedure set_create_folders(create_folders: gboolean); cdecl; inline;
    function set_current_folder(file_: PGFile; error: PPGError): gboolean; cdecl; inline;
    procedure set_current_name(name: Pgchar); cdecl; inline;
    function set_file(file_: PGFile; error: PPGError): gboolean; cdecl; inline;
    procedure set_filter(filter: PGtkFileFilter); cdecl; inline;
    procedure set_select_multiple(select_multiple: gboolean); cdecl; inline;
    property action: TGtkFileChooserAction read get_action write set_action;
    property create_folders: gboolean read get_create_folders write set_create_folders;
    property filter: PGtkFileFilter read get_filter write set_filter;
    property filters: PGListModel read get_filters ;
    property select_multiple: gboolean read get_select_multiple write set_select_multiple;
    property shortcut_folders: PGListModel read get_shortcut_folders ;
  end;
  TGtkFileFilter = object
    function new: PGtkFileFilter; cdecl; inline; static;
    function new_from_gvariant(variant: PGVariant): PGtkFileFilter; cdecl; inline; static;
    procedure add_mime_type(mime_type: Pgchar); cdecl; inline;
    procedure add_pattern(pattern: Pgchar); cdecl; inline;
    procedure add_pixbuf_formats; cdecl; inline;
    procedure add_suffix(suffix: Pgchar); cdecl; inline;
    function get_attributes: PPgchar; cdecl; inline;
    function get_name: Pgchar; cdecl; inline;
    procedure set_name(name: Pgchar); cdecl; inline;
    function to_gvariant: PGVariant; cdecl; inline;
    property name: Pgchar read get_name write set_name;
  end;

  PPGtkFileChooserDialog = ^PGtkFileChooserDialog;
  PGtkFileChooserDialog = ^TGtkFileChooserDialog;
  TGtkFileChooserDialog = object(TGtkDialog)
    //function new(title: Pgchar; parent: PGtkWindow; action: TGtkFileChooserAction; first_button_text: Pgchar; args: array of const): PGtkFileChooserDialog; cdecl; inline; static;
  end;

  PPGtkFileChooserError = ^PGtkFileChooserError;
  PGtkFileChooserError = ^TGtkFileChooserError;

  PPGtkFileChooserNative = ^PGtkFileChooserNative;
  PGtkFileChooserNative = ^TGtkFileChooserNative;
  TGtkFileChooserNative = object
    function new(title: Pgchar; parent: PGtkWindow; action: TGtkFileChooserAction; accept_label: Pgchar; cancel_label: Pgchar): PGtkFileChooserNative; cdecl; inline; static;
    function get_accept_label: Pgchar; cdecl; inline;
    function get_cancel_label: Pgchar; cdecl; inline;
    procedure set_accept_label(accept_label: Pgchar); cdecl; inline;
    procedure set_cancel_label(cancel_label: Pgchar); cdecl; inline;
    property accept_label: Pgchar read get_accept_label write set_accept_label;
    property cancel_label: Pgchar read get_cancel_label write set_cancel_label;
  end;

  PPGtkNativeDialogClass = ^PGtkNativeDialogClass;
  PGtkNativeDialogClass = ^TGtkNativeDialogClass;

  PPGtkNativeDialog = ^PGtkNativeDialog;
  PGtkNativeDialog = ^TGtkNativeDialog;
  TGtkNativeDialogClass = object
    parent_class: TGObjectClass;
    response: procedure(self: PGtkNativeDialog; response_id: gint); cdecl;
    show: procedure(self: PGtkNativeDialog); cdecl;
    hide: procedure(self: PGtkNativeDialog); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkFileChooserNativeClass = ^PGtkFileChooserNativeClass;
  PGtkFileChooserNativeClass = ^TGtkFileChooserNativeClass;
  TGtkFileChooserNativeClass = object
    parent_class: TGtkNativeDialogClass;
  end;

  PPGtkFileChooserWidget = ^PGtkFileChooserWidget;
  PGtkFileChooserWidget = ^TGtkFileChooserWidget;
  TGtkFileChooserWidget = object(TGtkWidget)
    function new(action: TGtkFileChooserAction): PGtkFileChooserWidget; cdecl; inline; static;
    //property search_mode: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_search_mode  { property is writeable but setter not declared } ;
    //property subtitle: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_subtitle ;
  end;

  PPGtkFilterChange = ^PGtkFilterChange;
  PGtkFilterChange = ^TGtkFilterChange;
  TGtkFilter = object(TGObject)
    procedure changed(change: TGtkFilterChange); cdecl; inline;
    function get_strictness: TGtkFilterMatch; cdecl; inline;
    function match(item: PGObject): gboolean; cdecl; inline;
  end;

  PPGtkFilterListModel = ^PGtkFilterListModel;
  PGtkFilterListModel = ^TGtkFilterListModel;
  TGtkFilterListModel = object(TGObject)
    function new(model: PGListModel; filter: PGtkFilter): PGtkFilterListModel; cdecl; inline; static;
    function get_filter: PGtkFilter; cdecl; inline;
    function get_incremental: gboolean; cdecl; inline;
    function get_model: PGListModel; cdecl; inline;
    function get_pending: guint; cdecl; inline;
    procedure set_filter(filter: PGtkFilter); cdecl; inline;
    procedure set_incremental(incremental: gboolean); cdecl; inline;
    procedure set_model(model: PGListModel); cdecl; inline;
    property filter: PGtkFilter read get_filter write set_filter;
    property incremental: gboolean read get_incremental write set_incremental;
    property model: PGListModel read get_model write set_model;
    property pending: guint read get_pending ;
  end;

  PPGtkFilterListModelClass = ^PGtkFilterListModelClass;
  PGtkFilterListModelClass = ^TGtkFilterListModelClass;
  TGtkFilterListModelClass = object
    parent_class: TGObjectClass;
  end;

  PPGtkFixed = ^PGtkFixed;
  PGtkFixed = ^TGtkFixed;
  TGtkFixed = object(TGtkWidget)
    function new: PGtkFixed; cdecl; inline; static;
    procedure get_child_position(widget: PGtkWidget; x: Pgdouble; y: Pgdouble); cdecl; inline;
    function get_child_transform(widget: PGtkWidget): PGskTransform; cdecl; inline;
    procedure move(widget: PGtkWidget; x: gdouble; y: gdouble); cdecl; inline;
    procedure put(widget: PGtkWidget; x: gdouble; y: gdouble); cdecl; inline;
    procedure remove(widget: PGtkWidget); cdecl; inline;
    procedure set_child_transform(widget: PGtkWidget; transform: PGskTransform); cdecl; inline;
  end;

  PPGtkFixedClass = ^PGtkFixedClass;
  PGtkFixedClass = ^TGtkFixedClass;
  TGtkFixedClass = object
    parent_class: TGtkWidgetClass;
    padding: array [0..7] of gpointer;
  end;

  PPGtkFixedLayout = ^PGtkFixedLayout;
  PGtkFixedLayout = ^TGtkFixedLayout;
  TGtkFixedLayout = object(TGtkLayoutManager)
    function new: PGtkFixedLayout; cdecl; inline; static;
  end;

  PPGtkFixedLayoutChild = ^PGtkFixedLayoutChild;
  PGtkFixedLayoutChild = ^TGtkFixedLayoutChild;
  TGtkFixedLayoutChild = object
    function get_transform: PGskTransform; cdecl; inline;
    procedure set_transform(transform: PGskTransform); cdecl; inline;
    property transform: PGskTransform read get_transform write set_transform;
  end;

  PPGtkFixedLayoutChildClass = ^PGtkFixedLayoutChildClass;
  PGtkFixedLayoutChildClass = ^TGtkFixedLayoutChildClass;
  TGtkFixedLayoutChildClass = object
    parent_class: TGtkLayoutChildClass;
  end;

  PPGtkFixedLayoutClass = ^PGtkFixedLayoutClass;
  PGtkFixedLayoutClass = ^TGtkFixedLayoutClass;
  TGtkFixedLayoutClass = object
    parent_class: TGtkLayoutManagerClass;
  end;

  PPGtkFlattenListModel = ^PGtkFlattenListModel;
  PGtkFlattenListModel = ^TGtkFlattenListModel;
  TGtkFlattenListModel = object(TGObject)
    function new(model: PGListModel): PGtkFlattenListModel; cdecl; inline; static;
    function get_model: PGListModel; cdecl; inline;
    function get_model_for_item(position: guint): PGListModel; cdecl; inline;
    procedure set_model(model: PGListModel); cdecl; inline;
    property model: PGListModel read get_model write set_model;
  end;

  PPGtkFlattenListModelClass = ^PGtkFlattenListModelClass;
  PGtkFlattenListModelClass = ^TGtkFlattenListModelClass;
  TGtkFlattenListModelClass = object
    parent_class: TGObjectClass;
  end;

  PPGtkFlowBox = ^PGtkFlowBox;
  PGtkFlowBox = ^TGtkFlowBox;

  PPGtkFlowBoxCreateWidgetFunc = ^PGtkFlowBoxCreateWidgetFunc;
  PGtkFlowBoxCreateWidgetFunc = ^TGtkFlowBoxCreateWidgetFunc;
  TGtkFlowBoxCreateWidgetFunc = function(item: PGObject; user_data: gpointer): PGtkWidget; cdecl;

  PPGtkFlowBoxChild = ^PGtkFlowBoxChild;
  PGtkFlowBoxChild = ^TGtkFlowBoxChild;

  PPGtkSelectionMode = ^PGtkSelectionMode;
  PGtkSelectionMode = ^TGtkSelectionMode;

  PPGtkFlowBoxForeachFunc = ^PGtkFlowBoxForeachFunc;
  PGtkFlowBoxForeachFunc = ^TGtkFlowBoxForeachFunc;
  TGtkFlowBoxForeachFunc = procedure(box: PGtkFlowBox; child: PGtkFlowBoxChild; user_data: gpointer); cdecl;

  PPGtkFlowBoxFilterFunc = ^PGtkFlowBoxFilterFunc;
  PGtkFlowBoxFilterFunc = ^TGtkFlowBoxFilterFunc;
  TGtkFlowBoxFilterFunc = function(child: PGtkFlowBoxChild; user_data: gpointer): gboolean; cdecl;

  PPGtkFlowBoxSortFunc = ^PGtkFlowBoxSortFunc;
  PGtkFlowBoxSortFunc = ^TGtkFlowBoxSortFunc;
  TGtkFlowBoxSortFunc = function(child1: PGtkFlowBoxChild; child2: PGtkFlowBoxChild; user_data: gpointer): gint; cdecl;
  TGtkFlowBox = object(TGtkWidget)
    function new: PGtkFlowBox; cdecl; inline; static;
    procedure append(child: PGtkWidget); cdecl; inline;
    procedure bind_model(model: PGListModel; create_widget_func: TGtkFlowBoxCreateWidgetFunc; user_data: gpointer; user_data_free_func: TGDestroyNotify); cdecl; inline;
    function get_activate_on_single_click: gboolean; cdecl; inline;
    function get_child_at_index(idx: gint): PGtkFlowBoxChild; cdecl; inline;
    function get_child_at_pos(x: gint; y: gint): PGtkFlowBoxChild; cdecl; inline;
    function get_column_spacing: guint; cdecl; inline;
    function get_homogeneous: gboolean; cdecl; inline;
    function get_max_children_per_line: guint; cdecl; inline;
    function get_min_children_per_line: guint; cdecl; inline;
    function get_row_spacing: guint; cdecl; inline;
    function get_selected_children: PGList; cdecl; inline;
    function get_selection_mode: TGtkSelectionMode; cdecl; inline;
    procedure insert(widget: PGtkWidget; position: gint); cdecl; inline;
    procedure invalidate_filter; cdecl; inline;
    procedure invalidate_sort; cdecl; inline;
    procedure prepend(child: PGtkWidget); cdecl; inline;
    procedure remove(widget: PGtkWidget); cdecl; inline;
    procedure select_all; cdecl; inline;
    procedure select_child(child: PGtkFlowBoxChild); cdecl; inline;
    procedure selected_foreach(func: TGtkFlowBoxForeachFunc; data: gpointer); cdecl; inline;
    procedure set_activate_on_single_click(single: gboolean); cdecl; inline;
    procedure set_column_spacing(spacing: guint); cdecl; inline;
    procedure set_filter_func(filter_func: TGtkFlowBoxFilterFunc; user_data: gpointer; destroy_: TGDestroyNotify); cdecl; inline;
    procedure set_hadjustment(adjustment: PGtkAdjustment); cdecl; inline;
    procedure set_homogeneous(homogeneous: gboolean); cdecl; inline;
    procedure set_max_children_per_line(n_children: guint); cdecl; inline;
    procedure set_min_children_per_line(n_children: guint); cdecl; inline;
    procedure set_row_spacing(spacing: guint); cdecl; inline;
    procedure set_selection_mode(mode: TGtkSelectionMode); cdecl; inline;
    procedure set_sort_func(sort_func: TGtkFlowBoxSortFunc; user_data: gpointer; destroy_: TGDestroyNotify); cdecl; inline;
    procedure set_vadjustment(adjustment: PGtkAdjustment); cdecl; inline;
    procedure unselect_all; cdecl; inline;
    procedure unselect_child(child: PGtkFlowBoxChild); cdecl; inline;
    //property accept_unpaired_release: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_accept_unpaired_release  { property is writeable but setter not declared } ;
    property activate_on_single_click: gboolean read get_activate_on_single_click write set_activate_on_single_click;
    property column_spacing: guint read get_column_spacing write set_column_spacing;
    property homogeneous: gboolean read get_homogeneous write set_homogeneous;
    property max_children_per_line: guint read get_max_children_per_line write set_max_children_per_line;
    property min_children_per_line: guint read get_min_children_per_line write set_min_children_per_line;
    property row_spacing: guint read get_row_spacing write set_row_spacing;
    property selection_mode: TGtkSelectionMode read get_selection_mode write set_selection_mode;
  end;
  TGtkFlowBoxChild = object(TGtkWidget)
    function new: PGtkFlowBoxChild; cdecl; inline; static;
    procedure changed; cdecl; inline;
    function get_child: PGtkWidget; cdecl; inline;
    function get_index: gint; cdecl; inline;
    function is_selected: gboolean; cdecl; inline;
    procedure set_child(child: PGtkWidget); cdecl; inline;
    property child: PGtkWidget read get_child write set_child;
  end;

  PPGtkMovementStep = ^PGtkMovementStep;
  PGtkMovementStep = ^TGtkMovementStep;

  PPGtkFlowBoxChildClass = ^PGtkFlowBoxChildClass;
  PGtkFlowBoxChildClass = ^TGtkFlowBoxChildClass;
  TGtkFlowBoxChildClass = object
    parent_class: TGtkWidgetClass;
    activate: procedure(child: PGtkFlowBoxChild); cdecl;
    padding: array [0..7] of gpointer;
  end;

  PPGtkFontChooser = ^PGtkFontChooser;
  PGtkFontChooser = ^TGtkFontChooser;

  PPGtkFontChooserLevel = ^PGtkFontChooserLevel;
  PGtkFontChooserLevel = ^TGtkFontChooserLevel;

  PPGtkFontFilterFunc = ^PGtkFontFilterFunc;
  PGtkFontFilterFunc = ^TGtkFontFilterFunc;
  TGtkFontFilterFunc = function(family: PPangoFontFamily; face: PPangoFontFace; data: gpointer): gboolean; cdecl;
  TGtkFontChooser = object
    font_activated: procedure(fontname: Pgchar); cdecl;
    function get_font: Pgchar; cdecl; inline;
    function get_font_desc: PPangoFontDescription; cdecl; inline;
    function get_font_face: PPangoFontFace; cdecl; inline;
    function get_font_family: PPangoFontFamily; cdecl; inline;
    function get_font_features: Pgchar; cdecl; inline;
    function get_font_map: PPangoFontMap; cdecl; inline;
    function get_font_size: gint; cdecl; inline;
    function get_language: Pgchar; cdecl; inline;
    function get_level: TGtkFontChooserLevel; cdecl; inline;
    function get_preview_text: Pgchar; cdecl; inline;
    function get_show_preview_entry: gboolean; cdecl; inline;
    procedure set_filter_func(filter: TGtkFontFilterFunc; user_data: gpointer; destroy_: TGDestroyNotify); cdecl; inline;
    procedure set_font(fontname: Pgchar); cdecl; inline;
    procedure set_font_desc(font_desc: PPangoFontDescription); cdecl; inline;
    procedure set_font_map(fontmap: PPangoFontMap); cdecl; inline;
    procedure set_language(language: Pgchar); cdecl; inline;
    procedure set_level(level: TGtkFontChooserLevel); cdecl; inline;
    procedure set_preview_text(text: Pgchar); cdecl; inline;
    procedure set_show_preview_entry(show_preview_entry: gboolean); cdecl; inline;
    property font: Pgchar read get_font write set_font;
    property font_desc: PPangoFontDescription read get_font_desc write set_font_desc;
    property font_features: Pgchar read get_font_features ;
    property language: Pgchar read get_language write set_language;
    property level: TGtkFontChooserLevel read get_level write set_level;
    property preview_text: Pgchar read get_preview_text write set_preview_text;
    property show_preview_entry: gboolean read get_show_preview_entry write set_show_preview_entry;
  end;

  PPGtkFontButton = ^PGtkFontButton;
  PGtkFontButton = ^TGtkFontButton;
  TGtkFontButton = object(TGtkWidget)
    function new: PGtkFontButton; cdecl; inline; static;
    function new_with_font(fontname: Pgchar): PGtkFontButton; cdecl; inline; static;
    function get_modal: gboolean; cdecl; inline;
    function get_title: Pgchar; cdecl; inline;
    function get_use_font: gboolean; cdecl; inline;
    function get_use_size: gboolean; cdecl; inline;
    procedure set_modal(modal: gboolean); cdecl; inline;
    procedure set_title(title: Pgchar); cdecl; inline;
    procedure set_use_font(use_font: gboolean); cdecl; inline;
    procedure set_use_size(use_size: gboolean); cdecl; inline;
    property modal: gboolean read get_modal write set_modal;
    property title: Pgchar read get_title write set_title;
    property use_font: gboolean read get_use_font write set_use_font;
    property use_size: gboolean read get_use_size write set_use_size;
  end;

  PPGtkFontChooserDialog = ^PGtkFontChooserDialog;
  PGtkFontChooserDialog = ^TGtkFontChooserDialog;
  TGtkFontChooserDialog = object(TGtkDialog)
    function new(title: Pgchar; parent: PGtkWindow): PGtkFontChooserDialog; cdecl; inline; static;
  end;

  PPGtkFontChooserIface = ^PGtkFontChooserIface;
  PGtkFontChooserIface = ^TGtkFontChooserIface;
  TGtkFontChooserIface = object
    base_iface: TGTypeInterface;
    get_font_family: function(fontchooser: PGtkFontChooser): PPangoFontFamily; cdecl;
    get_font_face: function(fontchooser: PGtkFontChooser): PPangoFontFace; cdecl;
    get_font_size: function(fontchooser: PGtkFontChooser): gint; cdecl;
    set_filter_func: procedure(fontchooser: PGtkFontChooser; filter: TGtkFontFilterFunc; user_data: gpointer; destroy_: TGDestroyNotify); cdecl;
    font_activated: procedure(chooser: PGtkFontChooser; fontname: Pgchar); cdecl;
    set_font_map: procedure(fontchooser: PGtkFontChooser; fontmap: PPangoFontMap); cdecl;
    get_font_map: function(fontchooser: PGtkFontChooser): PPangoFontMap; cdecl;
    padding: array [0..9] of gpointer;
  end;

  PPGtkFontChooserWidget = ^PGtkFontChooserWidget;
  PGtkFontChooserWidget = ^TGtkFontChooserWidget;
  TGtkFontChooserWidget = object(TGtkWidget)
    function new: PGtkFontChooserWidget; cdecl; inline; static;
    //property tweak_action: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_tweak_action ;
  end;

  PPGtkFrame = ^PGtkFrame;
  PGtkFrame = ^TGtkFrame;
  TGtkFrame = object(TGtkWidget)
    function new(label_: Pgchar): PGtkFrame; cdecl; inline; static;
    function get_child: PGtkWidget; cdecl; inline;
    function get_label: Pgchar; cdecl; inline;
    function get_label_align: gfloat; cdecl; inline;
    function get_label_widget: PGtkWidget; cdecl; inline;
    procedure set_child(child: PGtkWidget); cdecl; inline;
    procedure set_label(label_: Pgchar); cdecl; inline;
    procedure set_label_align(xalign: gfloat); cdecl; inline;
    procedure set_label_widget(label_widget: PGtkWidget); cdecl; inline;
    property child: PGtkWidget read get_child write set_child;
    property label_: Pgchar read get_label write set_label;
    property label_widget: PGtkWidget read get_label_widget write set_label_widget;
    //property label_xalign: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_label_xalign  { property is writeable but setter not declared } ;
  end;

  PPGtkFrameClass = ^PGtkFrameClass;
  PGtkFrameClass = ^TGtkFrameClass;
  TGtkFrameClass = object
    parent_class: TGtkWidgetClass;
    compute_child_allocation: procedure(frame: PGtkFrame; allocation: PGtkAllocation); cdecl;
    padding: array [0..7] of gpointer;
  end;

  PPGtkGLArea = ^PGtkGLArea;
  PGtkGLArea = ^TGtkGLArea;
  TGtkGLArea = object(TGtkWidget)
    function new: PGtkGLArea; cdecl; inline; static;
    procedure attach_buffers; cdecl; inline;
    function get_auto_render: gboolean; cdecl; inline;
    function get_context: PGdkGLContext; cdecl; inline;
    function get_error: PGError; cdecl; inline;
    function get_has_depth_buffer: gboolean; cdecl; inline;
    function get_has_stencil_buffer: gboolean; cdecl; inline;
    procedure get_required_version(major: Pgint; minor: Pgint); cdecl; inline;
    function get_use_es: gboolean; cdecl; inline;
    procedure make_current; cdecl; inline;
    procedure queue_render; cdecl; inline;
    procedure set_auto_render(auto_render: gboolean); cdecl; inline;
    procedure set_error(error: PGError); cdecl; inline;
    procedure set_has_depth_buffer(has_depth_buffer: gboolean); cdecl; inline;
    procedure set_has_stencil_buffer(has_stencil_buffer: gboolean); cdecl; inline;
    procedure set_required_version(major: gint; minor: gint); cdecl; inline;
    procedure set_use_es(use_es: gboolean); cdecl; inline;
    property auto_render: gboolean read get_auto_render write set_auto_render;
    property context: PGdkGLContext read get_context ;
    property has_depth_buffer: gboolean read get_has_depth_buffer write set_has_depth_buffer;
    property has_stencil_buffer: gboolean read get_has_stencil_buffer write set_has_stencil_buffer;
    property use_es: gboolean read get_use_es write set_use_es;
  end;

  PPGtkGLAreaClass = ^PGtkGLAreaClass;
  PGtkGLAreaClass = ^TGtkGLAreaClass;
  TGtkGLAreaClass = object
    parent_class: TGtkWidgetClass;
    render: function(area: PGtkGLArea; context: PGdkGLContext): gboolean; cdecl;
    resize: procedure(area: PGtkGLArea; width: gint; height: gint); cdecl;
    create_context: function(area: PGtkGLArea): PGdkGLContext; cdecl;
    _padding: array [0..7] of gpointer;
  end;

  PPGtkGesture = ^PGtkGesture;
  PGtkGesture = ^TGtkGesture;
  TGtkGesture = object(TGtkEventController)
    function get_bounding_box(rect: PGdkRectangle): gboolean; cdecl; inline;
    function get_bounding_box_center(x: Pgdouble; y: Pgdouble): gboolean; cdecl; inline;
    function get_device: PGdkDevice; cdecl; inline;
    function get_group: PGList; cdecl; inline;
    function get_last_event(sequence: PGdkEventSequence): PGdkEvent; cdecl; inline;
    function get_last_updated_sequence: PGdkEventSequence; cdecl; inline;
    function get_point(sequence: PGdkEventSequence; x: Pgdouble; y: Pgdouble): gboolean; cdecl; inline;
    function get_sequence_state(sequence: PGdkEventSequence): TGtkEventSequenceState; cdecl; inline;
    function get_sequences: PGList; cdecl; inline;
    procedure group(gesture: PGtkGesture); cdecl; inline;
    function handles_sequence(sequence: PGdkEventSequence): gboolean; cdecl; inline;
    function is_active: gboolean; cdecl; inline;
    function is_grouped_with(other: PGtkGesture): gboolean; cdecl; inline;
    function is_recognized: gboolean; cdecl; inline;
    function set_sequence_state(sequence: PGdkEventSequence; state: TGtkEventSequenceState): gboolean; cdecl; inline;
    function set_state(state: TGtkEventSequenceState): gboolean; cdecl; inline;
    procedure ungroup; cdecl; inline;
    //property n_points: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_n_points  { property is writeable but setter not declared } ;
  end;

  PPGtkGestureClass = ^PGtkGestureClass;
  PGtkGestureClass = ^TGtkGestureClass;
  TGtkGestureClass = object
  end;

  PPGtkGestureClick = ^PGtkGestureClick;
  PGtkGestureClick = ^TGtkGestureClick;
  TGtkGestureClick = object
    function new: PGtkGestureClick; cdecl; inline; static;
  end;

  PPGtkGestureClickClass = ^PGtkGestureClickClass;
  PGtkGestureClickClass = ^TGtkGestureClickClass;
  TGtkGestureClickClass = object
  end;

  PPGtkGestureDrag = ^PGtkGestureDrag;
  PGtkGestureDrag = ^TGtkGestureDrag;
  TGtkGestureDrag = object
    function new: PGtkGestureDrag; cdecl; inline; static;
    function get_offset(x: Pgdouble; y: Pgdouble): gboolean; cdecl; inline;
    function get_start_point(x: Pgdouble; y: Pgdouble): gboolean; cdecl; inline;
  end;

  PPGtkGestureDragClass = ^PGtkGestureDragClass;
  PGtkGestureDragClass = ^TGtkGestureDragClass;
  TGtkGestureDragClass = object
  end;

  PPGtkGestureLongPress = ^PGtkGestureLongPress;
  PGtkGestureLongPress = ^TGtkGestureLongPress;
  TGtkGestureLongPress = object
    function new: PGtkGestureLongPress; cdecl; inline; static;
    function get_delay_factor: gdouble; cdecl; inline;
    procedure set_delay_factor(delay_factor: gdouble); cdecl; inline;
    property delay_factor: gdouble read get_delay_factor write set_delay_factor;
  end;

  PPGtkGestureLongPressClass = ^PGtkGestureLongPressClass;
  PGtkGestureLongPressClass = ^TGtkGestureLongPressClass;
  TGtkGestureLongPressClass = object
  end;

  PPGtkGesturePan = ^PGtkGesturePan;
  PGtkGesturePan = ^TGtkGesturePan;
  TGtkGesturePan = object(TGtkGestureDrag)
    function new(orientation: TGtkOrientation): PGtkGesturePan; cdecl; inline; static;
    function get_orientation: TGtkOrientation; cdecl; inline;
    procedure set_orientation(orientation: TGtkOrientation); cdecl; inline;
    property orientation: TGtkOrientation read get_orientation write set_orientation;
  end;

  PPGtkPanDirection = ^PGtkPanDirection;
  PGtkPanDirection = ^TGtkPanDirection;

  PPGtkGesturePanClass = ^PGtkGesturePanClass;
  PGtkGesturePanClass = ^TGtkGesturePanClass;
  TGtkGesturePanClass = object
  end;

  PPGtkGestureRotate = ^PGtkGestureRotate;
  PGtkGestureRotate = ^TGtkGestureRotate;
  TGtkGestureRotate = object(TGtkGesture)
    function new: PGtkGestureRotate; cdecl; inline; static;
    function get_angle_delta: gdouble; cdecl; inline;
  end;

  PPGtkGestureRotateClass = ^PGtkGestureRotateClass;
  PGtkGestureRotateClass = ^TGtkGestureRotateClass;
  TGtkGestureRotateClass = object
  end;

  PPGtkGestureSingle = ^PGtkGestureSingle;
  PGtkGestureSingle = ^TGtkGestureSingle;
  TGtkGestureSingle = object(TGtkGesture)
    function get_button: guint; cdecl; inline;
    function get_current_button: guint; cdecl; inline;
    function get_current_sequence: PGdkEventSequence; cdecl; inline;
    function get_exclusive: gboolean; cdecl; inline;
    function get_touch_only: gboolean; cdecl; inline;
    procedure set_button(button: guint); cdecl; inline;
    procedure set_exclusive(exclusive: gboolean); cdecl; inline;
    procedure set_touch_only(touch_only: gboolean); cdecl; inline;
    property button: guint read get_button write set_button;
    property exclusive: gboolean read get_exclusive write set_exclusive;
    property touch_only: gboolean read get_touch_only write set_touch_only;
  end;

  PPGtkGestureSingleClass = ^PGtkGestureSingleClass;
  PGtkGestureSingleClass = ^TGtkGestureSingleClass;
  TGtkGestureSingleClass = object
  end;

  PPGtkGestureStylus = ^PGtkGestureStylus;
  PGtkGestureStylus = ^TGtkGestureStylus;
  TGtkGestureStylus = object(TGtkGestureSingle)
    function new: PGtkGestureStylus; cdecl; inline; static;
    function get_axes(axes: PGdkAxisUse; values: PPgdouble): gboolean; cdecl; inline;
    function get_axis(axis: TGdkAxisUse; value: Pgdouble): gboolean; cdecl; inline;
    function get_backlog(backlog: PPGdkTimeCoord; n_elems: Pguint): gboolean; cdecl; inline;
    function get_device_tool: PGdkDeviceTool; cdecl; inline;
  end;

  PPGtkGestureStylusClass = ^PGtkGestureStylusClass;
  PGtkGestureStylusClass = ^TGtkGestureStylusClass;
  TGtkGestureStylusClass = object
  end;

  PPGtkGestureSwipe = ^PGtkGestureSwipe;
  PGtkGestureSwipe = ^TGtkGestureSwipe;
  TGtkGestureSwipe = object(TGtkGestureSingle)
    function new: PGtkGestureSwipe; cdecl; inline; static;
    function get_velocity(velocity_x: Pgdouble; velocity_y: Pgdouble): gboolean; cdecl; inline;
  end;

  PPGtkGestureSwipeClass = ^PGtkGestureSwipeClass;
  PGtkGestureSwipeClass = ^TGtkGestureSwipeClass;
  TGtkGestureSwipeClass = object
  end;

  PPGtkGestureZoom = ^PGtkGestureZoom;
  PGtkGestureZoom = ^TGtkGestureZoom;
  TGtkGestureZoom = object(TGtkGesture)
    function new: PGtkGestureZoom; cdecl; inline; static;
    function get_scale_delta: gdouble; cdecl; inline;
  end;

  PPGtkGestureZoomClass = ^PGtkGestureZoomClass;
  PGtkGestureZoomClass = ^TGtkGestureZoomClass;
  TGtkGestureZoomClass = object
  end;

  PPGtkGrid = ^PGtkGrid;
  PGtkGrid = ^TGtkGrid;

  PPGtkPositionType = ^PGtkPositionType;
  PGtkPositionType = ^TGtkPositionType;
  TGtkGrid = object(TGtkWidget)
    function new: PGtkGrid; cdecl; inline; static;
    procedure attach(child: PGtkWidget; column: gint; row: gint; width: gint; height: gint); cdecl; inline;
    procedure attach_next_to(child: PGtkWidget; sibling: PGtkWidget; side: TGtkPositionType; width: gint; height: gint); cdecl; inline;
    function get_baseline_row: gint; cdecl; inline;
    function get_child_at(column: gint; row: gint): PGtkWidget; cdecl; inline;
    function get_column_homogeneous: gboolean; cdecl; inline;
    function get_column_spacing: guint; cdecl; inline;
    function get_row_baseline_position(row: gint): TGtkBaselinePosition; cdecl; inline;
    function get_row_homogeneous: gboolean; cdecl; inline;
    function get_row_spacing: guint; cdecl; inline;
    procedure insert_column(position: gint); cdecl; inline;
    procedure insert_next_to(sibling: PGtkWidget; side: TGtkPositionType); cdecl; inline;
    procedure insert_row(position: gint); cdecl; inline;
    procedure query_child(child: PGtkWidget; column: Pgint; row: Pgint; width: Pgint; height: Pgint); cdecl; inline;
    procedure remove(child: PGtkWidget); cdecl; inline;
    procedure remove_column(position: gint); cdecl; inline;
    procedure remove_row(position: gint); cdecl; inline;
    procedure set_baseline_row(row: gint); cdecl; inline;
    procedure set_column_homogeneous(homogeneous: gboolean); cdecl; inline;
    procedure set_column_spacing(spacing: guint); cdecl; inline;
    procedure set_row_baseline_position(row: gint; pos: TGtkBaselinePosition); cdecl; inline;
    procedure set_row_homogeneous(homogeneous: gboolean); cdecl; inline;
    procedure set_row_spacing(spacing: guint); cdecl; inline;
    property baseline_row: gint read get_baseline_row write set_baseline_row;
    property column_homogeneous: gboolean read get_column_homogeneous write set_column_homogeneous;
    property column_spacing: guint read get_column_spacing write set_column_spacing;
    property row_homogeneous: gboolean read get_row_homogeneous write set_row_homogeneous;
    property row_spacing: guint read get_row_spacing write set_row_spacing;
  end;

  PPGtkGridClass = ^PGtkGridClass;
  PGtkGridClass = ^TGtkGridClass;
  TGtkGridClass = object
    parent_class: TGtkWidgetClass;
    padding: array [0..7] of gpointer;
  end;

  PPGtkGridLayout = ^PGtkGridLayout;
  PGtkGridLayout = ^TGtkGridLayout;
  TGtkGridLayout = object(TGtkLayoutManager)
    function new: PGtkGridLayout; cdecl; inline; static;
    function get_baseline_row: gint; cdecl; inline;
    function get_column_homogeneous: gboolean; cdecl; inline;
    function get_column_spacing: guint; cdecl; inline;
    function get_row_baseline_position(row: gint): TGtkBaselinePosition; cdecl; inline;
    function get_row_homogeneous: gboolean; cdecl; inline;
    function get_row_spacing: guint; cdecl; inline;
    procedure set_baseline_row(row: gint); cdecl; inline;
    procedure set_column_homogeneous(homogeneous: gboolean); cdecl; inline;
    procedure set_column_spacing(spacing: guint); cdecl; inline;
    procedure set_row_baseline_position(row: gint; pos: TGtkBaselinePosition); cdecl; inline;
    procedure set_row_homogeneous(homogeneous: gboolean); cdecl; inline;
    procedure set_row_spacing(spacing: guint); cdecl; inline;
    property baseline_row: gint read get_baseline_row write set_baseline_row;
    property column_homogeneous: gboolean read get_column_homogeneous write set_column_homogeneous;
    property column_spacing: guint read get_column_spacing write set_column_spacing;
    property row_homogeneous: gboolean read get_row_homogeneous write set_row_homogeneous;
    property row_spacing: guint read get_row_spacing write set_row_spacing;
  end;

  PPGtkGridLayoutChild = ^PGtkGridLayoutChild;
  PGtkGridLayoutChild = ^TGtkGridLayoutChild;
  TGtkGridLayoutChild = object
    function get_column: gint; cdecl; inline;
    function get_column_span: gint; cdecl; inline;
    function get_row: gint; cdecl; inline;
    function get_row_span: gint; cdecl; inline;
    procedure set_column(column: gint); cdecl; inline;
    procedure set_column_span(span: gint); cdecl; inline;
    procedure set_row(row: gint); cdecl; inline;
    procedure set_row_span(span: gint); cdecl; inline;
    property column: gint read get_column write set_column;
    property column_span: gint read get_column_span write set_column_span;
    property row: gint read get_row write set_row;
    property row_span: gint read get_row_span write set_row_span;
  end;

  PPGtkGridLayoutChildClass = ^PGtkGridLayoutChildClass;
  PGtkGridLayoutChildClass = ^TGtkGridLayoutChildClass;
  TGtkGridLayoutChildClass = object
    parent_class: TGtkLayoutChildClass;
  end;

  PPGtkGridLayoutClass = ^PGtkGridLayoutClass;
  PGtkGridLayoutClass = ^TGtkGridLayoutClass;
  TGtkGridLayoutClass = object
    parent_class: TGtkLayoutManagerClass;
  end;

  PPGtkGridView = ^PGtkGridView;
  PGtkGridView = ^TGtkGridView;
  TGtkGridView = object
    function new(model: PGtkSelectionModel; factory: PGtkListItemFactory): PGtkGridView; cdecl; inline; static;
    function get_enable_rubberband: gboolean; cdecl; inline;
    function get_factory: PGtkListItemFactory; cdecl; inline;
    function get_max_columns: guint; cdecl; inline;
    function get_min_columns: guint; cdecl; inline;
    function get_model: PGtkSelectionModel; cdecl; inline;
    function get_single_click_activate: gboolean; cdecl; inline;
    procedure set_enable_rubberband(enable_rubberband: gboolean); cdecl; inline;
    procedure set_factory(factory: PGtkListItemFactory); cdecl; inline;
    procedure set_max_columns(max_columns: guint); cdecl; inline;
    procedure set_min_columns(min_columns: guint); cdecl; inline;
    procedure set_model(model: PGtkSelectionModel); cdecl; inline;
    procedure set_single_click_activate(single_click_activate: gboolean); cdecl; inline;
    property enable_rubberband: gboolean read get_enable_rubberband write set_enable_rubberband;
    property factory: PGtkListItemFactory read get_factory write set_factory;
    property max_columns: guint read get_max_columns write set_max_columns;
    property min_columns: guint read get_min_columns write set_min_columns;
    property model: PGtkSelectionModel read get_model write set_model;
    property single_click_activate: gboolean read get_single_click_activate write set_single_click_activate;
  end;

  PPGtkGridViewClass = ^PGtkGridViewClass;
  PGtkGridViewClass = ^TGtkGridViewClass;
  TGtkGridViewClass = object
  end;

  PPGtkIMContextClass = ^PGtkIMContextClass;
  PGtkIMContextClass = ^TGtkIMContextClass;
  TGtkIMContextClass = object
    parent_class: TGObjectClass;
    preedit_start: procedure(context: PGtkIMContext); cdecl;
    preedit_end: procedure(context: PGtkIMContext); cdecl;
    preedit_changed: procedure(context: PGtkIMContext); cdecl;
    commit: procedure(context: PGtkIMContext; str: Pgchar); cdecl;
    retrieve_surrounding: function(context: PGtkIMContext): gboolean; cdecl;
    delete_surrounding: function(context: PGtkIMContext; offset: gint; n_chars: gint): gboolean; cdecl;
    set_client_widget: procedure(context: PGtkIMContext; widget: PGtkWidget); cdecl;
    get_preedit_string: procedure(context: PGtkIMContext; str: PPgchar; attrs: PPPangoAttrList; cursor_pos: Pgint); cdecl;
    filter_keypress: function(context: PGtkIMContext; event: PGdkEvent): gboolean; cdecl;
    focus_in: procedure(context: PGtkIMContext); cdecl;
    focus_out: procedure(context: PGtkIMContext); cdecl;
    reset: procedure(context: PGtkIMContext); cdecl;
    set_cursor_location: procedure(context: PGtkIMContext; area: PGdkRectangle); cdecl;
    set_use_preedit: procedure(context: PGtkIMContext; use_preedit: gboolean); cdecl;
    set_surrounding: procedure(context: PGtkIMContext; text: Pgchar; len: gint; cursor_index: gint); cdecl;
    get_surrounding: function(context: PGtkIMContext; text: PPgchar; cursor_index: Pgint): gboolean; cdecl;
    set_surrounding_with_selection: procedure(context: PGtkIMContext; text: Pgchar; len: gint; cursor_index: gint; anchor_index: gint); cdecl;
    get_surrounding_with_selection: function(context: PGtkIMContext; text: PPgchar; cursor_index: Pgint; anchor_index: Pgint): gboolean; cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
    _gtk_reserved5: procedure; cdecl;
  end;

  PPGtkIMContextSimple = ^PGtkIMContextSimple;
  PGtkIMContextSimple = ^TGtkIMContextSimple;

  PPGtkIMContextSimplePrivate = ^PGtkIMContextSimplePrivate;
  PGtkIMContextSimplePrivate = ^TGtkIMContextSimplePrivate;
  TGtkIMContextSimple = object(TGtkIMContext)
    priv: PGtkIMContextSimplePrivate;
    function new: PGtkIMContextSimple; cdecl; inline; static;
    procedure add_compose_file(compose_file: Pgchar); cdecl; inline;
  end;

  TGtkIMContextSimplePrivate = record
  end;



  PPGtkIMContextSimpleClass = ^PGtkIMContextSimpleClass;
  PGtkIMContextSimpleClass = ^TGtkIMContextSimpleClass;
  TGtkIMContextSimpleClass = object
    parent_class: TGtkIMContextClass;
  end;

  PPGtkIMMulticontext = ^PGtkIMMulticontext;
  PGtkIMMulticontext = ^TGtkIMMulticontext;

  PPGtkIMMulticontextPrivate = ^PGtkIMMulticontextPrivate;
  PGtkIMMulticontextPrivate = ^TGtkIMMulticontextPrivate;
  TGtkIMMulticontext = object(TGtkIMContext)
    priv: PGtkIMMulticontextPrivate;
    function new: PGtkIMMulticontext; cdecl; inline; static;
    function get_context_id: Pgchar; cdecl; inline;
    procedure set_context_id(context_id: Pgchar); cdecl; inline;
  end;

  TGtkIMMulticontextPrivate = record
  end;



  PPGtkIMMulticontextClass = ^PGtkIMMulticontextClass;
  PGtkIMMulticontextClass = ^TGtkIMMulticontextClass;
  TGtkIMMulticontextClass = object
    parent_class: TGtkIMContextClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkIconLookupFlags = ^PGtkIconLookupFlags;
  PGtkIconLookupFlags = ^TGtkIconLookupFlags;

  PPGtkSymbolicPaintable = ^PGtkSymbolicPaintable;
  PGtkSymbolicPaintable = ^TGtkSymbolicPaintable;
  TGtkSymbolicPaintable = object
    procedure snapshot_symbolic(snapshot: PGdkSnapshot; width: gdouble; height: gdouble; colors: PGdkRGBA; n_colors: gsize); cdecl; inline;
  end;

  PPGtkIconPaintable = ^PGtkIconPaintable;
  PGtkIconPaintable = ^TGtkIconPaintable;
  TGtkIconPaintable = object(TGObject)
    function new_for_file(file_: PGFile; size: gint; scale: gint): PGtkIconPaintable; cdecl; inline; static;
    function get_file: PGFile; cdecl; inline;
    function get_icon_name: Pgchar; cdecl; inline;
    function is_symbolic: gboolean; cdecl; inline;
    property file_: PGFile read get_file  { property is writeable but setter not declared } ;
    property icon_name: Pgchar read get_icon_name  { property is writeable but setter not declared } ;
    //property is_symbolic1: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_is_symbolic  { property is writeable but setter not declared } ;
  end;

  PPGtkIconTheme = ^PGtkIconTheme;
  PGtkIconTheme = ^TGtkIconTheme;

  PPchar = ^Pchar;
  Pchar = ^Tchar;
  TGtkIconTheme = object(TGObject)
    function new: PGtkIconTheme; cdecl; inline; static;
    function get_for_display(display: PGdkDisplay): PGtkIconTheme; cdecl; inline; static;
    procedure add_resource_path(path: Pgchar); cdecl; inline;
    procedure add_search_path(path: Pgchar); cdecl; inline;
    function get_display: PGdkDisplay; cdecl; inline;
    function get_icon_names: PPgchar; cdecl; inline;
    function get_icon_sizes(icon_name: Pgchar): Pgint; cdecl; inline;
    function get_resource_path: PPgchar; cdecl; inline;
    function get_search_path: PPgchar; cdecl; inline;
    function get_theme_name: Pgchar; cdecl; inline;
    function has_gicon(gicon: PGIcon): gboolean; cdecl; inline;
    function has_icon(icon_name: Pgchar): gboolean; cdecl; inline;
    function lookup_by_gicon(icon: PGIcon; size: gint; scale: gint; direction: TGtkTextDirection; flags: TGtkIconLookupFlags): PGtkIconPaintable; cdecl; inline;
    function lookup_icon(icon_name: Pgchar; fallbacks: PPgchar; size: gint; scale: gint; direction: TGtkTextDirection; flags: TGtkIconLookupFlags): PGtkIconPaintable; cdecl; inline;
    procedure set_resource_path(path: PPgchar); cdecl; inline;
    procedure set_search_path(path: PPchar ); cdecl; inline;
    procedure set_theme_name(theme_name: Pgchar); cdecl; inline;
    property display: PGdkDisplay read get_display  { property is writeable but setter not declared } ;
    property icon_names: PPgchar read get_icon_names ;
    property resource_path: PPgchar read get_resource_path write set_resource_path;
    property search_path: PPgchar read get_search_path  { property is writeable but setter not declared } ;
    property theme_name: Pgchar read get_theme_name write set_theme_name;
  end;

  { char* const* }
  Tchar = record
    { opaque type }
    Unknown: Pointer;
  end;


  PPGtkIconThemeError = ^PGtkIconThemeError;
  PGtkIconThemeError = ^TGtkIconThemeError;

  PPGtkIconView = ^PGtkIconView;
  PGtkIconView = ^TGtkIconView;

  PPGtkIconViewDropPosition = ^PGtkIconViewDropPosition;
  PGtkIconViewDropPosition = ^TGtkIconViewDropPosition;

  PPGtkIconViewForeachFunc = ^PGtkIconViewForeachFunc;
  PGtkIconViewForeachFunc = ^TGtkIconViewForeachFunc;
  TGtkIconViewForeachFunc = procedure(icon_view: PGtkIconView; path: PGtkTreePath; data: gpointer); cdecl;
  TGtkIconView = object(TGtkWidget)
    function new: PGtkIconView; cdecl; inline; static;
    function new_with_area(area: PGtkCellArea): PGtkIconView; cdecl; inline; static;
    function new_with_model(model: PGtkTreeModel): PGtkIconView; cdecl; inline; static;
    function create_drag_icon(path: PGtkTreePath): PGdkPaintable; cdecl; inline;
    procedure enable_model_drag_dest(formats: PGdkContentFormats; actions: TGdkDragAction); cdecl; inline;
    procedure enable_model_drag_source(start_button_mask: TGdkModifierType; formats: PGdkContentFormats; actions: TGdkDragAction); cdecl; inline;
    function get_activate_on_single_click: gboolean; cdecl; inline;
    function get_cell_rect(path: PGtkTreePath; cell: PGtkCellRenderer; rect: PGdkRectangle): gboolean; cdecl; inline;
    function get_column_spacing: gint; cdecl; inline;
    function get_columns: gint; cdecl; inline;
    function get_cursor(path: PPGtkTreePath; cell: PPGtkCellRenderer): gboolean; cdecl; inline;
    function get_dest_item_at_pos(drag_x: gint; drag_y: gint; path: PPGtkTreePath; pos: PGtkIconViewDropPosition): gboolean; cdecl; inline;
    procedure get_drag_dest_item(path: PPGtkTreePath; pos: PGtkIconViewDropPosition); cdecl; inline;
    function get_item_at_pos(x: gint; y: gint; path: PPGtkTreePath; cell: PPGtkCellRenderer): gboolean; cdecl; inline;
    function get_item_column(path: PGtkTreePath): gint; cdecl; inline;
    function get_item_orientation: TGtkOrientation; cdecl; inline;
    function get_item_padding: gint; cdecl; inline;
    function get_item_row(path: PGtkTreePath): gint; cdecl; inline;
    function get_item_width: gint; cdecl; inline;
    function get_margin: gint; cdecl; inline;
    function get_markup_column: gint; cdecl; inline;
    function get_model: PGtkTreeModel; cdecl; inline;
    function get_path_at_pos(x: gint; y: gint): PGtkTreePath; cdecl; inline;
    function get_pixbuf_column: gint; cdecl; inline;
    function get_reorderable: gboolean; cdecl; inline;
    function get_row_spacing: gint; cdecl; inline;
    function get_selected_items: PGList; cdecl; inline;
    function get_selection_mode: TGtkSelectionMode; cdecl; inline;
    function get_spacing: gint; cdecl; inline;
    function get_text_column: gint; cdecl; inline;
    function get_tooltip_column: gint; cdecl; inline;
    function get_tooltip_context(x: gint; y: gint; keyboard_tip: gboolean; model: PPGtkTreeModel; path: PPGtkTreePath; iter: PGtkTreeIter): gboolean; cdecl; inline;
    function get_visible_range(start_path: PPGtkTreePath; end_path: PPGtkTreePath): gboolean; cdecl; inline;
    procedure item_activated(path: PGtkTreePath); cdecl; inline;
    function path_is_selected(path: PGtkTreePath): gboolean; cdecl; inline;
    procedure scroll_to_path(path: PGtkTreePath; use_align: gboolean; row_align: gfloat; col_align: gfloat); cdecl; inline;
    procedure select_all; cdecl; inline;
    procedure select_path(path: PGtkTreePath); cdecl; inline;
    procedure selected_foreach(func: TGtkIconViewForeachFunc; data: gpointer); cdecl; inline;
    procedure set_activate_on_single_click(single: gboolean); cdecl; inline;
    procedure set_column_spacing(column_spacing: gint); cdecl; inline;
    procedure set_columns(columns: gint); cdecl; inline;
    procedure set_cursor(path: PGtkTreePath; cell: PGtkCellRenderer; start_editing: gboolean); cdecl; inline;
    procedure set_drag_dest_item(path: PGtkTreePath; pos: TGtkIconViewDropPosition); cdecl; inline;
    procedure set_item_orientation(orientation: TGtkOrientation); cdecl; inline;
    procedure set_item_padding(item_padding: gint); cdecl; inline;
    procedure set_item_width(item_width: gint); cdecl; inline;
    procedure set_margin(margin: gint); cdecl; inline;
    procedure set_markup_column(column: gint); cdecl; inline;
    procedure set_model(model: PGtkTreeModel); cdecl; inline;
    procedure set_pixbuf_column(column: gint); cdecl; inline;
    procedure set_reorderable(reorderable: gboolean); cdecl; inline;
    procedure set_row_spacing(row_spacing: gint); cdecl; inline;
    procedure set_selection_mode(mode: TGtkSelectionMode); cdecl; inline;
    procedure set_spacing(spacing: gint); cdecl; inline;
    procedure set_text_column(column: gint); cdecl; inline;
    procedure set_tooltip_cell(tooltip: PGtkTooltip; path: PGtkTreePath; cell: PGtkCellRenderer); cdecl; inline;
    procedure set_tooltip_column(column: gint); cdecl; inline;
    procedure set_tooltip_item(tooltip: PGtkTooltip; path: PGtkTreePath); cdecl; inline;
    procedure unselect_all; cdecl; inline;
    procedure unselect_path(path: PGtkTreePath); cdecl; inline;
    procedure unset_model_drag_dest; cdecl; inline;
    procedure unset_model_drag_source; cdecl; inline;
    property activate_on_single_click: gboolean read get_activate_on_single_click write set_activate_on_single_click;
    //property cell_area: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_cell_area  { property is writeable but setter not declared } ;
    property column_spacing: gint read get_column_spacing write set_column_spacing;
    property columns: gint read get_columns write set_columns;
    property item_orientation: TGtkOrientation read get_item_orientation write set_item_orientation;
    property item_padding: gint read get_item_padding write set_item_padding;
    property item_width: gint read get_item_width write set_item_width;
    property margin: gint read get_margin write set_margin;
    property markup_column: gint read get_markup_column write set_markup_column;
    property model: PGtkTreeModel read get_model write set_model;
    property pixbuf_column: gint read get_pixbuf_column write set_pixbuf_column;
    property reorderable: gboolean read get_reorderable write set_reorderable;
    property row_spacing: gint read get_row_spacing write set_row_spacing;
    property selection_mode: TGtkSelectionMode read get_selection_mode write set_selection_mode;
    property spacing: gint read get_spacing write set_spacing;
    property text_column: gint read get_text_column write set_text_column;
    property tooltip_column: gint read get_tooltip_column write set_tooltip_column;
  end;
  TGtkTooltip = object(TGObject)
    procedure set_custom(custom_widget: PGtkWidget); cdecl; inline;
    procedure set_icon(paintable: PGdkPaintable); cdecl; inline;
    procedure set_icon_from_gicon(gicon: PGIcon); cdecl; inline;
    procedure set_icon_from_icon_name(icon_name: Pgchar); cdecl; inline;
    procedure set_markup(markup: Pgchar); cdecl; inline;
    procedure set_text(text: Pgchar); cdecl; inline;
    procedure set_tip_area(rect: PGdkRectangle); cdecl; inline;
  end;

  PPGtkImage = ^PGtkImage;
  PGtkImage = ^TGtkImage;
  TGtkImage = object(TGtkWidget)
    function new: PGtkImage; cdecl; inline; static;
    function new_from_file(filename: Pgchar): PGtkImage; cdecl; inline; static;
    function new_from_gicon(icon: PGIcon): PGtkImage; cdecl; inline; static;
    function new_from_icon_name(icon_name: Pgchar): PGtkImage; cdecl; inline; static;
    function new_from_paintable(paintable: PGdkPaintable): PGtkImage; cdecl; inline; static;
    function new_from_pixbuf(pixbuf: PGdkPixbuf): PGtkImage; cdecl; inline; static;
    function new_from_resource(resource_path: Pgchar): PGtkImage; cdecl; inline; static;
    procedure clear; cdecl; inline;
    function get_gicon: PGIcon; cdecl; inline;
    function get_icon_name: Pgchar; cdecl; inline;
    function get_icon_size: TGtkIconSize; cdecl; inline;
    function get_paintable: PGdkPaintable; cdecl; inline;
    function get_pixel_size: gint; cdecl; inline;
    function get_storage_type: TGtkImageType; cdecl; inline;
    procedure set_from_file(filename: Pgchar); cdecl; inline;
    procedure set_from_gicon(icon: PGIcon); cdecl; inline;
    procedure set_from_icon_name(icon_name: Pgchar); cdecl; inline;
    procedure set_from_paintable(paintable: PGdkPaintable); cdecl; inline;
    procedure set_from_pixbuf(pixbuf: PGdkPixbuf); cdecl; inline;
    procedure set_from_resource(resource_path: Pgchar); cdecl; inline;
    procedure set_icon_size(icon_size: TGtkIconSize); cdecl; inline;
    procedure set_pixel_size(pixel_size: gint); cdecl; inline;
    //property file_: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_file  { property is writeable but setter not declared } ;
    property gicon: PGIcon read get_gicon  { property is writeable but setter not declared } ;
    property icon_name: Pgchar read get_icon_name  { property is writeable but setter not declared } ;
    property icon_size: TGtkIconSize read get_icon_size write set_icon_size;
    property paintable: PGdkPaintable read get_paintable  { property is writeable but setter not declared } ;
    property pixel_size: gint read get_pixel_size write set_pixel_size;
    //property resource: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_resource  { property is writeable but setter not declared } ;
    property storage_type: TGtkImageType read get_storage_type ;
    //property use_fallback: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_use_fallback  { property is writeable but setter not declared } ;
  end;

  PPGtkInfoBar = ^PGtkInfoBar;
  PGtkInfoBar = ^TGtkInfoBar;

  PPGtkMessageType = ^PGtkMessageType;
  PGtkMessageType = ^TGtkMessageType;
  TGtkInfoBar = object(TGtkWidget)
    function new: PGtkInfoBar; cdecl; inline; static;
    //function new_with_buttons(first_button_text: Pgchar; args: array of const): PGtkInfoBar; cdecl; inline; static;
    procedure add_action_widget(child: PGtkWidget; response_id: gint); cdecl; inline;
    function add_button(button_text: Pgchar; response_id: gint): PGtkButton; cdecl; inline;
    //procedure add_buttons(first_button_text: Pgchar; args: array of const); cdecl; inline;
    procedure add_child(widget: PGtkWidget); cdecl; inline;
    function get_message_type: TGtkMessageType; cdecl; inline;
    function get_revealed: gboolean; cdecl; inline;
    function get_show_close_button: gboolean; cdecl; inline;
    procedure remove_action_widget(widget: PGtkWidget); cdecl; inline;
    procedure remove_child(widget: PGtkWidget); cdecl; inline;
    procedure response(response_id: gint); cdecl; inline;
    procedure set_default_response(response_id: gint); cdecl; inline;
    procedure set_message_type(message_type: TGtkMessageType); cdecl; inline;
    procedure set_response_sensitive(response_id: gint; setting: gboolean); cdecl; inline;
    procedure set_revealed(revealed: gboolean); cdecl; inline;
    procedure set_show_close_button(setting: gboolean); cdecl; inline;
    property message_type: TGtkMessageType read get_message_type write set_message_type;
    property revealed: gboolean read get_revealed write set_revealed;
    property show_close_button: gboolean read get_show_close_button write set_show_close_button;
  end;

  PPGtkJustification = ^PGtkJustification;
  PGtkJustification = ^TGtkJustification;

  PPGtkKeyvalTrigger = ^PGtkKeyvalTrigger;
  PGtkKeyvalTrigger = ^TGtkKeyvalTrigger;
  TGtkKeyvalTrigger = object(TGtkShortcutTrigger)
    function new(keyval: guint; modifiers: TGdkModifierType): PGtkKeyvalTrigger; cdecl; inline; static;
    function get_keyval: guint; cdecl; inline;
    function get_modifiers: TGdkModifierType; cdecl; inline;
    property keyval: guint read get_keyval  { property is writeable but setter not declared } ;
    property modifiers: TGdkModifierType read get_modifiers  { property is writeable but setter not declared } ;
  end;

  PPGtkKeyvalTriggerClass = ^PGtkKeyvalTriggerClass;
  PGtkKeyvalTriggerClass = ^TGtkKeyvalTriggerClass;
  TGtkKeyvalTriggerClass = object
  end;

  PPGtkLabel = ^PGtkLabel;
  PGtkLabel = ^TGtkLabel;

  PPGtkNaturalWrapMode = ^PGtkNaturalWrapMode;
  PGtkNaturalWrapMode = ^TGtkNaturalWrapMode;
  TGtkLabel = object(TGtkWidget)
    function new(str: Pgchar): PGtkLabel; cdecl; inline; static;
    function new_with_mnemonic(str: Pgchar): PGtkLabel; cdecl; inline; static;
    function get_attributes: PPangoAttrList; cdecl; inline;
    function get_current_uri: Pgchar; cdecl; inline;
    function get_ellipsize: TPangoEllipsizeMode; cdecl; inline;
    function get_extra_menu: PGMenuModel; cdecl; inline;
    function get_justify: TGtkJustification; cdecl; inline;
    function get_label: Pgchar; cdecl; inline;
    function get_layout: PPangoLayout; cdecl; inline;
    procedure get_layout_offsets(x: Pgint; y: Pgint); cdecl; inline;
    function get_lines: gint; cdecl; inline;
    function get_max_width_chars: gint; cdecl; inline;
    function get_mnemonic_keyval: guint; cdecl; inline;
    function get_mnemonic_widget: PGtkWidget; cdecl; inline;
    function get_natural_wrap_mode: TGtkNaturalWrapMode; cdecl; inline;
    function get_selectable: gboolean; cdecl; inline;
    function get_selection_bounds(start: Pgint; end_: Pgint): gboolean; cdecl; inline;
    function get_single_line_mode: gboolean; cdecl; inline;
    function get_text: Pgchar; cdecl; inline;
    function get_use_markup: gboolean; cdecl; inline;
    function get_use_underline: gboolean; cdecl; inline;
    function get_width_chars: gint; cdecl; inline;
    function get_wrap: gboolean; cdecl; inline;
    function get_wrap_mode: TPangoWrapMode; cdecl; inline;
    function get_xalign: gfloat; cdecl; inline;
    function get_yalign: gfloat; cdecl; inline;
    procedure select_region(start_offset: gint; end_offset: gint); cdecl; inline;
    procedure set_attributes(attrs: PPangoAttrList); cdecl; inline;
    procedure set_ellipsize(mode: TPangoEllipsizeMode); cdecl; inline;
    procedure set_extra_menu(model: PGMenuModel); cdecl; inline;
    procedure set_justify(jtype: TGtkJustification); cdecl; inline;
    procedure set_label(str: Pgchar); cdecl; inline;
    procedure set_lines(lines: gint); cdecl; inline;
    procedure set_markup(str: Pgchar); cdecl; inline;
    procedure set_markup_with_mnemonic(str: Pgchar); cdecl; inline;
    procedure set_max_width_chars(n_chars: gint); cdecl; inline;
    procedure set_mnemonic_widget(widget: PGtkWidget); cdecl; inline;
    procedure set_natural_wrap_mode(wrap_mode: TGtkNaturalWrapMode); cdecl; inline;
    procedure set_selectable(setting: gboolean); cdecl; inline;
    procedure set_single_line_mode(single_line_mode: gboolean); cdecl; inline;
    procedure set_text(str: Pgchar); cdecl; inline;
    procedure set_text_with_mnemonic(str: Pgchar); cdecl; inline;
    procedure set_use_markup(setting: gboolean); cdecl; inline;
    procedure set_use_underline(setting: gboolean); cdecl; inline;
    procedure set_width_chars(n_chars: gint); cdecl; inline;
    procedure set_wrap(wrap: gboolean); cdecl; inline;
    procedure set_wrap_mode(wrap_mode: TPangoWrapMode); cdecl; inline;
    procedure set_xalign(xalign: gfloat); cdecl; inline;
    procedure set_yalign(yalign: gfloat); cdecl; inline;
    property attributes: PPangoAttrList read get_attributes write set_attributes;
    property ellipsize: TPangoEllipsizeMode read get_ellipsize write set_ellipsize;
    property extra_menu: PGMenuModel read get_extra_menu write set_extra_menu;
    property justify: TGtkJustification read get_justify write set_justify;
    property label_: Pgchar read get_label write set_label;
    property lines: gint read get_lines write set_lines;
    property max_width_chars: gint read get_max_width_chars write set_max_width_chars;
    property mnemonic_keyval: guint read get_mnemonic_keyval ;
    property mnemonic_widget: PGtkWidget read get_mnemonic_widget write set_mnemonic_widget;
    property natural_wrap_mode: TGtkNaturalWrapMode read get_natural_wrap_mode write set_natural_wrap_mode;
    property selectable: gboolean read get_selectable write set_selectable;
    property single_line_mode: gboolean read get_single_line_mode write set_single_line_mode;
    property use_markup: gboolean read get_use_markup write set_use_markup;
    property use_underline: gboolean read get_use_underline write set_use_underline;
    property width_chars: gint read get_width_chars write set_width_chars;
    property wrap: gboolean read get_wrap write set_wrap;
    property wrap_mode: TPangoWrapMode read get_wrap_mode write set_wrap_mode;
    property xalign: gfloat read get_xalign write set_xalign;
    property yalign: gfloat read get_yalign write set_yalign;
  end;
  TGtkLayoutChild = object(TGObject)
    function get_child_widget: PGtkWidget; cdecl; inline;
    function get_layout_manager: PGtkLayoutManager; cdecl; inline;
    property child_widget: PGtkWidget read get_child_widget  { property is writeable but setter not declared } ;
    property layout_manager: PGtkLayoutManager read get_layout_manager  { property is writeable but setter not declared } ;
  end;

  PPGtkLevelBar = ^PGtkLevelBar;
  PGtkLevelBar = ^TGtkLevelBar;

  PPGtkLevelBarMode = ^PGtkLevelBarMode;
  PGtkLevelBarMode = ^TGtkLevelBarMode;
  TGtkLevelBar = object(TGtkWidget)
    function new: PGtkLevelBar; cdecl; inline; static;
    function new_for_interval(min_value: gdouble; max_value: gdouble): PGtkLevelBar; cdecl; inline; static;
    procedure add_offset_value(name: Pgchar; value: gdouble); cdecl; inline;
    function get_inverted: gboolean; cdecl; inline;
    function get_max_value: gdouble; cdecl; inline;
    function get_min_value: gdouble; cdecl; inline;
    function get_mode: TGtkLevelBarMode; cdecl; inline;
    function get_offset_value(name: Pgchar; value: Pgdouble): gboolean; cdecl; inline;
    function get_value: gdouble; cdecl; inline;
    procedure remove_offset_value(name: Pgchar); cdecl; inline;
    procedure set_inverted(inverted: gboolean); cdecl; inline;
    procedure set_max_value(value: gdouble); cdecl; inline;
    procedure set_min_value(value: gdouble); cdecl; inline;
    procedure set_mode(mode: TGtkLevelBarMode); cdecl; inline;
    procedure set_value(value: gdouble); cdecl; inline;
    property inverted: gboolean read get_inverted write set_inverted;
    property max_value: gdouble read get_max_value write set_max_value;
    property min_value: gdouble read get_min_value write set_min_value;
    property mode: TGtkLevelBarMode read get_mode write set_mode;
    property value: gdouble read get_value write set_value;
  end;

  PPGtkLinkButton = ^PGtkLinkButton;
  PGtkLinkButton = ^TGtkLinkButton;
  TGtkLinkButton = object(TGtkButton)
    function new(uri: Pgchar): PGtkLinkButton; cdecl; inline; static;
    function new_with_label(uri: Pgchar; label_: Pgchar): PGtkLinkButton; cdecl; inline; static;
    function get_uri: Pgchar; cdecl; inline;
    function get_visited: gboolean; cdecl; inline;
    procedure set_uri(uri: Pgchar); cdecl; inline;
    procedure set_visited(visited: gboolean); cdecl; inline;
    property uri: Pgchar read get_uri write set_uri;
    property visited: gboolean read get_visited write set_visited;
  end;

  PPGtkListBase = ^PGtkListBase;
  PGtkListBase = ^TGtkListBase;
  TGtkListBase = object(TGtkWidget)
    //property orientation: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_orientation  { property is writeable but setter not declared } ;
  end;

  PPGtkListBaseClass = ^PGtkListBaseClass;
  PGtkListBaseClass = ^TGtkListBaseClass;
  TGtkListBaseClass = object
  end;

  PPGtkListBox = ^PGtkListBox;
  PGtkListBox = ^TGtkListBox;

  PPGtkListBoxCreateWidgetFunc = ^PGtkListBoxCreateWidgetFunc;
  PGtkListBoxCreateWidgetFunc = ^TGtkListBoxCreateWidgetFunc;
  TGtkListBoxCreateWidgetFunc = function(item: PGObject; user_data: gpointer): PGtkWidget; cdecl;

  PPGtkListBoxRow = ^PGtkListBoxRow;
  PGtkListBoxRow = ^TGtkListBoxRow;

  PPGtkListBoxForeachFunc = ^PGtkListBoxForeachFunc;
  PGtkListBoxForeachFunc = ^TGtkListBoxForeachFunc;
  TGtkListBoxForeachFunc = procedure(box: PGtkListBox; row: PGtkListBoxRow; user_data: gpointer); cdecl;

  PPGtkListBoxFilterFunc = ^PGtkListBoxFilterFunc;
  PGtkListBoxFilterFunc = ^TGtkListBoxFilterFunc;
  TGtkListBoxFilterFunc = function(row: PGtkListBoxRow; user_data: gpointer): gboolean; cdecl;

  PPGtkListBoxUpdateHeaderFunc = ^PGtkListBoxUpdateHeaderFunc;
  PGtkListBoxUpdateHeaderFunc = ^TGtkListBoxUpdateHeaderFunc;
  TGtkListBoxUpdateHeaderFunc = procedure(row: PGtkListBoxRow; before: PGtkListBoxRow; user_data: gpointer); cdecl;

  PPGtkListBoxSortFunc = ^PGtkListBoxSortFunc;
  PGtkListBoxSortFunc = ^TGtkListBoxSortFunc;
  TGtkListBoxSortFunc = function(row1: PGtkListBoxRow; row2: PGtkListBoxRow; user_data: gpointer): gint; cdecl;
  TGtkListBox = object(TGtkWidget)
    function new: PGtkListBox; cdecl; inline; static;
    procedure append(child: PGtkWidget); cdecl; inline;
    procedure bind_model(model: PGListModel; create_widget_func: TGtkListBoxCreateWidgetFunc; user_data: gpointer; user_data_free_func: TGDestroyNotify); cdecl; inline;
    procedure drag_highlight_row(row: PGtkListBoxRow); cdecl; inline;
    procedure drag_unhighlight_row; cdecl; inline;
    function get_activate_on_single_click: gboolean; cdecl; inline;
    function get_adjustment: PGtkAdjustment; cdecl; inline;
    function get_row_at_index(index_: gint): PGtkListBoxRow; cdecl; inline;
    function get_row_at_y(y: gint): PGtkListBoxRow; cdecl; inline;
    function get_selected_row: PGtkListBoxRow; cdecl; inline;
    function get_selected_rows: PGList; cdecl; inline;
    function get_selection_mode: TGtkSelectionMode; cdecl; inline;
    function get_show_separators: gboolean; cdecl; inline;
    procedure insert(child: PGtkWidget; position: gint); cdecl; inline;
    procedure invalidate_filter; cdecl; inline;
    procedure invalidate_headers; cdecl; inline;
    procedure invalidate_sort; cdecl; inline;
    procedure prepend(child: PGtkWidget); cdecl; inline;
    procedure remove(child: PGtkWidget); cdecl; inline;
    procedure select_all; cdecl; inline;
    procedure select_row(row: PGtkListBoxRow); cdecl; inline;
    procedure selected_foreach(func: TGtkListBoxForeachFunc; data: gpointer); cdecl; inline;
    procedure set_activate_on_single_click(single: gboolean); cdecl; inline;
    procedure set_adjustment(adjustment: PGtkAdjustment); cdecl; inline;
    procedure set_filter_func(filter_func: TGtkListBoxFilterFunc; user_data: gpointer; destroy_: TGDestroyNotify); cdecl; inline;
    procedure set_header_func(update_header: TGtkListBoxUpdateHeaderFunc; user_data: gpointer; destroy_: TGDestroyNotify); cdecl; inline;
    procedure set_placeholder(placeholder: PGtkWidget); cdecl; inline;
    procedure set_selection_mode(mode: TGtkSelectionMode); cdecl; inline;
    procedure set_show_separators(show_separators: gboolean); cdecl; inline;
    procedure set_sort_func(sort_func: TGtkListBoxSortFunc; user_data: gpointer; destroy_: TGDestroyNotify); cdecl; inline;
    procedure unselect_all; cdecl; inline;
    procedure unselect_row(row: PGtkListBoxRow); cdecl; inline;
    //property accept_unpaired_release: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_accept_unpaired_release  { property is writeable but setter not declared } ;
    property activate_on_single_click: gboolean read get_activate_on_single_click write set_activate_on_single_click;
    property selection_mode: TGtkSelectionMode read get_selection_mode write set_selection_mode;
    property show_separators: gboolean read get_show_separators write set_show_separators;
  end;
  TGtkListBoxRow = object(TGtkWidget)
    function new: PGtkListBoxRow; cdecl; inline; static;
    procedure changed; cdecl; inline;
    function get_activatable: gboolean; cdecl; inline;
    function get_child: PGtkWidget; cdecl; inline;
    function get_header: PGtkWidget; cdecl; inline;
    function get_index: gint; cdecl; inline;
    function get_selectable: gboolean; cdecl; inline;
    function is_selected: gboolean; cdecl; inline;
    procedure set_activatable(activatable: gboolean); cdecl; inline;
    procedure set_child(child: PGtkWidget); cdecl; inline;
    procedure set_header(header: PGtkWidget); cdecl; inline;
    procedure set_selectable(selectable: gboolean); cdecl; inline;
    property activatable: gboolean read get_activatable write set_activatable;
    property child: PGtkWidget read get_child write set_child;
    property selectable: gboolean read get_selectable write set_selectable;
  end;

  PPGtkListBoxRowClass = ^PGtkListBoxRowClass;
  PGtkListBoxRowClass = ^TGtkListBoxRowClass;
  TGtkListBoxRowClass = object
    parent_class: TGtkWidgetClass;
    activate: procedure(row: PGtkListBoxRow); cdecl;
    padding: array [0..7] of gpointer;
  end;

  PPGtkListItem = ^PGtkListItem;
  PGtkListItem = ^TGtkListItem;
  TGtkListItem = object(TGObject)
    function get_activatable: gboolean; cdecl; inline;
    function get_child: PGtkWidget; cdecl; inline;
    function get_item: PGObject; cdecl; inline;
    function get_position: guint; cdecl; inline;
    function get_selectable: gboolean; cdecl; inline;
    function get_selected: gboolean; cdecl; inline;
    procedure set_activatable(activatable: gboolean); cdecl; inline;
    procedure set_child(child: PGtkWidget); cdecl; inline;
    procedure set_selectable(selectable: gboolean); cdecl; inline;
    property activatable: gboolean read get_activatable write set_activatable;
    property child: PGtkWidget read get_child write set_child;
    property item: PGObject read get_item ;
    property position: guint read get_position ;
    property selectable: gboolean read get_selectable write set_selectable;
    property selected: gboolean read get_selected ;
  end;

  PPGtkListItemClass = ^PGtkListItemClass;
  PGtkListItemClass = ^TGtkListItemClass;
  TGtkListItemClass = object
  end;

  PPGtkListItemFactoryClass = ^PGtkListItemFactoryClass;
  PGtkListItemFactoryClass = ^TGtkListItemFactoryClass;
  TGtkListItemFactoryClass = object
  end;

  PPGtkTreeDragDest = ^PGtkTreeDragDest;
  PGtkTreeDragDest = ^TGtkTreeDragDest;
  TGtkTreeDragDest = object
    function drag_data_received(dest: PGtkTreePath; value: PGValue): gboolean; cdecl; inline;
    function row_drop_possible(dest_path: PGtkTreePath; value: PGValue): gboolean; cdecl; inline;
  end;

  PPGtkTreeDragSource = ^PGtkTreeDragSource;
  PGtkTreeDragSource = ^TGtkTreeDragSource;
  TGtkTreeDragSource = object
    function drag_data_delete(path: PGtkTreePath): gboolean; cdecl; inline;
    function drag_data_get(path: PGtkTreePath): PGdkContentProvider; cdecl; inline;
    function row_draggable(path: PGtkTreePath): gboolean; cdecl; inline;
  end;

  PPGtkTreeSortable = ^PGtkTreeSortable;
  PGtkTreeSortable = ^TGtkTreeSortable;

  PPGtkTreeIterCompareFunc = ^PGtkTreeIterCompareFunc;
  PGtkTreeIterCompareFunc = ^TGtkTreeIterCompareFunc;
  TGtkTreeIterCompareFunc = function(model: PGtkTreeModel; a: PGtkTreeIter; b: PGtkTreeIter; user_data: gpointer): gint; cdecl;
  TGtkTreeSortable = object
    sort_column_changed1: procedure; cdecl;
    function get_sort_column_id(sort_column_id: Pgint; order: PGtkSortType): gboolean; cdecl; inline;
    function has_default_sort_func: gboolean; cdecl; inline;
    procedure set_default_sort_func(sort_func: TGtkTreeIterCompareFunc; user_data: gpointer; destroy_: TGDestroyNotify); cdecl; inline;
    procedure set_sort_column_id(sort_column_id: gint; order: TGtkSortType); cdecl; inline;
    procedure set_sort_func(sort_column_id: gint; sort_func: TGtkTreeIterCompareFunc; user_data: gpointer; destroy_: TGDestroyNotify); cdecl; inline;
    procedure sort_column_changed; cdecl; inline;
  end;

  PPGtkListStore = ^PGtkListStore;
  PGtkListStore = ^TGtkListStore;

  PPGtkListStorePrivate = ^PGtkListStorePrivate;
  PGtkListStorePrivate = ^TGtkListStorePrivate;
  TGtkListStore = object(TGObject)
    priv: PGtkListStorePrivate;
    //function new(n_columns: gint; args: array of const): PGtkListStore; cdecl; inline; static;
    function newv(n_columns: gint; types: PGType): PGtkListStore; cdecl; inline; static;
    procedure append(iter: PGtkTreeIter); cdecl; inline;
    procedure clear; cdecl; inline;
    procedure insert(iter: PGtkTreeIter; position: gint); cdecl; inline;
    procedure insert_after(iter: PGtkTreeIter; sibling: PGtkTreeIter); cdecl; inline;
    procedure insert_before(iter: PGtkTreeIter; sibling: PGtkTreeIter); cdecl; inline;
    //procedure insert_with_values(iter: PGtkTreeIter; position: gint; args: array of const); cdecl; inline;
    procedure insert_with_valuesv(iter: PGtkTreeIter; position: gint; columns: Pgint; values: PGValue; n_values: gint); cdecl; inline;
    function iter_is_valid(iter: PGtkTreeIter): gboolean; cdecl; inline;
    procedure move_after(iter: PGtkTreeIter; position: PGtkTreeIter); cdecl; inline;
    procedure move_before(iter: PGtkTreeIter; position: PGtkTreeIter); cdecl; inline;
    procedure prepend(iter: PGtkTreeIter); cdecl; inline;
    function remove(iter: PGtkTreeIter): gboolean; cdecl; inline;
    procedure reorder(new_order: Pgint); cdecl; inline;
    //procedure set_(iter: PGtkTreeIter; args: array of const); cdecl; inline;
    procedure set_column_types(n_columns: gint; types: PGType); cdecl; inline;
    //procedure set_valist(iter: PGtkTreeIter; var_args: Tva_list); cdecl; inline;
    procedure set_value(iter: PGtkTreeIter; column: gint; value: PGValue); cdecl; inline;
    procedure set_valuesv(iter: PGtkTreeIter; columns: Pgint; values: PGValue; n_values: gint); cdecl; inline;
    procedure swap(a: PGtkTreeIter; b: PGtkTreeIter); cdecl; inline;
  end;

  TGtkListStorePrivate = record
  end;



  PPGtkListStoreClass = ^PGtkListStoreClass;
  PGtkListStoreClass = ^TGtkListStoreClass;
  TGtkListStoreClass = object
    parent_class: TGObjectClass;
    padding: array [0..7] of gpointer;
  end;

  PPGtkListView = ^PGtkListView;
  PGtkListView = ^TGtkListView;
  TGtkListView = object(TGtkListBase)
    function new(model: PGtkSelectionModel; factory: PGtkListItemFactory): PGtkListView; cdecl; inline; static;
    function get_enable_rubberband: gboolean; cdecl; inline;
    function get_factory: PGtkListItemFactory; cdecl; inline;
    function get_model: PGtkSelectionModel; cdecl; inline;
    function get_show_separators: gboolean; cdecl; inline;
    function get_single_click_activate: gboolean; cdecl; inline;
    procedure set_enable_rubberband(enable_rubberband: gboolean); cdecl; inline;
    procedure set_factory(factory: PGtkListItemFactory); cdecl; inline;
    procedure set_model(model: PGtkSelectionModel); cdecl; inline;
    procedure set_show_separators(show_separators: gboolean); cdecl; inline;
    procedure set_single_click_activate(single_click_activate: gboolean); cdecl; inline;
    property enable_rubberband: gboolean read get_enable_rubberband write set_enable_rubberband;
    property factory: PGtkListItemFactory read get_factory write set_factory;
    property model: PGtkSelectionModel read get_model write set_model;
    property show_separators: gboolean read get_show_separators write set_show_separators;
    property single_click_activate: gboolean read get_single_click_activate write set_single_click_activate;
  end;

  PPGtkListViewClass = ^PGtkListViewClass;
  PGtkListViewClass = ^TGtkListViewClass;
  TGtkListViewClass = object
  end;

  PPGtkLockButton = ^PGtkLockButton;
  PGtkLockButton = ^TGtkLockButton;
  TGtkLockButton = object(TGtkButton)
    function new(permission: PGPermission): PGtkLockButton; cdecl; inline; static;
    function get_permission: PGPermission; cdecl; inline;
    procedure set_permission(permission: PGPermission); cdecl; inline;
    property permission: PGPermission read get_permission write set_permission;
    //property text_lock: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_text_lock  { property is writeable but setter not declared } ;
    //property text_unlock: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_text_unlock  { property is writeable but setter not declared } ;
    //property tooltip_lock: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_tooltip_lock  { property is writeable but setter not declared } ;
    //property tooltip_not_authorized: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_tooltip_not_authorized  { property is writeable but setter not declared } ;
    //property tooltip_unlock: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_tooltip_unlock  { property is writeable but setter not declared } ;
  end;

  PPGtkMapListModel = ^PGtkMapListModel;
  PGtkMapListModel = ^TGtkMapListModel;

  PPGtkMapListModelMapFunc = ^PGtkMapListModelMapFunc;
  PGtkMapListModelMapFunc = ^TGtkMapListModelMapFunc;
  TGtkMapListModelMapFunc = function(item: PGObject; user_data: gpointer): PGObject; cdecl;
  TGtkMapListModel = object(TGObject)
    function new(model: PGListModel; map_func: TGtkMapListModelMapFunc; user_data: gpointer; user_destroy: TGDestroyNotify): PGtkMapListModel; cdecl; inline; static;
    function get_model: PGListModel; cdecl; inline;
    function has_map: gboolean; cdecl; inline;
    procedure set_map_func(map_func: TGtkMapListModelMapFunc; user_data: gpointer; user_destroy: TGDestroyNotify); cdecl; inline;
    procedure set_model(model: PGListModel); cdecl; inline;
    //property has_map1: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_has_map ;
    property model: PGListModel read get_model write set_model;
  end;

  PPGtkMapListModelClass = ^PGtkMapListModelClass;
  PGtkMapListModelClass = ^TGtkMapListModelClass;
  TGtkMapListModelClass = object
    parent_class: TGObjectClass;
  end;

  PPGtkMediaStream = ^PGtkMediaStream;
  PGtkMediaStream = ^TGtkMediaStream;
  TGtkMediaStream = object(TGObject)
    //procedure error(domain: TGQuark; code: gint; format: Pgchar; args: array of const); cdecl; inline;
    //procedure error_valist(domain: TGQuark; code: gint; format: Pgchar; args: Tva_list); cdecl; inline;
    procedure gerror(error: PGError); cdecl; inline;
    function get_duration: gint64; cdecl; inline;
    function get_ended: gboolean; cdecl; inline;
    function get_error: PGError; cdecl; inline;
    function get_loop: gboolean; cdecl; inline;
    function get_muted: gboolean; cdecl; inline;
    function get_playing: gboolean; cdecl; inline;
    function get_timestamp: gint64; cdecl; inline;
    function get_volume: gdouble; cdecl; inline;
    function has_audio: gboolean; cdecl; inline;
    function has_video: gboolean; cdecl; inline;
    function is_prepared: gboolean; cdecl; inline;
    function is_seekable: gboolean; cdecl; inline;
    function is_seeking: gboolean; cdecl; inline;
    procedure pause; cdecl; inline;
    procedure play; cdecl; inline;
    procedure realize(surface: PGdkSurface); cdecl; inline;
    procedure seek(timestamp: gint64); cdecl; inline;
    procedure seek_failed; cdecl; inline;
    procedure seek_success; cdecl; inline;
    procedure set_loop(loop: gboolean); cdecl; inline;
    procedure set_muted(muted: gboolean); cdecl; inline;
    procedure set_playing(playing: gboolean); cdecl; inline;
    procedure set_volume(volume: gdouble); cdecl; inline;
    procedure stream_ended; cdecl; inline;
    procedure stream_prepared(has_audio: gboolean; has_video: gboolean; seekable: gboolean; duration: gint64); cdecl; inline;
    procedure stream_unprepared; cdecl; inline;
    procedure unrealize(surface: PGdkSurface); cdecl; inline;
    procedure update(timestamp: gint64); cdecl; inline;
    property duration: gint64 read get_duration ;
    property ended: gboolean read get_ended ;
    property error1: PGError read get_error ;
    //property has_audio1: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_has_audio ;
    //property has_video1: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_has_video ;
    property loop: gboolean read get_loop write set_loop;
    property muted: gboolean read get_muted write set_muted;
    property playing: gboolean read get_playing write set_playing;
    //property prepared: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_prepared  { property is writeable but setter not declared } ;
    //property seekable: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_seekable ;
    //property seeking: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_seeking ;
    property timestamp: gint64 read get_timestamp ;
    property volume: gdouble read get_volume write set_volume;
  end;

  PPGtkMediaControls = ^PGtkMediaControls;
  PGtkMediaControls = ^TGtkMediaControls;
  TGtkMediaControls = object(TGtkWidget)
    function new(stream: PGtkMediaStream): PGtkMediaControls; cdecl; inline; static;
    function get_media_stream: PGtkMediaStream; cdecl; inline;
    procedure set_media_stream(stream: PGtkMediaStream); cdecl; inline;
    property media_stream: PGtkMediaStream read get_media_stream write set_media_stream;
  end;

  PPGtkMediaControlsClass = ^PGtkMediaControlsClass;
  PGtkMediaControlsClass = ^TGtkMediaControlsClass;
  TGtkMediaControlsClass = object
    parent_class: TGtkWidgetClass;
  end;

  PPGtkMediaFile = ^PGtkMediaFile;
  PGtkMediaFile = ^TGtkMediaFile;
  TGtkMediaFile = object(TGtkMediaStream)
    function new: PGtkMediaFile; cdecl; inline; static;
    function new_for_file(file_: PGFile): PGtkMediaFile; cdecl; inline; static;
    function new_for_filename(filename: Pgchar): PGtkMediaFile; cdecl; inline; static;
    function new_for_input_stream(stream: PGInputStream): PGtkMediaFile; cdecl; inline; static;
    function new_for_resource(resource_path: Pgchar): PGtkMediaFile; cdecl; inline; static;
    procedure clear; cdecl; inline;
    function get_file: PGFile; cdecl; inline;
    function get_input_stream: PGInputStream; cdecl; inline;
    procedure set_file(file_: PGFile); cdecl; inline;
    procedure set_filename(filename: Pgchar); cdecl; inline;
    procedure set_input_stream(stream: PGInputStream); cdecl; inline;
    procedure set_resource(resource_path: Pgchar); cdecl; inline;
    property file_: PGFile read get_file write set_file;
    property input_stream: PGInputStream read get_input_stream write set_input_stream;
  end;

  PPGtkMediaStreamClass = ^PGtkMediaStreamClass;
  PGtkMediaStreamClass = ^TGtkMediaStreamClass;
  TGtkMediaStreamClass = object
    parent_class: TGObjectClass;
    play: function(self: PGtkMediaStream): gboolean; cdecl;
    pause: procedure(self: PGtkMediaStream); cdecl;
    seek: procedure(self: PGtkMediaStream; timestamp: gint64); cdecl;
    update_audio: procedure(self: PGtkMediaStream; muted: gboolean; volume: gdouble); cdecl;
    realize: procedure(self: PGtkMediaStream; surface: PGdkSurface); cdecl;
    unrealize: procedure(self: PGtkMediaStream; surface: PGdkSurface); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
    _gtk_reserved5: procedure; cdecl;
    _gtk_reserved6: procedure; cdecl;
    _gtk_reserved7: procedure; cdecl;
    _gtk_reserved8: procedure; cdecl;
  end;

  PPGtkMediaFileClass = ^PGtkMediaFileClass;
  PGtkMediaFileClass = ^TGtkMediaFileClass;
  TGtkMediaFileClass = object
    parent_class: TGtkMediaStreamClass;
    open: procedure(self: PGtkMediaFile); cdecl;
    close: procedure(self: PGtkMediaFile); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkMenuButton = ^PGtkMenuButton;
  PGtkMenuButton = ^TGtkMenuButton;

  PPGtkPopover = ^PGtkPopover;
  PGtkPopover = ^TGtkPopover;

  PPGtkMenuButtonCreatePopupFunc = ^PGtkMenuButtonCreatePopupFunc;
  PGtkMenuButtonCreatePopupFunc = ^TGtkMenuButtonCreatePopupFunc;
  TGtkMenuButtonCreatePopupFunc = procedure(menu_button: PGtkMenuButton; user_data: gpointer); cdecl;
  TGtkMenuButton = object(TGtkWidget)
    function new: PGtkMenuButton; cdecl; inline; static;
    function get_always_show_arrow: gboolean; cdecl; inline;
    function get_child: PGtkWidget; cdecl; inline;
    function get_direction: TGtkArrowType; cdecl; inline;
    function get_has_frame: gboolean; cdecl; inline;
    function get_icon_name: Pgchar; cdecl; inline;
    function get_label: Pgchar; cdecl; inline;
    function get_menu_model: PGMenuModel; cdecl; inline;
    function get_popover: PGtkPopover; cdecl; inline;
    function get_primary: gboolean; cdecl; inline;
    function get_use_underline: gboolean; cdecl; inline;
    procedure popdown; cdecl; inline;
    procedure popup; cdecl; inline;
    procedure set_always_show_arrow(always_show_arrow: gboolean); cdecl; inline;
    procedure set_child(child: PGtkWidget); cdecl; inline;
    procedure set_create_popup_func(func: TGtkMenuButtonCreatePopupFunc; user_data: gpointer; destroy_notify: TGDestroyNotify); cdecl; inline;
    procedure set_direction(direction: TGtkArrowType); cdecl; inline;
    procedure set_has_frame(has_frame: gboolean); cdecl; inline;
    procedure set_icon_name(icon_name: Pgchar); cdecl; inline;
    procedure set_label(label_: Pgchar); cdecl; inline;
    procedure set_menu_model(menu_model: PGMenuModel); cdecl; inline;
    procedure set_popover(popover: PGtkWidget); cdecl; inline;
    procedure set_primary(primary: gboolean); cdecl; inline;
    procedure set_use_underline(use_underline: gboolean); cdecl; inline;
    property always_show_arrow: gboolean read get_always_show_arrow write set_always_show_arrow;
    property child: PGtkWidget read get_child write set_child;
    property direction: TGtkArrowType read get_direction write set_direction;
    property has_frame: gboolean read get_has_frame write set_has_frame;
    property icon_name: Pgchar read get_icon_name write set_icon_name;
    property label_: Pgchar read get_label write set_label;
    property menu_model: PGMenuModel read get_menu_model write set_menu_model;
    property popover: PGtkPopover read get_popover  { property is writeable but setter not declared } ;
    property primary: gboolean read get_primary write set_primary;
    property use_underline: gboolean read get_use_underline write set_use_underline;
  end;
  TGtkPopover = object(TGtkWidget)
    function new: PGtkPopover; cdecl; inline; static;
    function get_autohide: gboolean; cdecl; inline;
    function get_cascade_popdown: gboolean; cdecl; inline;
    function get_child: PGtkWidget; cdecl; inline;
    function get_has_arrow: gboolean; cdecl; inline;
    function get_mnemonics_visible: gboolean; cdecl; inline;
    procedure get_offset(x_offset: Pgint; y_offset: Pgint); cdecl; inline;
    function get_pointing_to(rect: PGdkRectangle): gboolean; cdecl; inline;
    function get_position: TGtkPositionType; cdecl; inline;
    procedure popdown; cdecl; inline;
    procedure popup; cdecl; inline;
    procedure present; cdecl; inline;
    procedure set_autohide(autohide: gboolean); cdecl; inline;
    procedure set_cascade_popdown(cascade_popdown: gboolean); cdecl; inline;
    procedure set_child(child: PGtkWidget); cdecl; inline;
    procedure set_default_widget(widget: PGtkWidget); cdecl; inline;
    procedure set_has_arrow(has_arrow: gboolean); cdecl; inline;
    procedure set_mnemonics_visible(mnemonics_visible: gboolean); cdecl; inline;
    procedure set_offset(x_offset: gint; y_offset: gint); cdecl; inline;
    procedure set_pointing_to(rect: PGdkRectangle); cdecl; inline;
    procedure set_position(position: TGtkPositionType); cdecl; inline;
    property autohide: gboolean read get_autohide write set_autohide;
    property cascade_popdown: gboolean read get_cascade_popdown write set_cascade_popdown;
    property child: PGtkWidget read get_child write set_child;
    //property default_widget: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_default_widget  { property is writeable but setter not declared } ;
    property has_arrow: gboolean read get_has_arrow write set_has_arrow;
    property mnemonics_visible: gboolean read get_mnemonics_visible write set_mnemonics_visible;
    //property pointing_to: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_pointing_to  { property is writeable but setter not declared } ;
    property position: TGtkPositionType read get_position write set_position;
  end;

  PPGtkMessageDialog = ^PGtkMessageDialog;
  PGtkMessageDialog = ^TGtkMessageDialog;
  TGtkMessageDialog = object(TGtkDialog)
    //function new(parent: PGtkWindow; flags: TGtkDialogFlags; type_: TGtkMessageType; buttons: TGtkButtonsType; message_format: Pgchar; args: array of const): PGtkMessageDialog; cdecl; inline; static;
    //function new_with_markup(parent: PGtkWindow; flags: TGtkDialogFlags; type_: TGtkMessageType; buttons: TGtkButtonsType; message_format: Pgchar; args: array of const): PGtkMessageDialog; cdecl; inline; static;
    //procedure format_secondary_markup(message_format: Pgchar; args: array of const); cdecl; inline;
    //procedure format_secondary_text(message_format: Pgchar; args: array of const); cdecl; inline;
    function get_message_area: PGtkWidget; cdecl; inline;
    procedure set_markup(str: Pgchar); cdecl; inline;
    //property buttons: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_buttons  { property is writeable but setter not declared } ;
    property message_area: PGtkWidget read get_message_area ;
    //property message_type: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_message_type  { property is writeable but setter not declared } ;
    //property secondary_text: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_secondary_text  { property is writeable but setter not declared } ;
    //property secondary_use_markup: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_secondary_use_markup  { property is writeable but setter not declared } ;
    //property text: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_text  { property is writeable but setter not declared } ;
    //property use_markup: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_use_markup  { property is writeable but setter not declared } ;
  end;

  PPGtkMessageDialogClass = ^PGtkMessageDialogClass;
  PGtkMessageDialogClass = ^TGtkMessageDialogClass;
  TGtkMessageDialogClass = object
  end;

  PPGtkMnemonicAction = ^PGtkMnemonicAction;
  PGtkMnemonicAction = ^TGtkMnemonicAction;
  TGtkMnemonicAction = object
    function get: PGtkMnemonicAction; cdecl; inline; static;
  end;

  PPGtkMnemonicActionClass = ^PGtkMnemonicActionClass;
  PGtkMnemonicActionClass = ^TGtkMnemonicActionClass;
  TGtkMnemonicActionClass = object
  end;

  PPGtkMnemonicTrigger = ^PGtkMnemonicTrigger;
  PGtkMnemonicTrigger = ^TGtkMnemonicTrigger;
  TGtkMnemonicTrigger = object(TGtkShortcutTrigger)
    function new(keyval: guint): PGtkMnemonicTrigger; cdecl; inline; static;
    function get_keyval: guint; cdecl; inline;
    property keyval: guint read get_keyval  { property is writeable but setter not declared } ;
  end;

  PPGtkMnemonicTriggerClass = ^PGtkMnemonicTriggerClass;
  PGtkMnemonicTriggerClass = ^TGtkMnemonicTriggerClass;
  TGtkMnemonicTriggerClass = object
  end;

  PPGtkMountOperation = ^PGtkMountOperation;
  PGtkMountOperation = ^TGtkMountOperation;

  PPGtkMountOperationPrivate = ^PGtkMountOperationPrivate;
  PGtkMountOperationPrivate = ^TGtkMountOperationPrivate;
  TGtkMountOperation = object(TGMountOperation)
    priv1: PGtkMountOperationPrivate;
    function new(parent: PGtkWindow): PGtkMountOperation; cdecl; inline; static;
    function get_display: PGdkDisplay; cdecl; inline;
    function get_parent: PGtkWindow; cdecl; inline;
    function is_showing: gboolean; cdecl; inline;
    procedure set_display(display: PGdkDisplay); cdecl; inline;
    procedure set_parent(parent: PGtkWindow); cdecl; inline;
    property display: PGdkDisplay read get_display write set_display;
    //property is_showing1: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_is_showing ;
    property parent: PGtkWindow read get_parent write set_parent;
  end;

  TGtkMountOperationPrivate = record
  end;



  PPGtkMountOperationClass = ^PGtkMountOperationClass;
  PGtkMountOperationClass = ^TGtkMountOperationClass;
  TGtkMountOperationClass = object
    parent_class: TGMountOperationClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkMultiFilter = ^PGtkMultiFilter;
  PGtkMultiFilter = ^TGtkMultiFilter;
  TGtkMultiFilter = object(TGtkFilter)
    procedure append(filter: PGtkFilter); cdecl; inline;
    procedure remove(position: guint); cdecl; inline;
  end;

  PPGtkMultiFilterClass = ^PGtkMultiFilterClass;
  PGtkMultiFilterClass = ^TGtkMultiFilterClass;
  TGtkMultiFilterClass = object
  end;

  PPGtkMultiSelection = ^PGtkMultiSelection;
  PGtkMultiSelection = ^TGtkMultiSelection;
  TGtkMultiSelection = object(TGObject)
    function new(model: PGListModel): PGtkMultiSelection; cdecl; inline; static;
    function get_model: PGListModel; cdecl; inline;
    procedure set_model(model: PGListModel); cdecl; inline;
    property model: PGListModel read get_model write set_model;
  end;

  PPGtkMultiSelectionClass = ^PGtkMultiSelectionClass;
  PGtkMultiSelectionClass = ^TGtkMultiSelectionClass;
  TGtkMultiSelectionClass = object
    parent_class: TGObjectClass;
  end;

  PPGtkMultiSorter = ^PGtkMultiSorter;
  PGtkMultiSorter = ^TGtkMultiSorter;
  TGtkMultiSorter = object(TGtkSorter)
    function new: PGtkMultiSorter; cdecl; inline; static;
    procedure append(sorter: PGtkSorter); cdecl; inline;
    procedure remove(position: guint); cdecl; inline;
  end;

  PPGtkMultiSorterClass = ^PGtkMultiSorterClass;
  PGtkMultiSorterClass = ^TGtkMultiSorterClass;
  TGtkMultiSorterClass = object
    parent_class: TGtkSorterClass;
  end;

  PPGtkNamedAction = ^PGtkNamedAction;
  PGtkNamedAction = ^TGtkNamedAction;
  TGtkNamedAction = object
    function new(name: Pgchar): PGtkNamedAction; cdecl; inline; static;
    function get_action_name: Pgchar; cdecl; inline;
    property action_name: Pgchar read get_action_name  { property is writeable but setter not declared } ;
  end;

  PPGtkNamedActionClass = ^PGtkNamedActionClass;
  PGtkNamedActionClass = ^TGtkNamedActionClass;
  TGtkNamedActionClass = object
  end;
  TGtkNativeDialog = object(TGObject)
    procedure destroy_; cdecl; inline;
    function get_modal: gboolean; cdecl; inline;
    function get_title: Pgchar; cdecl; inline;
    function get_transient_for: PGtkWindow; cdecl; inline;
    function get_visible: gboolean; cdecl; inline;
    procedure hide; cdecl; inline;
    procedure set_modal(modal: gboolean); cdecl; inline;
    procedure set_title(title: Pgchar); cdecl; inline;
    procedure set_transient_for(parent: PGtkWindow); cdecl; inline;
    procedure show; cdecl; inline;
    property modal: gboolean read get_modal write set_modal;
    property title: Pgchar read get_title write set_title;
    property transient_for: PGtkWindow read get_transient_for write set_transient_for;
    property visible: gboolean read get_visible  { property is writeable but setter not declared } ;
  end;

  PPGtkNativeInterface = ^PGtkNativeInterface;
  PGtkNativeInterface = ^TGtkNativeInterface;
  TGtkNativeInterface = object
  end;

  PPGtkNeverTrigger = ^PGtkNeverTrigger;
  PGtkNeverTrigger = ^TGtkNeverTrigger;
  TGtkNeverTrigger = object(TGtkShortcutTrigger)
    function get: PGtkNeverTrigger; cdecl; inline; static;
  end;

  PPGtkNeverTriggerClass = ^PGtkNeverTriggerClass;
  PGtkNeverTriggerClass = ^TGtkNeverTriggerClass;
  TGtkNeverTriggerClass = object
  end;

  PPGtkNoSelection = ^PGtkNoSelection;
  PGtkNoSelection = ^TGtkNoSelection;
  TGtkNoSelection = object(TGObject)
    function new(model: PGListModel): PGtkNoSelection; cdecl; inline; static;
    function get_model: PGListModel; cdecl; inline;
    procedure set_model(model: PGListModel); cdecl; inline;
    property model: PGListModel read get_model write set_model;
  end;

  PPGtkNoSelectionClass = ^PGtkNoSelectionClass;
  PGtkNoSelectionClass = ^TGtkNoSelectionClass;
  TGtkNoSelectionClass = object
    parent_class: TGObjectClass;
  end;

  PPGtkNotebook = ^PGtkNotebook;
  PGtkNotebook = ^TGtkNotebook;

  PPGtkPackType = ^PGtkPackType;
  PGtkPackType = ^TGtkPackType;

  PPGtkNotebookPage = ^PGtkNotebookPage;
  PGtkNotebookPage = ^TGtkNotebookPage;
  TGtkNotebook = object(TGtkWidget)
    function new: PGtkNotebook; cdecl; inline; static;
    function append_page(child: PGtkWidget; tab_label: PGtkWidget): gint; cdecl; inline;
    function append_page_menu(child: PGtkWidget; tab_label: PGtkWidget; menu_label: PGtkWidget): gint; cdecl; inline;
    procedure detach_tab(child: PGtkWidget); cdecl; inline;
    function get_action_widget(pack_type: TGtkPackType): PGtkWidget; cdecl; inline;
    function get_current_page: gint; cdecl; inline;
    function get_group_name: Pgchar; cdecl; inline;
    function get_menu_label(child: PGtkWidget): PGtkWidget; cdecl; inline;
    function get_menu_label_text(child: PGtkWidget): Pgchar; cdecl; inline;
    function get_n_pages: gint; cdecl; inline;
    function get_nth_page(page_num: gint): PGtkWidget; cdecl; inline;
    function get_page(child: PGtkWidget): PGtkNotebookPage; cdecl; inline;
    function get_pages: PGListModel; cdecl; inline;
    function get_scrollable: gboolean; cdecl; inline;
    function get_show_border: gboolean; cdecl; inline;
    function get_show_tabs: gboolean; cdecl; inline;
    function get_tab_detachable(child: PGtkWidget): gboolean; cdecl; inline;
    function get_tab_label(child: PGtkWidget): PGtkWidget; cdecl; inline;
    function get_tab_label_text(child: PGtkWidget): Pgchar; cdecl; inline;
    function get_tab_pos: TGtkPositionType; cdecl; inline;
    function get_tab_reorderable(child: PGtkWidget): gboolean; cdecl; inline;
    function insert_page(child: PGtkWidget; tab_label: PGtkWidget; position: gint): gint; cdecl; inline;
    function insert_page_menu(child: PGtkWidget; tab_label: PGtkWidget; menu_label: PGtkWidget; position: gint): gint; cdecl; inline;
    procedure next_page; cdecl; inline;
    function page_num(child: PGtkWidget): gint; cdecl; inline;
    procedure popup_disable; cdecl; inline;
    procedure popup_enable; cdecl; inline;
    function prepend_page(child: PGtkWidget; tab_label: PGtkWidget): gint; cdecl; inline;
    function prepend_page_menu(child: PGtkWidget; tab_label: PGtkWidget; menu_label: PGtkWidget): gint; cdecl; inline;
    procedure prev_page; cdecl; inline;
    procedure remove_page(page_num: gint); cdecl; inline;
    procedure reorder_child(child: PGtkWidget; position: gint); cdecl; inline;
    procedure set_action_widget(widget: PGtkWidget; pack_type: TGtkPackType); cdecl; inline;
    procedure set_current_page(page_num: gint); cdecl; inline;
    procedure set_group_name(group_name: Pgchar); cdecl; inline;
    procedure set_menu_label(child: PGtkWidget; menu_label: PGtkWidget); cdecl; inline;
    procedure set_menu_label_text(child: PGtkWidget; menu_text: Pgchar); cdecl; inline;
    procedure set_scrollable(scrollable: gboolean); cdecl; inline;
    procedure set_show_border(show_border: gboolean); cdecl; inline;
    procedure set_show_tabs(show_tabs: gboolean); cdecl; inline;
    procedure set_tab_detachable(child: PGtkWidget; detachable: gboolean); cdecl; inline;
    procedure set_tab_label(child: PGtkWidget; tab_label: PGtkWidget); cdecl; inline;
    procedure set_tab_label_text(child: PGtkWidget; tab_text: Pgchar); cdecl; inline;
    procedure set_tab_pos(pos: TGtkPositionType); cdecl; inline;
    procedure set_tab_reorderable(child: PGtkWidget; reorderable: gboolean); cdecl; inline;
    //property enable_popup: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_enable_popup  { property is writeable but setter not declared } ;
    property group_name: Pgchar read get_group_name write set_group_name;
    //property page: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_page  { property is writeable but setter not declared } ;
    property pages: PGListModel read get_pages ;
    property scrollable: gboolean read get_scrollable write set_scrollable;
    property show_border: gboolean read get_show_border write set_show_border;
    property show_tabs: gboolean read get_show_tabs write set_show_tabs;
    property tab_pos: TGtkPositionType read get_tab_pos write set_tab_pos;
  end;
  TGtkNotebookPage = object(TGObject)
    function get_child: PGtkWidget; cdecl; inline;
    property child: PGtkWidget read get_child  { property is writeable but setter not declared } ;
    //property detachable: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_detachable  { property is writeable but setter not declared } ;
    //property menu: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_menu  { property is writeable but setter not declared } ;
    //property menu_label: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_menu_label  { property is writeable but setter not declared } ;
    //property position: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_position  { property is writeable but setter not declared } ;
    //property reorderable: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_reorderable  { property is writeable but setter not declared } ;
    //property tab: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_tab  { property is writeable but setter not declared } ;
    //property tab_expand: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_tab_expand  { property is writeable but setter not declared } ;
    //property tab_fill: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_tab_fill  { property is writeable but setter not declared } ;
    //property tab_label: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_tab_label  { property is writeable but setter not declared } ;
  end;

  PPGtkNotebookTab = ^PGtkNotebookTab;
  PGtkNotebookTab = ^TGtkNotebookTab;

  PPGtkNothingAction = ^PGtkNothingAction;
  PGtkNothingAction = ^TGtkNothingAction;
  TGtkNothingAction = object
    function get: PGtkNothingAction; cdecl; inline; static;
  end;

  PPGtkNothingActionClass = ^PGtkNothingActionClass;
  PGtkNothingActionClass = ^TGtkNothingActionClass;
  TGtkNothingActionClass = object
  end;

  PPGtkNumberUpLayout = ^PGtkNumberUpLayout;
  PGtkNumberUpLayout = ^TGtkNumberUpLayout;

  PPGtkNumericSorter = ^PGtkNumericSorter;
  PGtkNumericSorter = ^TGtkNumericSorter;
  TGtkNumericSorter = object(TGtkSorter)
    function new(expression: PGtkExpression): PGtkNumericSorter; cdecl; inline; static;
    function get_expression: PGtkExpression; cdecl; inline;
    function get_sort_order: TGtkSortType; cdecl; inline;
    procedure set_expression(expression: PGtkExpression); cdecl; inline;
    procedure set_sort_order(sort_order: TGtkSortType); cdecl; inline;
    property expression: PGtkExpression read get_expression write set_expression;
    property sort_order: TGtkSortType read get_sort_order write set_sort_order;
  end;

  PPGtkNumericSorterClass = ^PGtkNumericSorterClass;
  PGtkNumericSorterClass = ^TGtkNumericSorterClass;
  TGtkNumericSorterClass = object
    parent_class: TGtkSorterClass;
  end;

  PPGtkObjectExpression = ^PGtkObjectExpression;
  PGtkObjectExpression = ^TGtkObjectExpression;
  TGtkObjectExpression = object(TGtkExpression)
    function new(object_: PGObject): PGtkObjectExpression; cdecl; inline; static;
    function get_object: PGObject; cdecl; inline;
  end;

  PPGtkOrientableIface = ^PGtkOrientableIface;
  PGtkOrientableIface = ^TGtkOrientableIface;
  TGtkOrientableIface = object
    base_iface: TGTypeInterface;
  end;

  PPGtkOverlay = ^PGtkOverlay;
  PGtkOverlay = ^TGtkOverlay;
  TGtkOverlay = object(TGtkWidget)
    function new: PGtkOverlay; cdecl; inline; static;
    procedure add_overlay(widget: PGtkWidget); cdecl; inline;
    function get_child: PGtkWidget; cdecl; inline;
    function get_clip_overlay(widget: PGtkWidget): gboolean; cdecl; inline;
    function get_measure_overlay(widget: PGtkWidget): gboolean; cdecl; inline;
    procedure remove_overlay(widget: PGtkWidget); cdecl; inline;
    procedure set_child(child: PGtkWidget); cdecl; inline;
    procedure set_clip_overlay(widget: PGtkWidget; clip_overlay: gboolean); cdecl; inline;
    procedure set_measure_overlay(widget: PGtkWidget; measure: gboolean); cdecl; inline;
    property child: PGtkWidget read get_child write set_child;
  end;

  PPGtkOverlayLayout = ^PGtkOverlayLayout;
  PGtkOverlayLayout = ^TGtkOverlayLayout;
  TGtkOverlayLayout = object(TGtkLayoutManager)
    function new: PGtkOverlayLayout; cdecl; inline; static;
  end;

  PPGtkOverlayLayoutChild = ^PGtkOverlayLayoutChild;
  PGtkOverlayLayoutChild = ^TGtkOverlayLayoutChild;
  TGtkOverlayLayoutChild = object(TGtkLayoutChild)
    function get_clip_overlay: gboolean; cdecl; inline;
    function get_measure: gboolean; cdecl; inline;
    procedure set_clip_overlay(clip_overlay: gboolean); cdecl; inline;
    procedure set_measure(measure: gboolean); cdecl; inline;
    property clip_overlay: gboolean read get_clip_overlay write set_clip_overlay;
    property measure: gboolean read get_measure write set_measure;
  end;

  PPGtkOverlayLayoutChildClass = ^PGtkOverlayLayoutChildClass;
  PGtkOverlayLayoutChildClass = ^TGtkOverlayLayoutChildClass;
  TGtkOverlayLayoutChildClass = object
    parent_class: TGtkLayoutChildClass;
  end;

  PPGtkOverlayLayoutClass = ^PGtkOverlayLayoutClass;
  PGtkOverlayLayoutClass = ^TGtkOverlayLayoutClass;
  TGtkOverlayLayoutClass = object
    parent_class: TGtkLayoutManagerClass;
  end;

  PPGtkPadActionType = ^PGtkPadActionType;
  PGtkPadActionType = ^TGtkPadActionType;

  PPGtkPadActionEntry = ^PGtkPadActionEntry;
  PGtkPadActionEntry = ^TGtkPadActionEntry;

  TGtkPadActionEntry = record
    type_: TGtkPadActionType;
    index: gint;
    mode: gint;
    label_: Pgchar;
    action_name: Pgchar;
  end;



  PPGtkPadController = ^PGtkPadController;
  PGtkPadController = ^TGtkPadController;
  TGtkPadController = object(TGtkEventController)
    function new(group: PGActionGroup; pad: PGdkDevice): PGtkPadController; cdecl; inline; static;
    procedure set_action(type_: TGtkPadActionType; index: gint; mode: gint; label_: Pgchar; action_name: Pgchar); cdecl; inline;
    procedure set_action_entries(entries: PGtkPadActionEntry; n_entries: gint); cdecl; inline;
    //property action_group: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_action_group  { property is writeable but setter not declared } ;
    //property pad: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_pad  { property is writeable but setter not declared } ;
  end;

  PPGtkPadControllerClass = ^PGtkPadControllerClass;
  PGtkPadControllerClass = ^TGtkPadControllerClass;
  TGtkPadControllerClass = object
  end;

  PPGtkPageOrientation = ^PGtkPageOrientation;
  PGtkPageOrientation = ^TGtkPageOrientation;

  PPGtkPageRange = ^PGtkPageRange;
  PGtkPageRange = ^TGtkPageRange;

  TGtkPageRange = record
    start: gint;
    end_: gint;
  end;



  PPGtkPageSet = ^PGtkPageSet;
  PGtkPageSet = ^TGtkPageSet;

  PPGtkPageSetup = ^PGtkPageSetup;
  PGtkPageSetup = ^TGtkPageSetup;

  PPGtkUnit = ^PGtkUnit;
  PGtkUnit = ^TGtkUnit;

  PPGtkPaperSize = ^PGtkPaperSize;
  PGtkPaperSize = ^TGtkPaperSize;
  TGtkPageSetup = object(TGObject)
    function new: PGtkPageSetup; cdecl; inline; static;
    function new_from_file(file_name: Pgchar; error: PPGError): PGtkPageSetup; cdecl; inline; static;
    function new_from_gvariant(variant: PGVariant): PGtkPageSetup; cdecl; inline; static;
    function new_from_key_file(key_file: PGKeyFile; group_name: Pgchar; error: PPGError): PGtkPageSetup; cdecl; inline; static;
    function copy: PGtkPageSetup; cdecl; inline;
    function get_bottom_margin(unit_: TGtkUnit): gdouble; cdecl; inline;
    function get_left_margin(unit_: TGtkUnit): gdouble; cdecl; inline;
    function get_orientation: TGtkPageOrientation; cdecl; inline;
    function get_page_height(unit_: TGtkUnit): gdouble; cdecl; inline;
    function get_page_width(unit_: TGtkUnit): gdouble; cdecl; inline;
    function get_paper_height(unit_: TGtkUnit): gdouble; cdecl; inline;
    function get_paper_size: PGtkPaperSize; cdecl; inline;
    function get_paper_width(unit_: TGtkUnit): gdouble; cdecl; inline;
    function get_right_margin(unit_: TGtkUnit): gdouble; cdecl; inline;
    function get_top_margin(unit_: TGtkUnit): gdouble; cdecl; inline;
    function load_file(file_name: Pgchar; error: PPGError): gboolean; cdecl; inline;
    function load_key_file(key_file: PGKeyFile; group_name: Pgchar; error: PPGError): gboolean; cdecl; inline;
    procedure set_bottom_margin(margin: gdouble; unit_: TGtkUnit); cdecl; inline;
    procedure set_left_margin(margin: gdouble; unit_: TGtkUnit); cdecl; inline;
    procedure set_orientation(orientation: TGtkPageOrientation); cdecl; inline;
    procedure set_paper_size(size: PGtkPaperSize); cdecl; inline;
    procedure set_paper_size_and_default_margins(size: PGtkPaperSize); cdecl; inline;
    procedure set_right_margin(margin: gdouble; unit_: TGtkUnit); cdecl; inline;
    procedure set_top_margin(margin: gdouble; unit_: TGtkUnit); cdecl; inline;
    function to_file(file_name: Pgchar; error: PPGError): gboolean; cdecl; inline;
    function to_gvariant: PGVariant; cdecl; inline;
    procedure to_key_file(key_file: PGKeyFile; group_name: Pgchar); cdecl; inline;
  end;
  TGtkPaperSize = object
    function new(name: Pgchar): PGtkPaperSize; cdecl; inline; static;
    function new_custom(name: Pgchar; display_name: Pgchar; width: gdouble; height: gdouble; unit_: TGtkUnit): PGtkPaperSize; cdecl; inline; static;
    function new_from_gvariant(variant: PGVariant): PGtkPaperSize; cdecl; inline; static;
    function new_from_ipp(ipp_name: Pgchar; width: gdouble; height: gdouble): PGtkPaperSize; cdecl; inline; static;
    function new_from_key_file(key_file: PGKeyFile; group_name: Pgchar; error: PPGError): PGtkPaperSize; cdecl; inline; static;
    function new_from_ppd(ppd_name: Pgchar; ppd_display_name: Pgchar; width: gdouble; height: gdouble): PGtkPaperSize; cdecl; inline; static;
    function copy: PGtkPaperSize; cdecl; inline;
    procedure free; cdecl; inline;
    function get_default_bottom_margin(unit_: TGtkUnit): gdouble; cdecl; inline;
    function get_default_left_margin(unit_: TGtkUnit): gdouble; cdecl; inline;
    function get_default_right_margin(unit_: TGtkUnit): gdouble; cdecl; inline;
    function get_default_top_margin(unit_: TGtkUnit): gdouble; cdecl; inline;
    function get_display_name: Pgchar; cdecl; inline;
    function get_height(unit_: TGtkUnit): gdouble; cdecl; inline;
    function get_name: Pgchar; cdecl; inline;
    function get_ppd_name: Pgchar; cdecl; inline;
    function get_width(unit_: TGtkUnit): gdouble; cdecl; inline;
    function is_custom: gboolean; cdecl; inline;
    function is_equal(size2: PGtkPaperSize): gboolean; cdecl; inline;
    function is_ipp: gboolean; cdecl; inline;
    procedure set_size(width: gdouble; height: gdouble; unit_: TGtkUnit); cdecl; inline;
    function to_gvariant: PGVariant; cdecl; inline;
    procedure to_key_file(key_file: PGKeyFile; group_name: Pgchar); cdecl; inline;
    function get_default: Pgchar; cdecl; inline; static;
    function get_paper_sizes(include_custom: gboolean): PGList; cdecl; inline; static;
  end;
  TGtkPageSetupDoneFunc = procedure(page_setup: PGtkPageSetup; data: gpointer); cdecl;

  PPGtkPageSetupUnixDialog = ^PGtkPageSetupUnixDialog;
  PGtkPageSetupUnixDialog = ^TGtkPageSetupUnixDialog;

  PPGtkPrintSettings = ^PGtkPrintSettings;
  PGtkPrintSettings = ^TGtkPrintSettings;
  TGtkPageSetupUnixDialog = object(TGtkDialog)
    function new(title: Pgchar; parent: PGtkWindow): PGtkPageSetupUnixDialog; cdecl; inline; static;
    function get_page_setup: PGtkPageSetup; cdecl; inline;
    function get_print_settings: PGtkPrintSettings; cdecl; inline;
    procedure set_page_setup(page_setup: PGtkPageSetup); cdecl; inline;
    procedure set_print_settings(print_settings: PGtkPrintSettings); cdecl; inline;
  end;

  PPGtkPrintSettingsFunc = ^PGtkPrintSettingsFunc;
  PGtkPrintSettingsFunc = ^TGtkPrintSettingsFunc;
  TGtkPrintSettingsFunc = procedure(key: Pgchar; value: Pgchar; user_data: gpointer); cdecl;

  PPGtkPrintDuplex = ^PGtkPrintDuplex;
  PGtkPrintDuplex = ^TGtkPrintDuplex;

  PPGtkPrintPages = ^PGtkPrintPages;
  PGtkPrintPages = ^TGtkPrintPages;

  PPGtkPrintQuality = ^PGtkPrintQuality;
  PGtkPrintQuality = ^TGtkPrintQuality;
  TGtkPrintSettings = object(TGObject)
    function new: PGtkPrintSettings; cdecl; inline; static;
    function new_from_file(file_name: Pgchar; error: PPGError): PGtkPrintSettings; cdecl; inline; static;
    function new_from_gvariant(variant: PGVariant): PGtkPrintSettings; cdecl; inline; static;
    function new_from_key_file(key_file: PGKeyFile; group_name: Pgchar; error: PPGError): PGtkPrintSettings; cdecl; inline; static;
    function copy: PGtkPrintSettings; cdecl; inline;
    procedure foreach(func: TGtkPrintSettingsFunc; user_data: gpointer); cdecl; inline;
    function get(key: Pgchar): Pgchar; cdecl; inline;
    function get_bool(key: Pgchar): gboolean; cdecl; inline;
    function get_collate: gboolean; cdecl; inline;
    function get_default_source: Pgchar; cdecl; inline;
    function get_dither: Pgchar; cdecl; inline;
    function get_double(key: Pgchar): gdouble; cdecl; inline;
    function get_double_with_default(key: Pgchar; def: gdouble): gdouble; cdecl; inline;
    function get_duplex: TGtkPrintDuplex; cdecl; inline;
    function get_finishings: Pgchar; cdecl; inline;
    function get_int(key: Pgchar): gint; cdecl; inline;
    function get_int_with_default(key: Pgchar; def: gint): gint; cdecl; inline;
    function get_length(key: Pgchar; unit_: TGtkUnit): gdouble; cdecl; inline;
    function get_media_type: Pgchar; cdecl; inline;
    function get_n_copies: gint; cdecl; inline;
    function get_number_up: gint; cdecl; inline;
    function get_number_up_layout: TGtkNumberUpLayout; cdecl; inline;
    function get_orientation: TGtkPageOrientation; cdecl; inline;
    function get_output_bin: Pgchar; cdecl; inline;
    function get_page_ranges(num_ranges: Pgint): PGtkPageRange; cdecl; inline;
    function get_page_set: TGtkPageSet; cdecl; inline;
    function get_paper_height(unit_: TGtkUnit): gdouble; cdecl; inline;
    function get_paper_size: PGtkPaperSize; cdecl; inline;
    function get_paper_width(unit_: TGtkUnit): gdouble; cdecl; inline;
    function get_print_pages: TGtkPrintPages; cdecl; inline;
    function get_printer: Pgchar; cdecl; inline;
    function get_printer_lpi: gdouble; cdecl; inline;
    function get_quality: TGtkPrintQuality; cdecl; inline;
    function get_resolution: gint; cdecl; inline;
    function get_resolution_x: gint; cdecl; inline;
    function get_resolution_y: gint; cdecl; inline;
    function get_reverse: gboolean; cdecl; inline;
    function get_scale: gdouble; cdecl; inline;
    function get_use_color: gboolean; cdecl; inline;
    function has_key(key: Pgchar): gboolean; cdecl; inline;
    function load_file(file_name: Pgchar; error: PPGError): gboolean; cdecl; inline;
    function load_key_file(key_file: PGKeyFile; group_name: Pgchar; error: PPGError): gboolean; cdecl; inline;
    procedure set_(key: Pgchar; value: Pgchar); cdecl; inline;
    procedure set_bool(key: Pgchar; value: gboolean); cdecl; inline;
    procedure set_collate(collate: gboolean); cdecl; inline;
    procedure set_default_source(default_source: Pgchar); cdecl; inline;
    procedure set_dither(dither: Pgchar); cdecl; inline;
    procedure set_double(key: Pgchar; value: gdouble); cdecl; inline;
    procedure set_duplex(duplex: TGtkPrintDuplex); cdecl; inline;
    procedure set_finishings(finishings: Pgchar); cdecl; inline;
    procedure set_int(key: Pgchar; value: gint); cdecl; inline;
    procedure set_length(key: Pgchar; value: gdouble; unit_: TGtkUnit); cdecl; inline;
    procedure set_media_type(media_type: Pgchar); cdecl; inline;
    procedure set_n_copies(num_copies: gint); cdecl; inline;
    procedure set_number_up(number_up: gint); cdecl; inline;
    procedure set_number_up_layout(number_up_layout: TGtkNumberUpLayout); cdecl; inline;
    procedure set_orientation(orientation: TGtkPageOrientation); cdecl; inline;
    procedure set_output_bin(output_bin: Pgchar); cdecl; inline;
    procedure set_page_ranges(page_ranges: PGtkPageRange; num_ranges: gint); cdecl; inline;
    procedure set_page_set(page_set: TGtkPageSet); cdecl; inline;
    procedure set_paper_height(height: gdouble; unit_: TGtkUnit); cdecl; inline;
    procedure set_paper_size(paper_size: PGtkPaperSize); cdecl; inline;
    procedure set_paper_width(width: gdouble; unit_: TGtkUnit); cdecl; inline;
    procedure set_print_pages(pages: TGtkPrintPages); cdecl; inline;
    procedure set_printer(printer: Pgchar); cdecl; inline;
    procedure set_printer_lpi(lpi: gdouble); cdecl; inline;
    procedure set_quality(quality: TGtkPrintQuality); cdecl; inline;
    procedure set_resolution(resolution: gint); cdecl; inline;
    procedure set_resolution_xy(resolution_x: gint; resolution_y: gint); cdecl; inline;
    procedure set_reverse(reverse: gboolean); cdecl; inline;
    procedure set_scale(scale: gdouble); cdecl; inline;
    procedure set_use_color(use_color: gboolean); cdecl; inline;
    function to_file(file_name: Pgchar; error: PPGError): gboolean; cdecl; inline;
    function to_gvariant: PGVariant; cdecl; inline;
    procedure to_key_file(key_file: PGKeyFile; group_name: Pgchar); cdecl; inline;
    procedure unset(key: Pgchar); cdecl; inline;
  end;

  PPGtkPaned = ^PGtkPaned;
  PGtkPaned = ^TGtkPaned;
  TGtkPaned = object(TGtkWidget)
    function new(orientation: TGtkOrientation): PGtkPaned; cdecl; inline; static;
    function get_end_child: PGtkWidget; cdecl; inline;
    function get_position: gint; cdecl; inline;
    function get_resize_end_child: gboolean; cdecl; inline;
    function get_resize_start_child: gboolean; cdecl; inline;
    function get_shrink_end_child: gboolean; cdecl; inline;
    function get_shrink_start_child: gboolean; cdecl; inline;
    function get_start_child: PGtkWidget; cdecl; inline;
    function get_wide_handle: gboolean; cdecl; inline;
    procedure set_end_child(child: PGtkWidget); cdecl; inline;
    procedure set_position(position: gint); cdecl; inline;
    procedure set_resize_end_child(resize: gboolean); cdecl; inline;
    procedure set_resize_start_child(resize: gboolean); cdecl; inline;
    procedure set_shrink_end_child(resize: gboolean); cdecl; inline;
    procedure set_shrink_start_child(resize: gboolean); cdecl; inline;
    procedure set_start_child(child: PGtkWidget); cdecl; inline;
    procedure set_wide_handle(wide: gboolean); cdecl; inline;
    property end_child: PGtkWidget read get_end_child write set_end_child;
    //property max_position: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_max_position ;
    //property min_position: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_min_position ;
    property position: gint read get_position write set_position;
    //property position_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_position_set  { property is writeable but setter not declared } ;
    property resize_end_child: gboolean read get_resize_end_child write set_resize_end_child;
    property resize_start_child: gboolean read get_resize_start_child write set_resize_start_child;
    property shrink_end_child: gboolean read get_shrink_end_child write set_shrink_end_child;
    property shrink_start_child: gboolean read get_shrink_start_child write set_shrink_start_child;
    property start_child: PGtkWidget read get_start_child write set_start_child;
    property wide_handle: gboolean read get_wide_handle write set_wide_handle;
  end;

  PPGtkParamSpecExpression = ^PGtkParamSpecExpression;
  PGtkParamSpecExpression = ^TGtkParamSpecExpression;
  TGtkParamSpecExpression = object(TGParamSpec)
  end;

  PPGtkPasswordEntry = ^PGtkPasswordEntry;
  PGtkPasswordEntry = ^TGtkPasswordEntry;
  TGtkPasswordEntry = object(TGtkWidget)
    function new: PGtkPasswordEntry; cdecl; inline; static;
    function get_extra_menu: PGMenuModel; cdecl; inline;
    function get_show_peek_icon: gboolean; cdecl; inline;
    procedure set_extra_menu(model: PGMenuModel); cdecl; inline;
    procedure set_show_peek_icon(show_peek_icon: gboolean); cdecl; inline;
    //property activates_default: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_activates_default  { property is writeable but setter not declared } ;
    property extra_menu: PGMenuModel read get_extra_menu write set_extra_menu;
    //property placeholder_text: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_placeholder_text  { property is writeable but setter not declared } ;
    property show_peek_icon: gboolean read get_show_peek_icon write set_show_peek_icon;
  end;

  PPGtkPasswordEntryBuffer = ^PGtkPasswordEntryBuffer;
  PGtkPasswordEntryBuffer = ^TGtkPasswordEntryBuffer;
  TGtkPasswordEntryBuffer = object(TGtkEntryBuffer)
    function new: PGtkPasswordEntryBuffer; cdecl; inline; static;
  end;

  PPGtkPasswordEntryBufferClass = ^PGtkPasswordEntryBufferClass;
  PGtkPasswordEntryBufferClass = ^TGtkPasswordEntryBufferClass;
  TGtkPasswordEntryBufferClass = object
    parent_class: TGtkEntryBufferClass;
  end;

  PPGtkPasswordEntryClass = ^PGtkPasswordEntryClass;
  PGtkPasswordEntryClass = ^TGtkPasswordEntryClass;
  TGtkPasswordEntryClass = object
  end;

  PPGtkPicture = ^PGtkPicture;
  PGtkPicture = ^TGtkPicture;
  TGtkPicture = object(TGtkWidget)
    function new: PGtkPicture; cdecl; inline; static;
    function new_for_file(file_: PGFile): PGtkPicture; cdecl; inline; static;
    function new_for_filename(filename: Pgchar): PGtkPicture; cdecl; inline; static;
    function new_for_paintable(paintable: PGdkPaintable): PGtkPicture; cdecl; inline; static;
    function new_for_pixbuf(pixbuf: PGdkPixbuf): PGtkPicture; cdecl; inline; static;
    function new_for_resource(resource_path: Pgchar): PGtkPicture; cdecl; inline; static;
    function get_alternative_text: Pgchar; cdecl; inline;
    function get_can_shrink: gboolean; cdecl; inline;
    function get_file: PGFile; cdecl; inline;
    function get_keep_aspect_ratio: gboolean; cdecl; inline;
    function get_paintable: PGdkPaintable; cdecl; inline;
    procedure set_alternative_text(alternative_text: Pgchar); cdecl; inline;
    procedure set_can_shrink(can_shrink: gboolean); cdecl; inline;
    procedure set_file(file_: PGFile); cdecl; inline;
    procedure set_filename(filename: Pgchar); cdecl; inline;
    procedure set_keep_aspect_ratio(keep_aspect_ratio: gboolean); cdecl; inline;
    procedure set_paintable(paintable: PGdkPaintable); cdecl; inline;
    procedure set_pixbuf(pixbuf: PGdkPixbuf); cdecl; inline;
    procedure set_resource(resource_path: Pgchar); cdecl; inline;
    property alternative_text: Pgchar read get_alternative_text write set_alternative_text;
    property can_shrink: gboolean read get_can_shrink write set_can_shrink;
    property file_: PGFile read get_file write set_file;
    property keep_aspect_ratio: gboolean read get_keep_aspect_ratio write set_keep_aspect_ratio;
    property paintable: PGdkPaintable read get_paintable write set_paintable;
  end;

  PPGtkPictureClass = ^PGtkPictureClass;
  PGtkPictureClass = ^TGtkPictureClass;
  TGtkPictureClass = object
    parent_class: TGtkWidgetClass;
  end;

  PPGtkPolicyType = ^PGtkPolicyType;
  PGtkPolicyType = ^TGtkPolicyType;

  PPGtkPopoverClass = ^PGtkPopoverClass;
  PGtkPopoverClass = ^TGtkPopoverClass;
  TGtkPopoverClass = object
    parent_class: TGtkWidgetClass;
    closed: procedure(popover: PGtkPopover); cdecl;
    activate_default: procedure(popover: PGtkPopover); cdecl;
    reserved: array [0..7] of gpointer;
  end;

  PPGtkPopoverMenuFlags = ^PGtkPopoverMenuFlags;
  PGtkPopoverMenuFlags = ^TGtkPopoverMenuFlags;

  PPGtkPopoverMenu = ^PGtkPopoverMenu;
  PGtkPopoverMenu = ^TGtkPopoverMenu;
  TGtkPopoverMenu = object(TGtkPopover)
    function new_from_model(model: PGMenuModel): PGtkPopoverMenu; cdecl; inline; static;
    function new_from_model_full(model: PGMenuModel; flags: TGtkPopoverMenuFlags): PGtkPopoverMenu; cdecl; inline; static;
    function add_child(child: PGtkWidget; id: Pgchar): gboolean; cdecl; inline;
    function get_menu_model: PGMenuModel; cdecl; inline;
    function remove_child(child: PGtkWidget): gboolean; cdecl; inline;
    procedure set_menu_model(model: PGMenuModel); cdecl; inline;
    property menu_model: PGMenuModel read get_menu_model write set_menu_model;
    //property visible_submenu: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_visible_submenu  { property is writeable but setter not declared } ;
  end;

  PPGtkPopoverMenuBar = ^PGtkPopoverMenuBar;
  PGtkPopoverMenuBar = ^TGtkPopoverMenuBar;
  TGtkPopoverMenuBar = object(TGtkWidget)
    function new_from_model(model: PGMenuModel): PGtkPopoverMenuBar; cdecl; inline; static;
    function add_child(child: PGtkWidget; id: Pgchar): gboolean; cdecl; inline;
    function get_menu_model: PGMenuModel; cdecl; inline;
    function remove_child(child: PGtkWidget): gboolean; cdecl; inline;
    procedure set_menu_model(model: PGMenuModel); cdecl; inline;
    property menu_model: PGMenuModel read get_menu_model write set_menu_model;
  end;

  PPGtkPrintBackend = ^PGtkPrintBackend;
  PGtkPrintBackend = ^TGtkPrintBackend;

  TGtkPrintBackend = record
  end;



  PPGtkPrintCapabilities = ^PGtkPrintCapabilities;
  PGtkPrintCapabilities = ^TGtkPrintCapabilities;

  PPGtkPrintContext = ^PGtkPrintContext;
  PGtkPrintContext = ^TGtkPrintContext;
  TGtkPrintContext = object(TGObject)
    function create_pango_context: PPangoContext; cdecl; inline;
    function create_pango_layout: PPangoLayout; cdecl; inline;
    function get_cairo_context: Pcairo_t; cdecl; inline;
    function get_dpi_x: gdouble; cdecl; inline;
    function get_dpi_y: gdouble; cdecl; inline;
    function get_hard_margins(top: Pgdouble; bottom: Pgdouble; left: Pgdouble; right: Pgdouble): gboolean; cdecl; inline;
    function get_height: gdouble; cdecl; inline;
    function get_page_setup: PGtkPageSetup; cdecl; inline;
    function get_pango_fontmap: PPangoFontMap; cdecl; inline;
    function get_width: gdouble; cdecl; inline;
    procedure set_cairo_context(cr: Pcairo_t; dpi_x: gdouble; dpi_y: gdouble); cdecl; inline;
  end;

  PPGtkPrintError = ^PGtkPrintError;
  PGtkPrintError = ^TGtkPrintError;

  PPGtkPrintJob = ^PGtkPrintJob;
  PGtkPrintJob = ^TGtkPrintJob;

  PPGtkPrinter = ^PGtkPrinter;
  PGtkPrinter = ^TGtkPrinter;

  PPGtkPrintStatus = ^PGtkPrintStatus;
  PGtkPrintStatus = ^TGtkPrintStatus;

  PPGtkPrintJobCompleteFunc = ^PGtkPrintJobCompleteFunc;
  PGtkPrintJobCompleteFunc = ^TGtkPrintJobCompleteFunc;
  TGtkPrintJobCompleteFunc = procedure(print_job: PGtkPrintJob; user_data: gpointer; error: PGError); cdecl;
  TGtkPrintJob = object(TGObject)
    function new(title: Pgchar; printer: PGtkPrinter; settings: PGtkPrintSettings; page_setup: PGtkPageSetup): PGtkPrintJob; cdecl; inline; static;
    function get_collate: gboolean; cdecl; inline;
    function get_n_up: guint; cdecl; inline;
    function get_n_up_layout: TGtkNumberUpLayout; cdecl; inline;
    function get_num_copies: gint; cdecl; inline;
    function get_page_ranges(n_ranges: Pgint): PGtkPageRange; cdecl; inline;
    function get_page_set: TGtkPageSet; cdecl; inline;
    function get_pages: TGtkPrintPages; cdecl; inline;
    function get_printer: PGtkPrinter; cdecl; inline;
    function get_reverse: gboolean; cdecl; inline;
    function get_rotate: gboolean; cdecl; inline;
    function get_scale: gdouble; cdecl; inline;
    function get_settings: PGtkPrintSettings; cdecl; inline;
    function get_status: TGtkPrintStatus; cdecl; inline;
    function get_surface(error: PPGError): Pcairo_surface_t; cdecl; inline;
    function get_title: Pgchar; cdecl; inline;
    function get_track_print_status: gboolean; cdecl; inline;
    procedure send(callback: TGtkPrintJobCompleteFunc; user_data: gpointer; dnotify: TGDestroyNotify); cdecl; inline;
    procedure set_collate(collate: gboolean); cdecl; inline;
    procedure set_n_up(n_up: guint); cdecl; inline;
    procedure set_n_up_layout(layout: TGtkNumberUpLayout); cdecl; inline;
    procedure set_num_copies(num_copies: gint); cdecl; inline;
    procedure set_page_ranges(ranges: PGtkPageRange; n_ranges: gint); cdecl; inline;
    procedure set_page_set(page_set: TGtkPageSet); cdecl; inline;
    procedure set_pages(pages: TGtkPrintPages); cdecl; inline;
    procedure set_reverse(reverse: gboolean); cdecl; inline;
    procedure set_rotate(rotate: gboolean); cdecl; inline;
    procedure set_scale(scale: gdouble); cdecl; inline;
    function set_source_fd(fd: gint; error: PPGError): gboolean; cdecl; inline;
    function set_source_file(filename: Pgchar; error: PPGError): gboolean; cdecl; inline;
    procedure set_track_print_status(track_status: gboolean); cdecl; inline;
    //property page_setup: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_page_setup  { property is writeable but setter not declared } ;
    property printer: PGtkPrinter read get_printer  { property is writeable but setter not declared } ;
    property settings: PGtkPrintSettings read get_settings  { property is writeable but setter not declared } ;
    property title: Pgchar read get_title  { property is writeable but setter not declared } ;
    property track_print_status: gboolean read get_track_print_status write set_track_print_status;
  end;
  TGtkPrinter = object(TGObject)
    function new(name: Pgchar; backend: PGtkPrintBackend; virtual_: gboolean): PGtkPrinter; cdecl; inline; static;
    function accepts_pdf: gboolean; cdecl; inline;
    function accepts_ps: gboolean; cdecl; inline;
    function compare(b: PGtkPrinter): gint; cdecl; inline;
    function get_backend: PGtkPrintBackend; cdecl; inline;
    function get_capabilities: TGtkPrintCapabilities; cdecl; inline;
    function get_default_page_size: PGtkPageSetup; cdecl; inline;
    function get_description: Pgchar; cdecl; inline;
    function get_hard_margins(top: Pgdouble; bottom: Pgdouble; left: Pgdouble; right: Pgdouble): gboolean; cdecl; inline;
    function get_hard_margins_for_paper_size(paper_size: PGtkPaperSize; top: Pgdouble; bottom: Pgdouble; left: Pgdouble; right: Pgdouble): gboolean; cdecl; inline;
    function get_icon_name: Pgchar; cdecl; inline;
    function get_job_count: gint; cdecl; inline;
    function get_location: Pgchar; cdecl; inline;
    function get_name: Pgchar; cdecl; inline;
    function get_state_message: Pgchar; cdecl; inline;
    function has_details: gboolean; cdecl; inline;
    function is_accepting_jobs: gboolean; cdecl; inline;
    function is_active: gboolean; cdecl; inline;
    function is_default: gboolean; cdecl; inline;
    function is_paused: gboolean; cdecl; inline;
    function is_virtual: gboolean; cdecl; inline;
    function list_papers: PGList; cdecl; inline;
    procedure request_details; cdecl; inline;
    //property accepting_jobs: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_accepting_jobs ;
    //property accepts_pdf1: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_accepts_pdf  { property is writeable but setter not declared } ;
    //property accepts_ps1: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_accepts_ps  { property is writeable but setter not declared } ;
    property backend: PGtkPrintBackend read get_backend  { property is writeable but setter not declared } ;
    property icon_name: Pgchar read get_icon_name ;
    //property is_virtual1: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_is_virtual  { property is writeable but setter not declared } ;
    property job_count: gint read get_job_count ;
    property location: Pgchar read get_location ;
    property name: Pgchar read get_name  { property is writeable but setter not declared } ;
    //property paused: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_paused ;
    property state_message: Pgchar read get_state_message ;
  end;

  PPGtkPrintOperationPreview = ^PGtkPrintOperationPreview;
  PGtkPrintOperationPreview = ^TGtkPrintOperationPreview;
  TGtkPrintOperationPreview = object
    got_page_size: procedure(context: TGtkPrintContext; page_setup: TGtkPageSetup); cdecl;
    ready: procedure(context: TGtkPrintContext); cdecl;
    procedure end_preview; cdecl; inline;
    function is_selected(page_nr: gint): gboolean; cdecl; inline;
    procedure render_page(page_nr: gint); cdecl; inline;
  end;

  PPGtkPrintOperation = ^PGtkPrintOperation;
  PGtkPrintOperation = ^TGtkPrintOperation;

  PPGtkPrintOperationResult = ^PGtkPrintOperationResult;
  PGtkPrintOperationResult = ^TGtkPrintOperationResult;

  PPGtkPrintOperationAction = ^PGtkPrintOperationAction;
  PGtkPrintOperationAction = ^TGtkPrintOperationAction;

  PPGtkPrintOperationPrivate = ^PGtkPrintOperationPrivate;
  PGtkPrintOperationPrivate = ^TGtkPrintOperationPrivate;
  TGtkPrintOperation = object(TGObject)
    priv: PGtkPrintOperationPrivate;
    function new: PGtkPrintOperation; cdecl; inline; static;
    procedure cancel; cdecl; inline;
    procedure draw_page_finish; cdecl; inline;
    function get_default_page_setup: PGtkPageSetup; cdecl; inline;
    function get_embed_page_setup: gboolean; cdecl; inline;
    procedure get_error(error: PPGError); cdecl; inline;
    function get_has_selection: gboolean; cdecl; inline;
    function get_n_pages_to_print: gint; cdecl; inline;
    function get_print_settings: PGtkPrintSettings; cdecl; inline;
    function get_status: TGtkPrintStatus; cdecl; inline;
    function get_status_string: Pgchar; cdecl; inline;
    function get_support_selection: gboolean; cdecl; inline;
    function is_finished: gboolean; cdecl; inline;
    function run(action: TGtkPrintOperationAction; parent: PGtkWindow; error: PPGError): TGtkPrintOperationResult; cdecl; inline;
    procedure set_allow_async(allow_async: gboolean); cdecl; inline;
    procedure set_current_page(current_page: gint); cdecl; inline;
    procedure set_custom_tab_label(label_: Pgchar); cdecl; inline;
    procedure set_default_page_setup(default_page_setup: PGtkPageSetup); cdecl; inline;
    procedure set_defer_drawing; cdecl; inline;
    procedure set_embed_page_setup(embed: gboolean); cdecl; inline;
    procedure set_export_filename(filename: Pgchar); cdecl; inline;
    procedure set_has_selection(has_selection: gboolean); cdecl; inline;
    procedure set_job_name(job_name: Pgchar); cdecl; inline;
    procedure set_n_pages(n_pages: gint); cdecl; inline;
    procedure set_print_settings(print_settings: PGtkPrintSettings); cdecl; inline;
    procedure set_show_progress(show_progress: gboolean); cdecl; inline;
    procedure set_support_selection(support_selection: gboolean); cdecl; inline;
    procedure set_track_print_status(track_status: gboolean); cdecl; inline;
    procedure set_unit(unit_: TGtkUnit); cdecl; inline;
    procedure set_use_full_page(full_page: gboolean); cdecl; inline;
    //property allow_async: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_allow_async  { property is writeable but setter not declared } ;
    //property current_page: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_current_page  { property is writeable but setter not declared } ;
    //property custom_tab_label: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_custom_tab_label  { property is writeable but setter not declared } ;
    property default_page_setup: PGtkPageSetup read get_default_page_setup write set_default_page_setup;
    property embed_page_setup: gboolean read get_embed_page_setup write set_embed_page_setup;
    //property export_filename: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_export_filename  { property is writeable but setter not declared } ;
    property has_selection: gboolean read get_has_selection write set_has_selection;
    //property job_name: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_job_name  { property is writeable but setter not declared } ;
    //property n_pages: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_n_pages  { property is writeable but setter not declared } ;
    property n_pages_to_print: gint read get_n_pages_to_print ;
    property print_settings: PGtkPrintSettings read get_print_settings write set_print_settings;
    //property show_progress: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_show_progress  { property is writeable but setter not declared } ;
    property status: TGtkPrintStatus read get_status ;
    property status_string: Pgchar read get_status_string ;
    property support_selection: gboolean read get_support_selection write set_support_selection;
    //property track_print_status: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_track_print_status  { property is writeable but setter not declared } ;
    //property unit_: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_unit  { property is writeable but setter not declared } ;
    //property use_full_page: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_use_full_page  { property is writeable but setter not declared } ;
  end;

  TGtkPrintOperationPrivate = record
  end;



  PPGtkPrintOperationClass = ^PGtkPrintOperationClass;
  PGtkPrintOperationClass = ^TGtkPrintOperationClass;
  TGtkPrintOperationClass = object
    parent_class: TGObjectClass;
    done: procedure(operation: PGtkPrintOperation; result_: TGtkPrintOperationResult); cdecl;
    begin_print: procedure(operation: PGtkPrintOperation; context: PGtkPrintContext); cdecl;
    paginate: function(operation: PGtkPrintOperation; context: PGtkPrintContext): gboolean; cdecl;
    request_page_setup: procedure(operation: PGtkPrintOperation; context: PGtkPrintContext; page_nr: gint; setup: PGtkPageSetup); cdecl;
    draw_page: procedure(operation: PGtkPrintOperation; context: PGtkPrintContext; page_nr: gint); cdecl;
    end_print: procedure(operation: PGtkPrintOperation; context: PGtkPrintContext); cdecl;
    status_changed: procedure(operation: PGtkPrintOperation); cdecl;
    create_custom_widget: function(operation: PGtkPrintOperation): PGtkWidget; cdecl;
    custom_widget_apply: procedure(operation: PGtkPrintOperation; widget: PGtkWidget); cdecl;
    preview: function(operation: PGtkPrintOperation; preview: PGtkPrintOperationPreview; context: PGtkPrintContext; parent: PGtkWindow): gboolean; cdecl;
    update_custom_widget: procedure(operation: PGtkPrintOperation; widget: PGtkWidget; setup: PGtkPageSetup; settings: PGtkPrintSettings); cdecl;
    padding: array [0..7] of gpointer;
  end;

  PPGtkPrintOperationPreviewIface = ^PGtkPrintOperationPreviewIface;
  PGtkPrintOperationPreviewIface = ^TGtkPrintOperationPreviewIface;
  TGtkPrintOperationPreviewIface = object
    g_iface: TGTypeInterface;
    ready: procedure(preview: PGtkPrintOperationPreview; context: PGtkPrintContext); cdecl;
    got_page_size: procedure(preview: PGtkPrintOperationPreview; context: PGtkPrintContext; page_setup: PGtkPageSetup); cdecl;
    render_page: procedure(preview: PGtkPrintOperationPreview; page_nr: gint); cdecl;
    is_selected: function(preview: PGtkPrintOperationPreview; page_nr: gint): gboolean; cdecl;
    end_preview: procedure(preview: PGtkPrintOperationPreview); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
    _gtk_reserved5: procedure; cdecl;
    _gtk_reserved6: procedure; cdecl;
    _gtk_reserved7: procedure; cdecl;
    _gtk_reserved8: procedure; cdecl;
  end;

  PPGtkPrintUnixDialog = ^PGtkPrintUnixDialog;
  PGtkPrintUnixDialog = ^TGtkPrintUnixDialog;
  TGtkPrintUnixDialog = object(TGtkDialog)
    function new(title: Pgchar; parent: PGtkWindow): PGtkPrintUnixDialog; cdecl; inline; static;
    procedure add_custom_tab(child: PGtkWidget; tab_label: PGtkWidget); cdecl; inline;
    function get_current_page: gint; cdecl; inline;
    function get_embed_page_setup: gboolean; cdecl; inline;
    function get_has_selection: gboolean; cdecl; inline;
    function get_manual_capabilities: TGtkPrintCapabilities; cdecl; inline;
    function get_page_setup: PGtkPageSetup; cdecl; inline;
    function get_page_setup_set: gboolean; cdecl; inline;
    function get_selected_printer: PGtkPrinter; cdecl; inline;
    function get_settings: PGtkPrintSettings; cdecl; inline;
    function get_support_selection: gboolean; cdecl; inline;
    procedure set_current_page(current_page: gint); cdecl; inline;
    procedure set_embed_page_setup(embed: gboolean); cdecl; inline;
    procedure set_has_selection(has_selection: gboolean); cdecl; inline;
    procedure set_manual_capabilities(capabilities: TGtkPrintCapabilities); cdecl; inline;
    procedure set_page_setup(page_setup: PGtkPageSetup); cdecl; inline;
    procedure set_settings(settings: PGtkPrintSettings); cdecl; inline;
    procedure set_support_selection(support_selection: gboolean); cdecl; inline;
    property current_page: gint read get_current_page write set_current_page;
    property embed_page_setup: gboolean read get_embed_page_setup write set_embed_page_setup;
    property has_selection: gboolean read get_has_selection write set_has_selection;
    property manual_capabilities: TGtkPrintCapabilities read get_manual_capabilities write set_manual_capabilities;
    property page_setup: PGtkPageSetup read get_page_setup write set_page_setup;
    //property print_settings: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_print_settings  { property is writeable but setter not declared } ;
    property selected_printer: PGtkPrinter read get_selected_printer ;
    property support_selection: gboolean read get_support_selection write set_support_selection;
  end;
  TGtkPrinterFunc = function(printer: PGtkPrinter; data: gpointer): gboolean; cdecl;

  PPGtkProgressBar = ^PGtkProgressBar;
  PGtkProgressBar = ^TGtkProgressBar;
  TGtkProgressBar = object(TGtkWidget)
    function new: PGtkProgressBar; cdecl; inline; static;
    function get_ellipsize: TPangoEllipsizeMode; cdecl; inline;
    function get_fraction: gdouble; cdecl; inline;
    function get_inverted: gboolean; cdecl; inline;
    function get_pulse_step: gdouble; cdecl; inline;
    function get_show_text: gboolean; cdecl; inline;
    function get_text: Pgchar; cdecl; inline;
    procedure pulse; cdecl; inline;
    procedure set_ellipsize(mode: TPangoEllipsizeMode); cdecl; inline;
    procedure set_fraction(fraction: gdouble); cdecl; inline;
    procedure set_inverted(inverted: gboolean); cdecl; inline;
    procedure set_pulse_step(fraction: gdouble); cdecl; inline;
    procedure set_show_text(show_text: gboolean); cdecl; inline;
    procedure set_text(text: Pgchar); cdecl; inline;
    property ellipsize: TPangoEllipsizeMode read get_ellipsize write set_ellipsize;
    property fraction: gdouble read get_fraction write set_fraction;
    property inverted: gboolean read get_inverted write set_inverted;
    property pulse_step: gdouble read get_pulse_step write set_pulse_step;
    property show_text: gboolean read get_show_text write set_show_text;
    property text: Pgchar read get_text write set_text;
  end;

  PPGtkPropertyExpression = ^PGtkPropertyExpression;
  PGtkPropertyExpression = ^TGtkPropertyExpression;
  TGtkPropertyExpression = object(TGtkExpression)
    function new(this_type: TGType; expression: PGtkExpression; property_name: Pgchar): PGtkPropertyExpression; cdecl; inline; static;
    function new_for_pspec(expression: PGtkExpression; pspec: PGParamSpec): PGtkPropertyExpression; cdecl; inline; static;
    function get_expression: PGtkExpression; cdecl; inline;
    function get_pspec: PGParamSpec; cdecl; inline;
  end;

  PPGtkRange = ^PGtkRange;
  PGtkRange = ^TGtkRange;
  TGtkRange = object(TGtkWidget)
    function get_adjustment: PGtkAdjustment; cdecl; inline;
    function get_fill_level: gdouble; cdecl; inline;
    function get_flippable: gboolean; cdecl; inline;
    function get_inverted: gboolean; cdecl; inline;
    procedure get_range_rect(range_rect: PGdkRectangle); cdecl; inline;
    function get_restrict_to_fill_level: gboolean; cdecl; inline;
    function get_round_digits: gint; cdecl; inline;
    function get_show_fill_level: gboolean; cdecl; inline;
    procedure get_slider_range(slider_start: Pgint; slider_end: Pgint); cdecl; inline;
    function get_slider_size_fixed: gboolean; cdecl; inline;
    function get_value: gdouble; cdecl; inline;
    procedure set_adjustment(adjustment: PGtkAdjustment); cdecl; inline;
    procedure set_fill_level(fill_level: gdouble); cdecl; inline;
    procedure set_flippable(flippable: gboolean); cdecl; inline;
    procedure set_increments(step: gdouble; page: gdouble); cdecl; inline;
    procedure set_inverted(setting: gboolean); cdecl; inline;
    procedure set_range(min: gdouble; max: gdouble); cdecl; inline;
    procedure set_restrict_to_fill_level(restrict_to_fill_level: gboolean); cdecl; inline;
    procedure set_round_digits(round_digits: gint); cdecl; inline;
    procedure set_show_fill_level(show_fill_level: gboolean); cdecl; inline;
    procedure set_slider_size_fixed(size_fixed: gboolean); cdecl; inline;
    procedure set_value(value: gdouble); cdecl; inline;
    property adjustment: PGtkAdjustment read get_adjustment write set_adjustment;
    property fill_level: gdouble read get_fill_level write set_fill_level;
    property inverted: gboolean read get_inverted write set_inverted;
    property restrict_to_fill_level: gboolean read get_restrict_to_fill_level write set_restrict_to_fill_level;
    property round_digits: gint read get_round_digits write set_round_digits;
    property show_fill_level: gboolean read get_show_fill_level write set_show_fill_level;
  end;

  PPGtkRangeClass = ^PGtkRangeClass;
  PGtkRangeClass = ^TGtkRangeClass;
  TGtkRangeClass = object
    parent_class: TGtkWidgetClass;
    value_changed: procedure(range: PGtkRange); cdecl;
    adjust_bounds: procedure(range: PGtkRange; new_value: gdouble); cdecl;
    move_slider: procedure(range: PGtkRange; scroll: TGtkScrollType); cdecl;
    get_range_border: procedure(range: PGtkRange; border_: PGtkBorder); cdecl;
    change_value: function(range: PGtkRange; scroll: TGtkScrollType; new_value: gdouble): gboolean; cdecl;
    padding: array [0..7] of gpointer;
  end;

  PPGtkRecentData = ^PGtkRecentData;
  PGtkRecentData = ^TGtkRecentData;

  TGtkRecentData = record
    display_name: Pgchar;
    description: Pgchar;
    mime_type: Pgchar;
    app_name: Pgchar;
    app_exec: Pgchar;
    groups: PPgchar;
    is_private: gboolean;
  end;



  PPGtkRecentInfo = ^PGtkRecentInfo;
  PGtkRecentInfo = ^TGtkRecentInfo;
  TGtkRecentInfo = object
    function create_app_info(app_name: Pgchar; error: PPGError): PGAppInfo; cdecl; inline;
    function exists: gboolean; cdecl; inline;
    function get_added: PGDateTime; cdecl; inline;
    function get_age: gint; cdecl; inline;
    function get_application_info(app_name: Pgchar; app_exec: PPgchar; count: Pguint; stamp: PPGDateTime): gboolean; cdecl; inline;
    function get_applications(length: Pgsize): PPgchar; cdecl; inline;
    function get_description: Pgchar; cdecl; inline;
    function get_display_name: Pgchar; cdecl; inline;
    function get_gicon: PGIcon; cdecl; inline;
    function get_groups(length: Pgsize): PPgchar; cdecl; inline;
    function get_mime_type: Pgchar; cdecl; inline;
    function get_modified: PGDateTime; cdecl; inline;
    function get_private_hint: gboolean; cdecl; inline;
    function get_short_name: Pgchar; cdecl; inline;
    function get_uri: Pgchar; cdecl; inline;
    function get_uri_display: Pgchar; cdecl; inline;
    function get_visited: PGDateTime; cdecl; inline;
    function has_application(app_name: Pgchar): gboolean; cdecl; inline;
    function has_group(group_name: Pgchar): gboolean; cdecl; inline;
    function is_local: gboolean; cdecl; inline;
    function last_application: Pgchar; cdecl; inline;
    function match(info_b: PGtkRecentInfo): gboolean; cdecl; inline;
    function ref: PGtkRecentInfo; cdecl; inline;
    procedure unref; cdecl; inline;
  end;

  PPGtkRecentManager = ^PGtkRecentManager;
  PGtkRecentManager = ^TGtkRecentManager;

  PPGtkRecentManagerPrivate = ^PGtkRecentManagerPrivate;
  PGtkRecentManagerPrivate = ^TGtkRecentManagerPrivate;
  TGtkRecentManager = object(TGObject)
    priv: PGtkRecentManagerPrivate;
    function new: PGtkRecentManager; cdecl; inline; static;
    function get_default: PGtkRecentManager; cdecl; inline; static;
    function add_full(uri: Pgchar; recent_data: PGtkRecentData): gboolean; cdecl; inline;
    function add_item(uri: Pgchar): gboolean; cdecl; inline;
    function get_items: PGList; cdecl; inline;
    function has_item(uri: Pgchar): gboolean; cdecl; inline;
    function lookup_item(uri: Pgchar; error: PPGError): PGtkRecentInfo; cdecl; inline;
    function move_item(uri: Pgchar; new_uri: Pgchar; error: PPGError): gboolean; cdecl; inline;
    function purge_items(error: PPGError): gint; cdecl; inline;
    function remove_item(uri: Pgchar; error: PPGError): gboolean; cdecl; inline;
    //property filename: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_filename  { property is writeable but setter not declared } ;
    //property size: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_size ;
  end;

  TGtkRecentManagerPrivate = record
  end;



  PPGtkRecentManagerClass = ^PGtkRecentManagerClass;
  PGtkRecentManagerClass = ^TGtkRecentManagerClass;
  TGtkRecentManagerClass = object
    parent_class: TGObjectClass;
    changed: procedure(manager: PGtkRecentManager); cdecl;
    _gtk_recent1: procedure; cdecl;
    _gtk_recent2: procedure; cdecl;
    _gtk_recent3: procedure; cdecl;
    _gtk_recent4: procedure; cdecl;
  end;

  PPGtkRecentManagerError = ^PGtkRecentManagerError;
  PGtkRecentManagerError = ^TGtkRecentManagerError;

  PPGtkRequestedSize = ^PGtkRequestedSize;
  PGtkRequestedSize = ^TGtkRequestedSize;

  TGtkRequestedSize = record
    data: gpointer;
    minimum_size: gint;
    natural_size: gint;
  end;



  PPGtkResponseType = ^PGtkResponseType;
  PGtkResponseType = ^TGtkResponseType;

  PPGtkRevealer = ^PGtkRevealer;
  PGtkRevealer = ^TGtkRevealer;

  PPGtkRevealerTransitionType = ^PGtkRevealerTransitionType;
  PGtkRevealerTransitionType = ^TGtkRevealerTransitionType;
  TGtkRevealer = object(TGtkWidget)
    function new: PGtkRevealer; cdecl; inline; static;
    function get_child: PGtkWidget; cdecl; inline;
    function get_child_revealed: gboolean; cdecl; inline;
    function get_reveal_child: gboolean; cdecl; inline;
    function get_transition_duration: guint; cdecl; inline;
    function get_transition_type: TGtkRevealerTransitionType; cdecl; inline;
    procedure set_child(child: PGtkWidget); cdecl; inline;
    procedure set_reveal_child(reveal_child: gboolean); cdecl; inline;
    procedure set_transition_duration(duration: guint); cdecl; inline;
    procedure set_transition_type(transition: TGtkRevealerTransitionType); cdecl; inline;
    property child: PGtkWidget read get_child write set_child;
    property child_revealed: gboolean read get_child_revealed ;
    property reveal_child: gboolean read get_reveal_child write set_reveal_child;
    property transition_duration: guint read get_transition_duration write set_transition_duration;
    property transition_type: TGtkRevealerTransitionType read get_transition_type write set_transition_type;
  end;

  PPGtkRootInterface = ^PGtkRootInterface;
  PGtkRootInterface = ^TGtkRootInterface;
  TGtkRootInterface = object
  end;

  PPGtkScale = ^PGtkScale;
  PGtkScale = ^TGtkScale;

  PPGtkScaleFormatValueFunc = ^PGtkScaleFormatValueFunc;
  PGtkScaleFormatValueFunc = ^TGtkScaleFormatValueFunc;
  TGtkScaleFormatValueFunc = function(scale: PGtkScale; value: gdouble; user_data: gpointer): Pgchar; cdecl;
  TGtkScale = object(TGtkRange)
    function new(orientation: TGtkOrientation; adjustment: PGtkAdjustment): PGtkScale; cdecl; inline; static;
    function new_with_range(orientation: TGtkOrientation; min: gdouble; max: gdouble; step: gdouble): PGtkScale; cdecl; inline; static;
    procedure add_mark(value: gdouble; position: TGtkPositionType; markup: Pgchar); cdecl; inline;
    procedure clear_marks; cdecl; inline;
    function get_digits: gint; cdecl; inline;
    function get_draw_value: gboolean; cdecl; inline;
    function get_has_origin: gboolean; cdecl; inline;
    function get_layout: PPangoLayout; cdecl; inline;
    procedure get_layout_offsets(x: Pgint; y: Pgint); cdecl; inline;
    function get_value_pos: TGtkPositionType; cdecl; inline;
    procedure set_digits(digits: gint); cdecl; inline;
    procedure set_draw_value(draw_value: gboolean); cdecl; inline;
    procedure set_format_value_func(func: TGtkScaleFormatValueFunc; user_data: gpointer; destroy_notify: TGDestroyNotify); cdecl; inline;
    procedure set_has_origin(has_origin: gboolean); cdecl; inline;
    procedure set_value_pos(pos: TGtkPositionType); cdecl; inline;
    property digits: gint read get_digits write set_digits;
    property draw_value: gboolean read get_draw_value write set_draw_value;
    property has_origin: gboolean read get_has_origin write set_has_origin;
    property value_pos: TGtkPositionType read get_value_pos write set_value_pos;
  end;

  PPGtkScaleButton = ^PGtkScaleButton;
  PGtkScaleButton = ^TGtkScaleButton;
  TGtkScaleButton = object(TGtkWidget)
    function new(min: gdouble; max: gdouble; step: gdouble; icons: PPgchar): PGtkScaleButton; cdecl; inline; static;
    function get_adjustment: PGtkAdjustment; cdecl; inline;
    function get_minus_button: PGtkButton; cdecl; inline;
    function get_plus_button: PGtkButton; cdecl; inline;
    function get_popup: PGtkWidget; cdecl; inline;
    function get_value: gdouble; cdecl; inline;
    procedure set_adjustment(adjustment: PGtkAdjustment); cdecl; inline;
    procedure set_icons(icons: PPgchar); cdecl; inline;
    procedure set_value(value: gdouble); cdecl; inline;
    property adjustment: PGtkAdjustment read get_adjustment write set_adjustment;
    //property icons: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_icons  { property is writeable but setter not declared } ;
    property value: gdouble read get_value write set_value;
  end;

  PPGtkScaleButtonClass = ^PGtkScaleButtonClass;
  PGtkScaleButtonClass = ^TGtkScaleButtonClass;
  TGtkScaleButtonClass = object
    parent_class: TGtkWidgetClass;
    value_changed: procedure(button: PGtkScaleButton; value: gdouble); cdecl;
    padding: array [0..7] of gpointer;
  end;

  PPGtkScaleClass = ^PGtkScaleClass;
  PGtkScaleClass = ^TGtkScaleClass;
  TGtkScaleClass = object
    parent_class: TGtkRangeClass;
    get_layout_offsets: procedure(scale: PGtkScale; x: Pgint; y: Pgint); cdecl;
    padding: array [0..7] of gpointer;
  end;

  PPGtkScrollStep = ^PGtkScrollStep;
  PGtkScrollStep = ^TGtkScrollStep;

  PPGtkScrollableInterface = ^PGtkScrollableInterface;
  PGtkScrollableInterface = ^TGtkScrollableInterface;
  TGtkScrollableInterface = object
    base_iface: TGTypeInterface;
    get_border: function(scrollable: PGtkScrollable; border: PGtkBorder): gboolean; cdecl;
  end;

  PPGtkScrollbar = ^PGtkScrollbar;
  PGtkScrollbar = ^TGtkScrollbar;
  TGtkScrollbar = object(TGtkWidget)
    function new(orientation: TGtkOrientation; adjustment: PGtkAdjustment): PGtkScrollbar; cdecl; inline; static;
    function get_adjustment: PGtkAdjustment; cdecl; inline;
    procedure set_adjustment(adjustment: PGtkAdjustment); cdecl; inline;
    property adjustment: PGtkAdjustment read get_adjustment write set_adjustment;
  end;

  PPGtkScrolledWindow = ^PGtkScrolledWindow;
  PGtkScrolledWindow = ^TGtkScrolledWindow;
  TGtkScrolledWindow = object(TGtkWidget)
    function new: PGtkScrolledWindow; cdecl; inline; static;
    function get_child: PGtkWidget; cdecl; inline;
    function get_hadjustment: PGtkAdjustment; cdecl; inline;
    function get_has_frame: gboolean; cdecl; inline;
    function get_hscrollbar: PGtkWidget; cdecl; inline;
    function get_kinetic_scrolling: gboolean; cdecl; inline;
    function get_max_content_height: gint; cdecl; inline;
    function get_max_content_width: gint; cdecl; inline;
    function get_min_content_height: gint; cdecl; inline;
    function get_min_content_width: gint; cdecl; inline;
    function get_overlay_scrolling: gboolean; cdecl; inline;
    function get_placement: TGtkCornerType; cdecl; inline;
    procedure get_policy(hscrollbar_policy: PGtkPolicyType; vscrollbar_policy: PGtkPolicyType); cdecl; inline;
    function get_propagate_natural_height: gboolean; cdecl; inline;
    function get_propagate_natural_width: gboolean; cdecl; inline;
    function get_vadjustment: PGtkAdjustment; cdecl; inline;
    function get_vscrollbar: PGtkWidget; cdecl; inline;
    procedure set_child(child: PGtkWidget); cdecl; inline;
    procedure set_hadjustment(hadjustment: PGtkAdjustment); cdecl; inline;
    procedure set_has_frame(has_frame: gboolean); cdecl; inline;
    procedure set_kinetic_scrolling(kinetic_scrolling: gboolean); cdecl; inline;
    procedure set_max_content_height(height: gint); cdecl; inline;
    procedure set_max_content_width(width: gint); cdecl; inline;
    procedure set_min_content_height(height: gint); cdecl; inline;
    procedure set_min_content_width(width: gint); cdecl; inline;
    procedure set_overlay_scrolling(overlay_scrolling: gboolean); cdecl; inline;
    procedure set_placement(window_placement: TGtkCornerType); cdecl; inline;
    procedure set_policy(hscrollbar_policy: TGtkPolicyType; vscrollbar_policy: TGtkPolicyType); cdecl; inline;
    procedure set_propagate_natural_height(propagate: gboolean); cdecl; inline;
    procedure set_propagate_natural_width(propagate: gboolean); cdecl; inline;
    procedure set_vadjustment(vadjustment: PGtkAdjustment); cdecl; inline;
    procedure unset_placement; cdecl; inline;
    property child: PGtkWidget read get_child write set_child;
    property hadjustment: PGtkAdjustment read get_hadjustment write set_hadjustment;
    property has_frame: gboolean read get_has_frame write set_has_frame;
    //property hscrollbar_policy: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_hscrollbar_policy  { property is writeable but setter not declared } ;
    property kinetic_scrolling: gboolean read get_kinetic_scrolling write set_kinetic_scrolling;
    property max_content_height: gint read get_max_content_height write set_max_content_height;
    property max_content_width: gint read get_max_content_width write set_max_content_width;
    property min_content_height: gint read get_min_content_height write set_min_content_height;
    property min_content_width: gint read get_min_content_width write set_min_content_width;
    property overlay_scrolling: gboolean read get_overlay_scrolling write set_overlay_scrolling;
    property propagate_natural_height: gboolean read get_propagate_natural_height write set_propagate_natural_height;
    property propagate_natural_width: gboolean read get_propagate_natural_width write set_propagate_natural_width;
    property vadjustment: PGtkAdjustment read get_vadjustment write set_vadjustment;
    //property vscrollbar_policy: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_vscrollbar_policy  { property is writeable but setter not declared } ;
    //property window_placement: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_window_placement  { property is writeable but setter not declared } ;
  end;

  PPGtkSearchBar = ^PGtkSearchBar;
  PGtkSearchBar = ^TGtkSearchBar;
  TGtkSearchBar = object(TGtkWidget)
    function new: PGtkSearchBar; cdecl; inline; static;
    procedure connect_entry(entry: PGtkEditable); cdecl; inline;
    function get_child: PGtkWidget; cdecl; inline;
    function get_key_capture_widget: PGtkWidget; cdecl; inline;
    function get_search_mode: gboolean; cdecl; inline;
    function get_show_close_button: gboolean; cdecl; inline;
    procedure set_child(child: PGtkWidget); cdecl; inline;
    procedure set_key_capture_widget(widget: PGtkWidget); cdecl; inline;
    procedure set_search_mode(search_mode: gboolean); cdecl; inline;
    procedure set_show_close_button(visible: gboolean); cdecl; inline;
    property child: PGtkWidget read get_child write set_child;
    property key_capture_widget: PGtkWidget read get_key_capture_widget write set_key_capture_widget;
    //property search_mode_enabled: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_search_mode_enabled  { property is writeable but setter not declared } ;
    property show_close_button: gboolean read get_show_close_button write set_show_close_button;
  end;

  PPGtkSearchEntry = ^PGtkSearchEntry;
  PGtkSearchEntry = ^TGtkSearchEntry;
  TGtkSearchEntry = object(TGtkWidget)
    function new: PGtkSearchEntry; cdecl; inline; static;
    function get_key_capture_widget: PGtkWidget; cdecl; inline;
    procedure set_key_capture_widget(widget: PGtkWidget); cdecl; inline;
    //property activates_default: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_activates_default  { property is writeable but setter not declared } ;
    //property placeholder_text: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_placeholder_text  { property is writeable but setter not declared } ;
  end;

  PPGtkSelectionFilterModel = ^PGtkSelectionFilterModel;
  PGtkSelectionFilterModel = ^TGtkSelectionFilterModel;
  TGtkSelectionFilterModel = object(TGObject)
    function new(model: PGtkSelectionModel): PGtkSelectionFilterModel; cdecl; inline; static;
    function get_model: PGtkSelectionModel; cdecl; inline;
    procedure set_model(model: PGtkSelectionModel); cdecl; inline;
    property model: PGtkSelectionModel read get_model write set_model;
  end;

  PPGtkSelectionFilterModelClass = ^PGtkSelectionFilterModelClass;
  PGtkSelectionFilterModelClass = ^TGtkSelectionFilterModelClass;
  TGtkSelectionFilterModelClass = object
    parent_class: TGObjectClass;
  end;

  PPGtkSelectionModelInterface = ^PGtkSelectionModelInterface;
  PGtkSelectionModelInterface = ^TGtkSelectionModelInterface;
  TGtkSelectionModelInterface = object
    g_iface: TGTypeInterface;
    is_selected: function(model: PGtkSelectionModel; position: guint): gboolean; cdecl;
    get_selection_in_range: function(model: PGtkSelectionModel; position: guint; n_items: guint): PGtkBitset; cdecl;
    select_item: function(model: PGtkSelectionModel; position: guint; unselect_rest: gboolean): gboolean; cdecl;
    unselect_item: function(model: PGtkSelectionModel; position: guint): gboolean; cdecl;
    select_range: function(model: PGtkSelectionModel; position: guint; n_items: guint; unselect_rest: gboolean): gboolean; cdecl;
    unselect_range: function(model: PGtkSelectionModel; position: guint; n_items: guint): gboolean; cdecl;
    select_all: function(model: PGtkSelectionModel): gboolean; cdecl;
    unselect_all: function(model: PGtkSelectionModel): gboolean; cdecl;
    set_selection: function(model: PGtkSelectionModel; selected: PGtkBitset; mask: PGtkBitset): gboolean; cdecl;
  end;

  PPGtkSeparator = ^PGtkSeparator;
  PGtkSeparator = ^TGtkSeparator;
  TGtkSeparator = object(TGtkWidget)
    function new(orientation: TGtkOrientation): PGtkSeparator; cdecl; inline; static;
  end;
  TGtkSettings = object(TGObject)
    function get_default: PGtkSettings; cdecl; inline; static;
    function get_for_display(display: PGdkDisplay): PGtkSettings; cdecl; inline; static;
    procedure reset_property(name: Pgchar); cdecl; inline;
    //property gtk_alternative_button_order: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_alternative_button_order  { property is writeable but setter not declared } ;
    //property gtk_alternative_sort_arrows: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_alternative_sort_arrows  { property is writeable but setter not declared } ;
    //property gtk_application_prefer_dark_theme: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_application_prefer_dark_theme  { property is writeable but setter not declared } ;
    //property gtk_cursor_aspect_ratio: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_cursor_aspect_ratio  { property is writeable but setter not declared } ;
    //property gtk_cursor_blink: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_cursor_blink  { property is writeable but setter not declared } ;
    //property gtk_cursor_blink_time: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_cursor_blink_time  { property is writeable but setter not declared } ;
    //property gtk_cursor_blink_timeout: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_cursor_blink_timeout  { property is writeable but setter not declared } ;
    //property gtk_cursor_theme_name: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_cursor_theme_name  { property is writeable but setter not declared } ;
    //property gtk_cursor_theme_size: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_cursor_theme_size  { property is writeable but setter not declared } ;
    //property gtk_decoration_layout: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_decoration_layout  { property is writeable but setter not declared } ;
    //property gtk_dialogs_use_header: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_dialogs_use_header  { property is writeable but setter not declared } ;
    //property gtk_dnd_drag_threshold: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_dnd_drag_threshold  { property is writeable but setter not declared } ;
    //property gtk_double_click_distance: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_double_click_distance  { property is writeable but setter not declared } ;
    //property gtk_double_click_time: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_double_click_time  { property is writeable but setter not declared } ;
    //property gtk_enable_accels: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_enable_accels  { property is writeable but setter not declared } ;
    //property gtk_enable_animations: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_enable_animations  { property is writeable but setter not declared } ;
    //property gtk_enable_event_sounds: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_enable_event_sounds  { property is writeable but setter not declared } ;
    //property gtk_enable_input_feedback_sounds: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_enable_input_feedback_sounds  { property is writeable but setter not declared } ;
    //property gtk_enable_primary_paste: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_enable_primary_paste  { property is writeable but setter not declared } ;
    //property gtk_entry_password_hint_timeout: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_entry_password_hint_timeout  { property is writeable but setter not declared } ;
    //property gtk_entry_select_on_focus: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_entry_select_on_focus  { property is writeable but setter not declared } ;
    //property gtk_error_bell: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_error_bell  { property is writeable but setter not declared } ;
    //property gtk_font_name: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_font_name  { property is writeable but setter not declared } ;
    //property gtk_fontconfig_timestamp: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_fontconfig_timestamp  { property is writeable but setter not declared } ;
    //property gtk_hint_font_metrics: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_hint_font_metrics  { property is writeable but setter not declared } ;
    //property gtk_icon_theme_name: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_icon_theme_name  { property is writeable but setter not declared } ;
    //property gtk_im_module: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_im_module  { property is writeable but setter not declared } ;
    //property gtk_keynav_use_caret: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_keynav_use_caret  { property is writeable but setter not declared } ;
    //property gtk_label_select_on_focus: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_label_select_on_focus  { property is writeable but setter not declared } ;
    //property gtk_long_press_time: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_long_press_time  { property is writeable but setter not declared } ;
    //property gtk_overlay_scrolling: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_overlay_scrolling  { property is writeable but setter not declared } ;
    //property gtk_primary_button_warps_slider: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_primary_button_warps_slider  { property is writeable but setter not declared } ;
    //property gtk_print_backends: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_print_backends  { property is writeable but setter not declared } ;
    //property gtk_print_preview_command: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_print_preview_command  { property is writeable but setter not declared } ;
    //property gtk_recent_files_enabled: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_recent_files_enabled  { property is writeable but setter not declared } ;
    //property gtk_recent_files_max_age: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_recent_files_max_age  { property is writeable but setter not declared } ;
    //property gtk_shell_shows_app_menu: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_shell_shows_app_menu  { property is writeable but setter not declared } ;
    //property gtk_shell_shows_desktop: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_shell_shows_desktop  { property is writeable but setter not declared } ;
    //property gtk_shell_shows_menubar: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_shell_shows_menubar  { property is writeable but setter not declared } ;
    //property gtk_sound_theme_name: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_sound_theme_name  { property is writeable but setter not declared } ;
    //property gtk_split_cursor: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_split_cursor  { property is writeable but setter not declared } ;
    //property gtk_theme_name: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_theme_name  { property is writeable but setter not declared } ;
    //property gtk_titlebar_double_click: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_titlebar_double_click  { property is writeable but setter not declared } ;
    //property gtk_titlebar_middle_click: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_titlebar_middle_click  { property is writeable but setter not declared } ;
    //property gtk_titlebar_right_click: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_titlebar_right_click  { property is writeable but setter not declared } ;
    //property gtk_xft_antialias: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_xft_antialias  { property is writeable but setter not declared } ;
    //property gtk_xft_dpi: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_xft_dpi  { property is writeable but setter not declared } ;
    //property gtk_xft_hinting: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_xft_hinting  { property is writeable but setter not declared } ;
    //property gtk_xft_hintstyle: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_xft_hintstyle  { property is writeable but setter not declared } ;
    //property gtk_xft_rgba: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_xft_rgba  { property is writeable but setter not declared } ;
  end;

  PPGtkShortcutAction = ^PGtkShortcutAction;
  PGtkShortcutAction = ^TGtkShortcutAction;
  TGtkShortcut = object(TGObject)
    function new(trigger: PGtkShortcutTrigger; action: PGtkShortcutAction): PGtkShortcut; cdecl; inline; static;
    //function new_with_arguments(trigger: PGtkShortcutTrigger; action: PGtkShortcutAction; format_string: Pgchar; args: array of const): PGtkShortcut; cdecl; inline; static;
    function get_action: PGtkShortcutAction; cdecl; inline;
    function get_arguments: PGVariant; cdecl; inline;
    function get_trigger: PGtkShortcutTrigger; cdecl; inline;
    procedure set_action(action: PGtkShortcutAction); cdecl; inline;
    procedure set_arguments(args: PGVariant); cdecl; inline;
    procedure set_trigger(trigger: PGtkShortcutTrigger); cdecl; inline;
    property action: PGtkShortcutAction read get_action write set_action;
    property arguments: PGVariant read get_arguments write set_arguments;
    property trigger: PGtkShortcutTrigger read get_trigger write set_trigger;
  end;

  PPGtkShortcutActionFlags = ^PGtkShortcutActionFlags;
  PGtkShortcutActionFlags = ^TGtkShortcutActionFlags;
  TGtkShortcutAction = object(TGObject)
    function parse_string(string_: Pgchar): PGtkShortcutAction; cdecl; inline; static;
    function activate(flags: TGtkShortcutActionFlags; widget: PGtkWidget; args: PGVariant): gboolean; cdecl; inline;
    procedure print(string_: PGString); cdecl; inline;
    function to_string: Pgchar; cdecl; inline;
  end;

  PPGtkShortcutActionClass = ^PGtkShortcutActionClass;
  PGtkShortcutActionClass = ^TGtkShortcutActionClass;
  TGtkShortcutActionClass = object
  end;

  PPGtkShortcutClass = ^PGtkShortcutClass;
  PGtkShortcutClass = ^TGtkShortcutClass;
  TGtkShortcutClass = object
    parent_class: TGObjectClass;
  end;

  PPGtkShortcutController = ^PGtkShortcutController;
  PGtkShortcutController = ^TGtkShortcutController;

  PPGtkShortcutScope = ^PGtkShortcutScope;
  PGtkShortcutScope = ^TGtkShortcutScope;
  TGtkShortcutController = object(TGtkEventController)
    function new: PGtkShortcutController; cdecl; inline; static;
    function new_for_model(model: PGListModel): PGtkShortcutController; cdecl; inline; static;
    procedure add_shortcut(shortcut: PGtkShortcut); cdecl; inline;
    function get_mnemonics_modifiers: TGdkModifierType; cdecl; inline;
    function get_scope: TGtkShortcutScope; cdecl; inline;
    procedure remove_shortcut(shortcut: PGtkShortcut); cdecl; inline;
    procedure set_mnemonics_modifiers(modifiers: TGdkModifierType); cdecl; inline;
    procedure set_scope(scope: TGtkShortcutScope); cdecl; inline;
    //property mnemonic_modifiers: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_mnemonic_modifiers  { property is writeable but setter not declared } ;
    //property model: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_model  { property is writeable but setter not declared } ;
    property scope: TGtkShortcutScope read get_scope write set_scope;
  end;

  PPGtkShortcutControllerClass = ^PGtkShortcutControllerClass;
  PGtkShortcutControllerClass = ^TGtkShortcutControllerClass;
  TGtkShortcutControllerClass = object
  end;

  PPGtkShortcutLabel = ^PGtkShortcutLabel;
  PGtkShortcutLabel = ^TGtkShortcutLabel;
  TGtkShortcutLabel = object(TGtkWidget)
    function new(accelerator: Pgchar): PGtkShortcutLabel; cdecl; inline; static;
    function get_accelerator: Pgchar; cdecl; inline;
    function get_disabled_text: Pgchar; cdecl; inline;
    procedure set_accelerator(accelerator: Pgchar); cdecl; inline;
    procedure set_disabled_text(disabled_text: Pgchar); cdecl; inline;
    property accelerator: Pgchar read get_accelerator write set_accelerator;
    property disabled_text: Pgchar read get_disabled_text write set_disabled_text;
  end;

  PPGtkShortcutLabelClass = ^PGtkShortcutLabelClass;
  PGtkShortcutLabelClass = ^TGtkShortcutLabelClass;
  TGtkShortcutLabelClass = object
  end;

  PPGtkShortcutManagerInterface = ^PGtkShortcutManagerInterface;
  PGtkShortcutManagerInterface = ^TGtkShortcutManagerInterface;
  TGtkShortcutManagerInterface = object
    g_iface: TGTypeInterface;
    add_controller: procedure(self: PGtkShortcutManager; controller: PGtkShortcutController); cdecl;
    remove_controller: procedure(self: PGtkShortcutManager; controller: PGtkShortcutController); cdecl;
  end;

  PPGtkShortcutTriggerClass = ^PGtkShortcutTriggerClass;
  PGtkShortcutTriggerClass = ^TGtkShortcutTriggerClass;
  TGtkShortcutTriggerClass = object
  end;

  PPGtkShortcutType = ^PGtkShortcutType;
  PGtkShortcutType = ^TGtkShortcutType;

  PPGtkSizeGroup = ^PGtkSizeGroup;
  PGtkSizeGroup = ^TGtkSizeGroup;

  PPGtkSizeGroupMode = ^PGtkSizeGroupMode;
  PGtkSizeGroupMode = ^TGtkSizeGroupMode;
  TGtkSizeGroup = object(TGObject)
    function new(mode: TGtkSizeGroupMode): PGtkSizeGroup; cdecl; inline; static;
    procedure add_widget(widget: PGtkWidget); cdecl; inline;
    function get_mode: TGtkSizeGroupMode; cdecl; inline;
    function get_widgets: PGSList; cdecl; inline;
    procedure remove_widget(widget: PGtkWidget); cdecl; inline;
    procedure set_mode(mode: TGtkSizeGroupMode); cdecl; inline;
    property mode: TGtkSizeGroupMode read get_mode write set_mode;
  end;

  PPGtkShortcutsGroup = ^PGtkShortcutsGroup;
  PGtkShortcutsGroup = ^TGtkShortcutsGroup;
  TGtkShortcutsGroup = object(TGtkBox)
    //property accel_size_group: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_accel_size_group  { property is writeable but setter not declared } ;
    //property height: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_height ;
    //property title: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_title  { property is writeable but setter not declared } ;
    //property title_size_group: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_title_size_group  { property is writeable but setter not declared } ;
    //property view: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_view  { property is writeable but setter not declared } ;
  end;

  PPGtkShortcutsGroupClass = ^PGtkShortcutsGroupClass;
  PGtkShortcutsGroupClass = ^TGtkShortcutsGroupClass;
  TGtkShortcutsGroupClass = object
  end;

  PPGtkShortcutsSection = ^PGtkShortcutsSection;
  PGtkShortcutsSection = ^TGtkShortcutsSection;
  TGtkShortcutsSection = object(TGtkBox)
    //property max_height: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_max_height  { property is writeable but setter not declared } ;
    //property section_name: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_section_name  { property is writeable but setter not declared } ;
    //property title: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_title  { property is writeable but setter not declared } ;
    //property view_name: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_view_name  { property is writeable but setter not declared } ;
  end;

  PPGtkShortcutsSectionClass = ^PGtkShortcutsSectionClass;
  PGtkShortcutsSectionClass = ^TGtkShortcutsSectionClass;
  TGtkShortcutsSectionClass = object
  end;

  PPGtkShortcutsShortcut = ^PGtkShortcutsShortcut;
  PGtkShortcutsShortcut = ^TGtkShortcutsShortcut;
  TGtkShortcutsShortcut = object(TGtkWidget)
    //property accel_size_group: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_accel_size_group  { property is writeable but setter not declared } ;
    //property accelerator: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_accelerator  { property is writeable but setter not declared } ;
    //property action_name: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_action_name  { property is writeable but setter not declared } ;
    //property direction: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_direction  { property is writeable but setter not declared } ;
    //property icon: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_icon  { property is writeable but setter not declared } ;
    //property icon_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_icon_set  { property is writeable but setter not declared } ;
    //property shortcut_type: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_shortcut_type  { property is writeable but setter not declared } ;
    //property subtitle: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_subtitle  { property is writeable but setter not declared } ;
    //property subtitle_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_subtitle_set  { property is writeable but setter not declared } ;
    //property title: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_title  { property is writeable but setter not declared } ;
    //property title_size_group: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_title_size_group  { property is writeable but setter not declared } ;
  end;

  PPGtkShortcutsShortcutClass = ^PGtkShortcutsShortcutClass;
  PGtkShortcutsShortcutClass = ^TGtkShortcutsShortcutClass;
  TGtkShortcutsShortcutClass = object
  end;

  PPGtkSignalAction = ^PGtkSignalAction;
  PGtkSignalAction = ^TGtkSignalAction;
  TGtkSignalAction = object(TGtkShortcutAction)
    function new(signal_name: Pgchar): PGtkSignalAction; cdecl; inline; static;
    function get_signal_name: Pgchar; cdecl; inline;
    property signal_name: Pgchar read get_signal_name  { property is writeable but setter not declared } ;
  end;

  PPGtkSignalActionClass = ^PGtkSignalActionClass;
  PGtkSignalActionClass = ^TGtkSignalActionClass;
  TGtkSignalActionClass = object
  end;

  PPGtkSignalListItemFactory = ^PGtkSignalListItemFactory;
  PGtkSignalListItemFactory = ^TGtkSignalListItemFactory;
  TGtkSignalListItemFactory = object(TGtkListItemFactory)
    function new: PGtkSignalListItemFactory; cdecl; inline; static;
  end;

  PPGtkSignalListItemFactoryClass = ^PGtkSignalListItemFactoryClass;
  PGtkSignalListItemFactoryClass = ^TGtkSignalListItemFactoryClass;
  TGtkSignalListItemFactoryClass = object
  end;

  PPGtkSingleSelection = ^PGtkSingleSelection;
  PGtkSingleSelection = ^TGtkSingleSelection;
  TGtkSingleSelection = object(TGObject)
    function new(model: PGListModel): PGtkSingleSelection; cdecl; inline; static;
    function get_autoselect: gboolean; cdecl; inline;
    function get_can_unselect: gboolean; cdecl; inline;
    function get_model: PGListModel; cdecl; inline;
    function get_selected: guint; cdecl; inline;
    function get_selected_item: PGObject; cdecl; inline;
    procedure set_autoselect(autoselect: gboolean); cdecl; inline;
    procedure set_can_unselect(can_unselect: gboolean); cdecl; inline;
    procedure set_model(model: PGListModel); cdecl; inline;
    procedure set_selected(position: guint); cdecl; inline;
    property autoselect: gboolean read get_autoselect write set_autoselect;
    property can_unselect: gboolean read get_can_unselect write set_can_unselect;
    property model: PGListModel read get_model write set_model;
    property selected: guint read get_selected write set_selected;
    property selected_item: PGObject read get_selected_item ;
  end;

  PPGtkSingleSelectionClass = ^PGtkSingleSelectionClass;
  PGtkSingleSelectionClass = ^TGtkSingleSelectionClass;
  TGtkSingleSelectionClass = object
    parent_class: TGObjectClass;
  end;

  PPGtkSliceListModel = ^PGtkSliceListModel;
  PGtkSliceListModel = ^TGtkSliceListModel;
  TGtkSliceListModel = object(TGObject)
    function new(model: PGListModel; offset: guint; size: guint): PGtkSliceListModel; cdecl; inline; static;
    function get_model: PGListModel; cdecl; inline;
    function get_offset: guint; cdecl; inline;
    function get_size: guint; cdecl; inline;
    procedure set_model(model: PGListModel); cdecl; inline;
    procedure set_offset(offset: guint); cdecl; inline;
    procedure set_size(size: guint); cdecl; inline;
    property model: PGListModel read get_model write set_model;
    property offset: guint read get_offset write set_offset;
    property size: guint read get_size write set_size;
  end;

  PPGtkSliceListModelClass = ^PGtkSliceListModelClass;
  PGtkSliceListModelClass = ^TGtkSliceListModelClass;
  TGtkSliceListModelClass = object
    parent_class: TGObjectClass;
  end;

  PPGtkStyleContextPrintFlags = ^PGtkStyleContextPrintFlags;
  PGtkStyleContextPrintFlags = ^TGtkStyleContextPrintFlags;
  TGtkStyleContext = object(TGObject)
    procedure add_provider_for_display(display: PGdkDisplay; provider: PGtkStyleProvider; priority: guint); cdecl; inline; static;
    procedure remove_provider_for_display(display: PGdkDisplay; provider: PGtkStyleProvider); cdecl; inline; static;
    procedure add_class(class_name: Pgchar); cdecl; inline;
    procedure add_provider(provider: PGtkStyleProvider; priority: guint); cdecl; inline;
    procedure get_border(border: PGtkBorder); cdecl; inline;
    procedure get_color(color: PGdkRGBA); cdecl; inline;
    function get_display: PGdkDisplay; cdecl; inline;
    procedure get_margin(margin: PGtkBorder); cdecl; inline;
    procedure get_padding(padding: PGtkBorder); cdecl; inline;
    function get_scale: gint; cdecl; inline;
    function get_state: TGtkStateFlags; cdecl; inline;
    function has_class(class_name: Pgchar): gboolean; cdecl; inline;
    function lookup_color(color_name: Pgchar; color: PGdkRGBA): gboolean; cdecl; inline;
    procedure remove_class(class_name: Pgchar); cdecl; inline;
    procedure remove_provider(provider: PGtkStyleProvider); cdecl; inline;
    procedure restore; cdecl; inline;
    procedure save; cdecl; inline;
    procedure set_display(display: PGdkDisplay); cdecl; inline;
    procedure set_scale(scale: gint); cdecl; inline;
    procedure set_state(flags: TGtkStateFlags); cdecl; inline;
    function to_string(flags: TGtkStyleContextPrintFlags): Pgchar; cdecl; inline;
    property display: PGdkDisplay read get_display write set_display;
  end;

  PPGtkSnapshotClass = ^PGtkSnapshotClass;
  PGtkSnapshotClass = ^TGtkSnapshotClass;
  TGtkSnapshotClass = object
  end;

  PPGtkSortListModel = ^PGtkSortListModel;
  PGtkSortListModel = ^TGtkSortListModel;
  TGtkSortListModel = object(TGObject)
    function new(model: PGListModel; sorter: PGtkSorter): PGtkSortListModel; cdecl; inline; static;
    function get_incremental: gboolean; cdecl; inline;
    function get_model: PGListModel; cdecl; inline;
    function get_pending: guint; cdecl; inline;
    function get_sorter: PGtkSorter; cdecl; inline;
    procedure set_incremental(incremental: gboolean); cdecl; inline;
    procedure set_model(model: PGListModel); cdecl; inline;
    procedure set_sorter(sorter: PGtkSorter); cdecl; inline;
    property incremental: gboolean read get_incremental write set_incremental;
    property model: PGListModel read get_model write set_model;
    property pending: guint read get_pending ;
    property sorter: PGtkSorter read get_sorter write set_sorter;
  end;

  PPGtkSortListModelClass = ^PGtkSortListModelClass;
  PGtkSortListModelClass = ^TGtkSortListModelClass;
  TGtkSortListModelClass = object
    parent_class: TGObjectClass;
  end;

  PPGtkSpinButton = ^PGtkSpinButton;
  PGtkSpinButton = ^TGtkSpinButton;

  PPGtkSpinButtonUpdatePolicy = ^PGtkSpinButtonUpdatePolicy;
  PGtkSpinButtonUpdatePolicy = ^TGtkSpinButtonUpdatePolicy;

  PPGtkSpinType = ^PGtkSpinType;
  PGtkSpinType = ^TGtkSpinType;
  TGtkSpinButton = object(TGtkWidget)
    function new(adjustment: PGtkAdjustment; climb_rate: gdouble; digits: guint): PGtkSpinButton; cdecl; inline; static;
    function new_with_range(min: gdouble; max: gdouble; step: gdouble): PGtkSpinButton; cdecl; inline; static;
    procedure configure(adjustment: PGtkAdjustment; climb_rate: gdouble; digits: guint); cdecl; inline;
    function get_adjustment: PGtkAdjustment; cdecl; inline;
    function get_climb_rate: gdouble; cdecl; inline;
    function get_digits: guint; cdecl; inline;
    procedure get_increments(step: Pgdouble; page: Pgdouble); cdecl; inline;
    function get_numeric: gboolean; cdecl; inline;
    procedure get_range(min: Pgdouble; max: Pgdouble); cdecl; inline;
    function get_snap_to_ticks: gboolean; cdecl; inline;
    function get_update_policy: TGtkSpinButtonUpdatePolicy; cdecl; inline;
    function get_value: gdouble; cdecl; inline;
    function get_value_as_int: gint; cdecl; inline;
    function get_wrap: gboolean; cdecl; inline;
    procedure set_adjustment(adjustment: PGtkAdjustment); cdecl; inline;
    procedure set_climb_rate(climb_rate: gdouble); cdecl; inline;
    procedure set_digits(digits: guint); cdecl; inline;
    procedure set_increments(step: gdouble; page: gdouble); cdecl; inline;
    procedure set_numeric(numeric: gboolean); cdecl; inline;
    procedure set_range(min: gdouble; max: gdouble); cdecl; inline;
    procedure set_snap_to_ticks(snap_to_ticks: gboolean); cdecl; inline;
    procedure set_update_policy(policy: TGtkSpinButtonUpdatePolicy); cdecl; inline;
    procedure set_value(value: gdouble); cdecl; inline;
    procedure set_wrap(wrap: gboolean); cdecl; inline;
    procedure spin(direction: TGtkSpinType; increment: gdouble); cdecl; inline;
    procedure update; cdecl; inline;
    property adjustment: PGtkAdjustment read get_adjustment write set_adjustment;
    property climb_rate: gdouble read get_climb_rate write set_climb_rate;
    property digits: guint read get_digits write set_digits;
    property numeric: gboolean read get_numeric write set_numeric;
    property snap_to_ticks: gboolean read get_snap_to_ticks write set_snap_to_ticks;
    property update_policy: TGtkSpinButtonUpdatePolicy read get_update_policy write set_update_policy;
    property value: gdouble read get_value write set_value;
    property wrap: gboolean read get_wrap write set_wrap;
  end;

  PPGtkSpinner = ^PGtkSpinner;
  PGtkSpinner = ^TGtkSpinner;
  TGtkSpinner = object(TGtkWidget)
    function new: PGtkSpinner; cdecl; inline; static;
    function get_spinning: gboolean; cdecl; inline;
    procedure set_spinning(spinning: gboolean); cdecl; inline;
    procedure start; cdecl; inline;
    procedure stop; cdecl; inline;
    property spinning: gboolean read get_spinning write set_spinning;
  end;

  PPGtkStackPage = ^PGtkStackPage;
  PGtkStackPage = ^TGtkStackPage;
  TGtkStackPage = object(TGObject)
    function get_child: PGtkWidget; cdecl; inline;
    function get_icon_name: Pgchar; cdecl; inline;
    function get_name: Pgchar; cdecl; inline;
    function get_needs_attention: gboolean; cdecl; inline;
    function get_title: Pgchar; cdecl; inline;
    function get_use_underline: gboolean; cdecl; inline;
    function get_visible: gboolean; cdecl; inline;
    procedure set_icon_name(setting: Pgchar); cdecl; inline;
    procedure set_name(setting: Pgchar); cdecl; inline;
    procedure set_needs_attention(setting: gboolean); cdecl; inline;
    procedure set_title(setting: Pgchar); cdecl; inline;
    procedure set_use_underline(setting: gboolean); cdecl; inline;
    procedure set_visible(visible: gboolean); cdecl; inline;
    property child: PGtkWidget read get_child  { property is writeable but setter not declared } ;
    property icon_name: Pgchar read get_icon_name write set_icon_name;
    property name: Pgchar read get_name write set_name;
    property needs_attention: gboolean read get_needs_attention write set_needs_attention;
    property title: Pgchar read get_title write set_title;
    property use_underline: gboolean read get_use_underline write set_use_underline;
    property visible: gboolean read get_visible write set_visible;
  end;

  PPGtkStack = ^PGtkStack;
  PGtkStack = ^TGtkStack;

  PPGtkStackTransitionType = ^PGtkStackTransitionType;
  PGtkStackTransitionType = ^TGtkStackTransitionType;
  TGtkStack = object(TGtkWidget)
    function new: PGtkStack; cdecl; inline; static;
    function add_child(child: PGtkWidget): PGtkStackPage; cdecl; inline;
    function add_named(child: PGtkWidget; name: Pgchar): PGtkStackPage; cdecl; inline;
    function add_titled(child: PGtkWidget; name: Pgchar; title: Pgchar): PGtkStackPage; cdecl; inline;
    function get_child_by_name(name: Pgchar): PGtkWidget; cdecl; inline;
    function get_hhomogeneous: gboolean; cdecl; inline;
    function get_interpolate_size: gboolean; cdecl; inline;
    function get_page(child: PGtkWidget): PGtkStackPage; cdecl; inline;
    function get_pages: PGtkSelectionModel; cdecl; inline;
    function get_transition_duration: guint; cdecl; inline;
    function get_transition_running: gboolean; cdecl; inline;
    function get_transition_type: TGtkStackTransitionType; cdecl; inline;
    function get_vhomogeneous: gboolean; cdecl; inline;
    function get_visible_child: PGtkWidget; cdecl; inline;
    function get_visible_child_name: Pgchar; cdecl; inline;
    procedure remove(child: PGtkWidget); cdecl; inline;
    procedure set_hhomogeneous(hhomogeneous: gboolean); cdecl; inline;
    procedure set_interpolate_size(interpolate_size: gboolean); cdecl; inline;
    procedure set_transition_duration(duration: guint); cdecl; inline;
    procedure set_transition_type(transition: TGtkStackTransitionType); cdecl; inline;
    procedure set_vhomogeneous(vhomogeneous: gboolean); cdecl; inline;
    procedure set_visible_child(child: PGtkWidget); cdecl; inline;
    procedure set_visible_child_full(name: Pgchar; transition: TGtkStackTransitionType); cdecl; inline;
    procedure set_visible_child_name(name: Pgchar); cdecl; inline;
    property hhomogeneous: gboolean read get_hhomogeneous write set_hhomogeneous;
    property interpolate_size: gboolean read get_interpolate_size write set_interpolate_size;
    property pages: PGtkSelectionModel read get_pages ;
    property transition_duration: guint read get_transition_duration write set_transition_duration;
    property transition_running: gboolean read get_transition_running ;
    property transition_type: TGtkStackTransitionType read get_transition_type write set_transition_type;
    property vhomogeneous: gboolean read get_vhomogeneous write set_vhomogeneous;
    property visible_child: PGtkWidget read get_visible_child write set_visible_child;
    property visible_child_name: Pgchar read get_visible_child_name write set_visible_child_name;
  end;

  PPGtkStackSidebar = ^PGtkStackSidebar;
  PGtkStackSidebar = ^TGtkStackSidebar;
  TGtkStackSidebar = object(TGtkWidget)
    function new: PGtkStackSidebar; cdecl; inline; static;
    function get_stack: PGtkStack; cdecl; inline;
    procedure set_stack(stack: PGtkStack); cdecl; inline;
    property stack: PGtkStack read get_stack write set_stack;
  end;

  PPGtkStackSwitcher = ^PGtkStackSwitcher;
  PGtkStackSwitcher = ^TGtkStackSwitcher;
  TGtkStackSwitcher = object(TGtkWidget)
    function new: PGtkStackSwitcher; cdecl; inline; static;
    function get_stack: PGtkStack; cdecl; inline;
    procedure set_stack(stack: PGtkStack); cdecl; inline;
    property stack: PGtkStack read get_stack write set_stack;
  end;

  PPGtkStatusbar = ^PGtkStatusbar;
  PGtkStatusbar = ^TGtkStatusbar;
  TGtkStatusbar = object(TGtkWidget)
    function new: PGtkStatusbar; cdecl; inline; static;
    function get_context_id(context_description: Pgchar): guint; cdecl; inline;
    procedure pop(context_id: guint); cdecl; inline;
    function push(context_id: guint; text: Pgchar): guint; cdecl; inline;
    procedure remove(context_id: guint; message_id: guint); cdecl; inline;
    procedure remove_all(context_id: guint); cdecl; inline;
  end;

  PPGtkStringFilter = ^PGtkStringFilter;
  PGtkStringFilter = ^TGtkStringFilter;

  PPGtkStringFilterMatchMode = ^PGtkStringFilterMatchMode;
  PGtkStringFilterMatchMode = ^TGtkStringFilterMatchMode;
  TGtkStringFilter = object(TGtkFilter)
    function new(expression: PGtkExpression): PGtkStringFilter; cdecl; inline; static;
    function get_expression: PGtkExpression; cdecl; inline;
    function get_ignore_case: gboolean; cdecl; inline;
    function get_match_mode: TGtkStringFilterMatchMode; cdecl; inline;
    function get_search: Pgchar; cdecl; inline;
    procedure set_expression(expression: PGtkExpression); cdecl; inline;
    procedure set_ignore_case(ignore_case: gboolean); cdecl; inline;
    procedure set_match_mode(mode: TGtkStringFilterMatchMode); cdecl; inline;
    procedure set_search(search: Pgchar); cdecl; inline;
    property expression: PGtkExpression read get_expression write set_expression;
    property ignore_case: gboolean read get_ignore_case write set_ignore_case;
    property match_mode: TGtkStringFilterMatchMode read get_match_mode write set_match_mode;
    property search: Pgchar read get_search write set_search;
  end;

  PPGtkStringFilterClass = ^PGtkStringFilterClass;
  PGtkStringFilterClass = ^TGtkStringFilterClass;
  TGtkStringFilterClass = object
    parent_class: TGtkFilterClass;
  end;

  PPGtkStringList = ^PGtkStringList;
  PGtkStringList = ^TGtkStringList;
  TGtkStringList = object(TGObject)
    function new(strings: PPgchar): PGtkStringList; cdecl; inline; static;
    procedure append(string_: Pgchar); cdecl; inline;
    function get_string(position: guint): Pgchar; cdecl; inline;
    procedure remove(position: guint); cdecl; inline;
    procedure splice(position: guint; n_removals: guint; additions: PPgchar); cdecl; inline;
    procedure take(string_: Pgchar); cdecl; inline;
  end;

  PPGtkStringListClass = ^PGtkStringListClass;
  PGtkStringListClass = ^TGtkStringListClass;
  TGtkStringListClass = object
    parent_class: TGObjectClass;
  end;

  PPGtkStringObject = ^PGtkStringObject;
  PGtkStringObject = ^TGtkStringObject;
  TGtkStringObject = object(TGObject)
    function new(string_: Pgchar): PGtkStringObject; cdecl; inline; static;
    function get_string: Pgchar; cdecl; inline;
    property string_: Pgchar read get_string ;
  end;

  PPGtkStringObjectClass = ^PGtkStringObjectClass;
  PGtkStringObjectClass = ^TGtkStringObjectClass;
  TGtkStringObjectClass = object
    parent_class: TGObjectClass;
  end;

  PPGtkStringSorter = ^PGtkStringSorter;
  PGtkStringSorter = ^TGtkStringSorter;
  TGtkStringSorter = object(TGtkSorter)
    function new(expression: PGtkExpression): PGtkStringSorter; cdecl; inline; static;
    function get_expression: PGtkExpression; cdecl; inline;
    function get_ignore_case: gboolean; cdecl; inline;
    procedure set_expression(expression: PGtkExpression); cdecl; inline;
    procedure set_ignore_case(ignore_case: gboolean); cdecl; inline;
    property expression: PGtkExpression read get_expression write set_expression;
    property ignore_case: gboolean read get_ignore_case write set_ignore_case;
  end;

  PPGtkStringSorterClass = ^PGtkStringSorterClass;
  PGtkStringSorterClass = ^TGtkStringSorterClass;
  TGtkStringSorterClass = object
    parent_class: TGtkSorterClass;
  end;

  PPGtkStyleContextClass = ^PGtkStyleContextClass;
  PGtkStyleContextClass = ^TGtkStyleContextClass;
  TGtkStyleContextClass = object
    parent_class: TGObjectClass;
    changed: procedure(context: PGtkStyleContext); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkSwitch = ^PGtkSwitch;
  PGtkSwitch = ^TGtkSwitch;
  TGtkSwitch = object(TGtkWidget)
    function new: PGtkSwitch; cdecl; inline; static;
    function get_active: gboolean; cdecl; inline;
    function get_state: gboolean; cdecl; inline;
    procedure set_active(is_active: gboolean); cdecl; inline;
    procedure set_state(state: gboolean); cdecl; inline;
    property active: gboolean read get_active write set_active;
    property state: gboolean read get_state write set_state;
  end;

  PPGtkSymbolicColor = ^PGtkSymbolicColor;
  PGtkSymbolicColor = ^TGtkSymbolicColor;

  PPGtkSymbolicPaintableInterface = ^PGtkSymbolicPaintableInterface;
  PGtkSymbolicPaintableInterface = ^TGtkSymbolicPaintableInterface;
  TGtkSymbolicPaintableInterface = object
    g_iface: TGTypeInterface;
    snapshot_symbolic: procedure(paintable: PGtkSymbolicPaintable; snapshot: PGdkSnapshot; width: gdouble; height: gdouble; colors: PGdkRGBA; n_colors: gsize); cdecl;
  end;

  PPGtkText = ^PGtkText;
  PGtkText = ^TGtkText;
  TGtkText = object(TGtkWidget)
    function new: PGtkText; cdecl; inline; static;
    function new_with_buffer(buffer: PGtkEntryBuffer): PGtkText; cdecl; inline; static;
    procedure compute_cursor_extents(position: gsize; strong: Pgraphene_rect_t; weak: Pgraphene_rect_t); cdecl; inline;
    function get_activates_default: gboolean; cdecl; inline;
    function get_attributes: PPangoAttrList; cdecl; inline;
    function get_buffer: PGtkEntryBuffer; cdecl; inline;
    function get_enable_emoji_completion: gboolean; cdecl; inline;
    function get_extra_menu: PGMenuModel; cdecl; inline;
    function get_input_hints: TGtkInputHints; cdecl; inline;
    function get_input_purpose: TGtkInputPurpose; cdecl; inline;
    function get_invisible_char: gunichar; cdecl; inline;
    function get_max_length: gint; cdecl; inline;
    function get_overwrite_mode: gboolean; cdecl; inline;
    function get_placeholder_text: Pgchar; cdecl; inline;
    function get_propagate_text_width: gboolean; cdecl; inline;
    function get_tabs: PPangoTabArray; cdecl; inline;
    function get_text_length: guint16; cdecl; inline;
    function get_truncate_multiline: gboolean; cdecl; inline;
    function get_visibility: gboolean; cdecl; inline;
    function grab_focus_without_selecting: gboolean; cdecl; inline;
    procedure set_activates_default(activates: gboolean); cdecl; inline;
    procedure set_attributes(attrs: PPangoAttrList); cdecl; inline;
    procedure set_buffer(buffer: PGtkEntryBuffer); cdecl; inline;
    procedure set_enable_emoji_completion(enable_emoji_completion: gboolean); cdecl; inline;
    procedure set_extra_menu(model: PGMenuModel); cdecl; inline;
    procedure set_input_hints(hints: TGtkInputHints); cdecl; inline;
    procedure set_input_purpose(purpose: TGtkInputPurpose); cdecl; inline;
    procedure set_invisible_char(ch: gunichar); cdecl; inline;
    procedure set_max_length(length: gint); cdecl; inline;
    procedure set_overwrite_mode(overwrite: gboolean); cdecl; inline;
    procedure set_placeholder_text(text: Pgchar); cdecl; inline;
    procedure set_propagate_text_width(propagate_text_width: gboolean); cdecl; inline;
    procedure set_tabs(tabs: PPangoTabArray); cdecl; inline;
    procedure set_truncate_multiline(truncate_multiline: gboolean); cdecl; inline;
    procedure set_visibility(visible: gboolean); cdecl; inline;
    procedure unset_invisible_char; cdecl; inline;
    property activates_default: gboolean read get_activates_default write set_activates_default;
    property attributes: PPangoAttrList read get_attributes write set_attributes;
    property buffer: PGtkEntryBuffer read get_buffer write set_buffer;
    property enable_emoji_completion: gboolean read get_enable_emoji_completion write set_enable_emoji_completion;
    property extra_menu: PGMenuModel read get_extra_menu write set_extra_menu;
    //property im_module: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_im_module  { property is writeable but setter not declared } ;
    property input_hints: TGtkInputHints read get_input_hints write set_input_hints;
    property input_purpose: TGtkInputPurpose read get_input_purpose write set_input_purpose;
    property invisible_char: gunichar read get_invisible_char write set_invisible_char;
    //property invisible_char_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_invisible_char_set  { property is writeable but setter not declared } ;
    property max_length: gint read get_max_length write set_max_length;
    property overwrite_mode: gboolean read get_overwrite_mode write set_overwrite_mode;
    property placeholder_text: Pgchar read get_placeholder_text write set_placeholder_text;
    property propagate_text_width: gboolean read get_propagate_text_width write set_propagate_text_width;
    //property scroll_offset: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_scroll_offset ;
    property tabs: PPangoTabArray read get_tabs write set_tabs;
    property truncate_multiline: gboolean read get_truncate_multiline write set_truncate_multiline;
    property visibility: gboolean read get_visibility write set_visibility;
  end;

  PPGtkTextBuffer = ^PGtkTextBuffer;
  PGtkTextBuffer = ^TGtkTextBuffer;

  PPGtkTextTagTable = ^PGtkTextTagTable;
  PGtkTextTagTable = ^TGtkTextTagTable;

  PPGtkTextMark = ^PGtkTextMark;
  PGtkTextMark = ^TGtkTextMark;

  PPGtkTextIter = ^PGtkTextIter;
  PGtkTextIter = ^TGtkTextIter;

  PPGtkTextTag = ^PGtkTextTag;
  PGtkTextTag = ^TGtkTextTag;

  PPGtkTextChildAnchor = ^PGtkTextChildAnchor;
  PGtkTextChildAnchor = ^TGtkTextChildAnchor;

  PPGtkTextBufferPrivate = ^PGtkTextBufferPrivate;
  PGtkTextBufferPrivate = ^TGtkTextBufferPrivate;
  TGtkTextBuffer = object(TGObject)
    priv: PGtkTextBufferPrivate;
    function new(table: PGtkTextTagTable): PGtkTextBuffer; cdecl; inline; static;
    procedure add_mark(mark: PGtkTextMark; where: PGtkTextIter); cdecl; inline;
    procedure add_selection_clipboard(clipboard: PGdkClipboard); cdecl; inline;
    procedure apply_tag(tag: PGtkTextTag; start: PGtkTextIter; end_: PGtkTextIter); cdecl; inline;
    procedure apply_tag_by_name(name: Pgchar; start: PGtkTextIter; end_: PGtkTextIter); cdecl; inline;
    function backspace(iter: PGtkTextIter; interactive: gboolean; default_editable: gboolean): gboolean; cdecl; inline;
    procedure begin_irreversible_action; cdecl; inline;
    procedure begin_user_action; cdecl; inline;
    procedure copy_clipboard(clipboard: PGdkClipboard); cdecl; inline;
    function create_child_anchor(iter: PGtkTextIter): PGtkTextChildAnchor; cdecl; inline;
    function create_mark(mark_name: Pgchar; where: PGtkTextIter; left_gravity: gboolean): PGtkTextMark; cdecl; inline;
    //function create_tag(tag_name: Pgchar; first_property_name: Pgchar; args: array of const): PGtkTextTag; cdecl; inline;
    procedure cut_clipboard(clipboard: PGdkClipboard; default_editable: gboolean); cdecl; inline;
    procedure delete(start: PGtkTextIter; end_: PGtkTextIter); cdecl; inline;
    function delete_interactive(start_iter: PGtkTextIter; end_iter: PGtkTextIter; default_editable: gboolean): gboolean; cdecl; inline;
    procedure delete_mark(mark: PGtkTextMark); cdecl; inline;
    procedure delete_mark_by_name(name: Pgchar); cdecl; inline;
    function delete_selection(interactive: gboolean; default_editable: gboolean): gboolean; cdecl; inline;
    procedure end_irreversible_action; cdecl; inline;
    procedure end_user_action; cdecl; inline;
    procedure get_bounds(start: PGtkTextIter; end_: PGtkTextIter); cdecl; inline;
    function get_can_redo: gboolean; cdecl; inline;
    function get_can_undo: gboolean; cdecl; inline;
    function get_char_count: gint; cdecl; inline;
    function get_enable_undo: gboolean; cdecl; inline;
    procedure get_end_iter(iter: PGtkTextIter); cdecl; inline;
    function get_has_selection: gboolean; cdecl; inline;
    function get_insert: PGtkTextMark; cdecl; inline;
    procedure get_iter_at_child_anchor(iter: PGtkTextIter; anchor: PGtkTextChildAnchor); cdecl; inline;
    function get_iter_at_line(iter: PGtkTextIter; line_number: gint): gboolean; cdecl; inline;
    function get_iter_at_line_index(iter: PGtkTextIter; line_number: gint; byte_index: gint): gboolean; cdecl; inline;
    function get_iter_at_line_offset(iter: PGtkTextIter; line_number: gint; char_offset: gint): gboolean; cdecl; inline;
    procedure get_iter_at_mark(iter: PGtkTextIter; mark: PGtkTextMark); cdecl; inline;
    procedure get_iter_at_offset(iter: PGtkTextIter; char_offset: gint); cdecl; inline;
    function get_line_count: gint; cdecl; inline;
    function get_mark(name: Pgchar): PGtkTextMark; cdecl; inline;
    function get_max_undo_levels: guint; cdecl; inline;
    function get_modified: gboolean; cdecl; inline;
    function get_selection_bound: PGtkTextMark; cdecl; inline;
    function get_selection_bounds(start: PGtkTextIter; end_: PGtkTextIter): gboolean; cdecl; inline;
    function get_selection_content: PGdkContentProvider; cdecl; inline;
    function get_slice(start: PGtkTextIter; end_: PGtkTextIter; include_hidden_chars: gboolean): Pgchar; cdecl; inline;
    procedure get_start_iter(iter: PGtkTextIter); cdecl; inline;
    function get_tag_table: PGtkTextTagTable; cdecl; inline;
    function get_text(start: PGtkTextIter; end_: PGtkTextIter; include_hidden_chars: gboolean): Pgchar; cdecl; inline;
    procedure insert(iter: PGtkTextIter; text: Pgchar; len: gint); cdecl; inline;
    procedure insert_at_cursor(text: Pgchar; len: gint); cdecl; inline;
    procedure insert_child_anchor(iter: PGtkTextIter; anchor: PGtkTextChildAnchor); cdecl; inline;
    function insert_interactive(iter: PGtkTextIter; text: Pgchar; len: gint; default_editable: gboolean): gboolean; cdecl; inline;
    function insert_interactive_at_cursor(text: Pgchar; len: gint; default_editable: gboolean): gboolean; cdecl; inline;
    procedure insert_markup(iter: PGtkTextIter; markup: Pgchar; len: gint); cdecl; inline;
    procedure insert_paintable(iter: PGtkTextIter; paintable: PGdkPaintable); cdecl; inline;
    procedure insert_range(iter: PGtkTextIter; start: PGtkTextIter; end_: PGtkTextIter); cdecl; inline;
    function insert_range_interactive(iter: PGtkTextIter; start: PGtkTextIter; end_: PGtkTextIter; default_editable: gboolean): gboolean; cdecl; inline;
    //procedure insert_with_tags(iter: PGtkTextIter; text: Pgchar; len: gint; first_tag: PGtkTextTag; args: array of const); cdecl; inline;
    //procedure insert_with_tags_by_name(iter: PGtkTextIter; text: Pgchar; len: gint; first_tag_name: Pgchar; args: array of const); cdecl; inline;
    procedure move_mark(mark: PGtkTextMark; where: PGtkTextIter); cdecl; inline;
    procedure move_mark_by_name(name: Pgchar; where: PGtkTextIter); cdecl; inline;
    procedure paste_clipboard(clipboard: PGdkClipboard; override_location: PGtkTextIter; default_editable: gboolean); cdecl; inline;
    procedure place_cursor(where: PGtkTextIter); cdecl; inline;
    procedure redo; cdecl; inline;
    procedure remove_all_tags(start: PGtkTextIter; end_: PGtkTextIter); cdecl; inline;
    procedure remove_selection_clipboard(clipboard: PGdkClipboard); cdecl; inline;
    procedure remove_tag(tag: PGtkTextTag; start: PGtkTextIter; end_: PGtkTextIter); cdecl; inline;
    procedure remove_tag_by_name(name: Pgchar; start: PGtkTextIter; end_: PGtkTextIter); cdecl; inline;
    procedure select_range(ins: PGtkTextIter; bound: PGtkTextIter); cdecl; inline;
    procedure set_enable_undo(enable_undo: gboolean); cdecl; inline;
    procedure set_max_undo_levels(max_undo_levels: guint); cdecl; inline;
    procedure set_modified(setting: gboolean); cdecl; inline;
    procedure set_text(text: Pgchar; len: gint); cdecl; inline;
    procedure undo; cdecl; inline;
    property can_redo: gboolean read get_can_redo ;
    property can_undo: gboolean read get_can_undo ;
    //property cursor_position: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_cursor_position ;
    property enable_undo: gboolean read get_enable_undo write set_enable_undo;
    property has_selection: gboolean read get_has_selection ;
    property tag_table: PGtkTextTagTable read get_tag_table  { property is writeable but setter not declared } ;
    //property text: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_text  { property is writeable but setter not declared } ;
  end;

  PPGtkTextTagTableForeach = ^PGtkTextTagTableForeach;
  PGtkTextTagTableForeach = ^TGtkTextTagTableForeach;
  TGtkTextTagTableForeach = procedure(tag: PGtkTextTag; data: gpointer); cdecl;
  TGtkTextTagTable = object(TGObject)
    function new: PGtkTextTagTable; cdecl; inline; static;
    function add(tag: PGtkTextTag): gboolean; cdecl; inline;
    procedure foreach(func: TGtkTextTagTableForeach; data: gpointer); cdecl; inline;
    function get_size: gint; cdecl; inline;
    function lookup(name: Pgchar): PGtkTextTag; cdecl; inline;
    procedure remove(tag: PGtkTextTag); cdecl; inline;
  end;

  PPGtkTextTagPrivate = ^PGtkTextTagPrivate;
  PGtkTextTagPrivate = ^TGtkTextTagPrivate;
  TGtkTextTag = object(TGObject)
    priv: PGtkTextTagPrivate;
    function new(name: Pgchar): PGtkTextTag; cdecl; inline; static;
    procedure changed(size_changed: gboolean); cdecl; inline;
    function get_priority: gint; cdecl; inline;
    procedure set_priority(priority: gint); cdecl; inline;
    //property accumulative_margin: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_accumulative_margin  { property is writeable but setter not declared } ;
    //property allow_breaks: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_allow_breaks  { property is writeable but setter not declared } ;
    //property allow_breaks_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_allow_breaks_set  { property is writeable but setter not declared } ;
    //property background: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_background  { property is writeable but setter not declared } ;
    //property background_full_height: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_background_full_height  { property is writeable but setter not declared } ;
    //property background_full_height_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_background_full_height_set  { property is writeable but setter not declared } ;
    //property background_rgba: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_background_rgba  { property is writeable but setter not declared } ;
    //property background_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_background_set  { property is writeable but setter not declared } ;
    //property direction: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_direction  { property is writeable but setter not declared } ;
    //property editable: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_editable  { property is writeable but setter not declared } ;
    //property editable_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_editable_set  { property is writeable but setter not declared } ;
    //property fallback: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_fallback  { property is writeable but setter not declared } ;
    //property fallback_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_fallback_set  { property is writeable but setter not declared } ;
    //property family: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_family  { property is writeable but setter not declared } ;
    //property family_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_family_set  { property is writeable but setter not declared } ;
    //property font: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_font  { property is writeable but setter not declared } ;
    //property font_desc: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_font_desc  { property is writeable but setter not declared } ;
    //property font_features: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_font_features  { property is writeable but setter not declared } ;
    //property font_features_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_font_features_set  { property is writeable but setter not declared } ;
    //property foreground: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_foreground  { property is writeable but setter not declared } ;
    //property foreground_rgba: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_foreground_rgba  { property is writeable but setter not declared } ;
    //property foreground_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_foreground_set  { property is writeable but setter not declared } ;
    //property indent: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_indent  { property is writeable but setter not declared } ;
    //property indent_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_indent_set  { property is writeable but setter not declared } ;
    //property insert_hyphens: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_insert_hyphens  { property is writeable but setter not declared } ;
    //property insert_hyphens_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_insert_hyphens_set  { property is writeable but setter not declared } ;
    //property invisible: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_invisible  { property is writeable but setter not declared } ;
    //property invisible_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_invisible_set  { property is writeable but setter not declared } ;
    //property justification: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_justification  { property is writeable but setter not declared } ;
    //property justification_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_justification_set  { property is writeable but setter not declared } ;
    //property language: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_language  { property is writeable but setter not declared } ;
    //property language_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_language_set  { property is writeable but setter not declared } ;
    //property left_margin: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_left_margin  { property is writeable but setter not declared } ;
    //property left_margin_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_left_margin_set  { property is writeable but setter not declared } ;
    //property letter_spacing: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_letter_spacing  { property is writeable but setter not declared } ;
    //property letter_spacing_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_letter_spacing_set  { property is writeable but setter not declared } ;
    //property line_height: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_line_height  { property is writeable but setter not declared } ;
    //property line_height_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_line_height_set  { property is writeable but setter not declared } ;
    //property name: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_name  { property is writeable but setter not declared } ;
    //property overline: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_overline  { property is writeable but setter not declared } ;
    //property overline_rgba: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_overline_rgba  { property is writeable but setter not declared } ;
    //property overline_rgba_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_overline_rgba_set  { property is writeable but setter not declared } ;
    //property overline_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_overline_set  { property is writeable but setter not declared } ;
    //property paragraph_background: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_paragraph_background  { property is writeable but setter not declared } ;
    //property paragraph_background_rgba: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_paragraph_background_rgba  { property is writeable but setter not declared } ;
    //property paragraph_background_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_paragraph_background_set  { property is writeable but setter not declared } ;
    //property pixels_above_lines: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_pixels_above_lines  { property is writeable but setter not declared } ;
    //property pixels_above_lines_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_pixels_above_lines_set  { property is writeable but setter not declared } ;
    //property pixels_below_lines: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_pixels_below_lines  { property is writeable but setter not declared } ;
    //property pixels_below_lines_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_pixels_below_lines_set  { property is writeable but setter not declared } ;
    //property pixels_inside_wrap: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_pixels_inside_wrap  { property is writeable but setter not declared } ;
    //property pixels_inside_wrap_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_pixels_inside_wrap_set  { property is writeable but setter not declared } ;
    //property right_margin: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_right_margin  { property is writeable but setter not declared } ;
    //property right_margin_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_right_margin_set  { property is writeable but setter not declared } ;
    //property rise: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_rise  { property is writeable but setter not declared } ;
    //property rise_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_rise_set  { property is writeable but setter not declared } ;
    //property scale: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_scale  { property is writeable but setter not declared } ;
    //property scale_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_scale_set  { property is writeable but setter not declared } ;
    //property sentence: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_sentence  { property is writeable but setter not declared } ;
    //property sentence_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_sentence_set  { property is writeable but setter not declared } ;
    //property show_spaces: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_show_spaces  { property is writeable but setter not declared } ;
    //property show_spaces_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_show_spaces_set  { property is writeable but setter not declared } ;
    //property size: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_size  { property is writeable but setter not declared } ;
    //property size_points: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_size_points  { property is writeable but setter not declared } ;
    //property size_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_size_set  { property is writeable but setter not declared } ;
    //property stretch: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_stretch  { property is writeable but setter not declared } ;
    //property stretch_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_stretch_set  { property is writeable but setter not declared } ;
    //property strikethrough: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_strikethrough  { property is writeable but setter not declared } ;
    //property strikethrough_rgba: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_strikethrough_rgba  { property is writeable but setter not declared } ;
    //property strikethrough_rgba_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_strikethrough_rgba_set  { property is writeable but setter not declared } ;
    //property strikethrough_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_strikethrough_set  { property is writeable but setter not declared } ;
    //property style: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_style  { property is writeable but setter not declared } ;
    //property style_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_style_set  { property is writeable but setter not declared } ;
    //property tabs: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_tabs  { property is writeable but setter not declared } ;
    //property tabs_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_tabs_set  { property is writeable but setter not declared } ;
    //property text_transform: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_text_transform  { property is writeable but setter not declared } ;
    //property text_transform_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_text_transform_set  { property is writeable but setter not declared } ;
    //property underline: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_underline  { property is writeable but setter not declared } ;
    //property underline_rgba: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_underline_rgba  { property is writeable but setter not declared } ;
    //property underline_rgba_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_underline_rgba_set  { property is writeable but setter not declared } ;
    //property underline_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_underline_set  { property is writeable but setter not declared } ;
    //property variant: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_variant  { property is writeable but setter not declared } ;
    //property variant_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_variant_set  { property is writeable but setter not declared } ;
    //property weight: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_weight  { property is writeable but setter not declared } ;
    //property weight_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_weight_set  { property is writeable but setter not declared } ;
    //property word: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_word  { property is writeable but setter not declared } ;
    //property word_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_word_set  { property is writeable but setter not declared } ;
    //property wrap_mode: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_wrap_mode  { property is writeable but setter not declared } ;
    //property wrap_mode_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_wrap_mode_set  { property is writeable but setter not declared } ;
  end;

  PPGtkTextCharPredicate = ^PGtkTextCharPredicate;
  PGtkTextCharPredicate = ^TGtkTextCharPredicate;
  TGtkTextCharPredicate = function(ch: gunichar; user_data: gpointer): gboolean; cdecl;

  PPGtkTextSearchFlags = ^PGtkTextSearchFlags;
  PGtkTextSearchFlags = ^TGtkTextSearchFlags;
  TGtkTextIter = object
    dummy1: gpointer;
    dummy2: gpointer;
    dummy3: gint;
    dummy4: gint;
    dummy5: gint;
    dummy6: gint;
    dummy7: gint;
    dummy8: gint;
    dummy9: gpointer;
    dummy10: gpointer;
    dummy11: gint;
    dummy12: gint;
    dummy13: gint;
    dummy14: gpointer;
    procedure assign(other: PGtkTextIter); cdecl; inline;
    function backward_char: gboolean; cdecl; inline;
    function backward_chars(count: gint): gboolean; cdecl; inline;
    function backward_cursor_position: gboolean; cdecl; inline;
    function backward_cursor_positions(count: gint): gboolean; cdecl; inline;
    function backward_find_char(pred: TGtkTextCharPredicate; user_data: gpointer; limit: PGtkTextIter): gboolean; cdecl; inline;
    function backward_line: gboolean; cdecl; inline;
    function backward_lines(count: gint): gboolean; cdecl; inline;
    function backward_search(str: Pgchar; flags: TGtkTextSearchFlags; match_start: PGtkTextIter; match_end: PGtkTextIter; limit: PGtkTextIter): gboolean; cdecl; inline;
    function backward_sentence_start: gboolean; cdecl; inline;
    function backward_sentence_starts(count: gint): gboolean; cdecl; inline;
    function backward_to_tag_toggle(tag: PGtkTextTag): gboolean; cdecl; inline;
    function backward_visible_cursor_position: gboolean; cdecl; inline;
    function backward_visible_cursor_positions(count: gint): gboolean; cdecl; inline;
    function backward_visible_line: gboolean; cdecl; inline;
    function backward_visible_lines(count: gint): gboolean; cdecl; inline;
    function backward_visible_word_start: gboolean; cdecl; inline;
    function backward_visible_word_starts(count: gint): gboolean; cdecl; inline;
    function backward_word_start: gboolean; cdecl; inline;
    function backward_word_starts(count: gint): gboolean; cdecl; inline;
    function can_insert(default_editability: gboolean): gboolean; cdecl; inline;
    function compare(rhs: PGtkTextIter): gint; cdecl; inline;
    function copy: PGtkTextIter; cdecl; inline;
    function editable(default_setting: gboolean): gboolean; cdecl; inline;
    function ends_line: gboolean; cdecl; inline;
    function ends_sentence: gboolean; cdecl; inline;
    function ends_tag(tag: PGtkTextTag): gboolean; cdecl; inline;
    function ends_word: gboolean; cdecl; inline;
    function equal(rhs: PGtkTextIter): gboolean; cdecl; inline;
    function forward_char: gboolean; cdecl; inline;
    function forward_chars(count: gint): gboolean; cdecl; inline;
    function forward_cursor_position: gboolean; cdecl; inline;
    function forward_cursor_positions(count: gint): gboolean; cdecl; inline;
    function forward_find_char(pred: TGtkTextCharPredicate; user_data: gpointer; limit: PGtkTextIter): gboolean; cdecl; inline;
    function forward_line: gboolean; cdecl; inline;
    function forward_lines(count: gint): gboolean; cdecl; inline;
    function forward_search(str: Pgchar; flags: TGtkTextSearchFlags; match_start: PGtkTextIter; match_end: PGtkTextIter; limit: PGtkTextIter): gboolean; cdecl; inline;
    function forward_sentence_end: gboolean; cdecl; inline;
    function forward_sentence_ends(count: gint): gboolean; cdecl; inline;
    procedure forward_to_end; cdecl; inline;
    function forward_to_line_end: gboolean; cdecl; inline;
    function forward_to_tag_toggle(tag: PGtkTextTag): gboolean; cdecl; inline;
    function forward_visible_cursor_position: gboolean; cdecl; inline;
    function forward_visible_cursor_positions(count: gint): gboolean; cdecl; inline;
    function forward_visible_line: gboolean; cdecl; inline;
    function forward_visible_lines(count: gint): gboolean; cdecl; inline;
    function forward_visible_word_end: gboolean; cdecl; inline;
    function forward_visible_word_ends(count: gint): gboolean; cdecl; inline;
    function forward_word_end: gboolean; cdecl; inline;
    function forward_word_ends(count: gint): gboolean; cdecl; inline;
    procedure free; cdecl; inline;
    function get_buffer: PGtkTextBuffer; cdecl; inline;
    function get_bytes_in_line: gint; cdecl; inline;
    function get_char: gunichar; cdecl; inline;
    function get_chars_in_line: gint; cdecl; inline;
    function get_child_anchor: PGtkTextChildAnchor; cdecl; inline;
    function get_language: PPangoLanguage; cdecl; inline;
    function get_line: gint; cdecl; inline;
    function get_line_index: gint; cdecl; inline;
    function get_line_offset: gint; cdecl; inline;
    function get_marks: PGSList; cdecl; inline;
    function get_offset: gint; cdecl; inline;
    function get_paintable: PGdkPaintable; cdecl; inline;
    function get_slice(end_: PGtkTextIter): Pgchar; cdecl; inline;
    function get_tags: PGSList; cdecl; inline;
    function get_text(end_: PGtkTextIter): Pgchar; cdecl; inline;
    function get_toggled_tags(toggled_on: gboolean): PGSList; cdecl; inline;
    function get_visible_line_index: gint; cdecl; inline;
    function get_visible_line_offset: gint; cdecl; inline;
    function get_visible_slice(end_: PGtkTextIter): Pgchar; cdecl; inline;
    function get_visible_text(end_: PGtkTextIter): Pgchar; cdecl; inline;
    function has_tag(tag: PGtkTextTag): gboolean; cdecl; inline;
    function in_range(start: PGtkTextIter; end_: PGtkTextIter): gboolean; cdecl; inline;
    function inside_sentence: gboolean; cdecl; inline;
    function inside_word: gboolean; cdecl; inline;
    function is_cursor_position: gboolean; cdecl; inline;
    function is_end: gboolean; cdecl; inline;
    function is_start: gboolean; cdecl; inline;
    procedure order(second: PGtkTextIter); cdecl; inline;
    procedure set_line(line_number: gint); cdecl; inline;
    procedure set_line_index(byte_on_line: gint); cdecl; inline;
    procedure set_line_offset(char_on_line: gint); cdecl; inline;
    procedure set_offset(char_offset: gint); cdecl; inline;
    procedure set_visible_line_index(byte_on_line: gint); cdecl; inline;
    procedure set_visible_line_offset(char_on_line: gint); cdecl; inline;
    function starts_line: gboolean; cdecl; inline;
    function starts_sentence: gboolean; cdecl; inline;
    function starts_tag(tag: PGtkTextTag): gboolean; cdecl; inline;
    function starts_word: gboolean; cdecl; inline;
    function toggles_tag(tag: PGtkTextTag): gboolean; cdecl; inline;
  end;
  TGtkTextChildAnchor = object(TGObject)
    segment: gpointer;
    function new: PGtkTextChildAnchor; cdecl; inline; static;
    function new_with_replacement(character: Pgchar): PGtkTextChildAnchor; cdecl; inline; static;
    function get_deleted: gboolean; cdecl; inline;
    function get_widgets(out_len: Pguint): PPGtkWidget; cdecl; inline;
  end;
  TGtkTextMark = object(TGObject)
    segment: gpointer;
    function new(name: Pgchar; left_gravity: gboolean): PGtkTextMark; cdecl; inline; static;
    function get_buffer: PGtkTextBuffer; cdecl; inline;
    function get_deleted: gboolean; cdecl; inline;
    function get_left_gravity: gboolean; cdecl; inline;
    function get_name: Pgchar; cdecl; inline;
    function get_visible: gboolean; cdecl; inline;
    procedure set_visible(setting: gboolean); cdecl; inline;
    property left_gravity: gboolean read get_left_gravity  { property is writeable but setter not declared } ;
    property name: Pgchar read get_name  { property is writeable but setter not declared } ;
  end;

  TGtkTextBufferPrivate = record
  end;



  PPGtkTextBufferClass = ^PGtkTextBufferClass;
  PGtkTextBufferClass = ^TGtkTextBufferClass;
  TGtkTextBufferClass = object
    parent_class: TGObjectClass;
    insert_text: procedure(buffer: PGtkTextBuffer; pos: PGtkTextIter; new_text: Pgchar; new_text_length: gint); cdecl;
    insert_paintable: procedure(buffer: PGtkTextBuffer; iter: PGtkTextIter; paintable: PGdkPaintable); cdecl;
    insert_child_anchor: procedure(buffer: PGtkTextBuffer; iter: PGtkTextIter; anchor: PGtkTextChildAnchor); cdecl;
    delete_range: procedure(buffer: PGtkTextBuffer; start: PGtkTextIter; end_: PGtkTextIter); cdecl;
    changed: procedure(buffer: PGtkTextBuffer); cdecl;
    modified_changed: procedure(buffer: PGtkTextBuffer); cdecl;
    mark_set: procedure(buffer: PGtkTextBuffer; location: PGtkTextIter; mark: PGtkTextMark); cdecl;
    mark_deleted: procedure(buffer: PGtkTextBuffer; mark: PGtkTextMark); cdecl;
    apply_tag: procedure(buffer: PGtkTextBuffer; tag: PGtkTextTag; start: PGtkTextIter; end_: PGtkTextIter); cdecl;
    remove_tag: procedure(buffer: PGtkTextBuffer; tag: PGtkTextTag; start: PGtkTextIter; end_: PGtkTextIter); cdecl;
    begin_user_action: procedure(buffer: PGtkTextBuffer); cdecl;
    end_user_action: procedure(buffer: PGtkTextBuffer); cdecl;
    paste_done: procedure(buffer: PGtkTextBuffer; clipboard: PGdkClipboard); cdecl;
    undo: procedure(buffer: PGtkTextBuffer); cdecl;
    redo: procedure(buffer: PGtkTextBuffer); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkTextChildAnchorClass = ^PGtkTextChildAnchorClass;
  PGtkTextChildAnchorClass = ^TGtkTextChildAnchorClass;
  TGtkTextChildAnchorClass = object
    parent_class: TGObjectClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkTextExtendSelection = ^PGtkTextExtendSelection;
  PGtkTextExtendSelection = ^TGtkTextExtendSelection;

  PPGtkTextMarkClass = ^PGtkTextMarkClass;
  PGtkTextMarkClass = ^TGtkTextMarkClass;
  TGtkTextMarkClass = object
    parent_class: TGObjectClass;
    padding: array [0..7] of gpointer;
  end;

  PPGtkWrapMode = ^PGtkWrapMode;
  PGtkWrapMode = ^TGtkWrapMode;

  TGtkTextTagPrivate = record
  end;



  PPGtkTextTagClass = ^PGtkTextTagClass;
  PGtkTextTagClass = ^TGtkTextTagClass;
  TGtkTextTagClass = object
    parent_class: TGObjectClass;
    padding: array [0..7] of gpointer;
  end;

  PPGtkTextView = ^PGtkTextView;
  PGtkTextView = ^TGtkTextView;

  PPGtkTextWindowType = ^PGtkTextWindowType;
  PGtkTextWindowType = ^TGtkTextWindowType;

  PPGtkTextViewPrivate = ^PGtkTextViewPrivate;
  PGtkTextViewPrivate = ^TGtkTextViewPrivate;
  TGtkTextView = object(TGtkWidget)
    priv1: PGtkTextViewPrivate;
    function new: PGtkTextView; cdecl; inline; static;
    function new_with_buffer(buffer: PGtkTextBuffer): PGtkTextView; cdecl; inline; static;
    procedure add_child_at_anchor(child: PGtkWidget; anchor: PGtkTextChildAnchor); cdecl; inline;
    procedure add_overlay(child: PGtkWidget; xpos: gint; ypos: gint); cdecl; inline;
    function backward_display_line(iter: PGtkTextIter): gboolean; cdecl; inline;
    function backward_display_line_start(iter: PGtkTextIter): gboolean; cdecl; inline;
    procedure buffer_to_window_coords(win: TGtkTextWindowType; buffer_x: gint; buffer_y: gint; window_x: Pgint; window_y: Pgint); cdecl; inline;
    function forward_display_line(iter: PGtkTextIter): gboolean; cdecl; inline;
    function forward_display_line_end(iter: PGtkTextIter): gboolean; cdecl; inline;
    function get_accepts_tab: gboolean; cdecl; inline;
    function get_bottom_margin: gint; cdecl; inline;
    function get_buffer: PGtkTextBuffer; cdecl; inline;
    procedure get_cursor_locations(iter: PGtkTextIter; strong: PGdkRectangle; weak: PGdkRectangle); cdecl; inline;
    function get_cursor_visible: gboolean; cdecl; inline;
    function get_editable: gboolean; cdecl; inline;
    function get_extra_menu: PGMenuModel; cdecl; inline;
    function get_gutter(win: TGtkTextWindowType): PGtkWidget; cdecl; inline;
    function get_indent: gint; cdecl; inline;
    function get_input_hints: TGtkInputHints; cdecl; inline;
    function get_input_purpose: TGtkInputPurpose; cdecl; inline;
    function get_iter_at_location(iter: PGtkTextIter; x: gint; y: gint): gboolean; cdecl; inline;
    function get_iter_at_position(iter: PGtkTextIter; trailing: Pgint; x: gint; y: gint): gboolean; cdecl; inline;
    procedure get_iter_location(iter: PGtkTextIter; location: PGdkRectangle); cdecl; inline;
    function get_justification: TGtkJustification; cdecl; inline;
    function get_left_margin: gint; cdecl; inline;
    procedure get_line_at_y(target_iter: PGtkTextIter; y: gint; line_top: Pgint); cdecl; inline;
    procedure get_line_yrange(iter: PGtkTextIter; y: Pgint; height: Pgint); cdecl; inline;
    function get_ltr_context: PPangoContext; cdecl; inline;
    function get_monospace: gboolean; cdecl; inline;
    function get_overwrite: gboolean; cdecl; inline;
    function get_pixels_above_lines: gint; cdecl; inline;
    function get_pixels_below_lines: gint; cdecl; inline;
    function get_pixels_inside_wrap: gint; cdecl; inline;
    function get_right_margin: gint; cdecl; inline;
    function get_rtl_context: PPangoContext; cdecl; inline;
    function get_tabs: PPangoTabArray; cdecl; inline;
    function get_top_margin: gint; cdecl; inline;
    procedure get_visible_rect(visible_rect: PGdkRectangle); cdecl; inline;
    function get_wrap_mode: TGtkWrapMode; cdecl; inline;
    function im_context_filter_keypress(event: PGdkEvent): gboolean; cdecl; inline;
    function move_mark_onscreen(mark: PGtkTextMark): gboolean; cdecl; inline;
    procedure move_overlay(child: PGtkWidget; xpos: gint; ypos: gint); cdecl; inline;
    function move_visually(iter: PGtkTextIter; count: gint): gboolean; cdecl; inline;
    function place_cursor_onscreen: gboolean; cdecl; inline;
    procedure remove(child: PGtkWidget); cdecl; inline;
    procedure reset_cursor_blink; cdecl; inline;
    procedure reset_im_context; cdecl; inline;
    procedure scroll_mark_onscreen(mark: PGtkTextMark); cdecl; inline;
    function scroll_to_iter(iter: PGtkTextIter; within_margin: gdouble; use_align: gboolean; xalign: gdouble; yalign: gdouble): gboolean; cdecl; inline;
    procedure scroll_to_mark(mark: PGtkTextMark; within_margin: gdouble; use_align: gboolean; xalign: gdouble; yalign: gdouble); cdecl; inline;
    procedure set_accepts_tab(accepts_tab: gboolean); cdecl; inline;
    procedure set_bottom_margin(bottom_margin: gint); cdecl; inline;
    procedure set_buffer(buffer: PGtkTextBuffer); cdecl; inline;
    procedure set_cursor_visible(setting: gboolean); cdecl; inline;
    procedure set_editable(setting: gboolean); cdecl; inline;
    procedure set_extra_menu(model: PGMenuModel); cdecl; inline;
    procedure set_gutter(win: TGtkTextWindowType; widget: PGtkWidget); cdecl; inline;
    procedure set_indent(indent: gint); cdecl; inline;
    procedure set_input_hints(hints: TGtkInputHints); cdecl; inline;
    procedure set_input_purpose(purpose: TGtkInputPurpose); cdecl; inline;
    procedure set_justification(justification: TGtkJustification); cdecl; inline;
    procedure set_left_margin(left_margin: gint); cdecl; inline;
    procedure set_monospace(monospace: gboolean); cdecl; inline;
    procedure set_overwrite(overwrite: gboolean); cdecl; inline;
    procedure set_pixels_above_lines(pixels_above_lines: gint); cdecl; inline;
    procedure set_pixels_below_lines(pixels_below_lines: gint); cdecl; inline;
    procedure set_pixels_inside_wrap(pixels_inside_wrap: gint); cdecl; inline;
    procedure set_right_margin(right_margin: gint); cdecl; inline;
    procedure set_tabs(tabs: PPangoTabArray); cdecl; inline;
    procedure set_top_margin(top_margin: gint); cdecl; inline;
    procedure set_wrap_mode(wrap_mode: TGtkWrapMode); cdecl; inline;
    function starts_display_line(iter: PGtkTextIter): gboolean; cdecl; inline;
    procedure window_to_buffer_coords(win: TGtkTextWindowType; window_x: gint; window_y: gint; buffer_x: Pgint; buffer_y: Pgint); cdecl; inline;
    property accepts_tab: gboolean read get_accepts_tab write set_accepts_tab;
    property bottom_margin: gint read get_bottom_margin write set_bottom_margin;
    property buffer: PGtkTextBuffer read get_buffer write set_buffer;
    property cursor_visible: gboolean read get_cursor_visible write set_cursor_visible;
    property editable: gboolean read get_editable write set_editable;
    property extra_menu: PGMenuModel read get_extra_menu write set_extra_menu;
    //property im_module: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_im_module  { property is writeable but setter not declared } ;
    property indent: gint read get_indent write set_indent;
    property input_hints: TGtkInputHints read get_input_hints write set_input_hints;
    property input_purpose: TGtkInputPurpose read get_input_purpose write set_input_purpose;
    property justification: TGtkJustification read get_justification write set_justification;
    property left_margin: gint read get_left_margin write set_left_margin;
    property monospace: gboolean read get_monospace write set_monospace;
    property overwrite: gboolean read get_overwrite write set_overwrite;
    property pixels_above_lines: gint read get_pixels_above_lines write set_pixels_above_lines;
    property pixels_below_lines: gint read get_pixels_below_lines write set_pixels_below_lines;
    property pixels_inside_wrap: gint read get_pixels_inside_wrap write set_pixels_inside_wrap;
    property right_margin: gint read get_right_margin write set_right_margin;
    property tabs: PPangoTabArray read get_tabs write set_tabs;
    property top_margin: gint read get_top_margin write set_top_margin;
    property wrap_mode: TGtkWrapMode read get_wrap_mode write set_wrap_mode;
  end;

  PPGtkTextViewLayer = ^PGtkTextViewLayer;
  PGtkTextViewLayer = ^TGtkTextViewLayer;

  TGtkTextViewPrivate = record
  end;



  PPGtkTextViewClass = ^PGtkTextViewClass;
  PGtkTextViewClass = ^TGtkTextViewClass;
  TGtkTextViewClass = object
    parent_class: TGtkWidgetClass;
    move_cursor: procedure(text_view: PGtkTextView; step: TGtkMovementStep; count: gint; extend_selection: gboolean); cdecl;
    set_anchor: procedure(text_view: PGtkTextView); cdecl;
    insert_at_cursor: procedure(text_view: PGtkTextView; str: Pgchar); cdecl;
    delete_from_cursor: procedure(text_view: PGtkTextView; type_: TGtkDeleteType; count: gint); cdecl;
    backspace: procedure(text_view: PGtkTextView); cdecl;
    cut_clipboard: procedure(text_view: PGtkTextView); cdecl;
    copy_clipboard: procedure(text_view: PGtkTextView); cdecl;
    paste_clipboard: procedure(text_view: PGtkTextView); cdecl;
    toggle_overwrite: procedure(text_view: PGtkTextView); cdecl;
    create_buffer: function(text_view: PGtkTextView): PGtkTextBuffer; cdecl;
    snapshot_layer: procedure(text_view: PGtkTextView; layer: TGtkTextViewLayer; snapshot: PGtkSnapshot); cdecl;
    extend_selection: function(text_view: PGtkTextView; granularity: TGtkTextExtendSelection; location: PGtkTextIter; start: PGtkTextIter; end_: PGtkTextIter): gboolean; cdecl;
    insert_emoji: procedure(text_view: PGtkTextView); cdecl;
    padding: array [0..7] of gpointer;
  end;

  PPGtkToggleButton = ^PGtkToggleButton;
  PGtkToggleButton = ^TGtkToggleButton;
  TGtkToggleButton = object(TGtkButton)
    function new: PGtkToggleButton; cdecl; inline; static;
    function new_with_label(label_: Pgchar): PGtkToggleButton; cdecl; inline; static;
    function new_with_mnemonic(label_: Pgchar): PGtkToggleButton; cdecl; inline; static;
    function get_active: gboolean; cdecl; inline;
    procedure set_active(is_active: gboolean); cdecl; inline;
    procedure set_group(group: PGtkToggleButton); cdecl; inline;
    procedure toggled; cdecl; inline;
    property active: gboolean read get_active write set_active;
    //property group: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_group  { property is writeable but setter not declared } ;
  end;

  PPGtkToggleButtonClass = ^PGtkToggleButtonClass;
  PGtkToggleButtonClass = ^TGtkToggleButtonClass;
  TGtkToggleButtonClass = object
    parent_class: TGtkButtonClass;
    toggled: procedure(toggle_button: PGtkToggleButton); cdecl;
    padding: array [0..7] of gpointer;
  end;

  PPGtkTreeViewColumn = ^PGtkTreeViewColumn;
  PGtkTreeViewColumn = ^TGtkTreeViewColumn;

  PPGtkTreeViewColumnSizing = ^PGtkTreeViewColumnSizing;
  PGtkTreeViewColumnSizing = ^TGtkTreeViewColumnSizing;

  PPGtkTreeCellDataFunc = ^PGtkTreeCellDataFunc;
  PGtkTreeCellDataFunc = ^TGtkTreeCellDataFunc;
  TGtkTreeCellDataFunc = procedure(tree_column: PGtkTreeViewColumn; cell: PGtkCellRenderer; tree_model: PGtkTreeModel; iter: PGtkTreeIter; data: gpointer); cdecl;
  TGtkTreeViewColumn = object(TGInitiallyUnowned)
    function new: PGtkTreeViewColumn; cdecl; inline; static;
    function new_with_area(area: PGtkCellArea): PGtkTreeViewColumn; cdecl; inline; static;
    //function new_with_attributes(title: Pgchar; cell: PGtkCellRenderer; args: array of const): PGtkTreeViewColumn; cdecl; inline; static;
    procedure add_attribute(cell_renderer: PGtkCellRenderer; attribute: Pgchar; column: gint); cdecl; inline;
    function cell_get_position(cell_renderer: PGtkCellRenderer; x_offset: Pgint; width: Pgint): gboolean; cdecl; inline;
    procedure cell_get_size(x_offset: Pgint; y_offset: Pgint; width: Pgint; height: Pgint); cdecl; inline;
    function cell_is_visible: gboolean; cdecl; inline;
    procedure cell_set_cell_data(tree_model: PGtkTreeModel; iter: PGtkTreeIter; is_expander: gboolean; is_expanded: gboolean); cdecl; inline;
    procedure clear; cdecl; inline;
    procedure clear_attributes(cell_renderer: PGtkCellRenderer); cdecl; inline;
    procedure clicked; cdecl; inline;
    procedure focus_cell(cell: PGtkCellRenderer); cdecl; inline;
    function get_alignment: gfloat; cdecl; inline;
    function get_button: PGtkWidget; cdecl; inline;
    function get_clickable: gboolean; cdecl; inline;
    function get_expand: gboolean; cdecl; inline;
    function get_fixed_width: gint; cdecl; inline;
    function get_max_width: gint; cdecl; inline;
    function get_min_width: gint; cdecl; inline;
    function get_reorderable: gboolean; cdecl; inline;
    function get_resizable: gboolean; cdecl; inline;
    function get_sizing: TGtkTreeViewColumnSizing; cdecl; inline;
    function get_sort_column_id: gint; cdecl; inline;
    function get_sort_indicator: gboolean; cdecl; inline;
    function get_sort_order: TGtkSortType; cdecl; inline;
    function get_spacing: gint; cdecl; inline;
    function get_title: Pgchar; cdecl; inline;
    function get_tree_view: PGtkWidget; cdecl; inline;
    function get_visible: gboolean; cdecl; inline;
    function get_widget: PGtkWidget; cdecl; inline;
    function get_width: gint; cdecl; inline;
    function get_x_offset: gint; cdecl; inline;
    procedure pack_end(cell: PGtkCellRenderer; expand: gboolean); cdecl; inline;
    procedure pack_start(cell: PGtkCellRenderer; expand: gboolean); cdecl; inline;
    procedure queue_resize; cdecl; inline;
    procedure set_alignment(xalign: gfloat); cdecl; inline;
    //procedure set_attributes(cell_renderer: PGtkCellRenderer; args: array of const); cdecl; inline;
    procedure set_cell_data_func(cell_renderer: PGtkCellRenderer; func: TGtkTreeCellDataFunc; func_data: gpointer; destroy_: TGDestroyNotify); cdecl; inline;
    procedure set_clickable(clickable: gboolean); cdecl; inline;
    procedure set_expand(expand: gboolean); cdecl; inline;
    procedure set_fixed_width(fixed_width: gint); cdecl; inline;
    procedure set_max_width(max_width: gint); cdecl; inline;
    procedure set_min_width(min_width: gint); cdecl; inline;
    procedure set_reorderable(reorderable: gboolean); cdecl; inline;
    procedure set_resizable(resizable: gboolean); cdecl; inline;
    procedure set_sizing(type_: TGtkTreeViewColumnSizing); cdecl; inline;
    procedure set_sort_column_id(sort_column_id: gint); cdecl; inline;
    procedure set_sort_indicator(setting: gboolean); cdecl; inline;
    procedure set_sort_order(order: TGtkSortType); cdecl; inline;
    procedure set_spacing(spacing: gint); cdecl; inline;
    procedure set_title(title: Pgchar); cdecl; inline;
    procedure set_visible(visible: gboolean); cdecl; inline;
    procedure set_widget(widget: PGtkWidget); cdecl; inline;
    property alignment: gfloat read get_alignment write set_alignment;
    //property cell_area: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_cell_area  { property is writeable but setter not declared } ;
    property clickable: gboolean read get_clickable write set_clickable;
    property expand: gboolean read get_expand write set_expand;
    property fixed_width: gint read get_fixed_width write set_fixed_width;
    property max_width: gint read get_max_width write set_max_width;
    property min_width: gint read get_min_width write set_min_width;
    property reorderable: gboolean read get_reorderable write set_reorderable;
    property resizable: gboolean read get_resizable write set_resizable;
    property sizing: TGtkTreeViewColumnSizing read get_sizing write set_sizing;
    property sort_column_id: gint read get_sort_column_id write set_sort_column_id;
    property sort_indicator: gboolean read get_sort_indicator write set_sort_indicator;
    property sort_order: TGtkSortType read get_sort_order write set_sort_order;
    property spacing: gint read get_spacing write set_spacing;
    property title: Pgchar read get_title write set_title;
    property visible: gboolean read get_visible write set_visible;
    property widget: PGtkWidget read get_widget write set_widget;
    property width: gint read get_width ;
    property x_offset: gint read get_x_offset ;
  end;

  PPGtkTreeDragDestIface = ^PGtkTreeDragDestIface;
  PGtkTreeDragDestIface = ^TGtkTreeDragDestIface;
  TGtkTreeDragDestIface = object
    g_iface: TGTypeInterface;
    drag_data_received: function(drag_dest: PGtkTreeDragDest; dest: PGtkTreePath; value: PGValue): gboolean; cdecl;
    row_drop_possible: function(drag_dest: PGtkTreeDragDest; dest_path: PGtkTreePath; value: PGValue): gboolean; cdecl;
  end;

  PPGtkTreeDragSourceIface = ^PGtkTreeDragSourceIface;
  PGtkTreeDragSourceIface = ^TGtkTreeDragSourceIface;
  TGtkTreeDragSourceIface = object
    g_iface: TGTypeInterface;
    row_draggable: function(drag_source: PGtkTreeDragSource; path: PGtkTreePath): gboolean; cdecl;
    drag_data_get: function(drag_source: PGtkTreeDragSource; path: PGtkTreePath): PGdkContentProvider; cdecl;
    drag_data_delete: function(drag_source: PGtkTreeDragSource; path: PGtkTreePath): gboolean; cdecl;
  end;

  PPGtkTreeExpander = ^PGtkTreeExpander;
  PGtkTreeExpander = ^TGtkTreeExpander;

  PPGtkTreeListRow = ^PGtkTreeListRow;
  PGtkTreeListRow = ^TGtkTreeListRow;
  TGtkTreeExpander = object(TGtkWidget)
    function new: PGtkTreeExpander; cdecl; inline; static;
    function get_child: PGtkWidget; cdecl; inline;
    function get_indent_for_icon: gboolean; cdecl; inline;
    function get_item: PGObject; cdecl; inline;
    function get_list_row: PGtkTreeListRow; cdecl; inline;
    procedure set_child(child: PGtkWidget); cdecl; inline;
    procedure set_indent_for_icon(indent_for_icon: gboolean); cdecl; inline;
    procedure set_list_row(list_row: PGtkTreeListRow); cdecl; inline;
    property child: PGtkWidget read get_child write set_child;
    property indent_for_icon: gboolean read get_indent_for_icon write set_indent_for_icon;
    property item: PGObject read get_item ;
    property list_row: PGtkTreeListRow read get_list_row write set_list_row;
  end;
  TGtkTreeListRow = object(TGObject)
    function get_child_row(position: guint): PGtkTreeListRow; cdecl; inline;
    function get_children: PGListModel; cdecl; inline;
    function get_depth: guint; cdecl; inline;
    function get_expanded: gboolean; cdecl; inline;
    function get_item: PGObject; cdecl; inline;
    function get_parent: PGtkTreeListRow; cdecl; inline;
    function get_position: guint; cdecl; inline;
    function is_expandable: gboolean; cdecl; inline;
    procedure set_expanded(expanded: gboolean); cdecl; inline;
    property children: PGListModel read get_children ;
    property depth: guint read get_depth ;
    //property expandable: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_expandable ;
    property expanded: gboolean read get_expanded write set_expanded;
    property item: PGObject read get_item ;
  end;

  PPGtkTreeExpanderClass = ^PGtkTreeExpanderClass;
  PGtkTreeExpanderClass = ^TGtkTreeExpanderClass;
  TGtkTreeExpanderClass = object
    parent_class: TGtkWidgetClass;
  end;

  PPGtkTreeListModel = ^PGtkTreeListModel;
  PGtkTreeListModel = ^TGtkTreeListModel;

  PPGtkTreeListModelCreateModelFunc = ^PGtkTreeListModelCreateModelFunc;
  PGtkTreeListModelCreateModelFunc = ^TGtkTreeListModelCreateModelFunc;
  TGtkTreeListModelCreateModelFunc = function(item: PGObject; user_data: gpointer): PGListModel; cdecl;
  TGtkTreeListModel = object(TGObject)
    function new(root: PGListModel; passthrough: gboolean; autoexpand: gboolean; create_func: TGtkTreeListModelCreateModelFunc; user_data: gpointer; user_destroy: TGDestroyNotify): PGtkTreeListModel; cdecl; inline; static;
    function get_autoexpand: gboolean; cdecl; inline;
    function get_child_row(position: guint): PGtkTreeListRow; cdecl; inline;
    function get_model: PGListModel; cdecl; inline;
    function get_passthrough: gboolean; cdecl; inline;
    function get_row(position: guint): PGtkTreeListRow; cdecl; inline;
    procedure set_autoexpand(autoexpand: gboolean); cdecl; inline;
    property autoexpand: gboolean read get_autoexpand write set_autoexpand;
    property model: PGListModel read get_model ;
    property passthrough: gboolean read get_passthrough  { property is writeable but setter not declared } ;
  end;

  PPGtkTreeListModelClass = ^PGtkTreeListModelClass;
  PGtkTreeListModelClass = ^TGtkTreeListModelClass;
  TGtkTreeListModelClass = object
    parent_class: TGObjectClass;
  end;

  PPGtkTreeListRowClass = ^PGtkTreeListRowClass;
  PGtkTreeListRowClass = ^TGtkTreeListRowClass;
  TGtkTreeListRowClass = object
    parent_class: TGObjectClass;
  end;

  PPGtkTreeListRowSorter = ^PGtkTreeListRowSorter;
  PGtkTreeListRowSorter = ^TGtkTreeListRowSorter;
  TGtkTreeListRowSorter = object(TGtkSorter)
    function new(sorter: PGtkSorter): PGtkTreeListRowSorter; cdecl; inline; static;
    function get_sorter: PGtkSorter; cdecl; inline;
    procedure set_sorter(sorter: PGtkSorter); cdecl; inline;
    property sorter: PGtkSorter read get_sorter write set_sorter;
  end;

  PPGtkTreeListRowSorterClass = ^PGtkTreeListRowSorterClass;
  PGtkTreeListRowSorterClass = ^TGtkTreeListRowSorterClass;
  TGtkTreeListRowSorterClass = object
    parent_class: TGtkSorterClass;
  end;

  PPGtkTreeModelFilter = ^PGtkTreeModelFilter;
  PGtkTreeModelFilter = ^TGtkTreeModelFilter;

  PPGtkTreeModelFilterModifyFunc = ^PGtkTreeModelFilterModifyFunc;
  PGtkTreeModelFilterModifyFunc = ^TGtkTreeModelFilterModifyFunc;
  TGtkTreeModelFilterModifyFunc = procedure(model: PGtkTreeModel; iter: PGtkTreeIter; value: PGValue; column: gint; data: gpointer); cdecl;

  PPGtkTreeModelFilterVisibleFunc = ^PGtkTreeModelFilterVisibleFunc;
  PGtkTreeModelFilterVisibleFunc = ^TGtkTreeModelFilterVisibleFunc;
  TGtkTreeModelFilterVisibleFunc = function(model: PGtkTreeModel; iter: PGtkTreeIter; data: gpointer): gboolean; cdecl;

  PPGtkTreeModelFilterPrivate = ^PGtkTreeModelFilterPrivate;
  PGtkTreeModelFilterPrivate = ^TGtkTreeModelFilterPrivate;
  TGtkTreeModelFilter = object(TGObject)
    priv: PGtkTreeModelFilterPrivate;
    procedure clear_cache; cdecl; inline;
    function convert_child_iter_to_iter(filter_iter: PGtkTreeIter; child_iter: PGtkTreeIter): gboolean; cdecl; inline;
    function convert_child_path_to_path(child_path: PGtkTreePath): PGtkTreePath; cdecl; inline;
    procedure convert_iter_to_child_iter(child_iter: PGtkTreeIter; filter_iter: PGtkTreeIter); cdecl; inline;
    function convert_path_to_child_path(filter_path: PGtkTreePath): PGtkTreePath; cdecl; inline;
    function get_model: PGtkTreeModel; cdecl; inline;
    procedure refilter; cdecl; inline;
    procedure set_modify_func(n_columns: gint; types: PGType; func: TGtkTreeModelFilterModifyFunc; data: gpointer; destroy_: TGDestroyNotify); cdecl; inline;
    procedure set_visible_column(column: gint); cdecl; inline;
    procedure set_visible_func(func: TGtkTreeModelFilterVisibleFunc; data: gpointer; destroy_: TGDestroyNotify); cdecl; inline;
    //property child_model: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_child_model  { property is writeable but setter not declared } ;
    //property virtual_root: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_virtual_root  { property is writeable but setter not declared } ;
  end;

  TGtkTreeModelFilterPrivate = record
  end;



  PPGtkTreeModelFilterClass = ^PGtkTreeModelFilterClass;
  PGtkTreeModelFilterClass = ^TGtkTreeModelFilterClass;
  TGtkTreeModelFilterClass = object
    parent_class: TGObjectClass;
    visible: function(self: PGtkTreeModelFilter; child_model: PGtkTreeModel; iter: PGtkTreeIter): gboolean; cdecl;
    modify: procedure(self: PGtkTreeModelFilter; child_model: PGtkTreeModel; iter: PGtkTreeIter; value: PGValue; column: gint); cdecl;
    padding: array [0..7] of gpointer;
  end;

  PPGtkTreeModelIface = ^PGtkTreeModelIface;
  PGtkTreeModelIface = ^TGtkTreeModelIface;
  TGtkTreeModelIface = object
    g_iface: TGTypeInterface;
    row_changed: procedure(tree_model: PGtkTreeModel; path: PGtkTreePath; iter: PGtkTreeIter); cdecl;
    row_inserted: procedure(tree_model: PGtkTreeModel; path: PGtkTreePath; iter: PGtkTreeIter); cdecl;
    row_has_child_toggled: procedure(tree_model: PGtkTreeModel; path: PGtkTreePath; iter: PGtkTreeIter); cdecl;
    row_deleted: procedure(tree_model: PGtkTreeModel; path: PGtkTreePath); cdecl;
    rows_reordered: procedure(tree_model: PGtkTreeModel; path: PGtkTreePath; iter: PGtkTreeIter; new_order: Pgint); cdecl;
    get_flags: function(tree_model: PGtkTreeModel): TGtkTreeModelFlags; cdecl;
    get_n_columns: function(tree_model: PGtkTreeModel): gint; cdecl;
    get_column_type: function(tree_model: PGtkTreeModel; index_: gint): TGType; cdecl;
    get_iter: function(tree_model: PGtkTreeModel; iter: PGtkTreeIter; path: PGtkTreePath): gboolean; cdecl;
    get_path: function(tree_model: PGtkTreeModel; iter: PGtkTreeIter): PGtkTreePath; cdecl;
    get_value: procedure(tree_model: PGtkTreeModel; iter: PGtkTreeIter; column: gint; value: PGValue); cdecl;
    iter_next: function(tree_model: PGtkTreeModel; iter: PGtkTreeIter): gboolean; cdecl;
    iter_previous: function(tree_model: PGtkTreeModel; iter: PGtkTreeIter): gboolean; cdecl;
    iter_children: function(tree_model: PGtkTreeModel; iter: PGtkTreeIter; parent: PGtkTreeIter): gboolean; cdecl;
    iter_has_child: function(tree_model: PGtkTreeModel; iter: PGtkTreeIter): gboolean; cdecl;
    iter_n_children: function(tree_model: PGtkTreeModel; iter: PGtkTreeIter): gint; cdecl;
    iter_nth_child: function(tree_model: PGtkTreeModel; iter: PGtkTreeIter; parent: PGtkTreeIter; n: gint): gboolean; cdecl;
    iter_parent: function(tree_model: PGtkTreeModel; iter: PGtkTreeIter; child: PGtkTreeIter): gboolean; cdecl;
    ref_node: procedure(tree_model: PGtkTreeModel; iter: PGtkTreeIter); cdecl;
    unref_node: procedure(tree_model: PGtkTreeModel; iter: PGtkTreeIter); cdecl;
  end;

  PPGtkTreeModelSort = ^PGtkTreeModelSort;
  PGtkTreeModelSort = ^TGtkTreeModelSort;

  PPGtkTreeModelSortPrivate = ^PGtkTreeModelSortPrivate;
  PGtkTreeModelSortPrivate = ^TGtkTreeModelSortPrivate;
  TGtkTreeModelSort = object(TGObject)
    priv: PGtkTreeModelSortPrivate;
    function new_with_model(child_model: PGtkTreeModel): PGtkTreeModelSort; cdecl; inline; static;
    procedure clear_cache; cdecl; inline;
    function convert_child_iter_to_iter(sort_iter: PGtkTreeIter; child_iter: PGtkTreeIter): gboolean; cdecl; inline;
    function convert_child_path_to_path(child_path: PGtkTreePath): PGtkTreePath; cdecl; inline;
    procedure convert_iter_to_child_iter(child_iter: PGtkTreeIter; sorted_iter: PGtkTreeIter); cdecl; inline;
    function convert_path_to_child_path(sorted_path: PGtkTreePath): PGtkTreePath; cdecl; inline;
    function get_model: PGtkTreeModel; cdecl; inline;
    function iter_is_valid(iter: PGtkTreeIter): gboolean; cdecl; inline;
    procedure reset_default_sort_func; cdecl; inline;
    property model: PGtkTreeModel read get_model  { property is writeable but setter not declared } ;
  end;

  TGtkTreeModelSortPrivate = record
  end;



  PPGtkTreeModelSortClass = ^PGtkTreeModelSortClass;
  PGtkTreeModelSortClass = ^TGtkTreeModelSortClass;
  TGtkTreeModelSortClass = object
    parent_class: TGObjectClass;
    padding: array [0..7] of gpointer;
  end;

  PPGtkTreeRowReference = ^PGtkTreeRowReference;
  PGtkTreeRowReference = ^TGtkTreeRowReference;
  TGtkTreeRowReference = object
    function new(model: PGtkTreeModel; path: PGtkTreePath): PGtkTreeRowReference; cdecl; inline; static;
    function new_proxy(proxy: PGObject; model: PGtkTreeModel; path: PGtkTreePath): PGtkTreeRowReference; cdecl; inline; static;
    function copy: PGtkTreeRowReference; cdecl; inline;
    procedure free; cdecl; inline;
    function get_model: PGtkTreeModel; cdecl; inline;
    function get_path: PGtkTreePath; cdecl; inline;
    function valid: gboolean; cdecl; inline;
    procedure deleted(proxy: PGObject; path: PGtkTreePath); cdecl; inline; static;
    procedure inserted(proxy: PGObject; path: PGtkTreePath); cdecl; inline; static;
    procedure reordered(proxy: PGObject; path: PGtkTreePath; iter: PGtkTreeIter; new_order: Pgint); cdecl; inline; static;
  end;

  PPGtkTreeSelection = ^PGtkTreeSelection;
  PGtkTreeSelection = ^TGtkTreeSelection;

  PPGtkTreeSelectionFunc = ^PGtkTreeSelectionFunc;
  PGtkTreeSelectionFunc = ^TGtkTreeSelectionFunc;
  TGtkTreeSelectionFunc = function(selection: PGtkTreeSelection; model: PGtkTreeModel; path: PGtkTreePath; path_currently_selected: gboolean; data: gpointer): gboolean; cdecl;

  PPGtkTreeView = ^PGtkTreeView;
  PGtkTreeView = ^TGtkTreeView;

  PPGtkTreeSelectionForeachFunc = ^PGtkTreeSelectionForeachFunc;
  PGtkTreeSelectionForeachFunc = ^TGtkTreeSelectionForeachFunc;
  TGtkTreeSelectionForeachFunc = procedure(model: PGtkTreeModel; path: PGtkTreePath; iter: PGtkTreeIter; data: gpointer); cdecl;
  TGtkTreeSelection = object(TGObject)
    function count_selected_rows: gint; cdecl; inline;
    function get_mode: TGtkSelectionMode; cdecl; inline;
    function get_select_function: TGtkTreeSelectionFunc; cdecl; inline;
    function get_selected(model: PPGtkTreeModel; iter: PGtkTreeIter): gboolean; cdecl; inline;
    function get_selected_rows(model: PPGtkTreeModel): PGList; cdecl; inline;
    function get_tree_view: PGtkTreeView; cdecl; inline;
    function get_user_data: gpointer; cdecl; inline;
    function iter_is_selected(iter: PGtkTreeIter): gboolean; cdecl; inline;
    function path_is_selected(path: PGtkTreePath): gboolean; cdecl; inline;
    procedure select_all; cdecl; inline;
    procedure select_iter(iter: PGtkTreeIter); cdecl; inline;
    procedure select_path(path: PGtkTreePath); cdecl; inline;
    procedure select_range(start_path: PGtkTreePath; end_path: PGtkTreePath); cdecl; inline;
    procedure selected_foreach(func: TGtkTreeSelectionForeachFunc; data: gpointer); cdecl; inline;
    procedure set_mode(type_: TGtkSelectionMode); cdecl; inline;
    procedure set_select_function(func: TGtkTreeSelectionFunc; data: gpointer; destroy_: TGDestroyNotify); cdecl; inline;
    procedure unselect_all; cdecl; inline;
    procedure unselect_iter(iter: PGtkTreeIter); cdecl; inline;
    procedure unselect_path(path: PGtkTreePath); cdecl; inline;
    procedure unselect_range(start_path: PGtkTreePath; end_path: PGtkTreePath); cdecl; inline;
    property mode: TGtkSelectionMode read get_mode write set_mode;
  end;

  PPGtkTreeViewDropPosition = ^PGtkTreeViewDropPosition;
  PGtkTreeViewDropPosition = ^TGtkTreeViewDropPosition;

  PPGtkTreeViewGridLines = ^PGtkTreeViewGridLines;
  PGtkTreeViewGridLines = ^TGtkTreeViewGridLines;

  PPGtkTreeViewSearchEqualFunc = ^PGtkTreeViewSearchEqualFunc;
  PGtkTreeViewSearchEqualFunc = ^TGtkTreeViewSearchEqualFunc;
  TGtkTreeViewSearchEqualFunc = function(model: PGtkTreeModel; column: gint; key: Pgchar; iter: PGtkTreeIter; search_data: gpointer): gboolean; cdecl;

  PPGtkTreeViewMappingFunc = ^PGtkTreeViewMappingFunc;
  PGtkTreeViewMappingFunc = ^TGtkTreeViewMappingFunc;
  TGtkTreeViewMappingFunc = procedure(tree_view: PGtkTreeView; path: PGtkTreePath; user_data: gpointer); cdecl;

  PPGtkTreeViewColumnDropFunc = ^PGtkTreeViewColumnDropFunc;
  PGtkTreeViewColumnDropFunc = ^TGtkTreeViewColumnDropFunc;
  TGtkTreeViewColumnDropFunc = function(tree_view: PGtkTreeView; column: PGtkTreeViewColumn; prev_column: PGtkTreeViewColumn; next_column: PGtkTreeViewColumn; data: gpointer): gboolean; cdecl;
  TGtkTreeView = object(TGtkWidget)
    function new: PGtkTreeView; cdecl; inline; static;
    function new_with_model(model: PGtkTreeModel): PGtkTreeView; cdecl; inline; static;
    function append_column(column: PGtkTreeViewColumn): gint; cdecl; inline;
    procedure collapse_all; cdecl; inline;
    function collapse_row(path: PGtkTreePath): gboolean; cdecl; inline;
    procedure columns_autosize; cdecl; inline;
    procedure convert_bin_window_to_tree_coords(bx: gint; by: gint; tx: Pgint; ty: Pgint); cdecl; inline;
    procedure convert_bin_window_to_widget_coords(bx: gint; by: gint; wx: Pgint; wy: Pgint); cdecl; inline;
    procedure convert_tree_to_bin_window_coords(tx: gint; ty: gint; bx: Pgint; by: Pgint); cdecl; inline;
    procedure convert_tree_to_widget_coords(tx: gint; ty: gint; wx: Pgint; wy: Pgint); cdecl; inline;
    procedure convert_widget_to_bin_window_coords(wx: gint; wy: gint; bx: Pgint; by: Pgint); cdecl; inline;
    procedure convert_widget_to_tree_coords(wx: gint; wy: gint; tx: Pgint; ty: Pgint); cdecl; inline;
    function create_row_drag_icon(path: PGtkTreePath): PGdkPaintable; cdecl; inline;
    procedure enable_model_drag_dest(formats: PGdkContentFormats; actions: TGdkDragAction); cdecl; inline;
    procedure enable_model_drag_source(start_button_mask: TGdkModifierType; formats: PGdkContentFormats; actions: TGdkDragAction); cdecl; inline;
    procedure expand_all; cdecl; inline;
    function expand_row(path: PGtkTreePath; open_all: gboolean): gboolean; cdecl; inline;
    procedure expand_to_path(path: PGtkTreePath); cdecl; inline;
    function get_activate_on_single_click: gboolean; cdecl; inline;
    procedure get_background_area(path: PGtkTreePath; column: PGtkTreeViewColumn; rect: PGdkRectangle); cdecl; inline;
    procedure get_cell_area(path: PGtkTreePath; column: PGtkTreeViewColumn; rect: PGdkRectangle); cdecl; inline;
    function get_column(n: gint): PGtkTreeViewColumn; cdecl; inline;
    function get_columns: PGList; cdecl; inline;
    procedure get_cursor(path: PPGtkTreePath; focus_column: PPGtkTreeViewColumn); cdecl; inline;
    function get_dest_row_at_pos(drag_x: gint; drag_y: gint; path: PPGtkTreePath; pos: PGtkTreeViewDropPosition): gboolean; cdecl; inline;
    procedure get_drag_dest_row(path: PPGtkTreePath; pos: PGtkTreeViewDropPosition); cdecl; inline;
    function get_enable_search: gboolean; cdecl; inline;
    function get_enable_tree_lines: gboolean; cdecl; inline;
    function get_expander_column: PGtkTreeViewColumn; cdecl; inline;
    function get_fixed_height_mode: gboolean; cdecl; inline;
    function get_grid_lines: TGtkTreeViewGridLines; cdecl; inline;
    function get_headers_clickable: gboolean; cdecl; inline;
    function get_headers_visible: gboolean; cdecl; inline;
    function get_hover_expand: gboolean; cdecl; inline;
    function get_hover_selection: gboolean; cdecl; inline;
    function get_level_indentation: gint; cdecl; inline;
    function get_model: PGtkTreeModel; cdecl; inline;
    function get_n_columns: guint; cdecl; inline;
    function get_path_at_pos(x: gint; y: gint; path: PPGtkTreePath; column: PPGtkTreeViewColumn; cell_x: Pgint; cell_y: Pgint): gboolean; cdecl; inline;
    function get_reorderable: gboolean; cdecl; inline;
    function get_row_separator_func: TGtkTreeViewRowSeparatorFunc; cdecl; inline;
    function get_rubber_banding: gboolean; cdecl; inline;
    function get_search_column: gint; cdecl; inline;
    function get_search_entry: PGtkEditable; cdecl; inline;
    function get_search_equal_func: TGtkTreeViewSearchEqualFunc; cdecl; inline;
    function get_selection: PGtkTreeSelection; cdecl; inline;
    function get_show_expanders: gboolean; cdecl; inline;
    function get_tooltip_column: gint; cdecl; inline;
    function get_tooltip_context(x: gint; y: gint; keyboard_tip: gboolean; model: PPGtkTreeModel; path: PPGtkTreePath; iter: PGtkTreeIter): gboolean; cdecl; inline;
    function get_visible_range(start_path: PPGtkTreePath; end_path: PPGtkTreePath): gboolean; cdecl; inline;
    procedure get_visible_rect(visible_rect: PGdkRectangle); cdecl; inline;
    function insert_column(column: PGtkTreeViewColumn; position: gint): gint; cdecl; inline;
    //function insert_column_with_attributes(position: gint; title: Pgchar; cell: PGtkCellRenderer; args: array of const): gint; cdecl; inline;
    function insert_column_with_data_func(position: gint; title: Pgchar; cell: PGtkCellRenderer; func: TGtkTreeCellDataFunc; data: gpointer; dnotify: TGDestroyNotify): gint; cdecl; inline;
    function is_blank_at_pos(x: gint; y: gint; path: PPGtkTreePath; column: PPGtkTreeViewColumn; cell_x: Pgint; cell_y: Pgint): gboolean; cdecl; inline;
    function is_rubber_banding_active: gboolean; cdecl; inline;
    procedure map_expanded_rows(func: TGtkTreeViewMappingFunc; data: gpointer); cdecl; inline;
    procedure move_column_after(column: PGtkTreeViewColumn; base_column: PGtkTreeViewColumn); cdecl; inline;
    function remove_column(column: PGtkTreeViewColumn): gint; cdecl; inline;
    procedure row_activated(path: PGtkTreePath; column: PGtkTreeViewColumn); cdecl; inline;
    function row_expanded(path: PGtkTreePath): gboolean; cdecl; inline;
    procedure scroll_to_cell(path: PGtkTreePath; column: PGtkTreeViewColumn; use_align: gboolean; row_align: gfloat; col_align: gfloat); cdecl; inline;
    procedure scroll_to_point(tree_x: gint; tree_y: gint); cdecl; inline;
    procedure set_activate_on_single_click(single: gboolean); cdecl; inline;
    procedure set_column_drag_function(func: TGtkTreeViewColumnDropFunc; user_data: gpointer; destroy_: TGDestroyNotify); cdecl; inline;
    procedure set_cursor(path: PGtkTreePath; focus_column: PGtkTreeViewColumn; start_editing: gboolean); cdecl; inline;
    procedure set_cursor_on_cell(path: PGtkTreePath; focus_column: PGtkTreeViewColumn; focus_cell: PGtkCellRenderer; start_editing: gboolean); cdecl; inline;
    procedure set_drag_dest_row(path: PGtkTreePath; pos: TGtkTreeViewDropPosition); cdecl; inline;
    procedure set_enable_search(enable_search: gboolean); cdecl; inline;
    procedure set_enable_tree_lines(enabled: gboolean); cdecl; inline;
    procedure set_expander_column(column: PGtkTreeViewColumn); cdecl; inline;
    procedure set_fixed_height_mode(enable: gboolean); cdecl; inline;
    procedure set_grid_lines(grid_lines: TGtkTreeViewGridLines); cdecl; inline;
    procedure set_headers_clickable(setting: gboolean); cdecl; inline;
    procedure set_headers_visible(headers_visible: gboolean); cdecl; inline;
    procedure set_hover_expand(expand: gboolean); cdecl; inline;
    procedure set_hover_selection(hover: gboolean); cdecl; inline;
    procedure set_level_indentation(indentation: gint); cdecl; inline;
    procedure set_model(model: PGtkTreeModel); cdecl; inline;
    procedure set_reorderable(reorderable: gboolean); cdecl; inline;
    procedure set_row_separator_func(func: TGtkTreeViewRowSeparatorFunc; data: gpointer; destroy_: TGDestroyNotify); cdecl; inline;
    procedure set_rubber_banding(enable: gboolean); cdecl; inline;
    procedure set_search_column(column: gint); cdecl; inline;
    procedure set_search_entry(entry: PGtkEditable); cdecl; inline;
    procedure set_search_equal_func(search_equal_func: TGtkTreeViewSearchEqualFunc; search_user_data: gpointer; search_destroy: TGDestroyNotify); cdecl; inline;
    procedure set_show_expanders(enabled: gboolean); cdecl; inline;
    procedure set_tooltip_cell(tooltip: PGtkTooltip; path: PGtkTreePath; column: PGtkTreeViewColumn; cell: PGtkCellRenderer); cdecl; inline;
    procedure set_tooltip_column(column: gint); cdecl; inline;
    procedure set_tooltip_row(tooltip: PGtkTooltip; path: PGtkTreePath); cdecl; inline;
    procedure unset_rows_drag_dest; cdecl; inline;
    procedure unset_rows_drag_source; cdecl; inline;
    property activate_on_single_click: gboolean read get_activate_on_single_click write set_activate_on_single_click;
    //property enable_grid_lines: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_enable_grid_lines  { property is writeable but setter not declared } ;
    property enable_search: gboolean read get_enable_search write set_enable_search;
    property enable_tree_lines: gboolean read get_enable_tree_lines write set_enable_tree_lines;
    property expander_column: PGtkTreeViewColumn read get_expander_column write set_expander_column;
    property fixed_height_mode: gboolean read get_fixed_height_mode write set_fixed_height_mode;
    property headers_clickable: gboolean read get_headers_clickable write set_headers_clickable;
    property headers_visible: gboolean read get_headers_visible write set_headers_visible;
    property hover_expand: gboolean read get_hover_expand write set_hover_expand;
    property hover_selection: gboolean read get_hover_selection write set_hover_selection;
    property level_indentation: gint read get_level_indentation write set_level_indentation;
    property model: PGtkTreeModel read get_model write set_model;
    property reorderable: gboolean read get_reorderable write set_reorderable;
    property rubber_banding: gboolean read get_rubber_banding write set_rubber_banding;
    property search_column: gint read get_search_column write set_search_column;
    property show_expanders: gboolean read get_show_expanders write set_show_expanders;
    property tooltip_column: gint read get_tooltip_column write set_tooltip_column;
  end;

  PPGtkTreeSortableIface = ^PGtkTreeSortableIface;
  PGtkTreeSortableIface = ^TGtkTreeSortableIface;
  TGtkTreeSortableIface = object
    g_iface: TGTypeInterface;
    sort_column_changed: procedure(sortable: PGtkTreeSortable); cdecl;
    get_sort_column_id: function(sortable: PGtkTreeSortable; sort_column_id: Pgint; order: PGtkSortType): gboolean; cdecl;
    set_sort_column_id: procedure(sortable: PGtkTreeSortable; sort_column_id: gint; order: TGtkSortType); cdecl;
    set_sort_func: procedure(sortable: PGtkTreeSortable; sort_column_id: gint; sort_func: TGtkTreeIterCompareFunc; user_data: gpointer; destroy_: TGDestroyNotify); cdecl;
    set_default_sort_func: procedure(sortable: PGtkTreeSortable; sort_func: TGtkTreeIterCompareFunc; user_data: gpointer; destroy_: TGDestroyNotify); cdecl;
    has_default_sort_func: function(sortable: PGtkTreeSortable): gboolean; cdecl;
  end;

  PPGtkTreeStore = ^PGtkTreeStore;
  PGtkTreeStore = ^TGtkTreeStore;

  PPGtkTreeStorePrivate = ^PGtkTreeStorePrivate;
  PGtkTreeStorePrivate = ^TGtkTreeStorePrivate;
  TGtkTreeStore = object(TGObject)
    priv: PGtkTreeStorePrivate;
    //function new(n_columns: gint; args: array of const): PGtkTreeStore; cdecl; inline; static;
    function newv(n_columns: gint; types: PGType): PGtkTreeStore; cdecl; inline; static;
    procedure append(iter: PGtkTreeIter; parent: PGtkTreeIter); cdecl; inline;
    procedure clear; cdecl; inline;
    procedure insert(iter: PGtkTreeIter; parent: PGtkTreeIter; position: gint); cdecl; inline;
    procedure insert_after(iter: PGtkTreeIter; parent: PGtkTreeIter; sibling: PGtkTreeIter); cdecl; inline;
    procedure insert_before(iter: PGtkTreeIter; parent: PGtkTreeIter; sibling: PGtkTreeIter); cdecl; inline;
    //procedure insert_with_values(iter: PGtkTreeIter; parent: PGtkTreeIter; position: gint; args: array of const); cdecl; inline;
    procedure insert_with_valuesv(iter: PGtkTreeIter; parent: PGtkTreeIter; position: gint; columns: Pgint; values: PGValue; n_values: gint); cdecl; inline;
    function is_ancestor(iter: PGtkTreeIter; descendant: PGtkTreeIter): gboolean; cdecl; inline;
    function iter_depth(iter: PGtkTreeIter): gint; cdecl; inline;
    function iter_is_valid(iter: PGtkTreeIter): gboolean; cdecl; inline;
    procedure move_after(iter: PGtkTreeIter; position: PGtkTreeIter); cdecl; inline;
    procedure move_before(iter: PGtkTreeIter; position: PGtkTreeIter); cdecl; inline;
    procedure prepend(iter: PGtkTreeIter; parent: PGtkTreeIter); cdecl; inline;
    function remove(iter: PGtkTreeIter): gboolean; cdecl; inline;
    procedure reorder(parent: PGtkTreeIter; new_order: Pgint); cdecl; inline;
    //procedure set_(iter: PGtkTreeIter; args: array of const); cdecl; inline;
    procedure set_column_types(n_columns: gint; types: PGType); cdecl; inline;
    //procedure set_valist(iter: PGtkTreeIter; var_args: Tva_list); cdecl; inline;
    procedure set_value(iter: PGtkTreeIter; column: gint; value: PGValue); cdecl; inline;
    procedure set_valuesv(iter: PGtkTreeIter; columns: Pgint; values: PGValue; n_values: gint); cdecl; inline;
    procedure swap(a: PGtkTreeIter; b: PGtkTreeIter); cdecl; inline;
  end;

  TGtkTreeStorePrivate = record
  end;



  PPGtkTreeStoreClass = ^PGtkTreeStoreClass;
  PGtkTreeStoreClass = ^TGtkTreeStoreClass;
  TGtkTreeStoreClass = object
    parent_class: TGObjectClass;
    padding: array [0..7] of gpointer;
  end;

  PPGtkTreeViewClass = ^PGtkTreeViewClass;
  PGtkTreeViewClass = ^TGtkTreeViewClass;
  TGtkTreeViewClass = object
    parent_class: TGtkWidgetClass;
    row_activated: procedure(tree_view: PGtkTreeView; path: PGtkTreePath; column: PGtkTreeViewColumn); cdecl;
    test_expand_row: function(tree_view: PGtkTreeView; iter: PGtkTreeIter; path: PGtkTreePath): gboolean; cdecl;
    test_collapse_row: function(tree_view: PGtkTreeView; iter: PGtkTreeIter; path: PGtkTreePath): gboolean; cdecl;
    row_expanded: procedure(tree_view: PGtkTreeView; iter: PGtkTreeIter; path: PGtkTreePath); cdecl;
    row_collapsed: procedure(tree_view: PGtkTreeView; iter: PGtkTreeIter; path: PGtkTreePath); cdecl;
    columns_changed: procedure(tree_view: PGtkTreeView); cdecl;
    cursor_changed: procedure(tree_view: PGtkTreeView); cdecl;
    move_cursor: function(tree_view: PGtkTreeView; step: TGtkMovementStep; count: gint; extend: gboolean; modify: gboolean): gboolean; cdecl;
    select_all: function(tree_view: PGtkTreeView): gboolean; cdecl;
    unselect_all: function(tree_view: PGtkTreeView): gboolean; cdecl;
    select_cursor_row: function(tree_view: PGtkTreeView; start_editing: gboolean): gboolean; cdecl;
    toggle_cursor_row: function(tree_view: PGtkTreeView): gboolean; cdecl;
    expand_collapse_cursor_row: function(tree_view: PGtkTreeView; logical: gboolean; expand: gboolean; open_all: gboolean): gboolean; cdecl;
    select_cursor_parent: function(tree_view: PGtkTreeView): gboolean; cdecl;
    start_interactive_search: function(tree_view: PGtkTreeView): gboolean; cdecl;
    _reserved: array [0..15] of gpointer;
  end;

  PPGtkVideo = ^PGtkVideo;
  PGtkVideo = ^TGtkVideo;
  TGtkVideo = object(TGtkWidget)
    function new: PGtkVideo; cdecl; inline; static;
    function new_for_file(file_: PGFile): PGtkVideo; cdecl; inline; static;
    function new_for_filename(filename: Pgchar): PGtkVideo; cdecl; inline; static;
    function new_for_media_stream(stream: PGtkMediaStream): PGtkVideo; cdecl; inline; static;
    function new_for_resource(resource_path: Pgchar): PGtkVideo; cdecl; inline; static;
    function get_autoplay: gboolean; cdecl; inline;
    function get_file: PGFile; cdecl; inline;
    function get_loop: gboolean; cdecl; inline;
    function get_media_stream: PGtkMediaStream; cdecl; inline;
    procedure set_autoplay(autoplay: gboolean); cdecl; inline;
    procedure set_file(file_: PGFile); cdecl; inline;
    procedure set_filename(filename: Pgchar); cdecl; inline;
    procedure set_loop(loop: gboolean); cdecl; inline;
    procedure set_media_stream(stream: PGtkMediaStream); cdecl; inline;
    procedure set_resource(resource_path: Pgchar); cdecl; inline;
    property autoplay: gboolean read get_autoplay write set_autoplay;
    property file_: PGFile read get_file write set_file;
    property loop: gboolean read get_loop write set_loop;
    property media_stream: PGtkMediaStream read get_media_stream write set_media_stream;
  end;

  PPGtkVideoClass = ^PGtkVideoClass;
  PGtkVideoClass = ^TGtkVideoClass;
  TGtkVideoClass = object
    parent_class: TGtkWidgetClass;
  end;

  PPGtkViewport = ^PGtkViewport;
  PGtkViewport = ^TGtkViewport;
  TGtkViewport = object(TGtkWidget)
    function new(hadjustment: PGtkAdjustment; vadjustment: PGtkAdjustment): PGtkViewport; cdecl; inline; static;
    function get_child: PGtkWidget; cdecl; inline;
    function get_scroll_to_focus: gboolean; cdecl; inline;
    procedure set_child(child: PGtkWidget); cdecl; inline;
    procedure set_scroll_to_focus(scroll_to_focus: gboolean); cdecl; inline;
    property child: PGtkWidget read get_child write set_child;
    property scroll_to_focus: gboolean read get_scroll_to_focus write set_scroll_to_focus;
  end;

  PPGtkVolumeButton = ^PGtkVolumeButton;
  PGtkVolumeButton = ^TGtkVolumeButton;
  TGtkVolumeButton = object(TGtkScaleButton)
    function new: PGtkVolumeButton; cdecl; inline; static;
    //property use_symbolic: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_use_symbolic  { property is writeable but setter not declared } ;
  end;

  TGtkWidgetPrivate = record
  end;



  TGtkWidgetClassPrivate = record
  end;



  PPGtkWidgetPaintable = ^PGtkWidgetPaintable;
  PGtkWidgetPaintable = ^TGtkWidgetPaintable;
  TGtkWidgetPaintable = object(TGObject)
    function new(widget: PGtkWidget): PGtkWidgetPaintable; cdecl; inline; static;
    function get_widget: PGtkWidget; cdecl; inline;
    procedure set_widget(widget: PGtkWidget); cdecl; inline;
    property widget: PGtkWidget read get_widget write set_widget;
  end;

  PPGtkWidgetPaintableClass = ^PGtkWidgetPaintableClass;
  PGtkWidgetPaintableClass = ^TGtkWidgetPaintableClass;
  TGtkWidgetPaintableClass = object
    parent_class: TGObjectClass;
  end;

  PPGtkWindowGroupPrivate = ^PGtkWindowGroupPrivate;
  PGtkWindowGroupPrivate = ^TGtkWindowGroupPrivate;
  TGtkWindowGroup = object(TGObject)
    priv: PGtkWindowGroupPrivate;
    function new: PGtkWindowGroup; cdecl; inline; static;
    procedure add_window(window: PGtkWindow); cdecl; inline;
    function list_windows: PGList; cdecl; inline;
    procedure remove_window(window: PGtkWindow); cdecl; inline;
  end;

  PPGtkWindowControls = ^PGtkWindowControls;
  PGtkWindowControls = ^TGtkWindowControls;
  TGtkWindowControls = object(TGtkWidget)
    function new(side: TGtkPackType): PGtkWindowControls; cdecl; inline; static;
    function get_decoration_layout: Pgchar; cdecl; inline;
    function get_empty: gboolean; cdecl; inline;
    function get_side: TGtkPackType; cdecl; inline;
    procedure set_decoration_layout(layout: Pgchar); cdecl; inline;
    procedure set_side(side: TGtkPackType); cdecl; inline;
    property decoration_layout: Pgchar read get_decoration_layout write set_decoration_layout;
    property empty: gboolean read get_empty ;
    property side: TGtkPackType read get_side write set_side;
  end;

  PPGtkWindowControlsClass = ^PGtkWindowControlsClass;
  PGtkWindowControlsClass = ^TGtkWindowControlsClass;
  TGtkWindowControlsClass = object
    parent_class: TGtkWidgetClass;
  end;

  TGtkWindowGroupPrivate = record
  end;



  PPGtkWindowGroupClass = ^PGtkWindowGroupClass;
  PGtkWindowGroupClass = ^TGtkWindowGroupClass;
  TGtkWindowGroupClass = object
    parent_class: TGObjectClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkWindowHandle = ^PGtkWindowHandle;
  PGtkWindowHandle = ^TGtkWindowHandle;
  TGtkWindowHandle = object(TGtkWidget)
    function new: PGtkWindowHandle; cdecl; inline; static;
    function get_child: PGtkWidget; cdecl; inline;
    procedure set_child(child: PGtkWidget); cdecl; inline;
    property child: PGtkWidget read get_child write set_child;
  end;

  PPGtkWindowHandleClass = ^PGtkWindowHandleClass;
  PGtkWindowHandleClass = ^TGtkWindowHandleClass;
  TGtkWindowHandleClass = object
    parent_class: TGtkWidgetClass;
  end;

function gtk_about_dialog_get_artists(about: PGtkAboutDialog): PPgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_about_dialog_get_artists'{$endif};
function gtk_about_dialog_get_authors(about: PGtkAboutDialog): PPgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_about_dialog_get_authors'{$endif};
function gtk_about_dialog_get_comments(about: PGtkAboutDialog): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_about_dialog_get_comments'{$endif};
function gtk_about_dialog_get_copyright(about: PGtkAboutDialog): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_about_dialog_get_copyright'{$endif};
function gtk_about_dialog_get_documenters(about: PGtkAboutDialog): PPgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_about_dialog_get_documenters'{$endif};
function gtk_about_dialog_get_license(about: PGtkAboutDialog): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_about_dialog_get_license'{$endif};
function gtk_about_dialog_get_license_type(about: PGtkAboutDialog): TGtkLicense; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_about_dialog_get_license_type'{$endif};
function gtk_about_dialog_get_logo(about: PGtkAboutDialog): PGdkPaintable; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_about_dialog_get_logo'{$endif};
function gtk_about_dialog_get_logo_icon_name(about: PGtkAboutDialog): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_about_dialog_get_logo_icon_name'{$endif};
function gtk_about_dialog_get_program_name(about: PGtkAboutDialog): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_about_dialog_get_program_name'{$endif};
function gtk_about_dialog_get_system_information(about: PGtkAboutDialog): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_about_dialog_get_system_information'{$endif};
function gtk_about_dialog_get_translator_credits(about: PGtkAboutDialog): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_about_dialog_get_translator_credits'{$endif};
function gtk_about_dialog_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_about_dialog_get_type' {$endif};
function gtk_about_dialog_get_version(about: PGtkAboutDialog): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_about_dialog_get_version'{$endif};
function gtk_about_dialog_get_website(about: PGtkAboutDialog): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_about_dialog_get_website'{$endif};
function gtk_about_dialog_get_website_label(about: PGtkAboutDialog): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_about_dialog_get_website_label'{$endif};
function gtk_about_dialog_get_wrap_license(about: PGtkAboutDialog): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_about_dialog_get_wrap_license'{$endif};
function gtk_about_dialog_new: PGtkAboutDialog; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_about_dialog_new'{$endif};
function gtk_accelerator_get_default_mod_mask: TGdkModifierType; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_accelerator_get_default_mod_mask'{$endif};
function gtk_accelerator_get_label(accelerator_key: guint; accelerator_mods: TGdkModifierType): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_accelerator_get_label'{$endif};
function gtk_accelerator_get_label_with_keycode(display: PGdkDisplay; accelerator_key: guint; keycode: guint; accelerator_mods: TGdkModifierType): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_accelerator_get_label_with_keycode'{$endif};
function gtk_accelerator_name(accelerator_key: guint; accelerator_mods: TGdkModifierType): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_accelerator_name'{$endif};
function gtk_accelerator_name_with_keycode(display: PGdkDisplay; accelerator_key: guint; keycode: guint; accelerator_mods: TGdkModifierType): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_accelerator_name_with_keycode'{$endif};
function gtk_accelerator_parse(accelerator: Pgchar; accelerator_key: Pguint; accelerator_mods: PGdkModifierType): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_accelerator_parse'{$endif};
function gtk_accelerator_parse_with_keycode(accelerator: Pgchar; display: PGdkDisplay; accelerator_key: Pguint; accelerator_codes: PPguint; accelerator_mods: PGdkModifierType): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_accelerator_parse_with_keycode'{$endif};
function gtk_accelerator_valid(keyval: guint; modifiers: TGdkModifierType): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_accelerator_valid'{$endif};
function gtk_accessible_get_accessible_role(self: PGtkAccessible): TGtkAccessibleRole; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_accessible_get_accessible_role'{$endif};
function gtk_accessible_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_accessible_get_type' {$endif};
function gtk_action_bar_get_center_widget(action_bar: PGtkActionBar): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_action_bar_get_center_widget'{$endif};
function gtk_action_bar_get_revealed(action_bar: PGtkActionBar): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_action_bar_get_revealed'{$endif};
function gtk_action_bar_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_action_bar_get_type' {$endif};
function gtk_action_bar_new: PGtkActionBar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_action_bar_new'{$endif};
function gtk_actionable_get_action_name(actionable: PGtkActionable): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_actionable_get_action_name'{$endif};
function gtk_actionable_get_action_target_value(actionable: PGtkActionable): PGVariant; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_actionable_get_action_target_value'{$endif};
function gtk_actionable_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_actionable_get_type' {$endif};
function gtk_activate_action_get: PGtkActivateAction; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_activate_action_get'{$endif};
function gtk_activate_action_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_activate_action_get_type' {$endif};
function gtk_adjustment_get_lower(adjustment: PGtkAdjustment): gdouble; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_adjustment_get_lower'{$endif};
function gtk_adjustment_get_minimum_increment(adjustment: PGtkAdjustment): gdouble; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_adjustment_get_minimum_increment'{$endif};
function gtk_adjustment_get_page_increment(adjustment: PGtkAdjustment): gdouble; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_adjustment_get_page_increment'{$endif};
function gtk_adjustment_get_page_size(adjustment: PGtkAdjustment): gdouble; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_adjustment_get_page_size'{$endif};
function gtk_adjustment_get_step_increment(adjustment: PGtkAdjustment): gdouble; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_adjustment_get_step_increment'{$endif};
function gtk_adjustment_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_adjustment_get_type' {$endif};
function gtk_adjustment_get_upper(adjustment: PGtkAdjustment): gdouble; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_adjustment_get_upper'{$endif};
function gtk_adjustment_get_value(adjustment: PGtkAdjustment): gdouble; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_adjustment_get_value'{$endif};
function gtk_adjustment_new(value: gdouble; lower: gdouble; upper: gdouble; step_increment: gdouble; page_increment: gdouble; page_size: gdouble): PGtkAdjustment; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_adjustment_new'{$endif};
function gtk_alternative_trigger_get_first(self: PGtkAlternativeTrigger): PGtkShortcutTrigger; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_alternative_trigger_get_first'{$endif};
function gtk_alternative_trigger_get_second(self: PGtkAlternativeTrigger): PGtkShortcutTrigger; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_alternative_trigger_get_second'{$endif};
function gtk_alternative_trigger_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_alternative_trigger_get_type' {$endif};
function gtk_alternative_trigger_new(first: PGtkShortcutTrigger; second: PGtkShortcutTrigger): PGtkAlternativeTrigger; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_alternative_trigger_new'{$endif};
function gtk_any_filter_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_any_filter_get_type' {$endif};
function gtk_any_filter_new: PGtkAnyFilter; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_any_filter_new'{$endif};
function gtk_app_chooser_button_get_heading(self: PGtkAppChooserButton): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_app_chooser_button_get_heading'{$endif};
function gtk_app_chooser_button_get_modal(self: PGtkAppChooserButton): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_app_chooser_button_get_modal'{$endif};
function gtk_app_chooser_button_get_show_default_item(self: PGtkAppChooserButton): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_app_chooser_button_get_show_default_item'{$endif};
function gtk_app_chooser_button_get_show_dialog_item(self: PGtkAppChooserButton): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_app_chooser_button_get_show_dialog_item'{$endif};
function gtk_app_chooser_button_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_app_chooser_button_get_type' {$endif};
function gtk_app_chooser_button_new(content_type: Pgchar): PGtkAppChooserButton; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_app_chooser_button_new'{$endif};
function gtk_app_chooser_dialog_get_heading(self: PGtkAppChooserDialog): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_app_chooser_dialog_get_heading'{$endif};
function gtk_app_chooser_dialog_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_app_chooser_dialog_get_type' {$endif};
function gtk_app_chooser_dialog_get_widget(self: PGtkAppChooserDialog): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_app_chooser_dialog_get_widget'{$endif};
function gtk_app_chooser_dialog_new(parent: PGtkWindow; flags: TGtkDialogFlags; file_: PGFile): PGtkAppChooserDialog; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_app_chooser_dialog_new'{$endif};
function gtk_app_chooser_dialog_new_for_content_type(parent: PGtkWindow; flags: TGtkDialogFlags; content_type: Pgchar): PGtkAppChooserDialog; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_app_chooser_dialog_new_for_content_type'{$endif};
function gtk_app_chooser_get_app_info(self: PGtkAppChooser): PGAppInfo; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_app_chooser_get_app_info'{$endif};
function gtk_app_chooser_get_content_type(self: PGtkAppChooser): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_app_chooser_get_content_type'{$endif};
function gtk_app_chooser_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_app_chooser_get_type' {$endif};
function gtk_app_chooser_widget_get_default_text(self: PGtkAppChooserWidget): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_app_chooser_widget_get_default_text'{$endif};
function gtk_app_chooser_widget_get_show_all(self: PGtkAppChooserWidget): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_app_chooser_widget_get_show_all'{$endif};
function gtk_app_chooser_widget_get_show_default(self: PGtkAppChooserWidget): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_app_chooser_widget_get_show_default'{$endif};
function gtk_app_chooser_widget_get_show_fallback(self: PGtkAppChooserWidget): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_app_chooser_widget_get_show_fallback'{$endif};
function gtk_app_chooser_widget_get_show_other(self: PGtkAppChooserWidget): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_app_chooser_widget_get_show_other'{$endif};
function gtk_app_chooser_widget_get_show_recommended(self: PGtkAppChooserWidget): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_app_chooser_widget_get_show_recommended'{$endif};
function gtk_app_chooser_widget_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_app_chooser_widget_get_type' {$endif};
function gtk_app_chooser_widget_new(content_type: Pgchar): PGtkAppChooserWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_app_chooser_widget_new'{$endif};
function gtk_application_get_accels_for_action(application: PGtkApplication; detailed_action_name: Pgchar): PPgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_application_get_accels_for_action'{$endif};
function gtk_application_get_actions_for_accel(application: PGtkApplication; accel: Pgchar): PPgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_application_get_actions_for_accel'{$endif};
function gtk_application_get_active_window(application: PGtkApplication): PGtkWindow; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_application_get_active_window'{$endif};
function gtk_application_get_menu_by_id(application: PGtkApplication; id: Pgchar): PGMenu; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_application_get_menu_by_id'{$endif};
function gtk_application_get_menubar(application: PGtkApplication): PGMenuModel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_application_get_menubar'{$endif};
function gtk_application_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_application_get_type' {$endif};
function gtk_application_get_window_by_id(application: PGtkApplication; id: guint): PGtkWindow; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_application_get_window_by_id'{$endif};
function gtk_application_get_windows(application: PGtkApplication): PGList; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_application_get_windows'{$endif};
function gtk_application_inhibit(application: PGtkApplication; window: PGtkWindow; flags: TGtkApplicationInhibitFlags; reason: Pgchar): guint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_application_inhibit'{$endif};
function gtk_application_list_action_descriptions(application: PGtkApplication): PPgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_application_list_action_descriptions'{$endif};
function gtk_application_new(application_id: Pgchar; flags: TGApplicationFlags): PGtkApplication; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_application_new'{$endif};
function gtk_application_window_get_help_overlay(window: PGtkApplicationWindow): PGtkShortcutsWindow; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_application_window_get_help_overlay'{$endif};
function gtk_application_window_get_id(window: PGtkApplicationWindow): guint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_application_window_get_id'{$endif};
function gtk_application_window_get_show_menubar(window: PGtkApplicationWindow): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_application_window_get_show_menubar'{$endif};
function gtk_application_window_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_application_window_get_type' {$endif};
function gtk_application_window_new(application: PGtkApplication): PGtkApplicationWindow; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_application_window_new'{$endif};
function gtk_aspect_frame_get_child(self: PGtkAspectFrame): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_aspect_frame_get_child'{$endif};
function gtk_aspect_frame_get_obey_child(self: PGtkAspectFrame): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_aspect_frame_get_obey_child'{$endif};
function gtk_aspect_frame_get_ratio(self: PGtkAspectFrame): gfloat; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_aspect_frame_get_ratio'{$endif};
function gtk_aspect_frame_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_aspect_frame_get_type' {$endif};
function gtk_aspect_frame_get_xalign(self: PGtkAspectFrame): gfloat; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_aspect_frame_get_xalign'{$endif};
function gtk_aspect_frame_get_yalign(self: PGtkAspectFrame): gfloat; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_aspect_frame_get_yalign'{$endif};
function gtk_aspect_frame_new(xalign: gfloat; yalign: gfloat; ratio: gfloat; obey_child: gboolean): PGtkAspectFrame; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_aspect_frame_new'{$endif};
function gtk_assistant_append_page(assistant: PGtkAssistant; page: PGtkWidget): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_assistant_append_page'{$endif};
function gtk_assistant_get_current_page(assistant: PGtkAssistant): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_assistant_get_current_page'{$endif};
function gtk_assistant_get_n_pages(assistant: PGtkAssistant): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_assistant_get_n_pages'{$endif};
function gtk_assistant_get_nth_page(assistant: PGtkAssistant; page_num: gint): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_assistant_get_nth_page'{$endif};
function gtk_assistant_get_page(assistant: PGtkAssistant; child: PGtkWidget): PGtkAssistantPage; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_assistant_get_page'{$endif};
function gtk_assistant_get_page_complete(assistant: PGtkAssistant; page: PGtkWidget): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_assistant_get_page_complete'{$endif};
function gtk_assistant_get_page_title(assistant: PGtkAssistant; page: PGtkWidget): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_assistant_get_page_title'{$endif};
function gtk_assistant_get_page_type(assistant: PGtkAssistant; page: PGtkWidget): TGtkAssistantPageType; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_assistant_get_page_type'{$endif};
function gtk_assistant_get_pages(assistant: PGtkAssistant): PGListModel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_assistant_get_pages'{$endif};
function gtk_assistant_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_assistant_get_type' {$endif};
function gtk_assistant_insert_page(assistant: PGtkAssistant; page: PGtkWidget; position: gint): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_assistant_insert_page'{$endif};
function gtk_assistant_new: PGtkAssistant; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_assistant_new'{$endif};
function gtk_assistant_page_get_child(page: PGtkAssistantPage): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_assistant_page_get_child'{$endif};
function gtk_assistant_page_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_assistant_page_get_type' {$endif};
function gtk_assistant_prepend_page(assistant: PGtkAssistant; page: PGtkWidget): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_assistant_prepend_page'{$endif};
function gtk_at_context_create(accessible_role: TGtkAccessibleRole; accessible: PGtkAccessible; display: PGdkDisplay): PGtkATContext; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_at_context_create'{$endif};
function gtk_at_context_get_accessible(self: PGtkATContext): PGtkAccessible; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_at_context_get_accessible'{$endif};
function gtk_at_context_get_accessible_role(self: PGtkATContext): TGtkAccessibleRole; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_at_context_get_accessible_role'{$endif};
function gtk_at_context_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_at_context_get_type' {$endif};
function gtk_bin_layout_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_bin_layout_get_type' {$endif};
function gtk_bin_layout_new: PGtkBinLayout; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_bin_layout_new'{$endif};
function gtk_bitset_add(self: PGtkBitset; value: guint): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_bitset_add'{$endif};
function gtk_bitset_contains(self: PGtkBitset; value: guint): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_bitset_contains'{$endif};
function gtk_bitset_copy(self: PGtkBitset): PGtkBitset; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_bitset_copy'{$endif};
function gtk_bitset_equals(self: PGtkBitset; other: PGtkBitset): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_bitset_equals'{$endif};
function gtk_bitset_get_maximum(self: PGtkBitset): guint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_bitset_get_maximum'{$endif};
function gtk_bitset_get_minimum(self: PGtkBitset): guint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_bitset_get_minimum'{$endif};
function gtk_bitset_get_nth(self: PGtkBitset; nth: guint): guint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_bitset_get_nth'{$endif};
function gtk_bitset_get_size(self: PGtkBitset): guint64; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_bitset_get_size'{$endif};
function gtk_bitset_get_size_in_range(self: PGtkBitset; first: guint; last: guint): guint64; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_bitset_get_size_in_range'{$endif};
function gtk_bitset_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_bitset_get_type' {$endif};
function gtk_bitset_is_empty(self: PGtkBitset): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_bitset_is_empty'{$endif};
function gtk_bitset_iter_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_bitset_iter_get_type' {$endif};
function gtk_bitset_iter_get_value(iter: PGtkBitsetIter): guint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_bitset_iter_get_value'{$endif};
function gtk_bitset_iter_init_at(iter: PGtkBitsetIter; set_: PGtkBitset; target: guint; value: Pguint): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_bitset_iter_init_at'{$endif};
function gtk_bitset_iter_init_first(iter: PGtkBitsetIter; set_: PGtkBitset; value: Pguint): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_bitset_iter_init_first'{$endif};
function gtk_bitset_iter_init_last(iter: PGtkBitsetIter; set_: PGtkBitset; value: Pguint): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_bitset_iter_init_last'{$endif};
function gtk_bitset_iter_is_valid(iter: PGtkBitsetIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_bitset_iter_is_valid'{$endif};
function gtk_bitset_iter_next(iter: PGtkBitsetIter; value: Pguint): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_bitset_iter_next'{$endif};
function gtk_bitset_iter_previous(iter: PGtkBitsetIter; value: Pguint): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_bitset_iter_previous'{$endif};
function gtk_bitset_new_empty: PGtkBitset; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_bitset_new_empty'{$endif};
function gtk_bitset_new_range(start: guint; n_items: guint): PGtkBitset; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_bitset_new_range'{$endif};
function gtk_bitset_ref(self: PGtkBitset): PGtkBitset; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_bitset_ref'{$endif};
function gtk_bitset_remove(self: PGtkBitset; value: guint): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_bitset_remove'{$endif};
function gtk_bookmark_list_get_attributes(self: PGtkBookmarkList): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_bookmark_list_get_attributes'{$endif};
function gtk_bookmark_list_get_filename(self: PGtkBookmarkList): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_bookmark_list_get_filename'{$endif};
function gtk_bookmark_list_get_io_priority(self: PGtkBookmarkList): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_bookmark_list_get_io_priority'{$endif};
function gtk_bookmark_list_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_bookmark_list_get_type' {$endif};
function gtk_bookmark_list_is_loading(self: PGtkBookmarkList): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_bookmark_list_is_loading'{$endif};
function gtk_bookmark_list_new(filename: Pgchar; attributes: Pgchar): PGtkBookmarkList; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_bookmark_list_new'{$endif};
function gtk_bool_filter_get_expression(self: PGtkBoolFilter): PGtkExpression; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_bool_filter_get_expression'{$endif};
function gtk_bool_filter_get_invert(self: PGtkBoolFilter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_bool_filter_get_invert'{$endif};
function gtk_bool_filter_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_bool_filter_get_type' {$endif};
function gtk_bool_filter_new(expression: PGtkExpression): PGtkBoolFilter; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_bool_filter_new'{$endif};
function gtk_border_copy(border_: PGtkBorder): PGtkBorder; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_border_copy'{$endif};
function gtk_border_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_border_get_type' {$endif};
function gtk_border_new: PGtkBorder; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_border_new'{$endif};
function gtk_box_get_baseline_position(box: PGtkBox): TGtkBaselinePosition; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_box_get_baseline_position'{$endif};
function gtk_box_get_homogeneous(box: PGtkBox): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_box_get_homogeneous'{$endif};
function gtk_box_get_spacing(box: PGtkBox): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_box_get_spacing'{$endif};
function gtk_box_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_box_get_type' {$endif};
function gtk_box_layout_get_baseline_position(box_layout: PGtkBoxLayout): TGtkBaselinePosition; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_box_layout_get_baseline_position'{$endif};
function gtk_box_layout_get_homogeneous(box_layout: PGtkBoxLayout): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_box_layout_get_homogeneous'{$endif};
function gtk_box_layout_get_spacing(box_layout: PGtkBoxLayout): guint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_box_layout_get_spacing'{$endif};
function gtk_box_layout_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_box_layout_get_type' {$endif};
function gtk_box_layout_new(orientation: TGtkOrientation): PGtkBoxLayout; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_box_layout_new'{$endif};
function gtk_box_new(orientation: TGtkOrientation; spacing: gint): PGtkBox; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_box_new'{$endif};
function gtk_buildable_get_buildable_id(buildable: PGtkBuildable): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_buildable_get_buildable_id'{$endif};
function gtk_buildable_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_buildable_get_type' {$endif};
function gtk_buildable_parse_context_get_element(context: PGtkBuildableParseContext): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_buildable_parse_context_get_element'{$endif};
function gtk_buildable_parse_context_get_element_stack(context: PGtkBuildableParseContext): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_buildable_parse_context_get_element_stack'{$endif};
function gtk_buildable_parse_context_pop(context: PGtkBuildableParseContext): gpointer; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_buildable_parse_context_pop'{$endif};
function gtk_builder_add_from_file(builder: PGtkBuilder; filename: Pgchar; error: PPGError): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_builder_add_from_file'{$endif};
function gtk_builder_add_from_resource(builder: PGtkBuilder; resource_path: Pgchar; error: PPGError): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_builder_add_from_resource'{$endif};
function gtk_builder_add_from_string(builder: PGtkBuilder; buffer: Pgchar; length: gssize; error: PPGError): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_builder_add_from_string'{$endif};
function gtk_builder_add_objects_from_file(builder: PGtkBuilder; filename: Pgchar; object_ids: PPgchar; error: PPGError): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_builder_add_objects_from_file'{$endif};
function gtk_builder_add_objects_from_resource(builder: PGtkBuilder; resource_path: Pgchar; object_ids: PPgchar; error: PPGError): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_builder_add_objects_from_resource'{$endif};
function gtk_builder_add_objects_from_string(builder: PGtkBuilder; buffer: Pgchar; length: gssize; object_ids: PPgchar; error: PPGError): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_builder_add_objects_from_string'{$endif};
function gtk_builder_create_closure(builder: PGtkBuilder; function_name: Pgchar; flags: TGtkBuilderClosureFlags; object_: PGObject; error: PPGError): PGClosure; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_builder_create_closure'{$endif};
function gtk_builder_cscope_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_builder_cscope_get_type' {$endif};
function gtk_builder_cscope_lookup_callback_symbol(self: PGtkBuilderCScope; callback_name: Pgchar): TGCallback; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_builder_cscope_lookup_callback_symbol'{$endif};
function gtk_builder_cscope_new: PGtkBuilderCScope; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_builder_cscope_new'{$endif};
function gtk_builder_error_quark: TGQuark; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_builder_error_quark'{$endif};
function gtk_builder_extend_with_template(builder: PGtkBuilder; object_: PGObject; template_type: TGType; buffer: Pgchar; length: gssize; error: PPGError): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_builder_extend_with_template'{$endif};
function gtk_builder_get_current_object(builder: PGtkBuilder): PGObject; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_builder_get_current_object'{$endif};
function gtk_builder_get_object(builder: PGtkBuilder; name: Pgchar): PGObject; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_builder_get_object'{$endif};
function gtk_builder_get_objects(builder: PGtkBuilder): PGSList; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_builder_get_objects'{$endif};
function gtk_builder_get_scope(builder: PGtkBuilder): PGtkBuilderScope; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_builder_get_scope'{$endif};
function gtk_builder_get_translation_domain(builder: PGtkBuilder): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_builder_get_translation_domain'{$endif};
function gtk_builder_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_builder_get_type' {$endif};
function gtk_builder_get_type_from_name(builder: PGtkBuilder; type_name: Pgchar): TGType; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_builder_get_type_from_name'{$endif};
function gtk_builder_list_item_factory_get_bytes(self: PGtkBuilderListItemFactory): PGBytes; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_builder_list_item_factory_get_bytes'{$endif};
function gtk_builder_list_item_factory_get_resource(self: PGtkBuilderListItemFactory): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_builder_list_item_factory_get_resource'{$endif};
function gtk_builder_list_item_factory_get_scope(self: PGtkBuilderListItemFactory): PGtkBuilderScope; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_builder_list_item_factory_get_scope'{$endif};
function gtk_builder_list_item_factory_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_builder_list_item_factory_get_type' {$endif};
function gtk_builder_list_item_factory_new_from_bytes(scope: PGtkBuilderScope; bytes: PGBytes): PGtkBuilderListItemFactory; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_builder_list_item_factory_new_from_bytes'{$endif};
function gtk_builder_list_item_factory_new_from_resource(scope: PGtkBuilderScope; resource_path: Pgchar): PGtkBuilderListItemFactory; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_builder_list_item_factory_new_from_resource'{$endif};
function gtk_builder_new: PGtkBuilder; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_builder_new'{$endif};
function gtk_builder_new_from_file(filename: Pgchar): PGtkBuilder; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_builder_new_from_file'{$endif};
function gtk_builder_new_from_resource(resource_path: Pgchar): PGtkBuilder; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_builder_new_from_resource'{$endif};
function gtk_builder_new_from_string(string_: Pgchar; length: gssize): PGtkBuilder; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_builder_new_from_string'{$endif};
function gtk_builder_scope_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_builder_scope_get_type' {$endif};
function gtk_builder_value_from_string(builder: PGtkBuilder; pspec: PGParamSpec; string_: Pgchar; value: PGValue; error: PPGError): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_builder_value_from_string'{$endif};
function gtk_builder_value_from_string_type(builder: PGtkBuilder; type_: TGType; string_: Pgchar; value: PGValue; error: PPGError): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_builder_value_from_string_type'{$endif};
function gtk_button_get_child(button: PGtkButton): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_button_get_child'{$endif};
function gtk_button_get_has_frame(button: PGtkButton): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_button_get_has_frame'{$endif};
function gtk_button_get_icon_name(button: PGtkButton): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_button_get_icon_name'{$endif};
function gtk_button_get_label(button: PGtkButton): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_button_get_label'{$endif};
function gtk_button_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_button_get_type' {$endif};
function gtk_button_get_use_underline(button: PGtkButton): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_button_get_use_underline'{$endif};
function gtk_button_new: PGtkButton; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_button_new'{$endif};
function gtk_button_new_from_icon_name(icon_name: Pgchar): PGtkButton; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_button_new_from_icon_name'{$endif};
function gtk_button_new_with_label(label_: Pgchar): PGtkButton; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_button_new_with_label'{$endif};
function gtk_button_new_with_mnemonic(label_: Pgchar): PGtkButton; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_button_new_with_mnemonic'{$endif};
function gtk_calendar_get_date(self: PGtkCalendar): PGDateTime; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_calendar_get_date'{$endif};
function gtk_calendar_get_day_is_marked(calendar: PGtkCalendar; day: guint): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_calendar_get_day_is_marked'{$endif};
function gtk_calendar_get_show_day_names(self: PGtkCalendar): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_calendar_get_show_day_names'{$endif};
function gtk_calendar_get_show_heading(self: PGtkCalendar): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_calendar_get_show_heading'{$endif};
function gtk_calendar_get_show_week_numbers(self: PGtkCalendar): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_calendar_get_show_week_numbers'{$endif};
function gtk_calendar_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_calendar_get_type' {$endif};
function gtk_calendar_new: PGtkCalendar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_calendar_new'{$endif};
function gtk_callback_action_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_callback_action_get_type' {$endif};
function gtk_callback_action_new(callback: TGtkShortcutFunc; data: gpointer; destroy_: TGDestroyNotify): PGtkCallbackAction; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_callback_action_new'{$endif};
function gtk_cclosure_expression_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_cclosure_expression_get_type' {$endif};
function gtk_cclosure_expression_new(value_type: TGType; marshal: TGClosureMarshal; n_params: guint; params: PPGtkExpression; callback_func: TGCallback; user_data: gpointer; user_destroy: TGClosureNotify): PGtkCClosureExpression; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cclosure_expression_new'{$endif};
function gtk_cell_area_activate(area: PGtkCellArea; context: PGtkCellAreaContext; widget: PGtkWidget; cell_area: PGdkRectangle; flags: TGtkCellRendererState; edit_only: gboolean): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_activate'{$endif};
function gtk_cell_area_activate_cell(area: PGtkCellArea; widget: PGtkWidget; renderer: PGtkCellRenderer; event: PGdkEvent; cell_area: PGdkRectangle; flags: TGtkCellRendererState): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_activate_cell'{$endif};
function gtk_cell_area_attribute_get_column(area: PGtkCellArea; renderer: PGtkCellRenderer; attribute: Pgchar): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_attribute_get_column'{$endif};
function gtk_cell_area_box_get_spacing(box: PGtkCellAreaBox): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_box_get_spacing'{$endif};
function gtk_cell_area_box_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_cell_area_box_get_type' {$endif};
function gtk_cell_area_box_new: PGtkCellAreaBox; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_box_new'{$endif};
function gtk_cell_area_class_find_cell_property(aclass: PGtkCellAreaClass; property_name: Pgchar): PGParamSpec; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_class_find_cell_property'{$endif};
function gtk_cell_area_class_list_cell_properties(aclass: PGtkCellAreaClass; n_properties: Pguint): PPGParamSpec; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_class_list_cell_properties'{$endif};
function gtk_cell_area_context_get_area(context: PGtkCellAreaContext): PGtkCellArea; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_context_get_area'{$endif};
function gtk_cell_area_context_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_cell_area_context_get_type' {$endif};
function gtk_cell_area_copy_context(area: PGtkCellArea; context: PGtkCellAreaContext): PGtkCellAreaContext; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_copy_context'{$endif};
function gtk_cell_area_create_context(area: PGtkCellArea): PGtkCellAreaContext; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_create_context'{$endif};
function gtk_cell_area_event(area: PGtkCellArea; context: PGtkCellAreaContext; widget: PGtkWidget; event: PGdkEvent; cell_area: PGdkRectangle; flags: TGtkCellRendererState): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_event'{$endif};
function gtk_cell_area_focus(area: PGtkCellArea; direction: TGtkDirectionType): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_focus'{$endif};
function gtk_cell_area_get_cell_at_position(area: PGtkCellArea; context: PGtkCellAreaContext; widget: PGtkWidget; cell_area: PGdkRectangle; x: gint; y: gint; alloc_area: PGdkRectangle): PGtkCellRenderer; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_get_cell_at_position'{$endif};
function gtk_cell_area_get_current_path_string(area: PGtkCellArea): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_get_current_path_string'{$endif};
function gtk_cell_area_get_edit_widget(area: PGtkCellArea): PGtkCellEditable; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_get_edit_widget'{$endif};
function gtk_cell_area_get_edited_cell(area: PGtkCellArea): PGtkCellRenderer; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_get_edited_cell'{$endif};
function gtk_cell_area_get_focus_cell(area: PGtkCellArea): PGtkCellRenderer; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_get_focus_cell'{$endif};
function gtk_cell_area_get_focus_from_sibling(area: PGtkCellArea; renderer: PGtkCellRenderer): PGtkCellRenderer; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_get_focus_from_sibling'{$endif};
function gtk_cell_area_get_focus_siblings(area: PGtkCellArea; renderer: PGtkCellRenderer): PGList; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_get_focus_siblings'{$endif};
function gtk_cell_area_get_request_mode(area: PGtkCellArea): TGtkSizeRequestMode; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_get_request_mode'{$endif};
function gtk_cell_area_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_cell_area_get_type' {$endif};
function gtk_cell_area_has_renderer(area: PGtkCellArea; renderer: PGtkCellRenderer): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_has_renderer'{$endif};
function gtk_cell_area_is_activatable(area: PGtkCellArea): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_is_activatable'{$endif};
function gtk_cell_area_is_focus_sibling(area: PGtkCellArea; renderer: PGtkCellRenderer; sibling: PGtkCellRenderer): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_is_focus_sibling'{$endif};
function gtk_cell_editable_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_cell_editable_get_type' {$endif};
function gtk_cell_layout_get_area(cell_layout: PGtkCellLayout): PGtkCellArea; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_layout_get_area'{$endif};
function gtk_cell_layout_get_cells(cell_layout: PGtkCellLayout): PGList; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_layout_get_cells'{$endif};
function gtk_cell_layout_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_cell_layout_get_type' {$endif};
function gtk_cell_renderer_accel_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_cell_renderer_accel_get_type' {$endif};
function gtk_cell_renderer_accel_new: PGtkCellRendererAccel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_renderer_accel_new'{$endif};
function gtk_cell_renderer_activate(cell: PGtkCellRenderer; event: PGdkEvent; widget: PGtkWidget; path: Pgchar; background_area: PGdkRectangle; cell_area: PGdkRectangle; flags: TGtkCellRendererState): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_renderer_activate'{$endif};
function gtk_cell_renderer_combo_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_cell_renderer_combo_get_type' {$endif};
function gtk_cell_renderer_combo_new: PGtkCellRendererCombo; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_renderer_combo_new'{$endif};
function gtk_cell_renderer_get_is_expanded(cell: PGtkCellRenderer): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_renderer_get_is_expanded'{$endif};
function gtk_cell_renderer_get_is_expander(cell: PGtkCellRenderer): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_renderer_get_is_expander'{$endif};
function gtk_cell_renderer_get_request_mode(cell: PGtkCellRenderer): TGtkSizeRequestMode; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_renderer_get_request_mode'{$endif};
function gtk_cell_renderer_get_sensitive(cell: PGtkCellRenderer): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_renderer_get_sensitive'{$endif};
function gtk_cell_renderer_get_state(cell: PGtkCellRenderer; widget: PGtkWidget; cell_state: TGtkCellRendererState): TGtkStateFlags; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_renderer_get_state'{$endif};
function gtk_cell_renderer_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_cell_renderer_get_type' {$endif};
function gtk_cell_renderer_get_visible(cell: PGtkCellRenderer): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_renderer_get_visible'{$endif};
function gtk_cell_renderer_is_activatable(cell: PGtkCellRenderer): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_renderer_is_activatable'{$endif};
function gtk_cell_renderer_pixbuf_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_cell_renderer_pixbuf_get_type' {$endif};
function gtk_cell_renderer_pixbuf_new: PGtkCellRendererPixbuf; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_renderer_pixbuf_new'{$endif};
function gtk_cell_renderer_progress_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_cell_renderer_progress_get_type' {$endif};
function gtk_cell_renderer_progress_new: PGtkCellRendererProgress; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_renderer_progress_new'{$endif};
function gtk_cell_renderer_spin_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_cell_renderer_spin_get_type' {$endif};
function gtk_cell_renderer_spin_new: PGtkCellRendererSpin; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_renderer_spin_new'{$endif};
function gtk_cell_renderer_spinner_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_cell_renderer_spinner_get_type' {$endif};
function gtk_cell_renderer_spinner_new: PGtkCellRendererSpinner; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_renderer_spinner_new'{$endif};
function gtk_cell_renderer_start_editing(cell: PGtkCellRenderer; event: PGdkEvent; widget: PGtkWidget; path: Pgchar; background_area: PGdkRectangle; cell_area: PGdkRectangle; flags: TGtkCellRendererState): PGtkCellEditable; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_renderer_start_editing'{$endif};
function gtk_cell_renderer_text_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_cell_renderer_text_get_type' {$endif};
function gtk_cell_renderer_text_new: PGtkCellRendererText; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_renderer_text_new'{$endif};
function gtk_cell_renderer_toggle_get_activatable(toggle: PGtkCellRendererToggle): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_renderer_toggle_get_activatable'{$endif};
function gtk_cell_renderer_toggle_get_active(toggle: PGtkCellRendererToggle): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_renderer_toggle_get_active'{$endif};
function gtk_cell_renderer_toggle_get_radio(toggle: PGtkCellRendererToggle): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_renderer_toggle_get_radio'{$endif};
function gtk_cell_renderer_toggle_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_cell_renderer_toggle_get_type' {$endif};
function gtk_cell_renderer_toggle_new: PGtkCellRendererToggle; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_renderer_toggle_new'{$endif};
function gtk_cell_view_get_displayed_row(cell_view: PGtkCellView): PGtkTreePath; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_view_get_displayed_row'{$endif};
function gtk_cell_view_get_draw_sensitive(cell_view: PGtkCellView): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_view_get_draw_sensitive'{$endif};
function gtk_cell_view_get_fit_model(cell_view: PGtkCellView): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_view_get_fit_model'{$endif};
function gtk_cell_view_get_model(cell_view: PGtkCellView): PGtkTreeModel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_view_get_model'{$endif};
function gtk_cell_view_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_cell_view_get_type' {$endif};
function gtk_cell_view_new: PGtkCellView; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_view_new'{$endif};
function gtk_cell_view_new_with_context(area: PGtkCellArea; context: PGtkCellAreaContext): PGtkCellView; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_view_new_with_context'{$endif};
function gtk_cell_view_new_with_markup(markup: Pgchar): PGtkCellView; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_view_new_with_markup'{$endif};
function gtk_cell_view_new_with_text(text: Pgchar): PGtkCellView; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_view_new_with_text'{$endif};
function gtk_cell_view_new_with_texture(texture: PGdkTexture): PGtkCellView; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_view_new_with_texture'{$endif};
function gtk_center_box_get_baseline_position(self: PGtkCenterBox): TGtkBaselinePosition; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_center_box_get_baseline_position'{$endif};
function gtk_center_box_get_center_widget(self: PGtkCenterBox): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_center_box_get_center_widget'{$endif};
function gtk_center_box_get_end_widget(self: PGtkCenterBox): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_center_box_get_end_widget'{$endif};
function gtk_center_box_get_start_widget(self: PGtkCenterBox): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_center_box_get_start_widget'{$endif};
function gtk_center_box_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_center_box_get_type' {$endif};
function gtk_center_box_new: PGtkCenterBox; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_center_box_new'{$endif};
function gtk_center_layout_get_baseline_position(self: PGtkCenterLayout): TGtkBaselinePosition; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_center_layout_get_baseline_position'{$endif};
function gtk_center_layout_get_center_widget(self: PGtkCenterLayout): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_center_layout_get_center_widget'{$endif};
function gtk_center_layout_get_end_widget(self: PGtkCenterLayout): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_center_layout_get_end_widget'{$endif};
function gtk_center_layout_get_orientation(self: PGtkCenterLayout): TGtkOrientation; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_center_layout_get_orientation'{$endif};
function gtk_center_layout_get_start_widget(self: PGtkCenterLayout): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_center_layout_get_start_widget'{$endif};
function gtk_center_layout_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_center_layout_get_type' {$endif};
function gtk_center_layout_new: PGtkCenterLayout; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_center_layout_new'{$endif};
function gtk_check_button_get_active(self: PGtkCheckButton): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_check_button_get_active'{$endif};
function gtk_check_button_get_inconsistent(check_button: PGtkCheckButton): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_check_button_get_inconsistent'{$endif};
function gtk_check_button_get_label(self: PGtkCheckButton): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_check_button_get_label'{$endif};
function gtk_check_button_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_check_button_get_type' {$endif};
function gtk_check_button_get_use_underline(self: PGtkCheckButton): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_check_button_get_use_underline'{$endif};
function gtk_check_button_new: PGtkCheckButton; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_check_button_new'{$endif};
function gtk_check_button_new_with_label(label_: Pgchar): PGtkCheckButton; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_check_button_new_with_label'{$endif};
function gtk_check_button_new_with_mnemonic(label_: Pgchar): PGtkCheckButton; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_check_button_new_with_mnemonic'{$endif};
function gtk_check_version(required_major: guint; required_minor: guint; required_micro: guint): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_check_version'{$endif};
function gtk_closure_expression_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_closure_expression_get_type' {$endif};
function gtk_closure_expression_new(value_type: TGType; closure: PGClosure; n_params: guint; params: PPGtkExpression): PGtkClosureExpression; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_closure_expression_new'{$endif};
function gtk_color_button_get_modal(button: PGtkColorButton): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_color_button_get_modal'{$endif};
function gtk_color_button_get_title(button: PGtkColorButton): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_color_button_get_title'{$endif};
function gtk_color_button_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_color_button_get_type' {$endif};
function gtk_color_button_new: PGtkColorButton; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_color_button_new'{$endif};
function gtk_color_button_new_with_rgba(rgba: PGdkRGBA): PGtkColorButton; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_color_button_new_with_rgba'{$endif};
function gtk_color_chooser_dialog_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_color_chooser_dialog_get_type' {$endif};
function gtk_color_chooser_dialog_new(title: Pgchar; parent: PGtkWindow): PGtkColorChooserDialog; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_color_chooser_dialog_new'{$endif};
function gtk_color_chooser_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_color_chooser_get_type' {$endif};
function gtk_color_chooser_get_use_alpha(chooser: PGtkColorChooser): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_color_chooser_get_use_alpha'{$endif};
function gtk_color_chooser_widget_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_color_chooser_widget_get_type' {$endif};
function gtk_color_chooser_widget_new: PGtkColorChooserWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_color_chooser_widget_new'{$endif};
function gtk_column_view_column_get_column_view(self: PGtkColumnViewColumn): PGtkColumnView; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_column_view_column_get_column_view'{$endif};
function gtk_column_view_column_get_expand(self: PGtkColumnViewColumn): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_column_view_column_get_expand'{$endif};
function gtk_column_view_column_get_factory(self: PGtkColumnViewColumn): PGtkListItemFactory; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_column_view_column_get_factory'{$endif};
function gtk_column_view_column_get_fixed_width(self: PGtkColumnViewColumn): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_column_view_column_get_fixed_width'{$endif};
function gtk_column_view_column_get_header_menu(self: PGtkColumnViewColumn): PGMenuModel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_column_view_column_get_header_menu'{$endif};
function gtk_column_view_column_get_resizable(self: PGtkColumnViewColumn): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_column_view_column_get_resizable'{$endif};
function gtk_column_view_column_get_sorter(self: PGtkColumnViewColumn): PGtkSorter; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_column_view_column_get_sorter'{$endif};
function gtk_column_view_column_get_title(self: PGtkColumnViewColumn): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_column_view_column_get_title'{$endif};
function gtk_column_view_column_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_column_view_column_get_type' {$endif};
function gtk_column_view_column_get_visible(self: PGtkColumnViewColumn): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_column_view_column_get_visible'{$endif};
function gtk_column_view_column_new(title: Pgchar; factory: PGtkListItemFactory): PGtkColumnViewColumn; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_column_view_column_new'{$endif};
function gtk_column_view_get_columns(self: PGtkColumnView): PGListModel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_column_view_get_columns'{$endif};
function gtk_column_view_get_enable_rubberband(self: PGtkColumnView): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_column_view_get_enable_rubberband'{$endif};
function gtk_column_view_get_model(self: PGtkColumnView): PGtkSelectionModel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_column_view_get_model'{$endif};
function gtk_column_view_get_reorderable(self: PGtkColumnView): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_column_view_get_reorderable'{$endif};
function gtk_column_view_get_show_column_separators(self: PGtkColumnView): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_column_view_get_show_column_separators'{$endif};
function gtk_column_view_get_show_row_separators(self: PGtkColumnView): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_column_view_get_show_row_separators'{$endif};
function gtk_column_view_get_single_click_activate(self: PGtkColumnView): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_column_view_get_single_click_activate'{$endif};
function gtk_column_view_get_sorter(self: PGtkColumnView): PGtkSorter; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_column_view_get_sorter'{$endif};
function gtk_column_view_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_column_view_get_type' {$endif};
function gtk_column_view_new(model: PGtkSelectionModel): PGtkColumnView; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_column_view_new'{$endif};
function gtk_combo_box_get_active(combo_box: PGtkComboBox): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_combo_box_get_active'{$endif};
function gtk_combo_box_get_active_id(combo_box: PGtkComboBox): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_combo_box_get_active_id'{$endif};
function gtk_combo_box_get_active_iter(combo_box: PGtkComboBox; iter: PGtkTreeIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_combo_box_get_active_iter'{$endif};
function gtk_combo_box_get_button_sensitivity(combo_box: PGtkComboBox): TGtkSensitivityType; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_combo_box_get_button_sensitivity'{$endif};
function gtk_combo_box_get_child(combo_box: PGtkComboBox): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_combo_box_get_child'{$endif};
function gtk_combo_box_get_entry_text_column(combo_box: PGtkComboBox): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_combo_box_get_entry_text_column'{$endif};
function gtk_combo_box_get_has_entry(combo_box: PGtkComboBox): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_combo_box_get_has_entry'{$endif};
function gtk_combo_box_get_id_column(combo_box: PGtkComboBox): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_combo_box_get_id_column'{$endif};
function gtk_combo_box_get_model(combo_box: PGtkComboBox): PGtkTreeModel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_combo_box_get_model'{$endif};
function gtk_combo_box_get_popup_fixed_width(combo_box: PGtkComboBox): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_combo_box_get_popup_fixed_width'{$endif};
function gtk_combo_box_get_row_separator_func(combo_box: PGtkComboBox): TGtkTreeViewRowSeparatorFunc; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_combo_box_get_row_separator_func'{$endif};
function gtk_combo_box_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_combo_box_get_type' {$endif};
function gtk_combo_box_new: PGtkComboBox; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_combo_box_new'{$endif};
function gtk_combo_box_new_with_entry: PGtkComboBox; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_combo_box_new_with_entry'{$endif};
function gtk_combo_box_new_with_model(model: PGtkTreeModel): PGtkComboBox; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_combo_box_new_with_model'{$endif};
function gtk_combo_box_new_with_model_and_entry(model: PGtkTreeModel): PGtkComboBox; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_combo_box_new_with_model_and_entry'{$endif};
function gtk_combo_box_set_active_id(combo_box: PGtkComboBox; active_id: Pgchar): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_combo_box_set_active_id'{$endif};
function gtk_combo_box_text_get_active_text(combo_box: PGtkComboBoxText): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_combo_box_text_get_active_text'{$endif};
function gtk_combo_box_text_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_combo_box_text_get_type' {$endif};
function gtk_combo_box_text_new: PGtkComboBoxText; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_combo_box_text_new'{$endif};
function gtk_combo_box_text_new_with_entry: PGtkComboBoxText; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_combo_box_text_new_with_entry'{$endif};
function gtk_constant_expression_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_constant_expression_get_type' {$endif};
function gtk_constant_expression_get_value(expression: PGtkConstantExpression): PGValue; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_constant_expression_get_value'{$endif};
function gtk_constant_expression_new(value_type: TGType; args: array of const): PGtkConstantExpression; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_constant_expression_new'{$endif};
function gtk_constant_expression_new_for_value(value: PGValue): PGtkConstantExpression; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_constant_expression_new_for_value'{$endif};
function gtk_constraint_get_constant(constraint: PGtkConstraint): gdouble; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_constraint_get_constant'{$endif};
function gtk_constraint_get_multiplier(constraint: PGtkConstraint): gdouble; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_constraint_get_multiplier'{$endif};
function gtk_constraint_get_relation(constraint: PGtkConstraint): TGtkConstraintRelation; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_constraint_get_relation'{$endif};
function gtk_constraint_get_source(constraint: PGtkConstraint): PGtkConstraintTarget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_constraint_get_source'{$endif};
function gtk_constraint_get_source_attribute(constraint: PGtkConstraint): TGtkConstraintAttribute; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_constraint_get_source_attribute'{$endif};
function gtk_constraint_get_strength(constraint: PGtkConstraint): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_constraint_get_strength'{$endif};
function gtk_constraint_get_target(constraint: PGtkConstraint): PGtkConstraintTarget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_constraint_get_target'{$endif};
function gtk_constraint_get_target_attribute(constraint: PGtkConstraint): TGtkConstraintAttribute; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_constraint_get_target_attribute'{$endif};
function gtk_constraint_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_constraint_get_type' {$endif};
function gtk_constraint_guide_get_name(guide: PGtkConstraintGuide): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_constraint_guide_get_name'{$endif};
function gtk_constraint_guide_get_strength(guide: PGtkConstraintGuide): TGtkConstraintStrength; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_constraint_guide_get_strength'{$endif};
function gtk_constraint_guide_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_constraint_guide_get_type' {$endif};
function gtk_constraint_guide_new: PGtkConstraintGuide; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_constraint_guide_new'{$endif};
function gtk_constraint_is_attached(constraint: PGtkConstraint): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_constraint_is_attached'{$endif};
function gtk_constraint_is_constant(constraint: PGtkConstraint): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_constraint_is_constant'{$endif};
function gtk_constraint_is_required(constraint: PGtkConstraint): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_constraint_is_required'{$endif};
function gtk_constraint_layout_add_constraints_from_description(layout: PGtkConstraintLayout; lines: PPgchar; n_lines: gsize; hspacing: gint; vspacing: gint; error: PPGError; first_view: Pgchar; args: array of const): PGList; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_constraint_layout_add_constraints_from_description'{$endif};
function gtk_constraint_layout_add_constraints_from_descriptionv(layout: PGtkConstraintLayout; lines: PPgchar; n_lines: gsize; hspacing: gint; vspacing: gint; views: PGHashTable; error: PPGError): PGList; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_constraint_layout_add_constraints_from_descriptionv'{$endif};
function gtk_constraint_layout_child_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_constraint_layout_child_get_type' {$endif};
function gtk_constraint_layout_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_constraint_layout_get_type' {$endif};
function gtk_constraint_layout_new: PGtkConstraintLayout; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_constraint_layout_new'{$endif};
function gtk_constraint_layout_observe_constraints(layout: PGtkConstraintLayout): PGListModel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_constraint_layout_observe_constraints'{$endif};
function gtk_constraint_layout_observe_guides(layout: PGtkConstraintLayout): PGListModel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_constraint_layout_observe_guides'{$endif};
function gtk_constraint_new(target: PGtkConstraintTarget; target_attribute: TGtkConstraintAttribute; relation: TGtkConstraintRelation; source: PGtkConstraintTarget; source_attribute: TGtkConstraintAttribute; multiplier: gdouble; constant: gdouble; strength: gint): PGtkConstraint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_constraint_new'{$endif};
function gtk_constraint_new_constant(target: PGtkConstraintTarget; target_attribute: TGtkConstraintAttribute; relation: TGtkConstraintRelation; constant: gdouble; strength: gint): PGtkConstraint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_constraint_new_constant'{$endif};
function gtk_constraint_target_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_constraint_target_get_type' {$endif};
function gtk_constraint_vfl_parser_error_quark: TGQuark; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_constraint_vfl_parser_error_quark'{$endif};
function gtk_css_parser_error_quark: TGQuark; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_css_parser_error_quark'{$endif};
function gtk_css_parser_warning_quark: TGQuark; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_css_parser_warning_quark'{$endif};
function gtk_css_provider_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_css_provider_get_type' {$endif};
function gtk_css_provider_new: PGtkCssProvider; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_css_provider_new'{$endif};
function gtk_css_provider_to_string(provider: PGtkCssProvider): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_css_provider_to_string'{$endif};
function gtk_css_section_get_end_location(section: PGtkCssSection): PGtkCssLocation; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_css_section_get_end_location'{$endif};
function gtk_css_section_get_file(section: PGtkCssSection): PGFile; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_css_section_get_file'{$endif};
function gtk_css_section_get_parent(section: PGtkCssSection): PGtkCssSection; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_css_section_get_parent'{$endif};
function gtk_css_section_get_start_location(section: PGtkCssSection): PGtkCssLocation; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_css_section_get_start_location'{$endif};
function gtk_css_section_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_css_section_get_type' {$endif};
function gtk_css_section_new(file_: PGFile; start: PGtkCssLocation; end_: PGtkCssLocation): PGtkCssSection; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_css_section_new'{$endif};
function gtk_css_section_ref(section: PGtkCssSection): PGtkCssSection; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_css_section_ref'{$endif};
function gtk_css_section_to_string(section: PGtkCssSection): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_css_section_to_string'{$endif};
function gtk_custom_filter_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_custom_filter_get_type' {$endif};
function gtk_custom_filter_new(match_func: TGtkCustomFilterFunc; user_data: gpointer; user_destroy: TGDestroyNotify): PGtkCustomFilter; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_custom_filter_new'{$endif};
function gtk_custom_layout_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_custom_layout_get_type' {$endif};
function gtk_custom_layout_new(request_mode: TGtkCustomRequestModeFunc; measure: TGtkCustomMeasureFunc; allocate: TGtkCustomAllocateFunc): PGtkCustomLayout; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_custom_layout_new'{$endif};
function gtk_custom_sorter_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_custom_sorter_get_type' {$endif};
function gtk_custom_sorter_new(sort_func: TGCompareDataFunc; user_data: gpointer; user_destroy: TGDestroyNotify): PGtkCustomSorter; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_custom_sorter_new'{$endif};
function gtk_dialog_add_button(dialog: PGtkDialog; button_text: Pgchar; response_id: gint): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_dialog_add_button'{$endif};
function gtk_dialog_get_content_area(dialog: PGtkDialog): PGtkBox; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_dialog_get_content_area'{$endif};
function gtk_dialog_get_header_bar(dialog: PGtkDialog): PGtkHeaderBar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_dialog_get_header_bar'{$endif};
function gtk_dialog_get_response_for_widget(dialog: PGtkDialog; widget: PGtkWidget): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_dialog_get_response_for_widget'{$endif};
function gtk_dialog_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_dialog_get_type' {$endif};
function gtk_dialog_get_widget_for_response(dialog: PGtkDialog; response_id: gint): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_dialog_get_widget_for_response'{$endif};
function gtk_dialog_new: PGtkDialog; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_dialog_new'{$endif};
function gtk_dialog_new_with_buttons(title: Pgchar; parent: PGtkWindow; flags: TGtkDialogFlags; first_button_text: Pgchar; args: array of const): PGtkDialog; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_dialog_new_with_buttons'{$endif};
function gtk_directory_list_get_attributes(self: PGtkDirectoryList): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_directory_list_get_attributes'{$endif};
function gtk_directory_list_get_error(self: PGtkDirectoryList): PGError; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_directory_list_get_error'{$endif};
function gtk_directory_list_get_file(self: PGtkDirectoryList): PGFile; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_directory_list_get_file'{$endif};
function gtk_directory_list_get_io_priority(self: PGtkDirectoryList): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_directory_list_get_io_priority'{$endif};
function gtk_directory_list_get_monitored(self: PGtkDirectoryList): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_directory_list_get_monitored'{$endif};
function gtk_directory_list_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_directory_list_get_type' {$endif};
function gtk_directory_list_is_loading(self: PGtkDirectoryList): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_directory_list_is_loading'{$endif};
function gtk_directory_list_new(attributes: Pgchar; file_: PGFile): PGtkDirectoryList; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_directory_list_new'{$endif};
function gtk_distribute_natural_allocation(extra_space: gint; n_requested_sizes: guint; sizes: PGtkRequestedSize): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_distribute_natural_allocation'{$endif};
function gtk_drag_check_threshold(widget: PGtkWidget; start_x: gint; start_y: gint; current_x: gint; current_y: gint): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drag_check_threshold'{$endif};
function gtk_drag_icon_create_widget_for_value(value: PGValue): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drag_icon_create_widget_for_value'{$endif};
function gtk_drag_icon_get_child(self: PGtkDragIcon): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drag_icon_get_child'{$endif};
function gtk_drag_icon_get_for_drag(drag: PGdkDrag): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drag_icon_get_for_drag'{$endif};
function gtk_drag_icon_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_drag_icon_get_type' {$endif};
function gtk_drag_source_get_actions(source: PGtkDragSource): TGdkDragAction; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drag_source_get_actions'{$endif};
function gtk_drag_source_get_content(source: PGtkDragSource): PGdkContentProvider; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drag_source_get_content'{$endif};
function gtk_drag_source_get_drag(source: PGtkDragSource): PGdkDrag; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drag_source_get_drag'{$endif};
function gtk_drag_source_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_drag_source_get_type' {$endif};
function gtk_drag_source_new: PGtkDragSource; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drag_source_new'{$endif};
function gtk_drawing_area_get_content_height(self: PGtkDrawingArea): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drawing_area_get_content_height'{$endif};
function gtk_drawing_area_get_content_width(self: PGtkDrawingArea): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drawing_area_get_content_width'{$endif};
function gtk_drawing_area_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_drawing_area_get_type' {$endif};
function gtk_drawing_area_new: PGtkDrawingArea; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drawing_area_new'{$endif};
function gtk_drop_controller_motion_contains_pointer(self: PGtkDropControllerMotion): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drop_controller_motion_contains_pointer'{$endif};
function gtk_drop_controller_motion_get_drop(self: PGtkDropControllerMotion): PGdkDrop; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drop_controller_motion_get_drop'{$endif};
function gtk_drop_controller_motion_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_drop_controller_motion_get_type' {$endif};
function gtk_drop_controller_motion_is_pointer(self: PGtkDropControllerMotion): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drop_controller_motion_is_pointer'{$endif};
function gtk_drop_controller_motion_new: PGtkDropControllerMotion; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drop_controller_motion_new'{$endif};
function gtk_drop_down_get_enable_search(self: PGtkDropDown): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drop_down_get_enable_search'{$endif};
function gtk_drop_down_get_expression(self: PGtkDropDown): PGtkExpression; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drop_down_get_expression'{$endif};
function gtk_drop_down_get_factory(self: PGtkDropDown): PGtkListItemFactory; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drop_down_get_factory'{$endif};
function gtk_drop_down_get_list_factory(self: PGtkDropDown): PGtkListItemFactory; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drop_down_get_list_factory'{$endif};
function gtk_drop_down_get_model(self: PGtkDropDown): PGListModel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drop_down_get_model'{$endif};
function gtk_drop_down_get_selected(self: PGtkDropDown): guint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drop_down_get_selected'{$endif};
function gtk_drop_down_get_selected_item(self: PGtkDropDown): PGObject; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drop_down_get_selected_item'{$endif};
function gtk_drop_down_get_show_arrow(self: PGtkDropDown): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drop_down_get_show_arrow'{$endif};
function gtk_drop_down_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_drop_down_get_type' {$endif};
function gtk_drop_down_new(model: PGListModel; expression: PGtkExpression): PGtkDropDown; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drop_down_new'{$endif};
function gtk_drop_down_new_from_strings(strings: PPgchar): PGtkDropDown; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drop_down_new_from_strings'{$endif};
function gtk_drop_target_async_get_actions(self: PGtkDropTargetAsync): TGdkDragAction; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drop_target_async_get_actions'{$endif};
function gtk_drop_target_async_get_formats(self: PGtkDropTargetAsync): PGdkContentFormats; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drop_target_async_get_formats'{$endif};
function gtk_drop_target_async_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_drop_target_async_get_type' {$endif};
function gtk_drop_target_async_new(formats: PGdkContentFormats; actions: TGdkDragAction): PGtkDropTargetAsync; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drop_target_async_new'{$endif};
function gtk_drop_target_get_actions(self: PGtkDropTarget): TGdkDragAction; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drop_target_get_actions'{$endif};
function gtk_drop_target_get_current_drop(self: PGtkDropTarget): PGdkDrop; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drop_target_get_current_drop'{$endif};
function gtk_drop_target_get_formats(self: PGtkDropTarget): PGdkContentFormats; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drop_target_get_formats'{$endif};
function gtk_drop_target_get_gtypes(self: PGtkDropTarget; n_types: Pgsize): PGType; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drop_target_get_gtypes'{$endif};
function gtk_drop_target_get_preload(self: PGtkDropTarget): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drop_target_get_preload'{$endif};
function gtk_drop_target_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_drop_target_get_type' {$endif};
function gtk_drop_target_get_value(self: PGtkDropTarget): PGValue; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drop_target_get_value'{$endif};
function gtk_drop_target_new(type_: TGType; actions: TGdkDragAction): PGtkDropTarget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drop_target_new'{$endif};
function gtk_editable_delegate_get_property(object_: PGObject; prop_id: guint; value: PGValue; pspec: PGParamSpec): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_editable_delegate_get_property'{$endif};
function gtk_editable_delegate_set_property(object_: PGObject; prop_id: guint; value: PGValue; pspec: PGParamSpec): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_editable_delegate_set_property'{$endif};
function gtk_editable_get_alignment(editable: PGtkEditable): gfloat; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_editable_get_alignment'{$endif};
function gtk_editable_get_chars(editable: PGtkEditable; start_pos: gint; end_pos: gint): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_editable_get_chars'{$endif};
function gtk_editable_get_delegate(editable: PGtkEditable): PGtkEditable; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_editable_get_delegate'{$endif};
function gtk_editable_get_editable(editable: PGtkEditable): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_editable_get_editable'{$endif};
function gtk_editable_get_enable_undo(editable: PGtkEditable): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_editable_get_enable_undo'{$endif};
function gtk_editable_get_max_width_chars(editable: PGtkEditable): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_editable_get_max_width_chars'{$endif};
function gtk_editable_get_position(editable: PGtkEditable): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_editable_get_position'{$endif};
function gtk_editable_get_selection_bounds(editable: PGtkEditable; start_pos: Pgint; end_pos: Pgint): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_editable_get_selection_bounds'{$endif};
function gtk_editable_get_text(editable: PGtkEditable): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_editable_get_text'{$endif};
function gtk_editable_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_editable_get_type' {$endif};
function gtk_editable_get_width_chars(editable: PGtkEditable): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_editable_get_width_chars'{$endif};
function gtk_editable_install_properties(object_class: PGObjectClass; first_prop: guint): guint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_editable_install_properties'{$endif};
function gtk_editable_label_get_editing(self: PGtkEditableLabel): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_editable_label_get_editing'{$endif};
function gtk_editable_label_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_editable_label_get_type' {$endif};
function gtk_editable_label_new(str: Pgchar): PGtkEditableLabel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_editable_label_new'{$endif};
function gtk_emoji_chooser_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_emoji_chooser_get_type' {$endif};
function gtk_emoji_chooser_new: PGtkEmojiChooser; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_emoji_chooser_new'{$endif};
function gtk_entry_buffer_delete_text(buffer: PGtkEntryBuffer; position: guint; n_chars: gint): guint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_buffer_delete_text'{$endif};
function gtk_entry_buffer_get_bytes(buffer: PGtkEntryBuffer): gsize; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_buffer_get_bytes'{$endif};
function gtk_entry_buffer_get_length(buffer: PGtkEntryBuffer): guint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_buffer_get_length'{$endif};
function gtk_entry_buffer_get_max_length(buffer: PGtkEntryBuffer): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_buffer_get_max_length'{$endif};
function gtk_entry_buffer_get_text(buffer: PGtkEntryBuffer): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_buffer_get_text'{$endif};
function gtk_entry_buffer_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_entry_buffer_get_type' {$endif};
function gtk_entry_buffer_insert_text(buffer: PGtkEntryBuffer; position: guint; chars: Pgchar; n_chars: gint): guint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_buffer_insert_text'{$endif};
function gtk_entry_buffer_new(initial_chars: Pgchar; n_initial_chars: gint): PGtkEntryBuffer; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_buffer_new'{$endif};
function gtk_entry_completion_compute_prefix(completion: PGtkEntryCompletion; key: Pgchar): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_completion_compute_prefix'{$endif};
function gtk_entry_completion_get_completion_prefix(completion: PGtkEntryCompletion): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_completion_get_completion_prefix'{$endif};
function gtk_entry_completion_get_entry(completion: PGtkEntryCompletion): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_completion_get_entry'{$endif};
function gtk_entry_completion_get_inline_completion(completion: PGtkEntryCompletion): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_completion_get_inline_completion'{$endif};
function gtk_entry_completion_get_inline_selection(completion: PGtkEntryCompletion): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_completion_get_inline_selection'{$endif};
function gtk_entry_completion_get_minimum_key_length(completion: PGtkEntryCompletion): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_completion_get_minimum_key_length'{$endif};
function gtk_entry_completion_get_model(completion: PGtkEntryCompletion): PGtkTreeModel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_completion_get_model'{$endif};
function gtk_entry_completion_get_popup_completion(completion: PGtkEntryCompletion): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_completion_get_popup_completion'{$endif};
function gtk_entry_completion_get_popup_set_width(completion: PGtkEntryCompletion): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_completion_get_popup_set_width'{$endif};
function gtk_entry_completion_get_popup_single_match(completion: PGtkEntryCompletion): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_completion_get_popup_single_match'{$endif};
function gtk_entry_completion_get_text_column(completion: PGtkEntryCompletion): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_completion_get_text_column'{$endif};
function gtk_entry_completion_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_entry_completion_get_type' {$endif};
function gtk_entry_completion_new: PGtkEntryCompletion; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_completion_new'{$endif};
function gtk_entry_completion_new_with_area(area: PGtkCellArea): PGtkEntryCompletion; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_completion_new_with_area'{$endif};
function gtk_entry_get_activates_default(entry: PGtkEntry): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_get_activates_default'{$endif};
function gtk_entry_get_alignment(entry: PGtkEntry): gfloat; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_get_alignment'{$endif};
function gtk_entry_get_attributes(entry: PGtkEntry): PPangoAttrList; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_get_attributes'{$endif};
function gtk_entry_get_buffer(entry: PGtkEntry): PGtkEntryBuffer; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_get_buffer'{$endif};
function gtk_entry_get_completion(entry: PGtkEntry): PGtkEntryCompletion; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_get_completion'{$endif};
function gtk_entry_get_current_icon_drag_source(entry: PGtkEntry): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_get_current_icon_drag_source'{$endif};
function gtk_entry_get_extra_menu(entry: PGtkEntry): PGMenuModel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_get_extra_menu'{$endif};
function gtk_entry_get_has_frame(entry: PGtkEntry): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_get_has_frame'{$endif};
function gtk_entry_get_icon_activatable(entry: PGtkEntry; icon_pos: TGtkEntryIconPosition): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_get_icon_activatable'{$endif};
function gtk_entry_get_icon_at_pos(entry: PGtkEntry; x: gint; y: gint): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_get_icon_at_pos'{$endif};
function gtk_entry_get_icon_gicon(entry: PGtkEntry; icon_pos: TGtkEntryIconPosition): PGIcon; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_get_icon_gicon'{$endif};
function gtk_entry_get_icon_name(entry: PGtkEntry; icon_pos: TGtkEntryIconPosition): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_get_icon_name'{$endif};
function gtk_entry_get_icon_paintable(entry: PGtkEntry; icon_pos: TGtkEntryIconPosition): PGdkPaintable; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_get_icon_paintable'{$endif};
function gtk_entry_get_icon_sensitive(entry: PGtkEntry; icon_pos: TGtkEntryIconPosition): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_get_icon_sensitive'{$endif};
function gtk_entry_get_icon_storage_type(entry: PGtkEntry; icon_pos: TGtkEntryIconPosition): TGtkImageType; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_get_icon_storage_type'{$endif};
function gtk_entry_get_icon_tooltip_markup(entry: PGtkEntry; icon_pos: TGtkEntryIconPosition): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_get_icon_tooltip_markup'{$endif};
function gtk_entry_get_icon_tooltip_text(entry: PGtkEntry; icon_pos: TGtkEntryIconPosition): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_get_icon_tooltip_text'{$endif};
function gtk_entry_get_input_hints(entry: PGtkEntry): TGtkInputHints; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_get_input_hints'{$endif};
function gtk_entry_get_input_purpose(entry: PGtkEntry): TGtkInputPurpose; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_get_input_purpose'{$endif};
function gtk_entry_get_invisible_char(entry: PGtkEntry): gunichar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_get_invisible_char'{$endif};
function gtk_entry_get_max_length(entry: PGtkEntry): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_get_max_length'{$endif};
function gtk_entry_get_overwrite_mode(entry: PGtkEntry): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_get_overwrite_mode'{$endif};
function gtk_entry_get_placeholder_text(entry: PGtkEntry): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_get_placeholder_text'{$endif};
function gtk_entry_get_progress_fraction(entry: PGtkEntry): gdouble; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_get_progress_fraction'{$endif};
function gtk_entry_get_progress_pulse_step(entry: PGtkEntry): gdouble; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_get_progress_pulse_step'{$endif};
function gtk_entry_get_tabs(entry: PGtkEntry): PPangoTabArray; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_get_tabs'{$endif};
function gtk_entry_get_text_length(entry: PGtkEntry): guint16; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_get_text_length'{$endif};
function gtk_entry_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_entry_get_type' {$endif};
function gtk_entry_get_visibility(entry: PGtkEntry): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_get_visibility'{$endif};
function gtk_entry_grab_focus_without_selecting(entry: PGtkEntry): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_grab_focus_without_selecting'{$endif};
function gtk_entry_new: PGtkEntry; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_new'{$endif};
function gtk_entry_new_with_buffer(buffer: PGtkEntryBuffer): PGtkEntry; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_new_with_buffer'{$endif};
function gtk_event_controller_focus_contains_focus(self: PGtkEventControllerFocus): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_event_controller_focus_contains_focus'{$endif};
function gtk_event_controller_focus_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_event_controller_focus_get_type' {$endif};
function gtk_event_controller_focus_is_focus(self: PGtkEventControllerFocus): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_event_controller_focus_is_focus'{$endif};
function gtk_event_controller_focus_new: PGtkEventControllerFocus; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_event_controller_focus_new'{$endif};
function gtk_event_controller_get_current_event(controller: PGtkEventController): PGdkEvent; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_event_controller_get_current_event'{$endif};
function gtk_event_controller_get_current_event_device(controller: PGtkEventController): PGdkDevice; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_event_controller_get_current_event_device'{$endif};
function gtk_event_controller_get_current_event_state(controller: PGtkEventController): TGdkModifierType; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_event_controller_get_current_event_state'{$endif};
function gtk_event_controller_get_current_event_time(controller: PGtkEventController): guint32; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_event_controller_get_current_event_time'{$endif};
function gtk_event_controller_get_name(controller: PGtkEventController): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_event_controller_get_name'{$endif};
function gtk_event_controller_get_propagation_limit(controller: PGtkEventController): TGtkPropagationLimit; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_event_controller_get_propagation_limit'{$endif};
function gtk_event_controller_get_propagation_phase(controller: PGtkEventController): TGtkPropagationPhase; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_event_controller_get_propagation_phase'{$endif};
function gtk_event_controller_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_event_controller_get_type' {$endif};
function gtk_event_controller_get_widget(controller: PGtkEventController): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_event_controller_get_widget'{$endif};
function gtk_event_controller_key_forward(controller: PGtkEventControllerKey; widget: PGtkWidget): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_event_controller_key_forward'{$endif};
function gtk_event_controller_key_get_group(controller: PGtkEventControllerKey): guint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_event_controller_key_get_group'{$endif};
function gtk_event_controller_key_get_im_context(controller: PGtkEventControllerKey): PGtkIMContext; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_event_controller_key_get_im_context'{$endif};
function gtk_event_controller_key_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_event_controller_key_get_type' {$endif};
function gtk_event_controller_key_new: PGtkEventControllerKey; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_event_controller_key_new'{$endif};
function gtk_event_controller_legacy_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_event_controller_legacy_get_type' {$endif};
function gtk_event_controller_legacy_new: PGtkEventControllerLegacy; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_event_controller_legacy_new'{$endif};
function gtk_event_controller_motion_contains_pointer(self: PGtkEventControllerMotion): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_event_controller_motion_contains_pointer'{$endif};
function gtk_event_controller_motion_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_event_controller_motion_get_type' {$endif};
function gtk_event_controller_motion_is_pointer(self: PGtkEventControllerMotion): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_event_controller_motion_is_pointer'{$endif};
function gtk_event_controller_motion_new: PGtkEventControllerMotion; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_event_controller_motion_new'{$endif};
function gtk_event_controller_scroll_get_flags(scroll: PGtkEventControllerScroll): TGtkEventControllerScrollFlags; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_event_controller_scroll_get_flags'{$endif};
function gtk_event_controller_scroll_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_event_controller_scroll_get_type' {$endif};
function gtk_event_controller_scroll_new(flags: TGtkEventControllerScrollFlags): PGtkEventControllerScroll; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_event_controller_scroll_new'{$endif};
function gtk_every_filter_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_every_filter_get_type' {$endif};
function gtk_every_filter_new: PGtkEveryFilter; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_every_filter_new'{$endif};
function gtk_expander_get_child(expander: PGtkExpander): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_expander_get_child'{$endif};
function gtk_expander_get_expanded(expander: PGtkExpander): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_expander_get_expanded'{$endif};
function gtk_expander_get_label(expander: PGtkExpander): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_expander_get_label'{$endif};
function gtk_expander_get_label_widget(expander: PGtkExpander): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_expander_get_label_widget'{$endif};
function gtk_expander_get_resize_toplevel(expander: PGtkExpander): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_expander_get_resize_toplevel'{$endif};
function gtk_expander_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_expander_get_type' {$endif};
function gtk_expander_get_use_markup(expander: PGtkExpander): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_expander_get_use_markup'{$endif};
function gtk_expander_get_use_underline(expander: PGtkExpander): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_expander_get_use_underline'{$endif};
function gtk_expander_new(label_: Pgchar): PGtkExpander; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_expander_new'{$endif};
function gtk_expander_new_with_mnemonic(label_: Pgchar): PGtkExpander; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_expander_new_with_mnemonic'{$endif};
function gtk_expression_bind(self: PGtkExpression; target: PGObject; property_: Pgchar; this_: PGObject): PGtkExpressionWatch; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_expression_bind'{$endif};
function gtk_expression_evaluate(self: PGtkExpression; this_: PGObject; value: PGValue): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_expression_evaluate'{$endif};
function gtk_expression_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_expression_get_type' {$endif};
function gtk_expression_get_value_type(self: PGtkExpression): TGType; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_expression_get_value_type'{$endif};
function gtk_expression_is_static(self: PGtkExpression): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_expression_is_static'{$endif};
function gtk_expression_ref(self: PGtkExpression): PGtkExpression; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_expression_ref'{$endif};
function gtk_expression_watch(self: PGtkExpression; this_: PGObject; notify: TGtkExpressionNotify; user_data: gpointer; user_destroy: TGDestroyNotify): PGtkExpressionWatch; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_expression_watch'{$endif};
function gtk_expression_watch_evaluate(watch: PGtkExpressionWatch; value: PGValue): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_expression_watch_evaluate'{$endif};
function gtk_expression_watch_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_expression_watch_get_type' {$endif};
function gtk_expression_watch_ref(watch: PGtkExpressionWatch): PGtkExpressionWatch; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_expression_watch_ref'{$endif};
function gtk_file_chooser_add_shortcut_folder(chooser: PGtkFileChooser; folder: PGFile; error: PPGError): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_file_chooser_add_shortcut_folder'{$endif};
function gtk_file_chooser_dialog_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_file_chooser_dialog_get_type' {$endif};
function gtk_file_chooser_dialog_new(title: Pgchar; parent: PGtkWindow; action: TGtkFileChooserAction; first_button_text: Pgchar; args: array of const): PGtkFileChooserDialog; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_file_chooser_dialog_new'{$endif};
function gtk_file_chooser_error_quark: TGQuark; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_file_chooser_error_quark'{$endif};
function gtk_file_chooser_get_action(chooser: PGtkFileChooser): TGtkFileChooserAction; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_file_chooser_get_action'{$endif};
function gtk_file_chooser_get_choice(chooser: PGtkFileChooser; id: Pgchar): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_file_chooser_get_choice'{$endif};
function gtk_file_chooser_get_create_folders(chooser: PGtkFileChooser): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_file_chooser_get_create_folders'{$endif};
function gtk_file_chooser_get_current_folder(chooser: PGtkFileChooser): PGFile; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_file_chooser_get_current_folder'{$endif};
function gtk_file_chooser_get_current_name(chooser: PGtkFileChooser): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_file_chooser_get_current_name'{$endif};
function gtk_file_chooser_get_file(chooser: PGtkFileChooser): PGFile; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_file_chooser_get_file'{$endif};
function gtk_file_chooser_get_files(chooser: PGtkFileChooser): PGListModel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_file_chooser_get_files'{$endif};
function gtk_file_chooser_get_filter(chooser: PGtkFileChooser): PGtkFileFilter; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_file_chooser_get_filter'{$endif};
function gtk_file_chooser_get_filters(chooser: PGtkFileChooser): PGListModel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_file_chooser_get_filters'{$endif};
function gtk_file_chooser_get_select_multiple(chooser: PGtkFileChooser): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_file_chooser_get_select_multiple'{$endif};
function gtk_file_chooser_get_shortcut_folders(chooser: PGtkFileChooser): PGListModel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_file_chooser_get_shortcut_folders'{$endif};
function gtk_file_chooser_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_file_chooser_get_type' {$endif};
function gtk_file_chooser_native_get_accept_label(self: PGtkFileChooserNative): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_file_chooser_native_get_accept_label'{$endif};
function gtk_file_chooser_native_get_cancel_label(self: PGtkFileChooserNative): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_file_chooser_native_get_cancel_label'{$endif};
function gtk_file_chooser_native_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_file_chooser_native_get_type' {$endif};
function gtk_file_chooser_native_new(title: Pgchar; parent: PGtkWindow; action: TGtkFileChooserAction; accept_label: Pgchar; cancel_label: Pgchar): PGtkFileChooserNative; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_file_chooser_native_new'{$endif};
function gtk_file_chooser_remove_shortcut_folder(chooser: PGtkFileChooser; folder: PGFile; error: PPGError): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_file_chooser_remove_shortcut_folder'{$endif};
function gtk_file_chooser_set_current_folder(chooser: PGtkFileChooser; file_: PGFile; error: PPGError): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_file_chooser_set_current_folder'{$endif};
function gtk_file_chooser_set_file(chooser: PGtkFileChooser; file_: PGFile; error: PPGError): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_file_chooser_set_file'{$endif};
function gtk_file_chooser_widget_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_file_chooser_widget_get_type' {$endif};
function gtk_file_chooser_widget_new(action: TGtkFileChooserAction): PGtkFileChooserWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_file_chooser_widget_new'{$endif};
function gtk_file_filter_get_attributes(filter: PGtkFileFilter): PPgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_file_filter_get_attributes'{$endif};
function gtk_file_filter_get_name(filter: PGtkFileFilter): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_file_filter_get_name'{$endif};
function gtk_file_filter_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_file_filter_get_type' {$endif};
function gtk_file_filter_new: PGtkFileFilter; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_file_filter_new'{$endif};
function gtk_file_filter_new_from_gvariant(variant: PGVariant): PGtkFileFilter; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_file_filter_new_from_gvariant'{$endif};
function gtk_file_filter_to_gvariant(filter: PGtkFileFilter): PGVariant; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_file_filter_to_gvariant'{$endif};
function gtk_filter_get_strictness(self: PGtkFilter): TGtkFilterMatch; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_filter_get_strictness'{$endif};
function gtk_filter_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_filter_get_type' {$endif};
function gtk_filter_list_model_get_filter(self: PGtkFilterListModel): PGtkFilter; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_filter_list_model_get_filter'{$endif};
function gtk_filter_list_model_get_incremental(self: PGtkFilterListModel): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_filter_list_model_get_incremental'{$endif};
function gtk_filter_list_model_get_model(self: PGtkFilterListModel): PGListModel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_filter_list_model_get_model'{$endif};
function gtk_filter_list_model_get_pending(self: PGtkFilterListModel): guint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_filter_list_model_get_pending'{$endif};
function gtk_filter_list_model_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_filter_list_model_get_type' {$endif};
function gtk_filter_list_model_new(model: PGListModel; filter: PGtkFilter): PGtkFilterListModel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_filter_list_model_new'{$endif};
function gtk_filter_match(self: PGtkFilter; item: PGObject): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_filter_match'{$endif};
function gtk_fixed_get_child_transform(fixed: PGtkFixed; widget: PGtkWidget): PGskTransform; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_fixed_get_child_transform'{$endif};
function gtk_fixed_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_fixed_get_type' {$endif};
function gtk_fixed_layout_child_get_transform(child: PGtkFixedLayoutChild): PGskTransform; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_fixed_layout_child_get_transform'{$endif};
function gtk_fixed_layout_child_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_fixed_layout_child_get_type' {$endif};
function gtk_fixed_layout_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_fixed_layout_get_type' {$endif};
function gtk_fixed_layout_new: PGtkFixedLayout; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_fixed_layout_new'{$endif};
function gtk_fixed_new: PGtkFixed; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_fixed_new'{$endif};
function gtk_flatten_list_model_get_model(self: PGtkFlattenListModel): PGListModel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_flatten_list_model_get_model'{$endif};
function gtk_flatten_list_model_get_model_for_item(self: PGtkFlattenListModel; position: guint): PGListModel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_flatten_list_model_get_model_for_item'{$endif};
function gtk_flatten_list_model_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_flatten_list_model_get_type' {$endif};
function gtk_flatten_list_model_new(model: PGListModel): PGtkFlattenListModel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_flatten_list_model_new'{$endif};
function gtk_flow_box_child_get_child(self: PGtkFlowBoxChild): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_flow_box_child_get_child'{$endif};
function gtk_flow_box_child_get_index(child: PGtkFlowBoxChild): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_flow_box_child_get_index'{$endif};
function gtk_flow_box_child_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_flow_box_child_get_type' {$endif};
function gtk_flow_box_child_is_selected(child: PGtkFlowBoxChild): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_flow_box_child_is_selected'{$endif};
function gtk_flow_box_child_new: PGtkFlowBoxChild; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_flow_box_child_new'{$endif};
function gtk_flow_box_get_activate_on_single_click(box: PGtkFlowBox): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_flow_box_get_activate_on_single_click'{$endif};
function gtk_flow_box_get_child_at_index(box: PGtkFlowBox; idx: gint): PGtkFlowBoxChild; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_flow_box_get_child_at_index'{$endif};
function gtk_flow_box_get_child_at_pos(box: PGtkFlowBox; x: gint; y: gint): PGtkFlowBoxChild; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_flow_box_get_child_at_pos'{$endif};
function gtk_flow_box_get_column_spacing(box: PGtkFlowBox): guint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_flow_box_get_column_spacing'{$endif};
function gtk_flow_box_get_homogeneous(box: PGtkFlowBox): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_flow_box_get_homogeneous'{$endif};
function gtk_flow_box_get_max_children_per_line(box: PGtkFlowBox): guint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_flow_box_get_max_children_per_line'{$endif};
function gtk_flow_box_get_min_children_per_line(box: PGtkFlowBox): guint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_flow_box_get_min_children_per_line'{$endif};
function gtk_flow_box_get_row_spacing(box: PGtkFlowBox): guint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_flow_box_get_row_spacing'{$endif};
function gtk_flow_box_get_selected_children(box: PGtkFlowBox): PGList; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_flow_box_get_selected_children'{$endif};
function gtk_flow_box_get_selection_mode(box: PGtkFlowBox): TGtkSelectionMode; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_flow_box_get_selection_mode'{$endif};
function gtk_flow_box_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_flow_box_get_type' {$endif};
function gtk_flow_box_new: PGtkFlowBox; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_flow_box_new'{$endif};
function gtk_font_button_get_modal(font_button: PGtkFontButton): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_font_button_get_modal'{$endif};
function gtk_font_button_get_title(font_button: PGtkFontButton): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_font_button_get_title'{$endif};
function gtk_font_button_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_font_button_get_type' {$endif};
function gtk_font_button_get_use_font(font_button: PGtkFontButton): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_font_button_get_use_font'{$endif};
function gtk_font_button_get_use_size(font_button: PGtkFontButton): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_font_button_get_use_size'{$endif};
function gtk_font_button_new: PGtkFontButton; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_font_button_new'{$endif};
function gtk_font_button_new_with_font(fontname: Pgchar): PGtkFontButton; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_font_button_new_with_font'{$endif};
function gtk_font_chooser_dialog_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_font_chooser_dialog_get_type' {$endif};
function gtk_font_chooser_dialog_new(title: Pgchar; parent: PGtkWindow): PGtkFontChooserDialog; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_font_chooser_dialog_new'{$endif};
function gtk_font_chooser_get_font(fontchooser: PGtkFontChooser): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_font_chooser_get_font'{$endif};
function gtk_font_chooser_get_font_desc(fontchooser: PGtkFontChooser): PPangoFontDescription; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_font_chooser_get_font_desc'{$endif};
function gtk_font_chooser_get_font_face(fontchooser: PGtkFontChooser): PPangoFontFace; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_font_chooser_get_font_face'{$endif};
function gtk_font_chooser_get_font_family(fontchooser: PGtkFontChooser): PPangoFontFamily; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_font_chooser_get_font_family'{$endif};
function gtk_font_chooser_get_font_features(fontchooser: PGtkFontChooser): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_font_chooser_get_font_features'{$endif};
function gtk_font_chooser_get_font_map(fontchooser: PGtkFontChooser): PPangoFontMap; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_font_chooser_get_font_map'{$endif};
function gtk_font_chooser_get_font_size(fontchooser: PGtkFontChooser): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_font_chooser_get_font_size'{$endif};
function gtk_font_chooser_get_language(fontchooser: PGtkFontChooser): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_font_chooser_get_language'{$endif};
function gtk_font_chooser_get_level(fontchooser: PGtkFontChooser): TGtkFontChooserLevel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_font_chooser_get_level'{$endif};
function gtk_font_chooser_get_preview_text(fontchooser: PGtkFontChooser): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_font_chooser_get_preview_text'{$endif};
function gtk_font_chooser_get_show_preview_entry(fontchooser: PGtkFontChooser): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_font_chooser_get_show_preview_entry'{$endif};
function gtk_font_chooser_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_font_chooser_get_type' {$endif};
function gtk_font_chooser_widget_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_font_chooser_widget_get_type' {$endif};
function gtk_font_chooser_widget_new: PGtkFontChooserWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_font_chooser_widget_new'{$endif};
function gtk_frame_get_child(frame: PGtkFrame): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_frame_get_child'{$endif};
function gtk_frame_get_label(frame: PGtkFrame): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_frame_get_label'{$endif};
function gtk_frame_get_label_align(frame: PGtkFrame): gfloat; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_frame_get_label_align'{$endif};
function gtk_frame_get_label_widget(frame: PGtkFrame): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_frame_get_label_widget'{$endif};
function gtk_frame_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_frame_get_type' {$endif};
function gtk_frame_new(label_: Pgchar): PGtkFrame; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_frame_new'{$endif};
function gtk_gesture_click_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_gesture_click_get_type' {$endif};
function gtk_gesture_click_new: PGtkGestureClick; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gesture_click_new'{$endif};
function gtk_gesture_drag_get_offset(gesture: PGtkGestureDrag; x: Pgdouble; y: Pgdouble): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gesture_drag_get_offset'{$endif};
function gtk_gesture_drag_get_start_point(gesture: PGtkGestureDrag; x: Pgdouble; y: Pgdouble): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gesture_drag_get_start_point'{$endif};
function gtk_gesture_drag_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_gesture_drag_get_type' {$endif};
function gtk_gesture_drag_new: PGtkGestureDrag; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gesture_drag_new'{$endif};
function gtk_gesture_get_bounding_box(gesture: PGtkGesture; rect: PGdkRectangle): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gesture_get_bounding_box'{$endif};
function gtk_gesture_get_bounding_box_center(gesture: PGtkGesture; x: Pgdouble; y: Pgdouble): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gesture_get_bounding_box_center'{$endif};
function gtk_gesture_get_device(gesture: PGtkGesture): PGdkDevice; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gesture_get_device'{$endif};
function gtk_gesture_get_group(gesture: PGtkGesture): PGList; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gesture_get_group'{$endif};
function gtk_gesture_get_last_event(gesture: PGtkGesture; sequence: PGdkEventSequence): PGdkEvent; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gesture_get_last_event'{$endif};
function gtk_gesture_get_last_updated_sequence(gesture: PGtkGesture): PGdkEventSequence; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gesture_get_last_updated_sequence'{$endif};
function gtk_gesture_get_point(gesture: PGtkGesture; sequence: PGdkEventSequence; x: Pgdouble; y: Pgdouble): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gesture_get_point'{$endif};
function gtk_gesture_get_sequence_state(gesture: PGtkGesture; sequence: PGdkEventSequence): TGtkEventSequenceState; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gesture_get_sequence_state'{$endif};
function gtk_gesture_get_sequences(gesture: PGtkGesture): PGList; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gesture_get_sequences'{$endif};
function gtk_gesture_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_gesture_get_type' {$endif};
function gtk_gesture_handles_sequence(gesture: PGtkGesture; sequence: PGdkEventSequence): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gesture_handles_sequence'{$endif};
function gtk_gesture_is_active(gesture: PGtkGesture): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gesture_is_active'{$endif};
function gtk_gesture_is_grouped_with(gesture: PGtkGesture; other: PGtkGesture): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gesture_is_grouped_with'{$endif};
function gtk_gesture_is_recognized(gesture: PGtkGesture): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gesture_is_recognized'{$endif};
function gtk_gesture_long_press_get_delay_factor(gesture: PGtkGestureLongPress): gdouble; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gesture_long_press_get_delay_factor'{$endif};
function gtk_gesture_long_press_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_gesture_long_press_get_type' {$endif};
function gtk_gesture_long_press_new: PGtkGestureLongPress; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gesture_long_press_new'{$endif};
function gtk_gesture_pan_get_orientation(gesture: PGtkGesturePan): TGtkOrientation; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gesture_pan_get_orientation'{$endif};
function gtk_gesture_pan_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_gesture_pan_get_type' {$endif};
function gtk_gesture_pan_new(orientation: TGtkOrientation): PGtkGesturePan; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gesture_pan_new'{$endif};
function gtk_gesture_rotate_get_angle_delta(gesture: PGtkGestureRotate): gdouble; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gesture_rotate_get_angle_delta'{$endif};
function gtk_gesture_rotate_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_gesture_rotate_get_type' {$endif};
function gtk_gesture_rotate_new: PGtkGestureRotate; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gesture_rotate_new'{$endif};
function gtk_gesture_set_sequence_state(gesture: PGtkGesture; sequence: PGdkEventSequence; state: TGtkEventSequenceState): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gesture_set_sequence_state'{$endif};
function gtk_gesture_set_state(gesture: PGtkGesture; state: TGtkEventSequenceState): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gesture_set_state'{$endif};
function gtk_gesture_single_get_button(gesture: PGtkGestureSingle): guint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gesture_single_get_button'{$endif};
function gtk_gesture_single_get_current_button(gesture: PGtkGestureSingle): guint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gesture_single_get_current_button'{$endif};
function gtk_gesture_single_get_current_sequence(gesture: PGtkGestureSingle): PGdkEventSequence; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gesture_single_get_current_sequence'{$endif};
function gtk_gesture_single_get_exclusive(gesture: PGtkGestureSingle): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gesture_single_get_exclusive'{$endif};
function gtk_gesture_single_get_touch_only(gesture: PGtkGestureSingle): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gesture_single_get_touch_only'{$endif};
function gtk_gesture_single_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_gesture_single_get_type' {$endif};
function gtk_gesture_stylus_get_axes(gesture: PGtkGestureStylus; axes: PGdkAxisUse; values: PPgdouble): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gesture_stylus_get_axes'{$endif};
function gtk_gesture_stylus_get_axis(gesture: PGtkGestureStylus; axis: TGdkAxisUse; value: Pgdouble): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gesture_stylus_get_axis'{$endif};
function gtk_gesture_stylus_get_backlog(gesture: PGtkGestureStylus; backlog: PPGdkTimeCoord; n_elems: Pguint): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gesture_stylus_get_backlog'{$endif};
function gtk_gesture_stylus_get_device_tool(gesture: PGtkGestureStylus): PGdkDeviceTool; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gesture_stylus_get_device_tool'{$endif};
function gtk_gesture_stylus_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_gesture_stylus_get_type' {$endif};
function gtk_gesture_stylus_new: PGtkGestureStylus; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gesture_stylus_new'{$endif};
function gtk_gesture_swipe_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_gesture_swipe_get_type' {$endif};
function gtk_gesture_swipe_get_velocity(gesture: PGtkGestureSwipe; velocity_x: Pgdouble; velocity_y: Pgdouble): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gesture_swipe_get_velocity'{$endif};
function gtk_gesture_swipe_new: PGtkGestureSwipe; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gesture_swipe_new'{$endif};
function gtk_gesture_zoom_get_scale_delta(gesture: PGtkGestureZoom): gdouble; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gesture_zoom_get_scale_delta'{$endif};
function gtk_gesture_zoom_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_gesture_zoom_get_type' {$endif};
function gtk_gesture_zoom_new: PGtkGestureZoom; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gesture_zoom_new'{$endif};
function gtk_get_binary_age: guint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_get_binary_age'{$endif};
function gtk_get_debug_flags: TGtkDebugFlags; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_get_debug_flags'{$endif};
function gtk_get_default_language: PPangoLanguage; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_get_default_language'{$endif};
function gtk_get_interface_age: guint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_get_interface_age'{$endif};
function gtk_get_locale_direction: TGtkTextDirection; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_get_locale_direction'{$endif};
function gtk_get_major_version: guint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_get_major_version'{$endif};
function gtk_get_micro_version: guint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_get_micro_version'{$endif};
function gtk_get_minor_version: guint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_get_minor_version'{$endif};
function gtk_gl_area_get_auto_render(area: PGtkGLArea): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gl_area_get_auto_render'{$endif};
function gtk_gl_area_get_context(area: PGtkGLArea): PGdkGLContext; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gl_area_get_context'{$endif};
function gtk_gl_area_get_error(area: PGtkGLArea): PGError; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gl_area_get_error'{$endif};
function gtk_gl_area_get_has_depth_buffer(area: PGtkGLArea): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gl_area_get_has_depth_buffer'{$endif};
function gtk_gl_area_get_has_stencil_buffer(area: PGtkGLArea): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gl_area_get_has_stencil_buffer'{$endif};
function gtk_gl_area_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_gl_area_get_type' {$endif};
function gtk_gl_area_get_use_es(area: PGtkGLArea): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gl_area_get_use_es'{$endif};
function gtk_gl_area_new: PGtkGLArea; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gl_area_new'{$endif};
function gtk_grid_get_baseline_row(grid: PGtkGrid): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_get_baseline_row'{$endif};
function gtk_grid_get_child_at(grid: PGtkGrid; column: gint; row: gint): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_get_child_at'{$endif};
function gtk_grid_get_column_homogeneous(grid: PGtkGrid): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_get_column_homogeneous'{$endif};
function gtk_grid_get_column_spacing(grid: PGtkGrid): guint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_get_column_spacing'{$endif};
function gtk_grid_get_row_baseline_position(grid: PGtkGrid; row: gint): TGtkBaselinePosition; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_get_row_baseline_position'{$endif};
function gtk_grid_get_row_homogeneous(grid: PGtkGrid): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_get_row_homogeneous'{$endif};
function gtk_grid_get_row_spacing(grid: PGtkGrid): guint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_get_row_spacing'{$endif};
function gtk_grid_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_grid_get_type' {$endif};
function gtk_grid_layout_child_get_column(child: PGtkGridLayoutChild): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_layout_child_get_column'{$endif};
function gtk_grid_layout_child_get_column_span(child: PGtkGridLayoutChild): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_layout_child_get_column_span'{$endif};
function gtk_grid_layout_child_get_row(child: PGtkGridLayoutChild): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_layout_child_get_row'{$endif};
function gtk_grid_layout_child_get_row_span(child: PGtkGridLayoutChild): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_layout_child_get_row_span'{$endif};
function gtk_grid_layout_child_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_grid_layout_child_get_type' {$endif};
function gtk_grid_layout_get_baseline_row(grid: PGtkGridLayout): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_layout_get_baseline_row'{$endif};
function gtk_grid_layout_get_column_homogeneous(grid: PGtkGridLayout): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_layout_get_column_homogeneous'{$endif};
function gtk_grid_layout_get_column_spacing(grid: PGtkGridLayout): guint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_layout_get_column_spacing'{$endif};
function gtk_grid_layout_get_row_baseline_position(grid: PGtkGridLayout; row: gint): TGtkBaselinePosition; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_layout_get_row_baseline_position'{$endif};
function gtk_grid_layout_get_row_homogeneous(grid: PGtkGridLayout): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_layout_get_row_homogeneous'{$endif};
function gtk_grid_layout_get_row_spacing(grid: PGtkGridLayout): guint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_layout_get_row_spacing'{$endif};
function gtk_grid_layout_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_grid_layout_get_type' {$endif};
function gtk_grid_layout_new: PGtkGridLayout; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_layout_new'{$endif};
function gtk_grid_new: PGtkGrid; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_new'{$endif};
function gtk_grid_view_get_enable_rubberband(self: PGtkGridView): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_view_get_enable_rubberband'{$endif};
function gtk_grid_view_get_factory(self: PGtkGridView): PGtkListItemFactory; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_view_get_factory'{$endif};
function gtk_grid_view_get_max_columns(self: PGtkGridView): guint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_view_get_max_columns'{$endif};
function gtk_grid_view_get_min_columns(self: PGtkGridView): guint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_view_get_min_columns'{$endif};
function gtk_grid_view_get_model(self: PGtkGridView): PGtkSelectionModel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_view_get_model'{$endif};
function gtk_grid_view_get_single_click_activate(self: PGtkGridView): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_view_get_single_click_activate'{$endif};
function gtk_grid_view_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_grid_view_get_type' {$endif};
function gtk_grid_view_new(model: PGtkSelectionModel; factory: PGtkListItemFactory): PGtkGridView; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_view_new'{$endif};
function gtk_header_bar_get_decoration_layout(bar: PGtkHeaderBar): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_header_bar_get_decoration_layout'{$endif};
function gtk_header_bar_get_show_title_buttons(bar: PGtkHeaderBar): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_header_bar_get_show_title_buttons'{$endif};
function gtk_header_bar_get_title_widget(bar: PGtkHeaderBar): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_header_bar_get_title_widget'{$endif};
function gtk_header_bar_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_header_bar_get_type' {$endif};
function gtk_header_bar_new: PGtkHeaderBar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_header_bar_new'{$endif};
function gtk_icon_paintable_get_file(self: PGtkIconPaintable): PGFile; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_paintable_get_file'{$endif};
function gtk_icon_paintable_get_icon_name(self: PGtkIconPaintable): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_paintable_get_icon_name'{$endif};
function gtk_icon_paintable_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_icon_paintable_get_type' {$endif};
function gtk_icon_paintable_is_symbolic(self: PGtkIconPaintable): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_paintable_is_symbolic'{$endif};
function gtk_icon_paintable_new_for_file(file_: PGFile; size: gint; scale: gint): PGtkIconPaintable; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_paintable_new_for_file'{$endif};
function gtk_icon_theme_error_quark: TGQuark; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_theme_error_quark'{$endif};
function gtk_icon_theme_get_display(self: PGtkIconTheme): PGdkDisplay; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_theme_get_display'{$endif};
function gtk_icon_theme_get_for_display(display: PGdkDisplay): PGtkIconTheme; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_theme_get_for_display'{$endif};
function gtk_icon_theme_get_icon_names(self: PGtkIconTheme): PPgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_theme_get_icon_names'{$endif};
function gtk_icon_theme_get_icon_sizes(self: PGtkIconTheme; icon_name: Pgchar): Pgint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_theme_get_icon_sizes'{$endif};
function gtk_icon_theme_get_resource_path(self: PGtkIconTheme): PPgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_theme_get_resource_path'{$endif};
function gtk_icon_theme_get_search_path(self: PGtkIconTheme): PPgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_theme_get_search_path'{$endif};
function gtk_icon_theme_get_theme_name(self: PGtkIconTheme): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_theme_get_theme_name'{$endif};
function gtk_icon_theme_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_icon_theme_get_type' {$endif};
function gtk_icon_theme_has_gicon(self: PGtkIconTheme; gicon: PGIcon): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_theme_has_gicon'{$endif};
function gtk_icon_theme_has_icon(self: PGtkIconTheme; icon_name: Pgchar): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_theme_has_icon'{$endif};
function gtk_icon_theme_lookup_by_gicon(self: PGtkIconTheme; icon: PGIcon; size: gint; scale: gint; direction: TGtkTextDirection; flags: TGtkIconLookupFlags): PGtkIconPaintable; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_theme_lookup_by_gicon'{$endif};
function gtk_icon_theme_lookup_icon(self: PGtkIconTheme; icon_name: Pgchar; fallbacks: PPgchar; size: gint; scale: gint; direction: TGtkTextDirection; flags: TGtkIconLookupFlags): PGtkIconPaintable; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_theme_lookup_icon'{$endif};
function gtk_icon_theme_new: PGtkIconTheme; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_theme_new'{$endif};
function gtk_icon_view_create_drag_icon(icon_view: PGtkIconView; path: PGtkTreePath): PGdkPaintable; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_create_drag_icon'{$endif};
function gtk_icon_view_get_activate_on_single_click(icon_view: PGtkIconView): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_get_activate_on_single_click'{$endif};
function gtk_icon_view_get_cell_rect(icon_view: PGtkIconView; path: PGtkTreePath; cell: PGtkCellRenderer; rect: PGdkRectangle): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_get_cell_rect'{$endif};
function gtk_icon_view_get_column_spacing(icon_view: PGtkIconView): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_get_column_spacing'{$endif};
function gtk_icon_view_get_columns(icon_view: PGtkIconView): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_get_columns'{$endif};
function gtk_icon_view_get_cursor(icon_view: PGtkIconView; path: PPGtkTreePath; cell: PPGtkCellRenderer): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_get_cursor'{$endif};
function gtk_icon_view_get_dest_item_at_pos(icon_view: PGtkIconView; drag_x: gint; drag_y: gint; path: PPGtkTreePath; pos: PGtkIconViewDropPosition): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_get_dest_item_at_pos'{$endif};
function gtk_icon_view_get_item_at_pos(icon_view: PGtkIconView; x: gint; y: gint; path: PPGtkTreePath; cell: PPGtkCellRenderer): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_get_item_at_pos'{$endif};
function gtk_icon_view_get_item_column(icon_view: PGtkIconView; path: PGtkTreePath): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_get_item_column'{$endif};
function gtk_icon_view_get_item_orientation(icon_view: PGtkIconView): TGtkOrientation; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_get_item_orientation'{$endif};
function gtk_icon_view_get_item_padding(icon_view: PGtkIconView): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_get_item_padding'{$endif};
function gtk_icon_view_get_item_row(icon_view: PGtkIconView; path: PGtkTreePath): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_get_item_row'{$endif};
function gtk_icon_view_get_item_width(icon_view: PGtkIconView): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_get_item_width'{$endif};
function gtk_icon_view_get_margin(icon_view: PGtkIconView): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_get_margin'{$endif};
function gtk_icon_view_get_markup_column(icon_view: PGtkIconView): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_get_markup_column'{$endif};
function gtk_icon_view_get_model(icon_view: PGtkIconView): PGtkTreeModel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_get_model'{$endif};
function gtk_icon_view_get_path_at_pos(icon_view: PGtkIconView; x: gint; y: gint): PGtkTreePath; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_get_path_at_pos'{$endif};
function gtk_icon_view_get_pixbuf_column(icon_view: PGtkIconView): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_get_pixbuf_column'{$endif};
function gtk_icon_view_get_reorderable(icon_view: PGtkIconView): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_get_reorderable'{$endif};
function gtk_icon_view_get_row_spacing(icon_view: PGtkIconView): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_get_row_spacing'{$endif};
function gtk_icon_view_get_selected_items(icon_view: PGtkIconView): PGList; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_get_selected_items'{$endif};
function gtk_icon_view_get_selection_mode(icon_view: PGtkIconView): TGtkSelectionMode; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_get_selection_mode'{$endif};
function gtk_icon_view_get_spacing(icon_view: PGtkIconView): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_get_spacing'{$endif};
function gtk_icon_view_get_text_column(icon_view: PGtkIconView): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_get_text_column'{$endif};
function gtk_icon_view_get_tooltip_column(icon_view: PGtkIconView): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_get_tooltip_column'{$endif};
function gtk_icon_view_get_tooltip_context(icon_view: PGtkIconView; x: gint; y: gint; keyboard_tip: gboolean; model: PPGtkTreeModel; path: PPGtkTreePath; iter: PGtkTreeIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_get_tooltip_context'{$endif};
function gtk_icon_view_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_icon_view_get_type' {$endif};
function gtk_icon_view_get_visible_range(icon_view: PGtkIconView; start_path: PPGtkTreePath; end_path: PPGtkTreePath): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_get_visible_range'{$endif};
function gtk_icon_view_new: PGtkIconView; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_new'{$endif};
function gtk_icon_view_new_with_area(area: PGtkCellArea): PGtkIconView; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_new_with_area'{$endif};
function gtk_icon_view_new_with_model(model: PGtkTreeModel): PGtkIconView; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_new_with_model'{$endif};
function gtk_icon_view_path_is_selected(icon_view: PGtkIconView; path: PGtkTreePath): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_path_is_selected'{$endif};
function gtk_im_context_delete_surrounding(context: PGtkIMContext; offset: gint; n_chars: gint): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_im_context_delete_surrounding'{$endif};
function gtk_im_context_filter_key(context: PGtkIMContext; press: gboolean; surface: PGdkSurface; device: PGdkDevice; time: guint32; keycode: guint; state: TGdkModifierType; group: gint): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_im_context_filter_key'{$endif};
function gtk_im_context_filter_keypress(context: PGtkIMContext; event: PGdkEvent): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_im_context_filter_keypress'{$endif};
function gtk_im_context_get_surrounding_with_selection(context: PGtkIMContext; text: PPgchar; cursor_index: Pgint; anchor_index: Pgint): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_im_context_get_surrounding_with_selection'{$endif};
function gtk_im_context_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_im_context_get_type' {$endif};
function gtk_im_context_simple_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_im_context_simple_get_type' {$endif};
function gtk_im_context_simple_new: PGtkIMContextSimple; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_im_context_simple_new'{$endif};
function gtk_im_multicontext_get_context_id(context: PGtkIMMulticontext): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_im_multicontext_get_context_id'{$endif};
function gtk_im_multicontext_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_im_multicontext_get_type' {$endif};
function gtk_im_multicontext_new: PGtkIMMulticontext; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_im_multicontext_new'{$endif};
function gtk_image_get_gicon(image: PGtkImage): PGIcon; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_image_get_gicon'{$endif};
function gtk_image_get_icon_name(image: PGtkImage): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_image_get_icon_name'{$endif};
function gtk_image_get_icon_size(image: PGtkImage): TGtkIconSize; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_image_get_icon_size'{$endif};
function gtk_image_get_paintable(image: PGtkImage): PGdkPaintable; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_image_get_paintable'{$endif};
function gtk_image_get_pixel_size(image: PGtkImage): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_image_get_pixel_size'{$endif};
function gtk_image_get_storage_type(image: PGtkImage): TGtkImageType; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_image_get_storage_type'{$endif};
function gtk_image_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_image_get_type' {$endif};
function gtk_image_new: PGtkImage; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_image_new'{$endif};
function gtk_image_new_from_file(filename: Pgchar): PGtkImage; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_image_new_from_file'{$endif};
function gtk_image_new_from_gicon(icon: PGIcon): PGtkImage; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_image_new_from_gicon'{$endif};
function gtk_image_new_from_icon_name(icon_name: Pgchar): PGtkImage; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_image_new_from_icon_name'{$endif};
function gtk_image_new_from_paintable(paintable: PGdkPaintable): PGtkImage; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_image_new_from_paintable'{$endif};
function gtk_image_new_from_pixbuf(pixbuf: PGdkPixbuf): PGtkImage; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_image_new_from_pixbuf'{$endif};
function gtk_image_new_from_resource(resource_path: Pgchar): PGtkImage; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_image_new_from_resource'{$endif};
function gtk_info_bar_add_button(info_bar: PGtkInfoBar; button_text: Pgchar; response_id: gint): PGtkButton; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_info_bar_add_button'{$endif};
function gtk_info_bar_get_message_type(info_bar: PGtkInfoBar): TGtkMessageType; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_info_bar_get_message_type'{$endif};
function gtk_info_bar_get_revealed(info_bar: PGtkInfoBar): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_info_bar_get_revealed'{$endif};
function gtk_info_bar_get_show_close_button(info_bar: PGtkInfoBar): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_info_bar_get_show_close_button'{$endif};
function gtk_info_bar_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_info_bar_get_type' {$endif};
function gtk_info_bar_new: PGtkInfoBar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_info_bar_new'{$endif};
function gtk_info_bar_new_with_buttons(first_button_text: Pgchar; args: array of const): PGtkInfoBar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_info_bar_new_with_buttons'{$endif};
function gtk_init_check: gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_init_check'{$endif};
function gtk_is_initialized: gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_is_initialized'{$endif};
function gtk_keyval_trigger_get_keyval(self: PGtkKeyvalTrigger): guint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_keyval_trigger_get_keyval'{$endif};
function gtk_keyval_trigger_get_modifiers(self: PGtkKeyvalTrigger): TGdkModifierType; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_keyval_trigger_get_modifiers'{$endif};
function gtk_keyval_trigger_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_keyval_trigger_get_type' {$endif};
function gtk_keyval_trigger_new(keyval: guint; modifiers: TGdkModifierType): PGtkKeyvalTrigger; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_keyval_trigger_new'{$endif};
function gtk_label_get_attributes(self: PGtkLabel): PPangoAttrList; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_label_get_attributes'{$endif};
function gtk_label_get_current_uri(self: PGtkLabel): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_label_get_current_uri'{$endif};
function gtk_label_get_ellipsize(self: PGtkLabel): TPangoEllipsizeMode; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_label_get_ellipsize'{$endif};
function gtk_label_get_extra_menu(self: PGtkLabel): PGMenuModel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_label_get_extra_menu'{$endif};
function gtk_label_get_justify(self: PGtkLabel): TGtkJustification; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_label_get_justify'{$endif};
function gtk_label_get_label(self: PGtkLabel): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_label_get_label'{$endif};
function gtk_label_get_layout(self: PGtkLabel): PPangoLayout; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_label_get_layout'{$endif};
function gtk_label_get_lines(self: PGtkLabel): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_label_get_lines'{$endif};
function gtk_label_get_max_width_chars(self: PGtkLabel): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_label_get_max_width_chars'{$endif};
function gtk_label_get_mnemonic_keyval(self: PGtkLabel): guint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_label_get_mnemonic_keyval'{$endif};
function gtk_label_get_mnemonic_widget(self: PGtkLabel): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_label_get_mnemonic_widget'{$endif};
function gtk_label_get_natural_wrap_mode(self: PGtkLabel): TGtkNaturalWrapMode; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_label_get_natural_wrap_mode'{$endif};
function gtk_label_get_selectable(self: PGtkLabel): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_label_get_selectable'{$endif};
function gtk_label_get_selection_bounds(self: PGtkLabel; start: Pgint; end_: Pgint): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_label_get_selection_bounds'{$endif};
function gtk_label_get_single_line_mode(self: PGtkLabel): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_label_get_single_line_mode'{$endif};
function gtk_label_get_text(self: PGtkLabel): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_label_get_text'{$endif};
function gtk_label_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_label_get_type' {$endif};
function gtk_label_get_use_markup(self: PGtkLabel): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_label_get_use_markup'{$endif};
function gtk_label_get_use_underline(self: PGtkLabel): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_label_get_use_underline'{$endif};
function gtk_label_get_width_chars(self: PGtkLabel): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_label_get_width_chars'{$endif};
function gtk_label_get_wrap(self: PGtkLabel): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_label_get_wrap'{$endif};
function gtk_label_get_wrap_mode(self: PGtkLabel): TPangoWrapMode; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_label_get_wrap_mode'{$endif};
function gtk_label_get_xalign(self: PGtkLabel): gfloat; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_label_get_xalign'{$endif};
function gtk_label_get_yalign(self: PGtkLabel): gfloat; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_label_get_yalign'{$endif};
function gtk_label_new(str: Pgchar): PGtkLabel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_label_new'{$endif};
function gtk_label_new_with_mnemonic(str: Pgchar): PGtkLabel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_label_new_with_mnemonic'{$endif};
function gtk_layout_child_get_child_widget(layout_child: PGtkLayoutChild): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_layout_child_get_child_widget'{$endif};
function gtk_layout_child_get_layout_manager(layout_child: PGtkLayoutChild): PGtkLayoutManager; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_layout_child_get_layout_manager'{$endif};
function gtk_layout_child_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_layout_child_get_type' {$endif};
function gtk_layout_manager_get_layout_child(manager: PGtkLayoutManager; child: PGtkWidget): PGtkLayoutChild; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_layout_manager_get_layout_child'{$endif};
function gtk_layout_manager_get_request_mode(manager: PGtkLayoutManager): TGtkSizeRequestMode; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_layout_manager_get_request_mode'{$endif};
function gtk_layout_manager_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_layout_manager_get_type' {$endif};
function gtk_layout_manager_get_widget(manager: PGtkLayoutManager): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_layout_manager_get_widget'{$endif};
function gtk_level_bar_get_inverted(self: PGtkLevelBar): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_level_bar_get_inverted'{$endif};
function gtk_level_bar_get_max_value(self: PGtkLevelBar): gdouble; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_level_bar_get_max_value'{$endif};
function gtk_level_bar_get_min_value(self: PGtkLevelBar): gdouble; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_level_bar_get_min_value'{$endif};
function gtk_level_bar_get_mode(self: PGtkLevelBar): TGtkLevelBarMode; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_level_bar_get_mode'{$endif};
function gtk_level_bar_get_offset_value(self: PGtkLevelBar; name: Pgchar; value: Pgdouble): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_level_bar_get_offset_value'{$endif};
function gtk_level_bar_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_level_bar_get_type' {$endif};
function gtk_level_bar_get_value(self: PGtkLevelBar): gdouble; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_level_bar_get_value'{$endif};
function gtk_level_bar_new: PGtkLevelBar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_level_bar_new'{$endif};
function gtk_level_bar_new_for_interval(min_value: gdouble; max_value: gdouble): PGtkLevelBar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_level_bar_new_for_interval'{$endif};
function gtk_link_button_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_link_button_get_type' {$endif};
function gtk_link_button_get_uri(link_button: PGtkLinkButton): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_link_button_get_uri'{$endif};
function gtk_link_button_get_visited(link_button: PGtkLinkButton): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_link_button_get_visited'{$endif};
function gtk_link_button_new(uri: Pgchar): PGtkLinkButton; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_link_button_new'{$endif};
function gtk_link_button_new_with_label(uri: Pgchar; label_: Pgchar): PGtkLinkButton; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_link_button_new_with_label'{$endif};
function gtk_list_base_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_list_base_get_type' {$endif};
function gtk_list_box_get_activate_on_single_click(box: PGtkListBox): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_box_get_activate_on_single_click'{$endif};
function gtk_list_box_get_adjustment(box: PGtkListBox): PGtkAdjustment; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_box_get_adjustment'{$endif};
function gtk_list_box_get_row_at_index(box: PGtkListBox; index_: gint): PGtkListBoxRow; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_box_get_row_at_index'{$endif};
function gtk_list_box_get_row_at_y(box: PGtkListBox; y: gint): PGtkListBoxRow; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_box_get_row_at_y'{$endif};
function gtk_list_box_get_selected_row(box: PGtkListBox): PGtkListBoxRow; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_box_get_selected_row'{$endif};
function gtk_list_box_get_selected_rows(box: PGtkListBox): PGList; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_box_get_selected_rows'{$endif};
function gtk_list_box_get_selection_mode(box: PGtkListBox): TGtkSelectionMode; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_box_get_selection_mode'{$endif};
function gtk_list_box_get_show_separators(box: PGtkListBox): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_box_get_show_separators'{$endif};
function gtk_list_box_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_list_box_get_type' {$endif};
function gtk_list_box_new: PGtkListBox; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_box_new'{$endif};
function gtk_list_box_row_get_activatable(row: PGtkListBoxRow): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_box_row_get_activatable'{$endif};
function gtk_list_box_row_get_child(row: PGtkListBoxRow): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_box_row_get_child'{$endif};
function gtk_list_box_row_get_header(row: PGtkListBoxRow): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_box_row_get_header'{$endif};
function gtk_list_box_row_get_index(row: PGtkListBoxRow): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_box_row_get_index'{$endif};
function gtk_list_box_row_get_selectable(row: PGtkListBoxRow): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_box_row_get_selectable'{$endif};
function gtk_list_box_row_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_list_box_row_get_type' {$endif};
function gtk_list_box_row_is_selected(row: PGtkListBoxRow): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_box_row_is_selected'{$endif};
function gtk_list_box_row_new: PGtkListBoxRow; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_box_row_new'{$endif};
function gtk_list_item_factory_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_list_item_factory_get_type' {$endif};
function gtk_list_item_get_activatable(self: PGtkListItem): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_item_get_activatable'{$endif};
function gtk_list_item_get_child(self: PGtkListItem): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_item_get_child'{$endif};
function gtk_list_item_get_item(self: PGtkListItem): PGObject; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_item_get_item'{$endif};
function gtk_list_item_get_position(self: PGtkListItem): guint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_item_get_position'{$endif};
function gtk_list_item_get_selectable(self: PGtkListItem): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_item_get_selectable'{$endif};
function gtk_list_item_get_selected(self: PGtkListItem): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_item_get_selected'{$endif};
function gtk_list_item_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_list_item_get_type' {$endif};
function gtk_list_store_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_list_store_get_type' {$endif};
function gtk_list_store_iter_is_valid(list_store: PGtkListStore; iter: PGtkTreeIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_store_iter_is_valid'{$endif};
function gtk_list_store_new(n_columns: gint; args: array of const): PGtkListStore; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_store_new'{$endif};
function gtk_list_store_newv(n_columns: gint; types: PGType): PGtkListStore; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_store_newv'{$endif};
function gtk_list_store_remove(list_store: PGtkListStore; iter: PGtkTreeIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_store_remove'{$endif};
function gtk_list_view_get_enable_rubberband(self: PGtkListView): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_view_get_enable_rubberband'{$endif};
function gtk_list_view_get_factory(self: PGtkListView): PGtkListItemFactory; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_view_get_factory'{$endif};
function gtk_list_view_get_model(self: PGtkListView): PGtkSelectionModel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_view_get_model'{$endif};
function gtk_list_view_get_show_separators(self: PGtkListView): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_view_get_show_separators'{$endif};
function gtk_list_view_get_single_click_activate(self: PGtkListView): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_view_get_single_click_activate'{$endif};
function gtk_list_view_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_list_view_get_type' {$endif};
function gtk_list_view_new(model: PGtkSelectionModel; factory: PGtkListItemFactory): PGtkListView; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_view_new'{$endif};
function gtk_lock_button_get_permission(button: PGtkLockButton): PGPermission; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_lock_button_get_permission'{$endif};
function gtk_lock_button_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_lock_button_get_type' {$endif};
function gtk_lock_button_new(permission: PGPermission): PGtkLockButton; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_lock_button_new'{$endif};
function gtk_map_list_model_get_model(self: PGtkMapListModel): PGListModel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_map_list_model_get_model'{$endif};
function gtk_map_list_model_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_map_list_model_get_type' {$endif};
function gtk_map_list_model_has_map(self: PGtkMapListModel): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_map_list_model_has_map'{$endif};
function gtk_map_list_model_new(model: PGListModel; map_func: TGtkMapListModelMapFunc; user_data: gpointer; user_destroy: TGDestroyNotify): PGtkMapListModel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_map_list_model_new'{$endif};
function gtk_media_controls_get_media_stream(controls: PGtkMediaControls): PGtkMediaStream; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_media_controls_get_media_stream'{$endif};
function gtk_media_controls_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_media_controls_get_type' {$endif};
function gtk_media_controls_new(stream: PGtkMediaStream): PGtkMediaControls; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_media_controls_new'{$endif};
function gtk_media_file_get_file(self: PGtkMediaFile): PGFile; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_media_file_get_file'{$endif};
function gtk_media_file_get_input_stream(self: PGtkMediaFile): PGInputStream; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_media_file_get_input_stream'{$endif};
function gtk_media_file_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_media_file_get_type' {$endif};
function gtk_media_file_new: PGtkMediaFile; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_media_file_new'{$endif};
function gtk_media_file_new_for_file(file_: PGFile): PGtkMediaFile; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_media_file_new_for_file'{$endif};
function gtk_media_file_new_for_filename(filename: Pgchar): PGtkMediaFile; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_media_file_new_for_filename'{$endif};
function gtk_media_file_new_for_input_stream(stream: PGInputStream): PGtkMediaFile; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_media_file_new_for_input_stream'{$endif};
function gtk_media_file_new_for_resource(resource_path: Pgchar): PGtkMediaFile; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_media_file_new_for_resource'{$endif};
function gtk_media_stream_get_duration(self: PGtkMediaStream): gint64; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_media_stream_get_duration'{$endif};
function gtk_media_stream_get_ended(self: PGtkMediaStream): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_media_stream_get_ended'{$endif};
function gtk_media_stream_get_error(self: PGtkMediaStream): PGError; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_media_stream_get_error'{$endif};
function gtk_media_stream_get_loop(self: PGtkMediaStream): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_media_stream_get_loop'{$endif};
function gtk_media_stream_get_muted(self: PGtkMediaStream): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_media_stream_get_muted'{$endif};
function gtk_media_stream_get_playing(self: PGtkMediaStream): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_media_stream_get_playing'{$endif};
function gtk_media_stream_get_timestamp(self: PGtkMediaStream): gint64; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_media_stream_get_timestamp'{$endif};
function gtk_media_stream_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_media_stream_get_type' {$endif};
function gtk_media_stream_get_volume(self: PGtkMediaStream): gdouble; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_media_stream_get_volume'{$endif};
function gtk_media_stream_has_audio(self: PGtkMediaStream): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_media_stream_has_audio'{$endif};
function gtk_media_stream_has_video(self: PGtkMediaStream): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_media_stream_has_video'{$endif};
function gtk_media_stream_is_prepared(self: PGtkMediaStream): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_media_stream_is_prepared'{$endif};
function gtk_media_stream_is_seekable(self: PGtkMediaStream): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_media_stream_is_seekable'{$endif};
function gtk_media_stream_is_seeking(self: PGtkMediaStream): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_media_stream_is_seeking'{$endif};
function gtk_menu_button_get_always_show_arrow(menu_button: PGtkMenuButton): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_menu_button_get_always_show_arrow'{$endif};
function gtk_menu_button_get_child(menu_button: PGtkMenuButton): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_menu_button_get_child'{$endif};
function gtk_menu_button_get_direction(menu_button: PGtkMenuButton): TGtkArrowType; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_menu_button_get_direction'{$endif};
function gtk_menu_button_get_has_frame(menu_button: PGtkMenuButton): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_menu_button_get_has_frame'{$endif};
function gtk_menu_button_get_icon_name(menu_button: PGtkMenuButton): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_menu_button_get_icon_name'{$endif};
function gtk_menu_button_get_label(menu_button: PGtkMenuButton): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_menu_button_get_label'{$endif};
function gtk_menu_button_get_menu_model(menu_button: PGtkMenuButton): PGMenuModel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_menu_button_get_menu_model'{$endif};
function gtk_menu_button_get_popover(menu_button: PGtkMenuButton): PGtkPopover; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_menu_button_get_popover'{$endif};
function gtk_menu_button_get_primary(menu_button: PGtkMenuButton): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_menu_button_get_primary'{$endif};
function gtk_menu_button_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_menu_button_get_type' {$endif};
function gtk_menu_button_get_use_underline(menu_button: PGtkMenuButton): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_menu_button_get_use_underline'{$endif};
function gtk_menu_button_new: PGtkMenuButton; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_menu_button_new'{$endif};
function gtk_message_dialog_get_message_area(message_dialog: PGtkMessageDialog): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_message_dialog_get_message_area'{$endif};
function gtk_message_dialog_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_message_dialog_get_type' {$endif};
function gtk_message_dialog_new(parent: PGtkWindow; flags: TGtkDialogFlags; type_: TGtkMessageType; buttons: TGtkButtonsType; message_format: Pgchar; args: array of const): PGtkMessageDialog; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_message_dialog_new'{$endif};
function gtk_message_dialog_new_with_markup(parent: PGtkWindow; flags: TGtkDialogFlags; type_: TGtkMessageType; buttons: TGtkButtonsType; message_format: Pgchar; args: array of const): PGtkMessageDialog; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_message_dialog_new_with_markup'{$endif};
function gtk_mnemonic_action_get: PGtkMnemonicAction; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_mnemonic_action_get'{$endif};
function gtk_mnemonic_action_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_mnemonic_action_get_type' {$endif};
function gtk_mnemonic_trigger_get_keyval(self: PGtkMnemonicTrigger): guint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_mnemonic_trigger_get_keyval'{$endif};
function gtk_mnemonic_trigger_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_mnemonic_trigger_get_type' {$endif};
function gtk_mnemonic_trigger_new(keyval: guint): PGtkMnemonicTrigger; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_mnemonic_trigger_new'{$endif};
function gtk_mount_operation_get_display(op: PGtkMountOperation): PGdkDisplay; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_mount_operation_get_display'{$endif};
function gtk_mount_operation_get_parent(op: PGtkMountOperation): PGtkWindow; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_mount_operation_get_parent'{$endif};
function gtk_mount_operation_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_mount_operation_get_type' {$endif};
function gtk_mount_operation_is_showing(op: PGtkMountOperation): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_mount_operation_is_showing'{$endif};
function gtk_mount_operation_new(parent: PGtkWindow): PGtkMountOperation; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_mount_operation_new'{$endif};
function gtk_multi_filter_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_multi_filter_get_type' {$endif};
function gtk_multi_selection_get_model(self: PGtkMultiSelection): PGListModel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_multi_selection_get_model'{$endif};
function gtk_multi_selection_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_multi_selection_get_type' {$endif};
function gtk_multi_selection_new(model: PGListModel): PGtkMultiSelection; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_multi_selection_new'{$endif};
function gtk_multi_sorter_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_multi_sorter_get_type' {$endif};
function gtk_multi_sorter_new: PGtkMultiSorter; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_multi_sorter_new'{$endif};
function gtk_named_action_get_action_name(self: PGtkNamedAction): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_named_action_get_action_name'{$endif};
function gtk_named_action_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_named_action_get_type' {$endif};
function gtk_named_action_new(name: Pgchar): PGtkNamedAction; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_named_action_new'{$endif};
function gtk_native_dialog_get_modal(self: PGtkNativeDialog): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_native_dialog_get_modal'{$endif};
function gtk_native_dialog_get_title(self: PGtkNativeDialog): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_native_dialog_get_title'{$endif};
function gtk_native_dialog_get_transient_for(self: PGtkNativeDialog): PGtkWindow; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_native_dialog_get_transient_for'{$endif};
function gtk_native_dialog_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_native_dialog_get_type' {$endif};
function gtk_native_dialog_get_visible(self: PGtkNativeDialog): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_native_dialog_get_visible'{$endif};
function gtk_native_get_for_surface(surface: PGdkSurface): PGtkNative; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_native_get_for_surface'{$endif};
function gtk_native_get_renderer(self: PGtkNative): PGskRenderer; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_native_get_renderer'{$endif};
function gtk_native_get_surface(self: PGtkNative): PGdkSurface; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_native_get_surface'{$endif};
function gtk_native_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_native_get_type' {$endif};
function gtk_never_trigger_get: PGtkNeverTrigger; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_never_trigger_get'{$endif};
function gtk_never_trigger_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_never_trigger_get_type' {$endif};
function gtk_no_selection_get_model(self: PGtkNoSelection): PGListModel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_no_selection_get_model'{$endif};
function gtk_no_selection_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_no_selection_get_type' {$endif};
function gtk_no_selection_new(model: PGListModel): PGtkNoSelection; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_no_selection_new'{$endif};
function gtk_notebook_append_page(notebook: PGtkNotebook; child: PGtkWidget; tab_label: PGtkWidget): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_notebook_append_page'{$endif};
function gtk_notebook_append_page_menu(notebook: PGtkNotebook; child: PGtkWidget; tab_label: PGtkWidget; menu_label: PGtkWidget): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_notebook_append_page_menu'{$endif};
function gtk_notebook_get_action_widget(notebook: PGtkNotebook; pack_type: TGtkPackType): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_notebook_get_action_widget'{$endif};
function gtk_notebook_get_current_page(notebook: PGtkNotebook): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_notebook_get_current_page'{$endif};
function gtk_notebook_get_group_name(notebook: PGtkNotebook): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_notebook_get_group_name'{$endif};
function gtk_notebook_get_menu_label(notebook: PGtkNotebook; child: PGtkWidget): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_notebook_get_menu_label'{$endif};
function gtk_notebook_get_menu_label_text(notebook: PGtkNotebook; child: PGtkWidget): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_notebook_get_menu_label_text'{$endif};
function gtk_notebook_get_n_pages(notebook: PGtkNotebook): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_notebook_get_n_pages'{$endif};
function gtk_notebook_get_nth_page(notebook: PGtkNotebook; page_num: gint): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_notebook_get_nth_page'{$endif};
function gtk_notebook_get_page(notebook: PGtkNotebook; child: PGtkWidget): PGtkNotebookPage; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_notebook_get_page'{$endif};
function gtk_notebook_get_pages(notebook: PGtkNotebook): PGListModel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_notebook_get_pages'{$endif};
function gtk_notebook_get_scrollable(notebook: PGtkNotebook): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_notebook_get_scrollable'{$endif};
function gtk_notebook_get_show_border(notebook: PGtkNotebook): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_notebook_get_show_border'{$endif};
function gtk_notebook_get_show_tabs(notebook: PGtkNotebook): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_notebook_get_show_tabs'{$endif};
function gtk_notebook_get_tab_detachable(notebook: PGtkNotebook; child: PGtkWidget): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_notebook_get_tab_detachable'{$endif};
function gtk_notebook_get_tab_label(notebook: PGtkNotebook; child: PGtkWidget): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_notebook_get_tab_label'{$endif};
function gtk_notebook_get_tab_label_text(notebook: PGtkNotebook; child: PGtkWidget): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_notebook_get_tab_label_text'{$endif};
function gtk_notebook_get_tab_pos(notebook: PGtkNotebook): TGtkPositionType; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_notebook_get_tab_pos'{$endif};
function gtk_notebook_get_tab_reorderable(notebook: PGtkNotebook; child: PGtkWidget): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_notebook_get_tab_reorderable'{$endif};
function gtk_notebook_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_notebook_get_type' {$endif};
function gtk_notebook_insert_page(notebook: PGtkNotebook; child: PGtkWidget; tab_label: PGtkWidget; position: gint): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_notebook_insert_page'{$endif};
function gtk_notebook_insert_page_menu(notebook: PGtkNotebook; child: PGtkWidget; tab_label: PGtkWidget; menu_label: PGtkWidget; position: gint): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_notebook_insert_page_menu'{$endif};
function gtk_notebook_new: PGtkNotebook; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_notebook_new'{$endif};
function gtk_notebook_page_get_child(page: PGtkNotebookPage): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_notebook_page_get_child'{$endif};
function gtk_notebook_page_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_notebook_page_get_type' {$endif};
function gtk_notebook_page_num(notebook: PGtkNotebook; child: PGtkWidget): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_notebook_page_num'{$endif};
function gtk_notebook_prepend_page(notebook: PGtkNotebook; child: PGtkWidget; tab_label: PGtkWidget): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_notebook_prepend_page'{$endif};
function gtk_notebook_prepend_page_menu(notebook: PGtkNotebook; child: PGtkWidget; tab_label: PGtkWidget; menu_label: PGtkWidget): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_notebook_prepend_page_menu'{$endif};
function gtk_nothing_action_get: PGtkNothingAction; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_nothing_action_get'{$endif};
function gtk_nothing_action_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_nothing_action_get_type' {$endif};
function gtk_numeric_sorter_get_expression(self: PGtkNumericSorter): PGtkExpression; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_numeric_sorter_get_expression'{$endif};
function gtk_numeric_sorter_get_sort_order(self: PGtkNumericSorter): TGtkSortType; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_numeric_sorter_get_sort_order'{$endif};
function gtk_numeric_sorter_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_numeric_sorter_get_type' {$endif};
function gtk_numeric_sorter_new(expression: PGtkExpression): PGtkNumericSorter; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_numeric_sorter_new'{$endif};
function gtk_object_expression_get_object(expression: PGtkObjectExpression): PGObject; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_object_expression_get_object'{$endif};
function gtk_object_expression_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_object_expression_get_type' {$endif};
function gtk_object_expression_new(object_: PGObject): PGtkObjectExpression; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_object_expression_new'{$endif};
function gtk_ordering_from_cmpfunc(cmpfunc_result: gint): TGtkOrdering; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_ordering_from_cmpfunc'{$endif};
function gtk_orientable_get_orientation(orientable: PGtkOrientable): TGtkOrientation; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_orientable_get_orientation'{$endif};
function gtk_orientable_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_orientable_get_type' {$endif};
function gtk_overlay_get_child(overlay: PGtkOverlay): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_overlay_get_child'{$endif};
function gtk_overlay_get_clip_overlay(overlay: PGtkOverlay; widget: PGtkWidget): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_overlay_get_clip_overlay'{$endif};
function gtk_overlay_get_measure_overlay(overlay: PGtkOverlay; widget: PGtkWidget): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_overlay_get_measure_overlay'{$endif};
function gtk_overlay_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_overlay_get_type' {$endif};
function gtk_overlay_layout_child_get_clip_overlay(child: PGtkOverlayLayoutChild): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_overlay_layout_child_get_clip_overlay'{$endif};
function gtk_overlay_layout_child_get_measure(child: PGtkOverlayLayoutChild): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_overlay_layout_child_get_measure'{$endif};
function gtk_overlay_layout_child_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_overlay_layout_child_get_type' {$endif};
function gtk_overlay_layout_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_overlay_layout_get_type' {$endif};
function gtk_overlay_layout_new: PGtkOverlayLayout; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_overlay_layout_new'{$endif};
function gtk_overlay_new: PGtkOverlay; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_overlay_new'{$endif};
function gtk_pad_controller_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_pad_controller_get_type' {$endif};
function gtk_pad_controller_new(group: PGActionGroup; pad: PGdkDevice): PGtkPadController; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_pad_controller_new'{$endif};
function gtk_page_setup_copy(other: PGtkPageSetup): PGtkPageSetup; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_page_setup_copy'{$endif};
function gtk_page_setup_get_bottom_margin(setup: PGtkPageSetup; unit_: TGtkUnit): gdouble; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_page_setup_get_bottom_margin'{$endif};
function gtk_page_setup_get_left_margin(setup: PGtkPageSetup; unit_: TGtkUnit): gdouble; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_page_setup_get_left_margin'{$endif};
function gtk_page_setup_get_orientation(setup: PGtkPageSetup): TGtkPageOrientation; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_page_setup_get_orientation'{$endif};
function gtk_page_setup_get_page_height(setup: PGtkPageSetup; unit_: TGtkUnit): gdouble; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_page_setup_get_page_height'{$endif};
function gtk_page_setup_get_page_width(setup: PGtkPageSetup; unit_: TGtkUnit): gdouble; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_page_setup_get_page_width'{$endif};
function gtk_page_setup_get_paper_height(setup: PGtkPageSetup; unit_: TGtkUnit): gdouble; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_page_setup_get_paper_height'{$endif};
function gtk_page_setup_get_paper_size(setup: PGtkPageSetup): PGtkPaperSize; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_page_setup_get_paper_size'{$endif};
function gtk_page_setup_get_paper_width(setup: PGtkPageSetup; unit_: TGtkUnit): gdouble; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_page_setup_get_paper_width'{$endif};
function gtk_page_setup_get_right_margin(setup: PGtkPageSetup; unit_: TGtkUnit): gdouble; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_page_setup_get_right_margin'{$endif};
function gtk_page_setup_get_top_margin(setup: PGtkPageSetup; unit_: TGtkUnit): gdouble; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_page_setup_get_top_margin'{$endif};
function gtk_page_setup_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_page_setup_get_type' {$endif};
function gtk_page_setup_load_file(setup: PGtkPageSetup; file_name: Pgchar; error: PPGError): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_page_setup_load_file'{$endif};
function gtk_page_setup_load_key_file(setup: PGtkPageSetup; key_file: PGKeyFile; group_name: Pgchar; error: PPGError): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_page_setup_load_key_file'{$endif};
function gtk_page_setup_new: PGtkPageSetup; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_page_setup_new'{$endif};
function gtk_page_setup_new_from_file(file_name: Pgchar; error: PPGError): PGtkPageSetup; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_page_setup_new_from_file'{$endif};
function gtk_page_setup_new_from_gvariant(variant: PGVariant): PGtkPageSetup; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_page_setup_new_from_gvariant'{$endif};
function gtk_page_setup_new_from_key_file(key_file: PGKeyFile; group_name: Pgchar; error: PPGError): PGtkPageSetup; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_page_setup_new_from_key_file'{$endif};
function gtk_page_setup_to_file(setup: PGtkPageSetup; file_name: Pgchar; error: PPGError): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_page_setup_to_file'{$endif};
function gtk_page_setup_to_gvariant(setup: PGtkPageSetup): PGVariant; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_page_setup_to_gvariant'{$endif};
function gtk_page_setup_unix_dialog_get_page_setup(dialog: PGtkPageSetupUnixDialog): PGtkPageSetup; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_page_setup_unix_dialog_get_page_setup'{$endif};
function gtk_page_setup_unix_dialog_get_print_settings(dialog: PGtkPageSetupUnixDialog): PGtkPrintSettings; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_page_setup_unix_dialog_get_print_settings'{$endif};
function gtk_page_setup_unix_dialog_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_page_setup_unix_dialog_get_type' {$endif};
function gtk_page_setup_unix_dialog_new(title: Pgchar; parent: PGtkWindow): PGtkPageSetupUnixDialog; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_page_setup_unix_dialog_new'{$endif};
function gtk_paned_get_end_child(paned: PGtkPaned): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_paned_get_end_child'{$endif};
function gtk_paned_get_position(paned: PGtkPaned): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_paned_get_position'{$endif};
function gtk_paned_get_resize_end_child(paned: PGtkPaned): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_paned_get_resize_end_child'{$endif};
function gtk_paned_get_resize_start_child(paned: PGtkPaned): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_paned_get_resize_start_child'{$endif};
function gtk_paned_get_shrink_end_child(paned: PGtkPaned): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_paned_get_shrink_end_child'{$endif};
function gtk_paned_get_shrink_start_child(paned: PGtkPaned): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_paned_get_shrink_start_child'{$endif};
function gtk_paned_get_start_child(paned: PGtkPaned): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_paned_get_start_child'{$endif};
function gtk_paned_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_paned_get_type' {$endif};
function gtk_paned_get_wide_handle(paned: PGtkPaned): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_paned_get_wide_handle'{$endif};
function gtk_paned_new(orientation: TGtkOrientation): PGtkPaned; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_paned_new'{$endif};
function gtk_paper_size_copy(other: PGtkPaperSize): PGtkPaperSize; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_paper_size_copy'{$endif};
function gtk_paper_size_get_default: Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_paper_size_get_default'{$endif};
function gtk_paper_size_get_default_bottom_margin(size: PGtkPaperSize; unit_: TGtkUnit): gdouble; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_paper_size_get_default_bottom_margin'{$endif};
function gtk_paper_size_get_default_left_margin(size: PGtkPaperSize; unit_: TGtkUnit): gdouble; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_paper_size_get_default_left_margin'{$endif};
function gtk_paper_size_get_default_right_margin(size: PGtkPaperSize; unit_: TGtkUnit): gdouble; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_paper_size_get_default_right_margin'{$endif};
function gtk_paper_size_get_default_top_margin(size: PGtkPaperSize; unit_: TGtkUnit): gdouble; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_paper_size_get_default_top_margin'{$endif};
function gtk_paper_size_get_display_name(size: PGtkPaperSize): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_paper_size_get_display_name'{$endif};
function gtk_paper_size_get_height(size: PGtkPaperSize; unit_: TGtkUnit): gdouble; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_paper_size_get_height'{$endif};
function gtk_paper_size_get_name(size: PGtkPaperSize): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_paper_size_get_name'{$endif};
function gtk_paper_size_get_paper_sizes(include_custom: gboolean): PGList; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_paper_size_get_paper_sizes'{$endif};
function gtk_paper_size_get_ppd_name(size: PGtkPaperSize): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_paper_size_get_ppd_name'{$endif};
function gtk_paper_size_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_paper_size_get_type' {$endif};
function gtk_paper_size_get_width(size: PGtkPaperSize; unit_: TGtkUnit): gdouble; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_paper_size_get_width'{$endif};
function gtk_paper_size_is_custom(size: PGtkPaperSize): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_paper_size_is_custom'{$endif};
function gtk_paper_size_is_equal(size1: PGtkPaperSize; size2: PGtkPaperSize): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_paper_size_is_equal'{$endif};
function gtk_paper_size_is_ipp(size: PGtkPaperSize): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_paper_size_is_ipp'{$endif};
function gtk_paper_size_new(name: Pgchar): PGtkPaperSize; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_paper_size_new'{$endif};
function gtk_paper_size_new_custom(name: Pgchar; display_name: Pgchar; width: gdouble; height: gdouble; unit_: TGtkUnit): PGtkPaperSize; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_paper_size_new_custom'{$endif};
function gtk_paper_size_new_from_gvariant(variant: PGVariant): PGtkPaperSize; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_paper_size_new_from_gvariant'{$endif};
function gtk_paper_size_new_from_ipp(ipp_name: Pgchar; width: gdouble; height: gdouble): PGtkPaperSize; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_paper_size_new_from_ipp'{$endif};
function gtk_paper_size_new_from_key_file(key_file: PGKeyFile; group_name: Pgchar; error: PPGError): PGtkPaperSize; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_paper_size_new_from_key_file'{$endif};
function gtk_paper_size_new_from_ppd(ppd_name: Pgchar; ppd_display_name: Pgchar; width: gdouble; height: gdouble): PGtkPaperSize; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_paper_size_new_from_ppd'{$endif};
function gtk_paper_size_to_gvariant(paper_size: PGtkPaperSize): PGVariant; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_paper_size_to_gvariant'{$endif};
function gtk_param_expression_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_param_expression_get_type' {$endif};
function gtk_param_spec_expression(name: Pgchar; nick: Pgchar; blurb: Pgchar; flags: TGParamFlags): PGParamSpec; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_param_spec_expression'{$endif};
function gtk_password_entry_buffer_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_password_entry_buffer_get_type' {$endif};
function gtk_password_entry_buffer_new: PGtkPasswordEntryBuffer; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_password_entry_buffer_new'{$endif};
function gtk_password_entry_get_extra_menu(entry: PGtkPasswordEntry): PGMenuModel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_password_entry_get_extra_menu'{$endif};
function gtk_password_entry_get_show_peek_icon(entry: PGtkPasswordEntry): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_password_entry_get_show_peek_icon'{$endif};
function gtk_password_entry_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_password_entry_get_type' {$endif};
function gtk_password_entry_new: PGtkPasswordEntry; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_password_entry_new'{$endif};
function gtk_picture_get_alternative_text(self: PGtkPicture): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_picture_get_alternative_text'{$endif};
function gtk_picture_get_can_shrink(self: PGtkPicture): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_picture_get_can_shrink'{$endif};
function gtk_picture_get_file(self: PGtkPicture): PGFile; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_picture_get_file'{$endif};
function gtk_picture_get_keep_aspect_ratio(self: PGtkPicture): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_picture_get_keep_aspect_ratio'{$endif};
function gtk_picture_get_paintable(self: PGtkPicture): PGdkPaintable; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_picture_get_paintable'{$endif};
function gtk_picture_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_picture_get_type' {$endif};
function gtk_picture_new: PGtkPicture; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_picture_new'{$endif};
function gtk_picture_new_for_file(file_: PGFile): PGtkPicture; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_picture_new_for_file'{$endif};
function gtk_picture_new_for_filename(filename: Pgchar): PGtkPicture; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_picture_new_for_filename'{$endif};
function gtk_picture_new_for_paintable(paintable: PGdkPaintable): PGtkPicture; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_picture_new_for_paintable'{$endif};
function gtk_picture_new_for_pixbuf(pixbuf: PGdkPixbuf): PGtkPicture; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_picture_new_for_pixbuf'{$endif};
function gtk_picture_new_for_resource(resource_path: Pgchar): PGtkPicture; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_picture_new_for_resource'{$endif};
function gtk_popover_get_autohide(popover: PGtkPopover): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_popover_get_autohide'{$endif};
function gtk_popover_get_cascade_popdown(popover: PGtkPopover): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_popover_get_cascade_popdown'{$endif};
function gtk_popover_get_child(popover: PGtkPopover): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_popover_get_child'{$endif};
function gtk_popover_get_has_arrow(popover: PGtkPopover): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_popover_get_has_arrow'{$endif};
function gtk_popover_get_mnemonics_visible(popover: PGtkPopover): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_popover_get_mnemonics_visible'{$endif};
function gtk_popover_get_pointing_to(popover: PGtkPopover; rect: PGdkRectangle): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_popover_get_pointing_to'{$endif};
function gtk_popover_get_position(popover: PGtkPopover): TGtkPositionType; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_popover_get_position'{$endif};
function gtk_popover_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_popover_get_type' {$endif};
function gtk_popover_menu_add_child(popover: PGtkPopoverMenu; child: PGtkWidget; id: Pgchar): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_popover_menu_add_child'{$endif};
function gtk_popover_menu_bar_add_child(bar: PGtkPopoverMenuBar; child: PGtkWidget; id: Pgchar): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_popover_menu_bar_add_child'{$endif};
function gtk_popover_menu_bar_get_menu_model(bar: PGtkPopoverMenuBar): PGMenuModel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_popover_menu_bar_get_menu_model'{$endif};
function gtk_popover_menu_bar_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_popover_menu_bar_get_type' {$endif};
function gtk_popover_menu_bar_new_from_model(model: PGMenuModel): PGtkPopoverMenuBar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_popover_menu_bar_new_from_model'{$endif};
function gtk_popover_menu_bar_remove_child(bar: PGtkPopoverMenuBar; child: PGtkWidget): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_popover_menu_bar_remove_child'{$endif};
function gtk_popover_menu_get_menu_model(popover: PGtkPopoverMenu): PGMenuModel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_popover_menu_get_menu_model'{$endif};
function gtk_popover_menu_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_popover_menu_get_type' {$endif};
function gtk_popover_menu_new_from_model(model: PGMenuModel): PGtkPopoverMenu; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_popover_menu_new_from_model'{$endif};
function gtk_popover_menu_new_from_model_full(model: PGMenuModel; flags: TGtkPopoverMenuFlags): PGtkPopoverMenu; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_popover_menu_new_from_model_full'{$endif};
function gtk_popover_menu_remove_child(popover: PGtkPopoverMenu; child: PGtkWidget): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_popover_menu_remove_child'{$endif};
function gtk_popover_new: PGtkPopover; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_popover_new'{$endif};
function gtk_print_context_create_pango_context(context: PGtkPrintContext): PPangoContext; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_context_create_pango_context'{$endif};
function gtk_print_context_create_pango_layout(context: PGtkPrintContext): PPangoLayout; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_context_create_pango_layout'{$endif};
function gtk_print_context_get_cairo_context(context: PGtkPrintContext): Pcairo_t; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_context_get_cairo_context'{$endif};
function gtk_print_context_get_dpi_x(context: PGtkPrintContext): gdouble; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_context_get_dpi_x'{$endif};
function gtk_print_context_get_dpi_y(context: PGtkPrintContext): gdouble; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_context_get_dpi_y'{$endif};
function gtk_print_context_get_hard_margins(context: PGtkPrintContext; top: Pgdouble; bottom: Pgdouble; left: Pgdouble; right: Pgdouble): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_context_get_hard_margins'{$endif};
function gtk_print_context_get_height(context: PGtkPrintContext): gdouble; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_context_get_height'{$endif};
function gtk_print_context_get_page_setup(context: PGtkPrintContext): PGtkPageSetup; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_context_get_page_setup'{$endif};
function gtk_print_context_get_pango_fontmap(context: PGtkPrintContext): PPangoFontMap; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_context_get_pango_fontmap'{$endif};
function gtk_print_context_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_print_context_get_type' {$endif};
function gtk_print_context_get_width(context: PGtkPrintContext): gdouble; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_context_get_width'{$endif};
function gtk_print_error_quark: TGQuark; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_error_quark'{$endif};
function gtk_print_job_get_collate(job: PGtkPrintJob): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_job_get_collate'{$endif};
function gtk_print_job_get_n_up(job: PGtkPrintJob): guint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_job_get_n_up'{$endif};
function gtk_print_job_get_n_up_layout(job: PGtkPrintJob): TGtkNumberUpLayout; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_job_get_n_up_layout'{$endif};
function gtk_print_job_get_num_copies(job: PGtkPrintJob): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_job_get_num_copies'{$endif};
function gtk_print_job_get_page_ranges(job: PGtkPrintJob; n_ranges: Pgint): PGtkPageRange; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_job_get_page_ranges'{$endif};
function gtk_print_job_get_page_set(job: PGtkPrintJob): TGtkPageSet; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_job_get_page_set'{$endif};
function gtk_print_job_get_pages(job: PGtkPrintJob): TGtkPrintPages; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_job_get_pages'{$endif};
function gtk_print_job_get_printer(job: PGtkPrintJob): PGtkPrinter; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_job_get_printer'{$endif};
function gtk_print_job_get_reverse(job: PGtkPrintJob): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_job_get_reverse'{$endif};
function gtk_print_job_get_rotate(job: PGtkPrintJob): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_job_get_rotate'{$endif};
function gtk_print_job_get_scale(job: PGtkPrintJob): gdouble; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_job_get_scale'{$endif};
function gtk_print_job_get_settings(job: PGtkPrintJob): PGtkPrintSettings; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_job_get_settings'{$endif};
function gtk_print_job_get_status(job: PGtkPrintJob): TGtkPrintStatus; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_job_get_status'{$endif};
function gtk_print_job_get_surface(job: PGtkPrintJob; error: PPGError): Pcairo_surface_t; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_job_get_surface'{$endif};
function gtk_print_job_get_title(job: PGtkPrintJob): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_job_get_title'{$endif};
function gtk_print_job_get_track_print_status(job: PGtkPrintJob): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_job_get_track_print_status'{$endif};
function gtk_print_job_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_print_job_get_type' {$endif};
function gtk_print_job_new(title: Pgchar; printer: PGtkPrinter; settings: PGtkPrintSettings; page_setup: PGtkPageSetup): PGtkPrintJob; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_job_new'{$endif};
function gtk_print_job_set_source_fd(job: PGtkPrintJob; fd: gint; error: PPGError): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_job_set_source_fd'{$endif};
function gtk_print_job_set_source_file(job: PGtkPrintJob; filename: Pgchar; error: PPGError): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_job_set_source_file'{$endif};
function gtk_print_operation_get_default_page_setup(op: PGtkPrintOperation): PGtkPageSetup; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_operation_get_default_page_setup'{$endif};
function gtk_print_operation_get_embed_page_setup(op: PGtkPrintOperation): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_operation_get_embed_page_setup'{$endif};
function gtk_print_operation_get_has_selection(op: PGtkPrintOperation): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_operation_get_has_selection'{$endif};
function gtk_print_operation_get_n_pages_to_print(op: PGtkPrintOperation): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_operation_get_n_pages_to_print'{$endif};
function gtk_print_operation_get_print_settings(op: PGtkPrintOperation): PGtkPrintSettings; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_operation_get_print_settings'{$endif};
function gtk_print_operation_get_status(op: PGtkPrintOperation): TGtkPrintStatus; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_operation_get_status'{$endif};
function gtk_print_operation_get_status_string(op: PGtkPrintOperation): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_operation_get_status_string'{$endif};
function gtk_print_operation_get_support_selection(op: PGtkPrintOperation): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_operation_get_support_selection'{$endif};
function gtk_print_operation_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_print_operation_get_type' {$endif};
function gtk_print_operation_is_finished(op: PGtkPrintOperation): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_operation_is_finished'{$endif};
function gtk_print_operation_new: PGtkPrintOperation; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_operation_new'{$endif};
function gtk_print_operation_preview_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_print_operation_preview_get_type' {$endif};
function gtk_print_operation_preview_is_selected(preview: PGtkPrintOperationPreview; page_nr: gint): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_operation_preview_is_selected'{$endif};
function gtk_print_operation_run(op: PGtkPrintOperation; action: TGtkPrintOperationAction; parent: PGtkWindow; error: PPGError): TGtkPrintOperationResult; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_operation_run'{$endif};
function gtk_print_run_page_setup_dialog(parent: PGtkWindow; page_setup: PGtkPageSetup; settings: PGtkPrintSettings): PGtkPageSetup; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_run_page_setup_dialog'{$endif};
function gtk_print_settings_copy(other: PGtkPrintSettings): PGtkPrintSettings; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_copy'{$endif};
function gtk_print_settings_get(settings: PGtkPrintSettings; key: Pgchar): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_get'{$endif};
function gtk_print_settings_get_bool(settings: PGtkPrintSettings; key: Pgchar): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_get_bool'{$endif};
function gtk_print_settings_get_collate(settings: PGtkPrintSettings): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_get_collate'{$endif};
function gtk_print_settings_get_default_source(settings: PGtkPrintSettings): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_get_default_source'{$endif};
function gtk_print_settings_get_dither(settings: PGtkPrintSettings): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_get_dither'{$endif};
function gtk_print_settings_get_double(settings: PGtkPrintSettings; key: Pgchar): gdouble; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_get_double'{$endif};
function gtk_print_settings_get_double_with_default(settings: PGtkPrintSettings; key: Pgchar; def: gdouble): gdouble; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_get_double_with_default'{$endif};
function gtk_print_settings_get_duplex(settings: PGtkPrintSettings): TGtkPrintDuplex; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_get_duplex'{$endif};
function gtk_print_settings_get_finishings(settings: PGtkPrintSettings): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_get_finishings'{$endif};
function gtk_print_settings_get_int(settings: PGtkPrintSettings; key: Pgchar): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_get_int'{$endif};
function gtk_print_settings_get_int_with_default(settings: PGtkPrintSettings; key: Pgchar; def: gint): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_get_int_with_default'{$endif};
function gtk_print_settings_get_length(settings: PGtkPrintSettings; key: Pgchar; unit_: TGtkUnit): gdouble; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_get_length'{$endif};
function gtk_print_settings_get_media_type(settings: PGtkPrintSettings): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_get_media_type'{$endif};
function gtk_print_settings_get_n_copies(settings: PGtkPrintSettings): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_get_n_copies'{$endif};
function gtk_print_settings_get_number_up(settings: PGtkPrintSettings): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_get_number_up'{$endif};
function gtk_print_settings_get_number_up_layout(settings: PGtkPrintSettings): TGtkNumberUpLayout; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_get_number_up_layout'{$endif};
function gtk_print_settings_get_orientation(settings: PGtkPrintSettings): TGtkPageOrientation; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_get_orientation'{$endif};
function gtk_print_settings_get_output_bin(settings: PGtkPrintSettings): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_get_output_bin'{$endif};
function gtk_print_settings_get_page_ranges(settings: PGtkPrintSettings; num_ranges: Pgint): PGtkPageRange; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_get_page_ranges'{$endif};
function gtk_print_settings_get_page_set(settings: PGtkPrintSettings): TGtkPageSet; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_get_page_set'{$endif};
function gtk_print_settings_get_paper_height(settings: PGtkPrintSettings; unit_: TGtkUnit): gdouble; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_get_paper_height'{$endif};
function gtk_print_settings_get_paper_size(settings: PGtkPrintSettings): PGtkPaperSize; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_get_paper_size'{$endif};
function gtk_print_settings_get_paper_width(settings: PGtkPrintSettings; unit_: TGtkUnit): gdouble; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_get_paper_width'{$endif};
function gtk_print_settings_get_print_pages(settings: PGtkPrintSettings): TGtkPrintPages; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_get_print_pages'{$endif};
function gtk_print_settings_get_printer(settings: PGtkPrintSettings): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_get_printer'{$endif};
function gtk_print_settings_get_printer_lpi(settings: PGtkPrintSettings): gdouble; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_get_printer_lpi'{$endif};
function gtk_print_settings_get_quality(settings: PGtkPrintSettings): TGtkPrintQuality; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_get_quality'{$endif};
function gtk_print_settings_get_resolution(settings: PGtkPrintSettings): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_get_resolution'{$endif};
function gtk_print_settings_get_resolution_x(settings: PGtkPrintSettings): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_get_resolution_x'{$endif};
function gtk_print_settings_get_resolution_y(settings: PGtkPrintSettings): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_get_resolution_y'{$endif};
function gtk_print_settings_get_reverse(settings: PGtkPrintSettings): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_get_reverse'{$endif};
function gtk_print_settings_get_scale(settings: PGtkPrintSettings): gdouble; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_get_scale'{$endif};
function gtk_print_settings_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_print_settings_get_type' {$endif};
function gtk_print_settings_get_use_color(settings: PGtkPrintSettings): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_get_use_color'{$endif};
function gtk_print_settings_has_key(settings: PGtkPrintSettings; key: Pgchar): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_has_key'{$endif};
function gtk_print_settings_load_file(settings: PGtkPrintSettings; file_name: Pgchar; error: PPGError): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_load_file'{$endif};
function gtk_print_settings_load_key_file(settings: PGtkPrintSettings; key_file: PGKeyFile; group_name: Pgchar; error: PPGError): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_load_key_file'{$endif};
function gtk_print_settings_new: PGtkPrintSettings; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_new'{$endif};
function gtk_print_settings_new_from_file(file_name: Pgchar; error: PPGError): PGtkPrintSettings; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_new_from_file'{$endif};
function gtk_print_settings_new_from_gvariant(variant: PGVariant): PGtkPrintSettings; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_new_from_gvariant'{$endif};
function gtk_print_settings_new_from_key_file(key_file: PGKeyFile; group_name: Pgchar; error: PPGError): PGtkPrintSettings; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_new_from_key_file'{$endif};
function gtk_print_settings_to_file(settings: PGtkPrintSettings; file_name: Pgchar; error: PPGError): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_to_file'{$endif};
function gtk_print_settings_to_gvariant(settings: PGtkPrintSettings): PGVariant; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_to_gvariant'{$endif};
function gtk_print_unix_dialog_get_current_page(dialog: PGtkPrintUnixDialog): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_unix_dialog_get_current_page'{$endif};
function gtk_print_unix_dialog_get_embed_page_setup(dialog: PGtkPrintUnixDialog): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_unix_dialog_get_embed_page_setup'{$endif};
function gtk_print_unix_dialog_get_has_selection(dialog: PGtkPrintUnixDialog): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_unix_dialog_get_has_selection'{$endif};
function gtk_print_unix_dialog_get_manual_capabilities(dialog: PGtkPrintUnixDialog): TGtkPrintCapabilities; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_unix_dialog_get_manual_capabilities'{$endif};
function gtk_print_unix_dialog_get_page_setup(dialog: PGtkPrintUnixDialog): PGtkPageSetup; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_unix_dialog_get_page_setup'{$endif};
function gtk_print_unix_dialog_get_page_setup_set(dialog: PGtkPrintUnixDialog): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_unix_dialog_get_page_setup_set'{$endif};
function gtk_print_unix_dialog_get_selected_printer(dialog: PGtkPrintUnixDialog): PGtkPrinter; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_unix_dialog_get_selected_printer'{$endif};
function gtk_print_unix_dialog_get_settings(dialog: PGtkPrintUnixDialog): PGtkPrintSettings; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_unix_dialog_get_settings'{$endif};
function gtk_print_unix_dialog_get_support_selection(dialog: PGtkPrintUnixDialog): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_unix_dialog_get_support_selection'{$endif};
function gtk_print_unix_dialog_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_print_unix_dialog_get_type' {$endif};
function gtk_print_unix_dialog_new(title: Pgchar; parent: PGtkWindow): PGtkPrintUnixDialog; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_unix_dialog_new'{$endif};
function gtk_printer_accepts_pdf(printer: PGtkPrinter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_printer_accepts_pdf'{$endif};
function gtk_printer_accepts_ps(printer: PGtkPrinter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_printer_accepts_ps'{$endif};
function gtk_printer_compare(a: PGtkPrinter; b: PGtkPrinter): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_printer_compare'{$endif};
function gtk_printer_get_backend(printer: PGtkPrinter): PGtkPrintBackend; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_printer_get_backend'{$endif};
function gtk_printer_get_capabilities(printer: PGtkPrinter): TGtkPrintCapabilities; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_printer_get_capabilities'{$endif};
function gtk_printer_get_default_page_size(printer: PGtkPrinter): PGtkPageSetup; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_printer_get_default_page_size'{$endif};
function gtk_printer_get_description(printer: PGtkPrinter): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_printer_get_description'{$endif};
function gtk_printer_get_hard_margins(printer: PGtkPrinter; top: Pgdouble; bottom: Pgdouble; left: Pgdouble; right: Pgdouble): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_printer_get_hard_margins'{$endif};
function gtk_printer_get_hard_margins_for_paper_size(printer: PGtkPrinter; paper_size: PGtkPaperSize; top: Pgdouble; bottom: Pgdouble; left: Pgdouble; right: Pgdouble): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_printer_get_hard_margins_for_paper_size'{$endif};
function gtk_printer_get_icon_name(printer: PGtkPrinter): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_printer_get_icon_name'{$endif};
function gtk_printer_get_job_count(printer: PGtkPrinter): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_printer_get_job_count'{$endif};
function gtk_printer_get_location(printer: PGtkPrinter): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_printer_get_location'{$endif};
function gtk_printer_get_name(printer: PGtkPrinter): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_printer_get_name'{$endif};
function gtk_printer_get_state_message(printer: PGtkPrinter): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_printer_get_state_message'{$endif};
function gtk_printer_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_printer_get_type' {$endif};
function gtk_printer_has_details(printer: PGtkPrinter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_printer_has_details'{$endif};
function gtk_printer_is_accepting_jobs(printer: PGtkPrinter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_printer_is_accepting_jobs'{$endif};
function gtk_printer_is_active(printer: PGtkPrinter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_printer_is_active'{$endif};
function gtk_printer_is_default(printer: PGtkPrinter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_printer_is_default'{$endif};
function gtk_printer_is_paused(printer: PGtkPrinter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_printer_is_paused'{$endif};
function gtk_printer_is_virtual(printer: PGtkPrinter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_printer_is_virtual'{$endif};
function gtk_printer_list_papers(printer: PGtkPrinter): PGList; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_printer_list_papers'{$endif};
function gtk_printer_new(name: Pgchar; backend: PGtkPrintBackend; virtual_: gboolean): PGtkPrinter; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_printer_new'{$endif};
function gtk_progress_bar_get_ellipsize(pbar: PGtkProgressBar): TPangoEllipsizeMode; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_progress_bar_get_ellipsize'{$endif};
function gtk_progress_bar_get_fraction(pbar: PGtkProgressBar): gdouble; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_progress_bar_get_fraction'{$endif};
function gtk_progress_bar_get_inverted(pbar: PGtkProgressBar): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_progress_bar_get_inverted'{$endif};
function gtk_progress_bar_get_pulse_step(pbar: PGtkProgressBar): gdouble; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_progress_bar_get_pulse_step'{$endif};
function gtk_progress_bar_get_show_text(pbar: PGtkProgressBar): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_progress_bar_get_show_text'{$endif};
function gtk_progress_bar_get_text(pbar: PGtkProgressBar): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_progress_bar_get_text'{$endif};
function gtk_progress_bar_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_progress_bar_get_type' {$endif};
function gtk_progress_bar_new: PGtkProgressBar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_progress_bar_new'{$endif};
function gtk_property_expression_get_expression(expression: PGtkPropertyExpression): PGtkExpression; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_property_expression_get_expression'{$endif};
function gtk_property_expression_get_pspec(expression: PGtkPropertyExpression): PGParamSpec; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_property_expression_get_pspec'{$endif};
function gtk_property_expression_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_property_expression_get_type' {$endif};
function gtk_property_expression_new(this_type: TGType; expression: PGtkExpression; property_name: Pgchar): PGtkPropertyExpression; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_property_expression_new'{$endif};
function gtk_property_expression_new_for_pspec(expression: PGtkExpression; pspec: PGParamSpec): PGtkPropertyExpression; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_property_expression_new_for_pspec'{$endif};
function gtk_range_get_adjustment(range: PGtkRange): PGtkAdjustment; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_range_get_adjustment'{$endif};
function gtk_range_get_fill_level(range: PGtkRange): gdouble; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_range_get_fill_level'{$endif};
function gtk_range_get_flippable(range: PGtkRange): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_range_get_flippable'{$endif};
function gtk_range_get_inverted(range: PGtkRange): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_range_get_inverted'{$endif};
function gtk_range_get_restrict_to_fill_level(range: PGtkRange): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_range_get_restrict_to_fill_level'{$endif};
function gtk_range_get_round_digits(range: PGtkRange): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_range_get_round_digits'{$endif};
function gtk_range_get_show_fill_level(range: PGtkRange): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_range_get_show_fill_level'{$endif};
function gtk_range_get_slider_size_fixed(range: PGtkRange): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_range_get_slider_size_fixed'{$endif};
function gtk_range_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_range_get_type' {$endif};
function gtk_range_get_value(range: PGtkRange): gdouble; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_range_get_value'{$endif};
function gtk_recent_info_create_app_info(info: PGtkRecentInfo; app_name: Pgchar; error: PPGError): PGAppInfo; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_recent_info_create_app_info'{$endif};
function gtk_recent_info_exists(info: PGtkRecentInfo): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_recent_info_exists'{$endif};
function gtk_recent_info_get_added(info: PGtkRecentInfo): PGDateTime; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_recent_info_get_added'{$endif};
function gtk_recent_info_get_age(info: PGtkRecentInfo): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_recent_info_get_age'{$endif};
function gtk_recent_info_get_application_info(info: PGtkRecentInfo; app_name: Pgchar; app_exec: PPgchar; count: Pguint; stamp: PPGDateTime): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_recent_info_get_application_info'{$endif};
function gtk_recent_info_get_applications(info: PGtkRecentInfo; length: Pgsize): PPgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_recent_info_get_applications'{$endif};
function gtk_recent_info_get_description(info: PGtkRecentInfo): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_recent_info_get_description'{$endif};
function gtk_recent_info_get_display_name(info: PGtkRecentInfo): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_recent_info_get_display_name'{$endif};
function gtk_recent_info_get_gicon(info: PGtkRecentInfo): PGIcon; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_recent_info_get_gicon'{$endif};
function gtk_recent_info_get_groups(info: PGtkRecentInfo; length: Pgsize): PPgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_recent_info_get_groups'{$endif};
function gtk_recent_info_get_mime_type(info: PGtkRecentInfo): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_recent_info_get_mime_type'{$endif};
function gtk_recent_info_get_modified(info: PGtkRecentInfo): PGDateTime; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_recent_info_get_modified'{$endif};
function gtk_recent_info_get_private_hint(info: PGtkRecentInfo): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_recent_info_get_private_hint'{$endif};
function gtk_recent_info_get_short_name(info: PGtkRecentInfo): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_recent_info_get_short_name'{$endif};
function gtk_recent_info_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_recent_info_get_type' {$endif};
function gtk_recent_info_get_uri(info: PGtkRecentInfo): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_recent_info_get_uri'{$endif};
function gtk_recent_info_get_uri_display(info: PGtkRecentInfo): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_recent_info_get_uri_display'{$endif};
function gtk_recent_info_get_visited(info: PGtkRecentInfo): PGDateTime; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_recent_info_get_visited'{$endif};
function gtk_recent_info_has_application(info: PGtkRecentInfo; app_name: Pgchar): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_recent_info_has_application'{$endif};
function gtk_recent_info_has_group(info: PGtkRecentInfo; group_name: Pgchar): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_recent_info_has_group'{$endif};
function gtk_recent_info_is_local(info: PGtkRecentInfo): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_recent_info_is_local'{$endif};
function gtk_recent_info_last_application(info: PGtkRecentInfo): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_recent_info_last_application'{$endif};
function gtk_recent_info_match(info_a: PGtkRecentInfo; info_b: PGtkRecentInfo): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_recent_info_match'{$endif};
function gtk_recent_info_ref(info: PGtkRecentInfo): PGtkRecentInfo; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_recent_info_ref'{$endif};
function gtk_recent_manager_add_full(manager: PGtkRecentManager; uri: Pgchar; recent_data: PGtkRecentData): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_recent_manager_add_full'{$endif};
function gtk_recent_manager_add_item(manager: PGtkRecentManager; uri: Pgchar): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_recent_manager_add_item'{$endif};
function gtk_recent_manager_error_quark: TGQuark; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_recent_manager_error_quark'{$endif};
function gtk_recent_manager_get_default: PGtkRecentManager; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_recent_manager_get_default'{$endif};
function gtk_recent_manager_get_items(manager: PGtkRecentManager): PGList; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_recent_manager_get_items'{$endif};
function gtk_recent_manager_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_recent_manager_get_type' {$endif};
function gtk_recent_manager_has_item(manager: PGtkRecentManager; uri: Pgchar): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_recent_manager_has_item'{$endif};
function gtk_recent_manager_lookup_item(manager: PGtkRecentManager; uri: Pgchar; error: PPGError): PGtkRecentInfo; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_recent_manager_lookup_item'{$endif};
function gtk_recent_manager_move_item(manager: PGtkRecentManager; uri: Pgchar; new_uri: Pgchar; error: PPGError): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_recent_manager_move_item'{$endif};
function gtk_recent_manager_new: PGtkRecentManager; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_recent_manager_new'{$endif};
function gtk_recent_manager_purge_items(manager: PGtkRecentManager; error: PPGError): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_recent_manager_purge_items'{$endif};
function gtk_recent_manager_remove_item(manager: PGtkRecentManager; uri: Pgchar; error: PPGError): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_recent_manager_remove_item'{$endif};
function gtk_requisition_copy(requisition: PGtkRequisition): PGtkRequisition; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_requisition_copy'{$endif};
function gtk_requisition_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_requisition_get_type' {$endif};
function gtk_requisition_new: PGtkRequisition; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_requisition_new'{$endif};
function gtk_revealer_get_child(revealer: PGtkRevealer): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_revealer_get_child'{$endif};
function gtk_revealer_get_child_revealed(revealer: PGtkRevealer): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_revealer_get_child_revealed'{$endif};
function gtk_revealer_get_reveal_child(revealer: PGtkRevealer): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_revealer_get_reveal_child'{$endif};
function gtk_revealer_get_transition_duration(revealer: PGtkRevealer): guint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_revealer_get_transition_duration'{$endif};
function gtk_revealer_get_transition_type(revealer: PGtkRevealer): TGtkRevealerTransitionType; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_revealer_get_transition_type'{$endif};
function gtk_revealer_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_revealer_get_type' {$endif};
function gtk_revealer_new: PGtkRevealer; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_revealer_new'{$endif};
function gtk_root_get_display(self: PGtkRoot): PGdkDisplay; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_root_get_display'{$endif};
function gtk_root_get_focus(self: PGtkRoot): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_root_get_focus'{$endif};
function gtk_root_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_root_get_type' {$endif};
function gtk_scale_button_get_adjustment(button: PGtkScaleButton): PGtkAdjustment; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scale_button_get_adjustment'{$endif};
function gtk_scale_button_get_minus_button(button: PGtkScaleButton): PGtkButton; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scale_button_get_minus_button'{$endif};
function gtk_scale_button_get_plus_button(button: PGtkScaleButton): PGtkButton; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scale_button_get_plus_button'{$endif};
function gtk_scale_button_get_popup(button: PGtkScaleButton): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scale_button_get_popup'{$endif};
function gtk_scale_button_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_scale_button_get_type' {$endif};
function gtk_scale_button_get_value(button: PGtkScaleButton): gdouble; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scale_button_get_value'{$endif};
function gtk_scale_button_new(min: gdouble; max: gdouble; step: gdouble; icons: PPgchar): PGtkScaleButton; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scale_button_new'{$endif};
function gtk_scale_get_digits(scale: PGtkScale): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scale_get_digits'{$endif};
function gtk_scale_get_draw_value(scale: PGtkScale): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scale_get_draw_value'{$endif};
function gtk_scale_get_has_origin(scale: PGtkScale): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scale_get_has_origin'{$endif};
function gtk_scale_get_layout(scale: PGtkScale): PPangoLayout; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scale_get_layout'{$endif};
function gtk_scale_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_scale_get_type' {$endif};
function gtk_scale_get_value_pos(scale: PGtkScale): TGtkPositionType; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scale_get_value_pos'{$endif};
function gtk_scale_new(orientation: TGtkOrientation; adjustment: PGtkAdjustment): PGtkScale; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scale_new'{$endif};
function gtk_scale_new_with_range(orientation: TGtkOrientation; min: gdouble; max: gdouble; step: gdouble): PGtkScale; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scale_new_with_range'{$endif};
function gtk_scrollable_get_border(scrollable: PGtkScrollable; border: PGtkBorder): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scrollable_get_border'{$endif};
function gtk_scrollable_get_hadjustment(scrollable: PGtkScrollable): PGtkAdjustment; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scrollable_get_hadjustment'{$endif};
function gtk_scrollable_get_hscroll_policy(scrollable: PGtkScrollable): TGtkScrollablePolicy; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scrollable_get_hscroll_policy'{$endif};
function gtk_scrollable_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_scrollable_get_type' {$endif};
function gtk_scrollable_get_vadjustment(scrollable: PGtkScrollable): PGtkAdjustment; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scrollable_get_vadjustment'{$endif};
function gtk_scrollable_get_vscroll_policy(scrollable: PGtkScrollable): TGtkScrollablePolicy; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scrollable_get_vscroll_policy'{$endif};
function gtk_scrollbar_get_adjustment(self: PGtkScrollbar): PGtkAdjustment; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scrollbar_get_adjustment'{$endif};
function gtk_scrollbar_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_scrollbar_get_type' {$endif};
function gtk_scrollbar_new(orientation: TGtkOrientation; adjustment: PGtkAdjustment): PGtkScrollbar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scrollbar_new'{$endif};
function gtk_scrolled_window_get_child(scrolled_window: PGtkScrolledWindow): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scrolled_window_get_child'{$endif};
function gtk_scrolled_window_get_hadjustment(scrolled_window: PGtkScrolledWindow): PGtkAdjustment; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scrolled_window_get_hadjustment'{$endif};
function gtk_scrolled_window_get_has_frame(scrolled_window: PGtkScrolledWindow): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scrolled_window_get_has_frame'{$endif};
function gtk_scrolled_window_get_hscrollbar(scrolled_window: PGtkScrolledWindow): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scrolled_window_get_hscrollbar'{$endif};
function gtk_scrolled_window_get_kinetic_scrolling(scrolled_window: PGtkScrolledWindow): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scrolled_window_get_kinetic_scrolling'{$endif};
function gtk_scrolled_window_get_max_content_height(scrolled_window: PGtkScrolledWindow): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scrolled_window_get_max_content_height'{$endif};
function gtk_scrolled_window_get_max_content_width(scrolled_window: PGtkScrolledWindow): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scrolled_window_get_max_content_width'{$endif};
function gtk_scrolled_window_get_min_content_height(scrolled_window: PGtkScrolledWindow): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scrolled_window_get_min_content_height'{$endif};
function gtk_scrolled_window_get_min_content_width(scrolled_window: PGtkScrolledWindow): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scrolled_window_get_min_content_width'{$endif};
function gtk_scrolled_window_get_overlay_scrolling(scrolled_window: PGtkScrolledWindow): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scrolled_window_get_overlay_scrolling'{$endif};
function gtk_scrolled_window_get_placement(scrolled_window: PGtkScrolledWindow): TGtkCornerType; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scrolled_window_get_placement'{$endif};
function gtk_scrolled_window_get_propagate_natural_height(scrolled_window: PGtkScrolledWindow): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scrolled_window_get_propagate_natural_height'{$endif};
function gtk_scrolled_window_get_propagate_natural_width(scrolled_window: PGtkScrolledWindow): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scrolled_window_get_propagate_natural_width'{$endif};
function gtk_scrolled_window_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_scrolled_window_get_type' {$endif};
function gtk_scrolled_window_get_vadjustment(scrolled_window: PGtkScrolledWindow): PGtkAdjustment; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scrolled_window_get_vadjustment'{$endif};
function gtk_scrolled_window_get_vscrollbar(scrolled_window: PGtkScrolledWindow): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scrolled_window_get_vscrollbar'{$endif};
function gtk_scrolled_window_new: PGtkScrolledWindow; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scrolled_window_new'{$endif};
function gtk_search_bar_get_child(bar: PGtkSearchBar): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_search_bar_get_child'{$endif};
function gtk_search_bar_get_key_capture_widget(bar: PGtkSearchBar): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_search_bar_get_key_capture_widget'{$endif};
function gtk_search_bar_get_search_mode(bar: PGtkSearchBar): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_search_bar_get_search_mode'{$endif};
function gtk_search_bar_get_show_close_button(bar: PGtkSearchBar): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_search_bar_get_show_close_button'{$endif};
function gtk_search_bar_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_search_bar_get_type' {$endif};
function gtk_search_bar_new: PGtkSearchBar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_search_bar_new'{$endif};
function gtk_search_entry_get_key_capture_widget(entry: PGtkSearchEntry): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_search_entry_get_key_capture_widget'{$endif};
function gtk_search_entry_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_search_entry_get_type' {$endif};
function gtk_search_entry_new: PGtkSearchEntry; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_search_entry_new'{$endif};
function gtk_selection_filter_model_get_model(self: PGtkSelectionFilterModel): PGtkSelectionModel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_selection_filter_model_get_model'{$endif};
function gtk_selection_filter_model_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_selection_filter_model_get_type' {$endif};
function gtk_selection_filter_model_new(model: PGtkSelectionModel): PGtkSelectionFilterModel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_selection_filter_model_new'{$endif};
function gtk_selection_model_get_selection(model: PGtkSelectionModel): PGtkBitset; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_selection_model_get_selection'{$endif};
function gtk_selection_model_get_selection_in_range(model: PGtkSelectionModel; position: guint; n_items: guint): PGtkBitset; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_selection_model_get_selection_in_range'{$endif};
function gtk_selection_model_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_selection_model_get_type' {$endif};
function gtk_selection_model_is_selected(model: PGtkSelectionModel; position: guint): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_selection_model_is_selected'{$endif};
function gtk_selection_model_select_all(model: PGtkSelectionModel): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_selection_model_select_all'{$endif};
function gtk_selection_model_select_item(model: PGtkSelectionModel; position: guint; unselect_rest: gboolean): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_selection_model_select_item'{$endif};
function gtk_selection_model_select_range(model: PGtkSelectionModel; position: guint; n_items: guint; unselect_rest: gboolean): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_selection_model_select_range'{$endif};
function gtk_selection_model_set_selection(model: PGtkSelectionModel; selected: PGtkBitset; mask: PGtkBitset): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_selection_model_set_selection'{$endif};
function gtk_selection_model_unselect_all(model: PGtkSelectionModel): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_selection_model_unselect_all'{$endif};
function gtk_selection_model_unselect_item(model: PGtkSelectionModel; position: guint): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_selection_model_unselect_item'{$endif};
function gtk_selection_model_unselect_range(model: PGtkSelectionModel; position: guint; n_items: guint): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_selection_model_unselect_range'{$endif};
function gtk_separator_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_separator_get_type' {$endif};
function gtk_separator_new(orientation: TGtkOrientation): PGtkSeparator; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_separator_new'{$endif};
function gtk_settings_get_default: PGtkSettings; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_settings_get_default'{$endif};
function gtk_settings_get_for_display(display: PGdkDisplay): PGtkSettings; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_settings_get_for_display'{$endif};
function gtk_settings_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_settings_get_type' {$endif};
function gtk_shortcut_action_activate(self: PGtkShortcutAction; flags: TGtkShortcutActionFlags; widget: PGtkWidget; args: PGVariant): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_shortcut_action_activate'{$endif};
function gtk_shortcut_action_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_shortcut_action_get_type' {$endif};
function gtk_shortcut_action_parse_string(string_: Pgchar): PGtkShortcutAction; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_shortcut_action_parse_string'{$endif};
function gtk_shortcut_action_to_string(self: PGtkShortcutAction): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_shortcut_action_to_string'{$endif};
function gtk_shortcut_controller_get_mnemonics_modifiers(self: PGtkShortcutController): TGdkModifierType; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_shortcut_controller_get_mnemonics_modifiers'{$endif};
function gtk_shortcut_controller_get_scope(self: PGtkShortcutController): TGtkShortcutScope; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_shortcut_controller_get_scope'{$endif};
function gtk_shortcut_controller_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_shortcut_controller_get_type' {$endif};
function gtk_shortcut_controller_new: PGtkShortcutController; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_shortcut_controller_new'{$endif};
function gtk_shortcut_controller_new_for_model(model: PGListModel): PGtkShortcutController; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_shortcut_controller_new_for_model'{$endif};
function gtk_shortcut_get_action(self: PGtkShortcut): PGtkShortcutAction; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_shortcut_get_action'{$endif};
function gtk_shortcut_get_arguments(self: PGtkShortcut): PGVariant; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_shortcut_get_arguments'{$endif};
function gtk_shortcut_get_trigger(self: PGtkShortcut): PGtkShortcutTrigger; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_shortcut_get_trigger'{$endif};
function gtk_shortcut_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_shortcut_get_type' {$endif};
function gtk_shortcut_label_get_accelerator(self: PGtkShortcutLabel): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_shortcut_label_get_accelerator'{$endif};
function gtk_shortcut_label_get_disabled_text(self: PGtkShortcutLabel): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_shortcut_label_get_disabled_text'{$endif};
function gtk_shortcut_label_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_shortcut_label_get_type' {$endif};
function gtk_shortcut_label_new(accelerator: Pgchar): PGtkShortcutLabel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_shortcut_label_new'{$endif};
function gtk_shortcut_manager_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_shortcut_manager_get_type' {$endif};
function gtk_shortcut_new(trigger: PGtkShortcutTrigger; action: PGtkShortcutAction): PGtkShortcut; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_shortcut_new'{$endif};
function gtk_shortcut_new_with_arguments(trigger: PGtkShortcutTrigger; action: PGtkShortcutAction; format_string: Pgchar; args: array of const): PGtkShortcut; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_shortcut_new_with_arguments'{$endif};
function gtk_shortcut_trigger_compare(trigger1: PGtkShortcutTrigger; trigger2: PGtkShortcutTrigger): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_shortcut_trigger_compare'{$endif};
function gtk_shortcut_trigger_equal(trigger1: PGtkShortcutTrigger; trigger2: PGtkShortcutTrigger): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_shortcut_trigger_equal'{$endif};
function gtk_shortcut_trigger_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_shortcut_trigger_get_type' {$endif};
function gtk_shortcut_trigger_hash(trigger: PGtkShortcutTrigger): guint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_shortcut_trigger_hash'{$endif};
function gtk_shortcut_trigger_parse_string(string_: Pgchar): PGtkShortcutTrigger; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_shortcut_trigger_parse_string'{$endif};
function gtk_shortcut_trigger_print_label(self: PGtkShortcutTrigger; display: PGdkDisplay; string_: PGString): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_shortcut_trigger_print_label'{$endif};
function gtk_shortcut_trigger_to_label(self: PGtkShortcutTrigger; display: PGdkDisplay): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_shortcut_trigger_to_label'{$endif};
function gtk_shortcut_trigger_to_string(self: PGtkShortcutTrigger): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_shortcut_trigger_to_string'{$endif};
function gtk_shortcut_trigger_trigger(self: PGtkShortcutTrigger; event: PGdkEvent; enable_mnemonics: gboolean): TGdkKeyMatch; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_shortcut_trigger_trigger'{$endif};
function gtk_shortcuts_group_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_shortcuts_group_get_type' {$endif};
function gtk_shortcuts_section_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_shortcuts_section_get_type' {$endif};
function gtk_shortcuts_shortcut_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_shortcuts_shortcut_get_type' {$endif};
function gtk_shortcuts_window_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_shortcuts_window_get_type' {$endif};
function gtk_show_uri_full_finish(parent: PGtkWindow; result_: PGAsyncResult; error: PPGError): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_show_uri_full_finish'{$endif};
function gtk_signal_action_get_signal_name(self: PGtkSignalAction): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_signal_action_get_signal_name'{$endif};
function gtk_signal_action_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_signal_action_get_type' {$endif};
function gtk_signal_action_new(signal_name: Pgchar): PGtkSignalAction; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_signal_action_new'{$endif};
function gtk_signal_list_item_factory_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_signal_list_item_factory_get_type' {$endif};
function gtk_signal_list_item_factory_new: PGtkSignalListItemFactory; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_signal_list_item_factory_new'{$endif};
function gtk_single_selection_get_autoselect(self: PGtkSingleSelection): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_single_selection_get_autoselect'{$endif};
function gtk_single_selection_get_can_unselect(self: PGtkSingleSelection): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_single_selection_get_can_unselect'{$endif};
function gtk_single_selection_get_model(self: PGtkSingleSelection): PGListModel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_single_selection_get_model'{$endif};
function gtk_single_selection_get_selected(self: PGtkSingleSelection): guint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_single_selection_get_selected'{$endif};
function gtk_single_selection_get_selected_item(self: PGtkSingleSelection): PGObject; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_single_selection_get_selected_item'{$endif};
function gtk_single_selection_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_single_selection_get_type' {$endif};
function gtk_single_selection_new(model: PGListModel): PGtkSingleSelection; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_single_selection_new'{$endif};
function gtk_size_group_get_mode(size_group: PGtkSizeGroup): TGtkSizeGroupMode; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_size_group_get_mode'{$endif};
function gtk_size_group_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_size_group_get_type' {$endif};
function gtk_size_group_get_widgets(size_group: PGtkSizeGroup): PGSList; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_size_group_get_widgets'{$endif};
function gtk_size_group_new(mode: TGtkSizeGroupMode): PGtkSizeGroup; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_size_group_new'{$endif};
function gtk_slice_list_model_get_model(self: PGtkSliceListModel): PGListModel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_slice_list_model_get_model'{$endif};
function gtk_slice_list_model_get_offset(self: PGtkSliceListModel): guint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_slice_list_model_get_offset'{$endif};
function gtk_slice_list_model_get_size(self: PGtkSliceListModel): guint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_slice_list_model_get_size'{$endif};
function gtk_slice_list_model_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_slice_list_model_get_type' {$endif};
function gtk_slice_list_model_new(model: PGListModel; offset: guint; size: guint): PGtkSliceListModel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_slice_list_model_new'{$endif};
function gtk_snapshot_append_cairo(snapshot: PGtkSnapshot; bounds: Pgraphene_rect_t): Pcairo_t; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_snapshot_append_cairo'{$endif};
function gtk_snapshot_free_to_node(snapshot: PGtkSnapshot): PGskRenderNode; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_snapshot_free_to_node'{$endif};
function gtk_snapshot_free_to_paintable(snapshot: PGtkSnapshot; size: Pgraphene_size_t): PGdkPaintable; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_snapshot_free_to_paintable'{$endif};
function gtk_snapshot_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_snapshot_get_type' {$endif};
function gtk_snapshot_new: PGtkSnapshot; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_snapshot_new'{$endif};
function gtk_snapshot_to_node(snapshot: PGtkSnapshot): PGskRenderNode; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_snapshot_to_node'{$endif};
function gtk_snapshot_to_paintable(snapshot: PGtkSnapshot; size: Pgraphene_size_t): PGdkPaintable; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_snapshot_to_paintable'{$endif};
function gtk_sort_list_model_get_incremental(self: PGtkSortListModel): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_sort_list_model_get_incremental'{$endif};
function gtk_sort_list_model_get_model(self: PGtkSortListModel): PGListModel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_sort_list_model_get_model'{$endif};
function gtk_sort_list_model_get_pending(self: PGtkSortListModel): guint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_sort_list_model_get_pending'{$endif};
function gtk_sort_list_model_get_sorter(self: PGtkSortListModel): PGtkSorter; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_sort_list_model_get_sorter'{$endif};
function gtk_sort_list_model_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_sort_list_model_get_type' {$endif};
function gtk_sort_list_model_new(model: PGListModel; sorter: PGtkSorter): PGtkSortListModel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_sort_list_model_new'{$endif};
function gtk_sorter_compare(self: PGtkSorter; item1: PGObject; item2: PGObject): TGtkOrdering; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_sorter_compare'{$endif};
function gtk_sorter_get_order(self: PGtkSorter): TGtkSorterOrder; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_sorter_get_order'{$endif};
function gtk_sorter_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_sorter_get_type' {$endif};
function gtk_spin_button_get_adjustment(spin_button: PGtkSpinButton): PGtkAdjustment; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_spin_button_get_adjustment'{$endif};
function gtk_spin_button_get_climb_rate(spin_button: PGtkSpinButton): gdouble; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_spin_button_get_climb_rate'{$endif};
function gtk_spin_button_get_digits(spin_button: PGtkSpinButton): guint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_spin_button_get_digits'{$endif};
function gtk_spin_button_get_numeric(spin_button: PGtkSpinButton): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_spin_button_get_numeric'{$endif};
function gtk_spin_button_get_snap_to_ticks(spin_button: PGtkSpinButton): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_spin_button_get_snap_to_ticks'{$endif};
function gtk_spin_button_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_spin_button_get_type' {$endif};
function gtk_spin_button_get_update_policy(spin_button: PGtkSpinButton): TGtkSpinButtonUpdatePolicy; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_spin_button_get_update_policy'{$endif};
function gtk_spin_button_get_value(spin_button: PGtkSpinButton): gdouble; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_spin_button_get_value'{$endif};
function gtk_spin_button_get_value_as_int(spin_button: PGtkSpinButton): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_spin_button_get_value_as_int'{$endif};
function gtk_spin_button_get_wrap(spin_button: PGtkSpinButton): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_spin_button_get_wrap'{$endif};
function gtk_spin_button_new(adjustment: PGtkAdjustment; climb_rate: gdouble; digits: guint): PGtkSpinButton; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_spin_button_new'{$endif};
function gtk_spin_button_new_with_range(min: gdouble; max: gdouble; step: gdouble): PGtkSpinButton; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_spin_button_new_with_range'{$endif};
function gtk_spinner_get_spinning(spinner: PGtkSpinner): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_spinner_get_spinning'{$endif};
function gtk_spinner_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_spinner_get_type' {$endif};
function gtk_spinner_new: PGtkSpinner; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_spinner_new'{$endif};
function gtk_stack_add_child(stack: PGtkStack; child: PGtkWidget): PGtkStackPage; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_stack_add_child'{$endif};
function gtk_stack_add_named(stack: PGtkStack; child: PGtkWidget; name: Pgchar): PGtkStackPage; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_stack_add_named'{$endif};
function gtk_stack_add_titled(stack: PGtkStack; child: PGtkWidget; name: Pgchar; title: Pgchar): PGtkStackPage; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_stack_add_titled'{$endif};
function gtk_stack_get_child_by_name(stack: PGtkStack; name: Pgchar): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_stack_get_child_by_name'{$endif};
function gtk_stack_get_hhomogeneous(stack: PGtkStack): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_stack_get_hhomogeneous'{$endif};
function gtk_stack_get_interpolate_size(stack: PGtkStack): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_stack_get_interpolate_size'{$endif};
function gtk_stack_get_page(stack: PGtkStack; child: PGtkWidget): PGtkStackPage; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_stack_get_page'{$endif};
function gtk_stack_get_pages(stack: PGtkStack): PGtkSelectionModel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_stack_get_pages'{$endif};
function gtk_stack_get_transition_duration(stack: PGtkStack): guint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_stack_get_transition_duration'{$endif};
function gtk_stack_get_transition_running(stack: PGtkStack): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_stack_get_transition_running'{$endif};
function gtk_stack_get_transition_type(stack: PGtkStack): TGtkStackTransitionType; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_stack_get_transition_type'{$endif};
function gtk_stack_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_stack_get_type' {$endif};
function gtk_stack_get_vhomogeneous(stack: PGtkStack): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_stack_get_vhomogeneous'{$endif};
function gtk_stack_get_visible_child(stack: PGtkStack): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_stack_get_visible_child'{$endif};
function gtk_stack_get_visible_child_name(stack: PGtkStack): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_stack_get_visible_child_name'{$endif};
function gtk_stack_new: PGtkStack; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_stack_new'{$endif};
function gtk_stack_page_get_child(self: PGtkStackPage): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_stack_page_get_child'{$endif};
function gtk_stack_page_get_icon_name(self: PGtkStackPage): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_stack_page_get_icon_name'{$endif};
function gtk_stack_page_get_name(self: PGtkStackPage): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_stack_page_get_name'{$endif};
function gtk_stack_page_get_needs_attention(self: PGtkStackPage): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_stack_page_get_needs_attention'{$endif};
function gtk_stack_page_get_title(self: PGtkStackPage): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_stack_page_get_title'{$endif};
function gtk_stack_page_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_stack_page_get_type' {$endif};
function gtk_stack_page_get_use_underline(self: PGtkStackPage): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_stack_page_get_use_underline'{$endif};
function gtk_stack_page_get_visible(self: PGtkStackPage): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_stack_page_get_visible'{$endif};
function gtk_stack_sidebar_get_stack(self: PGtkStackSidebar): PGtkStack; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_stack_sidebar_get_stack'{$endif};
function gtk_stack_sidebar_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_stack_sidebar_get_type' {$endif};
function gtk_stack_sidebar_new: PGtkStackSidebar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_stack_sidebar_new'{$endif};
function gtk_stack_switcher_get_stack(switcher: PGtkStackSwitcher): PGtkStack; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_stack_switcher_get_stack'{$endif};
function gtk_stack_switcher_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_stack_switcher_get_type' {$endif};
function gtk_stack_switcher_new: PGtkStackSwitcher; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_stack_switcher_new'{$endif};
function gtk_statusbar_get_context_id(statusbar: PGtkStatusbar; context_description: Pgchar): guint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_statusbar_get_context_id'{$endif};
function gtk_statusbar_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_statusbar_get_type' {$endif};
function gtk_statusbar_new: PGtkStatusbar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_statusbar_new'{$endif};
function gtk_statusbar_push(statusbar: PGtkStatusbar; context_id: guint; text: Pgchar): guint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_statusbar_push'{$endif};
function gtk_string_filter_get_expression(self: PGtkStringFilter): PGtkExpression; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_string_filter_get_expression'{$endif};
function gtk_string_filter_get_ignore_case(self: PGtkStringFilter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_string_filter_get_ignore_case'{$endif};
function gtk_string_filter_get_match_mode(self: PGtkStringFilter): TGtkStringFilterMatchMode; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_string_filter_get_match_mode'{$endif};
function gtk_string_filter_get_search(self: PGtkStringFilter): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_string_filter_get_search'{$endif};
function gtk_string_filter_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_string_filter_get_type' {$endif};
function gtk_string_filter_new(expression: PGtkExpression): PGtkStringFilter; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_string_filter_new'{$endif};
function gtk_string_list_get_string(self: PGtkStringList; position: guint): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_string_list_get_string'{$endif};
function gtk_string_list_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_string_list_get_type' {$endif};
function gtk_string_list_new(strings: PPgchar): PGtkStringList; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_string_list_new'{$endif};
function gtk_string_object_get_string(self: PGtkStringObject): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_string_object_get_string'{$endif};
function gtk_string_object_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_string_object_get_type' {$endif};
function gtk_string_object_new(string_: Pgchar): PGtkStringObject; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_string_object_new'{$endif};
function gtk_string_sorter_get_expression(self: PGtkStringSorter): PGtkExpression; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_string_sorter_get_expression'{$endif};
function gtk_string_sorter_get_ignore_case(self: PGtkStringSorter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_string_sorter_get_ignore_case'{$endif};
function gtk_string_sorter_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_string_sorter_get_type' {$endif};
function gtk_string_sorter_new(expression: PGtkExpression): PGtkStringSorter; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_string_sorter_new'{$endif};
function gtk_style_context_get_display(context: PGtkStyleContext): PGdkDisplay; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_style_context_get_display'{$endif};
function gtk_style_context_get_scale(context: PGtkStyleContext): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_style_context_get_scale'{$endif};
function gtk_style_context_get_state(context: PGtkStyleContext): TGtkStateFlags; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_style_context_get_state'{$endif};
function gtk_style_context_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_style_context_get_type' {$endif};
function gtk_style_context_has_class(context: PGtkStyleContext; class_name: Pgchar): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_style_context_has_class'{$endif};
function gtk_style_context_lookup_color(context: PGtkStyleContext; color_name: Pgchar; color: PGdkRGBA): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_style_context_lookup_color'{$endif};
function gtk_style_context_to_string(context: PGtkStyleContext; flags: TGtkStyleContextPrintFlags): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_style_context_to_string'{$endif};
function gtk_style_provider_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_style_provider_get_type' {$endif};
function gtk_switch_get_active(self: PGtkSwitch): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_switch_get_active'{$endif};
function gtk_switch_get_state(self: PGtkSwitch): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_switch_get_state'{$endif};
function gtk_switch_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_switch_get_type' {$endif};
function gtk_switch_new: PGtkSwitch; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_switch_new'{$endif};
function gtk_symbolic_paintable_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_symbolic_paintable_get_type' {$endif};
function gtk_test_accessible_check_property(accessible: PGtkAccessible; property_: TGtkAccessibleProperty; args: array of const): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_test_accessible_check_property'{$endif};
function gtk_test_accessible_check_relation(accessible: PGtkAccessible; relation: TGtkAccessibleRelation; args: array of const): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_test_accessible_check_relation'{$endif};
function gtk_test_accessible_check_state(accessible: PGtkAccessible; state: TGtkAccessibleState; args: array of const): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_test_accessible_check_state'{$endif};
function gtk_test_accessible_has_property(accessible: PGtkAccessible; property_: TGtkAccessibleProperty): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_test_accessible_has_property'{$endif};
function gtk_test_accessible_has_relation(accessible: PGtkAccessible; relation: TGtkAccessibleRelation): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_test_accessible_has_relation'{$endif};
function gtk_test_accessible_has_role(accessible: PGtkAccessible; role: TGtkAccessibleRole): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_test_accessible_has_role'{$endif};
function gtk_test_accessible_has_state(accessible: PGtkAccessible; state: TGtkAccessibleState): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_test_accessible_has_state'{$endif};
function gtk_test_list_all_types(n_types: Pguint): PGType; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_test_list_all_types'{$endif};
function gtk_text_buffer_backspace(buffer: PGtkTextBuffer; iter: PGtkTextIter; interactive: gboolean; default_editable: gboolean): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_backspace'{$endif};
function gtk_text_buffer_create_child_anchor(buffer: PGtkTextBuffer; iter: PGtkTextIter): PGtkTextChildAnchor; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_create_child_anchor'{$endif};
function gtk_text_buffer_create_mark(buffer: PGtkTextBuffer; mark_name: Pgchar; where: PGtkTextIter; left_gravity: gboolean): PGtkTextMark; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_create_mark'{$endif};
function gtk_text_buffer_create_tag(buffer: PGtkTextBuffer; tag_name: Pgchar; first_property_name: Pgchar; args: array of const): PGtkTextTag; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_create_tag'{$endif};
function gtk_text_buffer_delete_interactive(buffer: PGtkTextBuffer; start_iter: PGtkTextIter; end_iter: PGtkTextIter; default_editable: gboolean): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_delete_interactive'{$endif};
function gtk_text_buffer_delete_selection(buffer: PGtkTextBuffer; interactive: gboolean; default_editable: gboolean): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_delete_selection'{$endif};
function gtk_text_buffer_get_can_redo(buffer: PGtkTextBuffer): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_get_can_redo'{$endif};
function gtk_text_buffer_get_can_undo(buffer: PGtkTextBuffer): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_get_can_undo'{$endif};
function gtk_text_buffer_get_char_count(buffer: PGtkTextBuffer): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_get_char_count'{$endif};
function gtk_text_buffer_get_enable_undo(buffer: PGtkTextBuffer): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_get_enable_undo'{$endif};
function gtk_text_buffer_get_has_selection(buffer: PGtkTextBuffer): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_get_has_selection'{$endif};
function gtk_text_buffer_get_insert(buffer: PGtkTextBuffer): PGtkTextMark; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_get_insert'{$endif};
function gtk_text_buffer_get_iter_at_line(buffer: PGtkTextBuffer; iter: PGtkTextIter; line_number: gint): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_get_iter_at_line'{$endif};
function gtk_text_buffer_get_iter_at_line_index(buffer: PGtkTextBuffer; iter: PGtkTextIter; line_number: gint; byte_index: gint): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_get_iter_at_line_index'{$endif};
function gtk_text_buffer_get_iter_at_line_offset(buffer: PGtkTextBuffer; iter: PGtkTextIter; line_number: gint; char_offset: gint): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_get_iter_at_line_offset'{$endif};
function gtk_text_buffer_get_line_count(buffer: PGtkTextBuffer): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_get_line_count'{$endif};
function gtk_text_buffer_get_mark(buffer: PGtkTextBuffer; name: Pgchar): PGtkTextMark; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_get_mark'{$endif};
function gtk_text_buffer_get_max_undo_levels(buffer: PGtkTextBuffer): guint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_get_max_undo_levels'{$endif};
function gtk_text_buffer_get_modified(buffer: PGtkTextBuffer): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_get_modified'{$endif};
function gtk_text_buffer_get_selection_bound(buffer: PGtkTextBuffer): PGtkTextMark; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_get_selection_bound'{$endif};
function gtk_text_buffer_get_selection_bounds(buffer: PGtkTextBuffer; start: PGtkTextIter; end_: PGtkTextIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_get_selection_bounds'{$endif};
function gtk_text_buffer_get_selection_content(buffer: PGtkTextBuffer): PGdkContentProvider; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_get_selection_content'{$endif};
function gtk_text_buffer_get_slice(buffer: PGtkTextBuffer; start: PGtkTextIter; end_: PGtkTextIter; include_hidden_chars: gboolean): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_get_slice'{$endif};
function gtk_text_buffer_get_tag_table(buffer: PGtkTextBuffer): PGtkTextTagTable; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_get_tag_table'{$endif};
function gtk_text_buffer_get_text(buffer: PGtkTextBuffer; start: PGtkTextIter; end_: PGtkTextIter; include_hidden_chars: gboolean): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_get_text'{$endif};
function gtk_text_buffer_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_text_buffer_get_type' {$endif};
function gtk_text_buffer_insert_interactive(buffer: PGtkTextBuffer; iter: PGtkTextIter; text: Pgchar; len: gint; default_editable: gboolean): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_insert_interactive'{$endif};
function gtk_text_buffer_insert_interactive_at_cursor(buffer: PGtkTextBuffer; text: Pgchar; len: gint; default_editable: gboolean): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_insert_interactive_at_cursor'{$endif};
function gtk_text_buffer_insert_range_interactive(buffer: PGtkTextBuffer; iter: PGtkTextIter; start: PGtkTextIter; end_: PGtkTextIter; default_editable: gboolean): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_insert_range_interactive'{$endif};
function gtk_text_buffer_new(table: PGtkTextTagTable): PGtkTextBuffer; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_new'{$endif};
function gtk_text_child_anchor_get_deleted(anchor: PGtkTextChildAnchor): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_child_anchor_get_deleted'{$endif};
function gtk_text_child_anchor_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_text_child_anchor_get_type' {$endif};
function gtk_text_child_anchor_get_widgets(anchor: PGtkTextChildAnchor; out_len: Pguint): PPGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_child_anchor_get_widgets'{$endif};
function gtk_text_child_anchor_new: PGtkTextChildAnchor; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_child_anchor_new'{$endif};
function gtk_text_child_anchor_new_with_replacement(character: Pgchar): PGtkTextChildAnchor; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_child_anchor_new_with_replacement'{$endif};
function gtk_text_get_activates_default(self: PGtkText): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_get_activates_default'{$endif};
function gtk_text_get_attributes(self: PGtkText): PPangoAttrList; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_get_attributes'{$endif};
function gtk_text_get_buffer(self: PGtkText): PGtkEntryBuffer; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_get_buffer'{$endif};
function gtk_text_get_enable_emoji_completion(self: PGtkText): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_get_enable_emoji_completion'{$endif};
function gtk_text_get_extra_menu(self: PGtkText): PGMenuModel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_get_extra_menu'{$endif};
function gtk_text_get_input_hints(self: PGtkText): TGtkInputHints; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_get_input_hints'{$endif};
function gtk_text_get_input_purpose(self: PGtkText): TGtkInputPurpose; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_get_input_purpose'{$endif};
function gtk_text_get_invisible_char(self: PGtkText): gunichar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_get_invisible_char'{$endif};
function gtk_text_get_max_length(self: PGtkText): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_get_max_length'{$endif};
function gtk_text_get_overwrite_mode(self: PGtkText): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_get_overwrite_mode'{$endif};
function gtk_text_get_placeholder_text(self: PGtkText): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_get_placeholder_text'{$endif};
function gtk_text_get_propagate_text_width(self: PGtkText): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_get_propagate_text_width'{$endif};
function gtk_text_get_tabs(self: PGtkText): PPangoTabArray; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_get_tabs'{$endif};
function gtk_text_get_text_length(self: PGtkText): guint16; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_get_text_length'{$endif};
function gtk_text_get_truncate_multiline(self: PGtkText): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_get_truncate_multiline'{$endif};
function gtk_text_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_text_get_type' {$endif};
function gtk_text_get_visibility(self: PGtkText): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_get_visibility'{$endif};
function gtk_text_grab_focus_without_selecting(self: PGtkText): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_grab_focus_without_selecting'{$endif};
function gtk_text_iter_backward_char(iter: PGtkTextIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_backward_char'{$endif};
function gtk_text_iter_backward_chars(iter: PGtkTextIter; count: gint): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_backward_chars'{$endif};
function gtk_text_iter_backward_cursor_position(iter: PGtkTextIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_backward_cursor_position'{$endif};
function gtk_text_iter_backward_cursor_positions(iter: PGtkTextIter; count: gint): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_backward_cursor_positions'{$endif};
function gtk_text_iter_backward_find_char(iter: PGtkTextIter; pred: TGtkTextCharPredicate; user_data: gpointer; limit: PGtkTextIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_backward_find_char'{$endif};
function gtk_text_iter_backward_line(iter: PGtkTextIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_backward_line'{$endif};
function gtk_text_iter_backward_lines(iter: PGtkTextIter; count: gint): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_backward_lines'{$endif};
function gtk_text_iter_backward_search(iter: PGtkTextIter; str: Pgchar; flags: TGtkTextSearchFlags; match_start: PGtkTextIter; match_end: PGtkTextIter; limit: PGtkTextIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_backward_search'{$endif};
function gtk_text_iter_backward_sentence_start(iter: PGtkTextIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_backward_sentence_start'{$endif};
function gtk_text_iter_backward_sentence_starts(iter: PGtkTextIter; count: gint): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_backward_sentence_starts'{$endif};
function gtk_text_iter_backward_to_tag_toggle(iter: PGtkTextIter; tag: PGtkTextTag): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_backward_to_tag_toggle'{$endif};
function gtk_text_iter_backward_visible_cursor_position(iter: PGtkTextIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_backward_visible_cursor_position'{$endif};
function gtk_text_iter_backward_visible_cursor_positions(iter: PGtkTextIter; count: gint): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_backward_visible_cursor_positions'{$endif};
function gtk_text_iter_backward_visible_line(iter: PGtkTextIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_backward_visible_line'{$endif};
function gtk_text_iter_backward_visible_lines(iter: PGtkTextIter; count: gint): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_backward_visible_lines'{$endif};
function gtk_text_iter_backward_visible_word_start(iter: PGtkTextIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_backward_visible_word_start'{$endif};
function gtk_text_iter_backward_visible_word_starts(iter: PGtkTextIter; count: gint): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_backward_visible_word_starts'{$endif};
function gtk_text_iter_backward_word_start(iter: PGtkTextIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_backward_word_start'{$endif};
function gtk_text_iter_backward_word_starts(iter: PGtkTextIter; count: gint): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_backward_word_starts'{$endif};
function gtk_text_iter_can_insert(iter: PGtkTextIter; default_editability: gboolean): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_can_insert'{$endif};
function gtk_text_iter_compare(lhs: PGtkTextIter; rhs: PGtkTextIter): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_compare'{$endif};
function gtk_text_iter_copy(iter: PGtkTextIter): PGtkTextIter; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_copy'{$endif};
function gtk_text_iter_editable(iter: PGtkTextIter; default_setting: gboolean): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_editable'{$endif};
function gtk_text_iter_ends_line(iter: PGtkTextIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_ends_line'{$endif};
function gtk_text_iter_ends_sentence(iter: PGtkTextIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_ends_sentence'{$endif};
function gtk_text_iter_ends_tag(iter: PGtkTextIter; tag: PGtkTextTag): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_ends_tag'{$endif};
function gtk_text_iter_ends_word(iter: PGtkTextIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_ends_word'{$endif};
function gtk_text_iter_equal(lhs: PGtkTextIter; rhs: PGtkTextIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_equal'{$endif};
function gtk_text_iter_forward_char(iter: PGtkTextIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_forward_char'{$endif};
function gtk_text_iter_forward_chars(iter: PGtkTextIter; count: gint): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_forward_chars'{$endif};
function gtk_text_iter_forward_cursor_position(iter: PGtkTextIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_forward_cursor_position'{$endif};
function gtk_text_iter_forward_cursor_positions(iter: PGtkTextIter; count: gint): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_forward_cursor_positions'{$endif};
function gtk_text_iter_forward_find_char(iter: PGtkTextIter; pred: TGtkTextCharPredicate; user_data: gpointer; limit: PGtkTextIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_forward_find_char'{$endif};
function gtk_text_iter_forward_line(iter: PGtkTextIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_forward_line'{$endif};
function gtk_text_iter_forward_lines(iter: PGtkTextIter; count: gint): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_forward_lines'{$endif};
function gtk_text_iter_forward_search(iter: PGtkTextIter; str: Pgchar; flags: TGtkTextSearchFlags; match_start: PGtkTextIter; match_end: PGtkTextIter; limit: PGtkTextIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_forward_search'{$endif};
function gtk_text_iter_forward_sentence_end(iter: PGtkTextIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_forward_sentence_end'{$endif};
function gtk_text_iter_forward_sentence_ends(iter: PGtkTextIter; count: gint): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_forward_sentence_ends'{$endif};
function gtk_text_iter_forward_to_line_end(iter: PGtkTextIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_forward_to_line_end'{$endif};
function gtk_text_iter_forward_to_tag_toggle(iter: PGtkTextIter; tag: PGtkTextTag): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_forward_to_tag_toggle'{$endif};
function gtk_text_iter_forward_visible_cursor_position(iter: PGtkTextIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_forward_visible_cursor_position'{$endif};
function gtk_text_iter_forward_visible_cursor_positions(iter: PGtkTextIter; count: gint): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_forward_visible_cursor_positions'{$endif};
function gtk_text_iter_forward_visible_line(iter: PGtkTextIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_forward_visible_line'{$endif};
function gtk_text_iter_forward_visible_lines(iter: PGtkTextIter; count: gint): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_forward_visible_lines'{$endif};
function gtk_text_iter_forward_visible_word_end(iter: PGtkTextIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_forward_visible_word_end'{$endif};
function gtk_text_iter_forward_visible_word_ends(iter: PGtkTextIter; count: gint): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_forward_visible_word_ends'{$endif};
function gtk_text_iter_forward_word_end(iter: PGtkTextIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_forward_word_end'{$endif};
function gtk_text_iter_forward_word_ends(iter: PGtkTextIter; count: gint): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_forward_word_ends'{$endif};
function gtk_text_iter_get_buffer(iter: PGtkTextIter): PGtkTextBuffer; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_get_buffer'{$endif};
function gtk_text_iter_get_bytes_in_line(iter: PGtkTextIter): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_get_bytes_in_line'{$endif};
function gtk_text_iter_get_char(iter: PGtkTextIter): gunichar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_get_char'{$endif};
function gtk_text_iter_get_chars_in_line(iter: PGtkTextIter): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_get_chars_in_line'{$endif};
function gtk_text_iter_get_child_anchor(iter: PGtkTextIter): PGtkTextChildAnchor; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_get_child_anchor'{$endif};
function gtk_text_iter_get_language(iter: PGtkTextIter): PPangoLanguage; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_get_language'{$endif};
function gtk_text_iter_get_line(iter: PGtkTextIter): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_get_line'{$endif};
function gtk_text_iter_get_line_index(iter: PGtkTextIter): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_get_line_index'{$endif};
function gtk_text_iter_get_line_offset(iter: PGtkTextIter): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_get_line_offset'{$endif};
function gtk_text_iter_get_marks(iter: PGtkTextIter): PGSList; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_get_marks'{$endif};
function gtk_text_iter_get_offset(iter: PGtkTextIter): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_get_offset'{$endif};
function gtk_text_iter_get_paintable(iter: PGtkTextIter): PGdkPaintable; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_get_paintable'{$endif};
function gtk_text_iter_get_slice(start: PGtkTextIter; end_: PGtkTextIter): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_get_slice'{$endif};
function gtk_text_iter_get_tags(iter: PGtkTextIter): PGSList; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_get_tags'{$endif};
function gtk_text_iter_get_text(start: PGtkTextIter; end_: PGtkTextIter): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_get_text'{$endif};
function gtk_text_iter_get_toggled_tags(iter: PGtkTextIter; toggled_on: gboolean): PGSList; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_get_toggled_tags'{$endif};
function gtk_text_iter_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_text_iter_get_type' {$endif};
function gtk_text_iter_get_visible_line_index(iter: PGtkTextIter): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_get_visible_line_index'{$endif};
function gtk_text_iter_get_visible_line_offset(iter: PGtkTextIter): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_get_visible_line_offset'{$endif};
function gtk_text_iter_get_visible_slice(start: PGtkTextIter; end_: PGtkTextIter): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_get_visible_slice'{$endif};
function gtk_text_iter_get_visible_text(start: PGtkTextIter; end_: PGtkTextIter): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_get_visible_text'{$endif};
function gtk_text_iter_has_tag(iter: PGtkTextIter; tag: PGtkTextTag): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_has_tag'{$endif};
function gtk_text_iter_in_range(iter: PGtkTextIter; start: PGtkTextIter; end_: PGtkTextIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_in_range'{$endif};
function gtk_text_iter_inside_sentence(iter: PGtkTextIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_inside_sentence'{$endif};
function gtk_text_iter_inside_word(iter: PGtkTextIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_inside_word'{$endif};
function gtk_text_iter_is_cursor_position(iter: PGtkTextIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_is_cursor_position'{$endif};
function gtk_text_iter_is_end(iter: PGtkTextIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_is_end'{$endif};
function gtk_text_iter_is_start(iter: PGtkTextIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_is_start'{$endif};
function gtk_text_iter_starts_line(iter: PGtkTextIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_starts_line'{$endif};
function gtk_text_iter_starts_sentence(iter: PGtkTextIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_starts_sentence'{$endif};
function gtk_text_iter_starts_tag(iter: PGtkTextIter; tag: PGtkTextTag): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_starts_tag'{$endif};
function gtk_text_iter_starts_word(iter: PGtkTextIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_starts_word'{$endif};
function gtk_text_iter_toggles_tag(iter: PGtkTextIter; tag: PGtkTextTag): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_toggles_tag'{$endif};
function gtk_text_mark_get_buffer(mark: PGtkTextMark): PGtkTextBuffer; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_mark_get_buffer'{$endif};
function gtk_text_mark_get_deleted(mark: PGtkTextMark): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_mark_get_deleted'{$endif};
function gtk_text_mark_get_left_gravity(mark: PGtkTextMark): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_mark_get_left_gravity'{$endif};
function gtk_text_mark_get_name(mark: PGtkTextMark): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_mark_get_name'{$endif};
function gtk_text_mark_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_text_mark_get_type' {$endif};
function gtk_text_mark_get_visible(mark: PGtkTextMark): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_mark_get_visible'{$endif};
function gtk_text_mark_new(name: Pgchar; left_gravity: gboolean): PGtkTextMark; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_mark_new'{$endif};
function gtk_text_new: PGtkText; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_new'{$endif};
function gtk_text_new_with_buffer(buffer: PGtkEntryBuffer): PGtkText; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_new_with_buffer'{$endif};
function gtk_text_tag_get_priority(tag: PGtkTextTag): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_tag_get_priority'{$endif};
function gtk_text_tag_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_text_tag_get_type' {$endif};
function gtk_text_tag_new(name: Pgchar): PGtkTextTag; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_tag_new'{$endif};
function gtk_text_tag_table_add(table: PGtkTextTagTable; tag: PGtkTextTag): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_tag_table_add'{$endif};
function gtk_text_tag_table_get_size(table: PGtkTextTagTable): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_tag_table_get_size'{$endif};
function gtk_text_tag_table_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_text_tag_table_get_type' {$endif};
function gtk_text_tag_table_lookup(table: PGtkTextTagTable; name: Pgchar): PGtkTextTag; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_tag_table_lookup'{$endif};
function gtk_text_tag_table_new: PGtkTextTagTable; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_tag_table_new'{$endif};
function gtk_text_view_backward_display_line(text_view: PGtkTextView; iter: PGtkTextIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_backward_display_line'{$endif};
function gtk_text_view_backward_display_line_start(text_view: PGtkTextView; iter: PGtkTextIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_backward_display_line_start'{$endif};
function gtk_text_view_forward_display_line(text_view: PGtkTextView; iter: PGtkTextIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_forward_display_line'{$endif};
function gtk_text_view_forward_display_line_end(text_view: PGtkTextView; iter: PGtkTextIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_forward_display_line_end'{$endif};
function gtk_text_view_get_accepts_tab(text_view: PGtkTextView): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_get_accepts_tab'{$endif};
function gtk_text_view_get_bottom_margin(text_view: PGtkTextView): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_get_bottom_margin'{$endif};
function gtk_text_view_get_buffer(text_view: PGtkTextView): PGtkTextBuffer; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_get_buffer'{$endif};
function gtk_text_view_get_cursor_visible(text_view: PGtkTextView): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_get_cursor_visible'{$endif};
function gtk_text_view_get_editable(text_view: PGtkTextView): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_get_editable'{$endif};
function gtk_text_view_get_extra_menu(text_view: PGtkTextView): PGMenuModel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_get_extra_menu'{$endif};
function gtk_text_view_get_gutter(text_view: PGtkTextView; win: TGtkTextWindowType): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_get_gutter'{$endif};
function gtk_text_view_get_indent(text_view: PGtkTextView): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_get_indent'{$endif};
function gtk_text_view_get_input_hints(text_view: PGtkTextView): TGtkInputHints; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_get_input_hints'{$endif};
function gtk_text_view_get_input_purpose(text_view: PGtkTextView): TGtkInputPurpose; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_get_input_purpose'{$endif};
function gtk_text_view_get_iter_at_location(text_view: PGtkTextView; iter: PGtkTextIter; x: gint; y: gint): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_get_iter_at_location'{$endif};
function gtk_text_view_get_iter_at_position(text_view: PGtkTextView; iter: PGtkTextIter; trailing: Pgint; x: gint; y: gint): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_get_iter_at_position'{$endif};
function gtk_text_view_get_justification(text_view: PGtkTextView): TGtkJustification; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_get_justification'{$endif};
function gtk_text_view_get_left_margin(text_view: PGtkTextView): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_get_left_margin'{$endif};
function gtk_text_view_get_ltr_context(text_view: PGtkTextView): PPangoContext; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_get_ltr_context'{$endif};
function gtk_text_view_get_monospace(text_view: PGtkTextView): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_get_monospace'{$endif};
function gtk_text_view_get_overwrite(text_view: PGtkTextView): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_get_overwrite'{$endif};
function gtk_text_view_get_pixels_above_lines(text_view: PGtkTextView): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_get_pixels_above_lines'{$endif};
function gtk_text_view_get_pixels_below_lines(text_view: PGtkTextView): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_get_pixels_below_lines'{$endif};
function gtk_text_view_get_pixels_inside_wrap(text_view: PGtkTextView): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_get_pixels_inside_wrap'{$endif};
function gtk_text_view_get_right_margin(text_view: PGtkTextView): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_get_right_margin'{$endif};
function gtk_text_view_get_rtl_context(text_view: PGtkTextView): PPangoContext; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_get_rtl_context'{$endif};
function gtk_text_view_get_tabs(text_view: PGtkTextView): PPangoTabArray; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_get_tabs'{$endif};
function gtk_text_view_get_top_margin(text_view: PGtkTextView): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_get_top_margin'{$endif};
function gtk_text_view_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_text_view_get_type' {$endif};
function gtk_text_view_get_wrap_mode(text_view: PGtkTextView): TGtkWrapMode; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_get_wrap_mode'{$endif};
function gtk_text_view_im_context_filter_keypress(text_view: PGtkTextView; event: PGdkEvent): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_im_context_filter_keypress'{$endif};
function gtk_text_view_move_mark_onscreen(text_view: PGtkTextView; mark: PGtkTextMark): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_move_mark_onscreen'{$endif};
function gtk_text_view_move_visually(text_view: PGtkTextView; iter: PGtkTextIter; count: gint): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_move_visually'{$endif};
function gtk_text_view_new: PGtkTextView; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_new'{$endif};
function gtk_text_view_new_with_buffer(buffer: PGtkTextBuffer): PGtkTextView; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_new_with_buffer'{$endif};
function gtk_text_view_place_cursor_onscreen(text_view: PGtkTextView): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_place_cursor_onscreen'{$endif};
function gtk_text_view_scroll_to_iter(text_view: PGtkTextView; iter: PGtkTextIter; within_margin: gdouble; use_align: gboolean; xalign: gdouble; yalign: gdouble): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_scroll_to_iter'{$endif};
function gtk_text_view_starts_display_line(text_view: PGtkTextView; iter: PGtkTextIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_starts_display_line'{$endif};
function gtk_toggle_button_get_active(toggle_button: PGtkToggleButton): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_toggle_button_get_active'{$endif};
function gtk_toggle_button_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_toggle_button_get_type' {$endif};
function gtk_toggle_button_new: PGtkToggleButton; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_toggle_button_new'{$endif};
function gtk_toggle_button_new_with_label(label_: Pgchar): PGtkToggleButton; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_toggle_button_new_with_label'{$endif};
function gtk_toggle_button_new_with_mnemonic(label_: Pgchar): PGtkToggleButton; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_toggle_button_new_with_mnemonic'{$endif};
function gtk_tooltip_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_tooltip_get_type' {$endif};
function gtk_tree_create_row_drag_content(tree_model: PGtkTreeModel; path: PGtkTreePath): PGdkContentProvider; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_create_row_drag_content'{$endif};
function gtk_tree_drag_dest_drag_data_received(drag_dest: PGtkTreeDragDest; dest: PGtkTreePath; value: PGValue): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_drag_dest_drag_data_received'{$endif};
function gtk_tree_drag_dest_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_tree_drag_dest_get_type' {$endif};
function gtk_tree_drag_dest_row_drop_possible(drag_dest: PGtkTreeDragDest; dest_path: PGtkTreePath; value: PGValue): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_drag_dest_row_drop_possible'{$endif};
function gtk_tree_drag_source_drag_data_delete(drag_source: PGtkTreeDragSource; path: PGtkTreePath): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_drag_source_drag_data_delete'{$endif};
function gtk_tree_drag_source_drag_data_get(drag_source: PGtkTreeDragSource; path: PGtkTreePath): PGdkContentProvider; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_drag_source_drag_data_get'{$endif};
function gtk_tree_drag_source_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_tree_drag_source_get_type' {$endif};
function gtk_tree_drag_source_row_draggable(drag_source: PGtkTreeDragSource; path: PGtkTreePath): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_drag_source_row_draggable'{$endif};
function gtk_tree_expander_get_child(self: PGtkTreeExpander): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_expander_get_child'{$endif};
function gtk_tree_expander_get_indent_for_icon(self: PGtkTreeExpander): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_expander_get_indent_for_icon'{$endif};
function gtk_tree_expander_get_item(self: PGtkTreeExpander): PGObject; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_expander_get_item'{$endif};
function gtk_tree_expander_get_list_row(self: PGtkTreeExpander): PGtkTreeListRow; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_expander_get_list_row'{$endif};
function gtk_tree_expander_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_tree_expander_get_type' {$endif};
function gtk_tree_expander_new: PGtkTreeExpander; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_expander_new'{$endif};
function gtk_tree_get_row_drag_data(value: PGValue; tree_model: PPGtkTreeModel; path: PPGtkTreePath): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_get_row_drag_data'{$endif};
function gtk_tree_iter_copy(iter: PGtkTreeIter): PGtkTreeIter; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_iter_copy'{$endif};
function gtk_tree_iter_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_tree_iter_get_type' {$endif};
function gtk_tree_list_model_get_autoexpand(self: PGtkTreeListModel): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_list_model_get_autoexpand'{$endif};
function gtk_tree_list_model_get_child_row(self: PGtkTreeListModel; position: guint): PGtkTreeListRow; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_list_model_get_child_row'{$endif};
function gtk_tree_list_model_get_model(self: PGtkTreeListModel): PGListModel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_list_model_get_model'{$endif};
function gtk_tree_list_model_get_passthrough(self: PGtkTreeListModel): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_list_model_get_passthrough'{$endif};
function gtk_tree_list_model_get_row(self: PGtkTreeListModel; position: guint): PGtkTreeListRow; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_list_model_get_row'{$endif};
function gtk_tree_list_model_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_tree_list_model_get_type' {$endif};
function gtk_tree_list_model_new(root: PGListModel; passthrough: gboolean; autoexpand: gboolean; create_func: TGtkTreeListModelCreateModelFunc; user_data: gpointer; user_destroy: TGDestroyNotify): PGtkTreeListModel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_list_model_new'{$endif};
function gtk_tree_list_row_get_child_row(self: PGtkTreeListRow; position: guint): PGtkTreeListRow; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_list_row_get_child_row'{$endif};
function gtk_tree_list_row_get_children(self: PGtkTreeListRow): PGListModel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_list_row_get_children'{$endif};
function gtk_tree_list_row_get_depth(self: PGtkTreeListRow): guint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_list_row_get_depth'{$endif};
function gtk_tree_list_row_get_expanded(self: PGtkTreeListRow): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_list_row_get_expanded'{$endif};
function gtk_tree_list_row_get_item(self: PGtkTreeListRow): PGObject; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_list_row_get_item'{$endif};
function gtk_tree_list_row_get_parent(self: PGtkTreeListRow): PGtkTreeListRow; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_list_row_get_parent'{$endif};
function gtk_tree_list_row_get_position(self: PGtkTreeListRow): guint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_list_row_get_position'{$endif};
function gtk_tree_list_row_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_tree_list_row_get_type' {$endif};
function gtk_tree_list_row_is_expandable(self: PGtkTreeListRow): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_list_row_is_expandable'{$endif};
function gtk_tree_list_row_sorter_get_sorter(self: PGtkTreeListRowSorter): PGtkSorter; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_list_row_sorter_get_sorter'{$endif};
function gtk_tree_list_row_sorter_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_tree_list_row_sorter_get_type' {$endif};
function gtk_tree_list_row_sorter_new(sorter: PGtkSorter): PGtkTreeListRowSorter; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_list_row_sorter_new'{$endif};
function gtk_tree_model_filter_convert_child_iter_to_iter(filter: PGtkTreeModelFilter; filter_iter: PGtkTreeIter; child_iter: PGtkTreeIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_model_filter_convert_child_iter_to_iter'{$endif};
function gtk_tree_model_filter_convert_child_path_to_path(filter: PGtkTreeModelFilter; child_path: PGtkTreePath): PGtkTreePath; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_model_filter_convert_child_path_to_path'{$endif};
function gtk_tree_model_filter_convert_path_to_child_path(filter: PGtkTreeModelFilter; filter_path: PGtkTreePath): PGtkTreePath; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_model_filter_convert_path_to_child_path'{$endif};
function gtk_tree_model_filter_get_model(filter: PGtkTreeModelFilter): PGtkTreeModel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_model_filter_get_model'{$endif};
function gtk_tree_model_filter_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_tree_model_filter_get_type' {$endif};
function gtk_tree_model_filter_new(child_model: PGtkTreeModel; root: PGtkTreePath): PGtkTreeModel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_model_filter_new'{$endif};
function gtk_tree_model_get_column_type(tree_model: PGtkTreeModel; index_: gint): TGType; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_model_get_column_type'{$endif};
function gtk_tree_model_get_flags(tree_model: PGtkTreeModel): TGtkTreeModelFlags; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_model_get_flags'{$endif};
function gtk_tree_model_get_iter(tree_model: PGtkTreeModel; iter: PGtkTreeIter; path: PGtkTreePath): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_model_get_iter'{$endif};
function gtk_tree_model_get_iter_first(tree_model: PGtkTreeModel; iter: PGtkTreeIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_model_get_iter_first'{$endif};
function gtk_tree_model_get_iter_from_string(tree_model: PGtkTreeModel; iter: PGtkTreeIter; path_string: Pgchar): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_model_get_iter_from_string'{$endif};
function gtk_tree_model_get_n_columns(tree_model: PGtkTreeModel): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_model_get_n_columns'{$endif};
function gtk_tree_model_get_path(tree_model: PGtkTreeModel; iter: PGtkTreeIter): PGtkTreePath; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_model_get_path'{$endif};
function gtk_tree_model_get_string_from_iter(tree_model: PGtkTreeModel; iter: PGtkTreeIter): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_model_get_string_from_iter'{$endif};
function gtk_tree_model_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_tree_model_get_type' {$endif};
function gtk_tree_model_iter_children(tree_model: PGtkTreeModel; iter: PGtkTreeIter; parent: PGtkTreeIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_model_iter_children'{$endif};
function gtk_tree_model_iter_has_child(tree_model: PGtkTreeModel; iter: PGtkTreeIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_model_iter_has_child'{$endif};
function gtk_tree_model_iter_n_children(tree_model: PGtkTreeModel; iter: PGtkTreeIter): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_model_iter_n_children'{$endif};
function gtk_tree_model_iter_next(tree_model: PGtkTreeModel; iter: PGtkTreeIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_model_iter_next'{$endif};
function gtk_tree_model_iter_nth_child(tree_model: PGtkTreeModel; iter: PGtkTreeIter; parent: PGtkTreeIter; n: gint): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_model_iter_nth_child'{$endif};
function gtk_tree_model_iter_parent(tree_model: PGtkTreeModel; iter: PGtkTreeIter; child: PGtkTreeIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_model_iter_parent'{$endif};
function gtk_tree_model_iter_previous(tree_model: PGtkTreeModel; iter: PGtkTreeIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_model_iter_previous'{$endif};
function gtk_tree_model_sort_convert_child_iter_to_iter(tree_model_sort: PGtkTreeModelSort; sort_iter: PGtkTreeIter; child_iter: PGtkTreeIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_model_sort_convert_child_iter_to_iter'{$endif};
function gtk_tree_model_sort_convert_child_path_to_path(tree_model_sort: PGtkTreeModelSort; child_path: PGtkTreePath): PGtkTreePath; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_model_sort_convert_child_path_to_path'{$endif};
function gtk_tree_model_sort_convert_path_to_child_path(tree_model_sort: PGtkTreeModelSort; sorted_path: PGtkTreePath): PGtkTreePath; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_model_sort_convert_path_to_child_path'{$endif};
function gtk_tree_model_sort_get_model(tree_model: PGtkTreeModelSort): PGtkTreeModel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_model_sort_get_model'{$endif};
function gtk_tree_model_sort_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_tree_model_sort_get_type' {$endif};
function gtk_tree_model_sort_iter_is_valid(tree_model_sort: PGtkTreeModelSort; iter: PGtkTreeIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_model_sort_iter_is_valid'{$endif};
function gtk_tree_model_sort_new_with_model(child_model: PGtkTreeModel): PGtkTreeModelSort; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_model_sort_new_with_model'{$endif};
function gtk_tree_path_compare(a: PGtkTreePath; b: PGtkTreePath): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_path_compare'{$endif};
function gtk_tree_path_copy(path: PGtkTreePath): PGtkTreePath; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_path_copy'{$endif};
function gtk_tree_path_get_depth(path: PGtkTreePath): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_path_get_depth'{$endif};
function gtk_tree_path_get_indices(path: PGtkTreePath): Pgint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_path_get_indices'{$endif};
function gtk_tree_path_get_indices_with_depth(path: PGtkTreePath; depth: Pgint): Pgint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_path_get_indices_with_depth'{$endif};
function gtk_tree_path_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_tree_path_get_type' {$endif};
function gtk_tree_path_is_ancestor(path: PGtkTreePath; descendant: PGtkTreePath): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_path_is_ancestor'{$endif};
function gtk_tree_path_is_descendant(path: PGtkTreePath; ancestor: PGtkTreePath): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_path_is_descendant'{$endif};
function gtk_tree_path_new: PGtkTreePath; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_path_new'{$endif};
function gtk_tree_path_new_first: PGtkTreePath; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_path_new_first'{$endif};
function gtk_tree_path_new_from_indices(first_index: gint; args: array of const): PGtkTreePath; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_path_new_from_indices'{$endif};
function gtk_tree_path_new_from_indicesv(indices: Pgint; length: gsize): PGtkTreePath; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_path_new_from_indicesv'{$endif};
function gtk_tree_path_new_from_string(path: Pgchar): PGtkTreePath; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_path_new_from_string'{$endif};
function gtk_tree_path_prev(path: PGtkTreePath): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_path_prev'{$endif};
function gtk_tree_path_to_string(path: PGtkTreePath): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_path_to_string'{$endif};
function gtk_tree_path_up(path: PGtkTreePath): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_path_up'{$endif};
function gtk_tree_row_reference_copy(reference: PGtkTreeRowReference): PGtkTreeRowReference; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_row_reference_copy'{$endif};
function gtk_tree_row_reference_get_model(reference: PGtkTreeRowReference): PGtkTreeModel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_row_reference_get_model'{$endif};
function gtk_tree_row_reference_get_path(reference: PGtkTreeRowReference): PGtkTreePath; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_row_reference_get_path'{$endif};
function gtk_tree_row_reference_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_tree_row_reference_get_type' {$endif};
function gtk_tree_row_reference_new(model: PGtkTreeModel; path: PGtkTreePath): PGtkTreeRowReference; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_row_reference_new'{$endif};
function gtk_tree_row_reference_new_proxy(proxy: PGObject; model: PGtkTreeModel; path: PGtkTreePath): PGtkTreeRowReference; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_row_reference_new_proxy'{$endif};
function gtk_tree_row_reference_valid(reference: PGtkTreeRowReference): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_row_reference_valid'{$endif};
function gtk_tree_selection_count_selected_rows(selection: PGtkTreeSelection): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_selection_count_selected_rows'{$endif};
function gtk_tree_selection_get_mode(selection: PGtkTreeSelection): TGtkSelectionMode; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_selection_get_mode'{$endif};
function gtk_tree_selection_get_select_function(selection: PGtkTreeSelection): TGtkTreeSelectionFunc; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_selection_get_select_function'{$endif};
function gtk_tree_selection_get_selected(selection: PGtkTreeSelection; model: PPGtkTreeModel; iter: PGtkTreeIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_selection_get_selected'{$endif};
function gtk_tree_selection_get_selected_rows(selection: PGtkTreeSelection; model: PPGtkTreeModel): PGList; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_selection_get_selected_rows'{$endif};
function gtk_tree_selection_get_tree_view(selection: PGtkTreeSelection): PGtkTreeView; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_selection_get_tree_view'{$endif};
function gtk_tree_selection_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_tree_selection_get_type' {$endif};
function gtk_tree_selection_get_user_data(selection: PGtkTreeSelection): gpointer; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_selection_get_user_data'{$endif};
function gtk_tree_selection_iter_is_selected(selection: PGtkTreeSelection; iter: PGtkTreeIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_selection_iter_is_selected'{$endif};
function gtk_tree_selection_path_is_selected(selection: PGtkTreeSelection; path: PGtkTreePath): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_selection_path_is_selected'{$endif};
function gtk_tree_sortable_get_sort_column_id(sortable: PGtkTreeSortable; sort_column_id: Pgint; order: PGtkSortType): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_sortable_get_sort_column_id'{$endif};
function gtk_tree_sortable_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_tree_sortable_get_type' {$endif};
function gtk_tree_sortable_has_default_sort_func(sortable: PGtkTreeSortable): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_sortable_has_default_sort_func'{$endif};
function gtk_tree_store_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_tree_store_get_type' {$endif};
function gtk_tree_store_is_ancestor(tree_store: PGtkTreeStore; iter: PGtkTreeIter; descendant: PGtkTreeIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_store_is_ancestor'{$endif};
function gtk_tree_store_iter_depth(tree_store: PGtkTreeStore; iter: PGtkTreeIter): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_store_iter_depth'{$endif};
function gtk_tree_store_iter_is_valid(tree_store: PGtkTreeStore; iter: PGtkTreeIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_store_iter_is_valid'{$endif};
function gtk_tree_store_new(n_columns: gint; args: array of const): PGtkTreeStore; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_store_new'{$endif};
function gtk_tree_store_newv(n_columns: gint; types: PGType): PGtkTreeStore; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_store_newv'{$endif};
function gtk_tree_store_remove(tree_store: PGtkTreeStore; iter: PGtkTreeIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_store_remove'{$endif};
function gtk_tree_view_append_column(tree_view: PGtkTreeView; column: PGtkTreeViewColumn): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_append_column'{$endif};
function gtk_tree_view_collapse_row(tree_view: PGtkTreeView; path: PGtkTreePath): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_collapse_row'{$endif};
function gtk_tree_view_column_cell_get_position(tree_column: PGtkTreeViewColumn; cell_renderer: PGtkCellRenderer; x_offset: Pgint; width: Pgint): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_column_cell_get_position'{$endif};
function gtk_tree_view_column_cell_is_visible(tree_column: PGtkTreeViewColumn): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_column_cell_is_visible'{$endif};
function gtk_tree_view_column_get_alignment(tree_column: PGtkTreeViewColumn): gfloat; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_column_get_alignment'{$endif};
function gtk_tree_view_column_get_button(tree_column: PGtkTreeViewColumn): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_column_get_button'{$endif};
function gtk_tree_view_column_get_clickable(tree_column: PGtkTreeViewColumn): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_column_get_clickable'{$endif};
function gtk_tree_view_column_get_expand(tree_column: PGtkTreeViewColumn): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_column_get_expand'{$endif};
function gtk_tree_view_column_get_fixed_width(tree_column: PGtkTreeViewColumn): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_column_get_fixed_width'{$endif};
function gtk_tree_view_column_get_max_width(tree_column: PGtkTreeViewColumn): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_column_get_max_width'{$endif};
function gtk_tree_view_column_get_min_width(tree_column: PGtkTreeViewColumn): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_column_get_min_width'{$endif};
function gtk_tree_view_column_get_reorderable(tree_column: PGtkTreeViewColumn): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_column_get_reorderable'{$endif};
function gtk_tree_view_column_get_resizable(tree_column: PGtkTreeViewColumn): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_column_get_resizable'{$endif};
function gtk_tree_view_column_get_sizing(tree_column: PGtkTreeViewColumn): TGtkTreeViewColumnSizing; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_column_get_sizing'{$endif};
function gtk_tree_view_column_get_sort_column_id(tree_column: PGtkTreeViewColumn): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_column_get_sort_column_id'{$endif};
function gtk_tree_view_column_get_sort_indicator(tree_column: PGtkTreeViewColumn): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_column_get_sort_indicator'{$endif};
function gtk_tree_view_column_get_sort_order(tree_column: PGtkTreeViewColumn): TGtkSortType; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_column_get_sort_order'{$endif};
function gtk_tree_view_column_get_spacing(tree_column: PGtkTreeViewColumn): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_column_get_spacing'{$endif};
function gtk_tree_view_column_get_title(tree_column: PGtkTreeViewColumn): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_column_get_title'{$endif};
function gtk_tree_view_column_get_tree_view(tree_column: PGtkTreeViewColumn): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_column_get_tree_view'{$endif};
function gtk_tree_view_column_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_tree_view_column_get_type' {$endif};
function gtk_tree_view_column_get_visible(tree_column: PGtkTreeViewColumn): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_column_get_visible'{$endif};
function gtk_tree_view_column_get_widget(tree_column: PGtkTreeViewColumn): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_column_get_widget'{$endif};
function gtk_tree_view_column_get_width(tree_column: PGtkTreeViewColumn): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_column_get_width'{$endif};
function gtk_tree_view_column_get_x_offset(tree_column: PGtkTreeViewColumn): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_column_get_x_offset'{$endif};
function gtk_tree_view_column_new: PGtkTreeViewColumn; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_column_new'{$endif};
function gtk_tree_view_column_new_with_area(area: PGtkCellArea): PGtkTreeViewColumn; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_column_new_with_area'{$endif};
function gtk_tree_view_column_new_with_attributes(title: Pgchar; cell: PGtkCellRenderer; args: array of const): PGtkTreeViewColumn; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_column_new_with_attributes'{$endif};
function gtk_tree_view_create_row_drag_icon(tree_view: PGtkTreeView; path: PGtkTreePath): PGdkPaintable; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_create_row_drag_icon'{$endif};
function gtk_tree_view_expand_row(tree_view: PGtkTreeView; path: PGtkTreePath; open_all: gboolean): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_expand_row'{$endif};
function gtk_tree_view_get_activate_on_single_click(tree_view: PGtkTreeView): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_get_activate_on_single_click'{$endif};
function gtk_tree_view_get_column(tree_view: PGtkTreeView; n: gint): PGtkTreeViewColumn; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_get_column'{$endif};
function gtk_tree_view_get_columns(tree_view: PGtkTreeView): PGList; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_get_columns'{$endif};
function gtk_tree_view_get_dest_row_at_pos(tree_view: PGtkTreeView; drag_x: gint; drag_y: gint; path: PPGtkTreePath; pos: PGtkTreeViewDropPosition): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_get_dest_row_at_pos'{$endif};
function gtk_tree_view_get_enable_search(tree_view: PGtkTreeView): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_get_enable_search'{$endif};
function gtk_tree_view_get_enable_tree_lines(tree_view: PGtkTreeView): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_get_enable_tree_lines'{$endif};
function gtk_tree_view_get_expander_column(tree_view: PGtkTreeView): PGtkTreeViewColumn; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_get_expander_column'{$endif};
function gtk_tree_view_get_fixed_height_mode(tree_view: PGtkTreeView): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_get_fixed_height_mode'{$endif};
function gtk_tree_view_get_grid_lines(tree_view: PGtkTreeView): TGtkTreeViewGridLines; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_get_grid_lines'{$endif};
function gtk_tree_view_get_headers_clickable(tree_view: PGtkTreeView): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_get_headers_clickable'{$endif};
function gtk_tree_view_get_headers_visible(tree_view: PGtkTreeView): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_get_headers_visible'{$endif};
function gtk_tree_view_get_hover_expand(tree_view: PGtkTreeView): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_get_hover_expand'{$endif};
function gtk_tree_view_get_hover_selection(tree_view: PGtkTreeView): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_get_hover_selection'{$endif};
function gtk_tree_view_get_level_indentation(tree_view: PGtkTreeView): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_get_level_indentation'{$endif};
function gtk_tree_view_get_model(tree_view: PGtkTreeView): PGtkTreeModel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_get_model'{$endif};
function gtk_tree_view_get_n_columns(tree_view: PGtkTreeView): guint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_get_n_columns'{$endif};
function gtk_tree_view_get_path_at_pos(tree_view: PGtkTreeView; x: gint; y: gint; path: PPGtkTreePath; column: PPGtkTreeViewColumn; cell_x: Pgint; cell_y: Pgint): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_get_path_at_pos'{$endif};
function gtk_tree_view_get_reorderable(tree_view: PGtkTreeView): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_get_reorderable'{$endif};
function gtk_tree_view_get_row_separator_func(tree_view: PGtkTreeView): TGtkTreeViewRowSeparatorFunc; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_get_row_separator_func'{$endif};
function gtk_tree_view_get_rubber_banding(tree_view: PGtkTreeView): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_get_rubber_banding'{$endif};
function gtk_tree_view_get_search_column(tree_view: PGtkTreeView): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_get_search_column'{$endif};
function gtk_tree_view_get_search_entry(tree_view: PGtkTreeView): PGtkEditable; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_get_search_entry'{$endif};
function gtk_tree_view_get_search_equal_func(tree_view: PGtkTreeView): TGtkTreeViewSearchEqualFunc; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_get_search_equal_func'{$endif};
function gtk_tree_view_get_selection(tree_view: PGtkTreeView): PGtkTreeSelection; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_get_selection'{$endif};
function gtk_tree_view_get_show_expanders(tree_view: PGtkTreeView): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_get_show_expanders'{$endif};
function gtk_tree_view_get_tooltip_column(tree_view: PGtkTreeView): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_get_tooltip_column'{$endif};
function gtk_tree_view_get_tooltip_context(tree_view: PGtkTreeView; x: gint; y: gint; keyboard_tip: gboolean; model: PPGtkTreeModel; path: PPGtkTreePath; iter: PGtkTreeIter): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_get_tooltip_context'{$endif};
function gtk_tree_view_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_tree_view_get_type' {$endif};
function gtk_tree_view_get_visible_range(tree_view: PGtkTreeView; start_path: PPGtkTreePath; end_path: PPGtkTreePath): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_get_visible_range'{$endif};
function gtk_tree_view_insert_column(tree_view: PGtkTreeView; column: PGtkTreeViewColumn; position: gint): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_insert_column'{$endif};
function gtk_tree_view_insert_column_with_attributes(tree_view: PGtkTreeView; position: gint; title: Pgchar; cell: PGtkCellRenderer; args: array of const): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_insert_column_with_attributes'{$endif};
function gtk_tree_view_insert_column_with_data_func(tree_view: PGtkTreeView; position: gint; title: Pgchar; cell: PGtkCellRenderer; func: TGtkTreeCellDataFunc; data: gpointer; dnotify: TGDestroyNotify): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_insert_column_with_data_func'{$endif};
function gtk_tree_view_is_blank_at_pos(tree_view: PGtkTreeView; x: gint; y: gint; path: PPGtkTreePath; column: PPGtkTreeViewColumn; cell_x: Pgint; cell_y: Pgint): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_is_blank_at_pos'{$endif};
function gtk_tree_view_is_rubber_banding_active(tree_view: PGtkTreeView): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_is_rubber_banding_active'{$endif};
function gtk_tree_view_new: PGtkTreeView; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_new'{$endif};
function gtk_tree_view_new_with_model(model: PGtkTreeModel): PGtkTreeView; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_new_with_model'{$endif};
function gtk_tree_view_remove_column(tree_view: PGtkTreeView; column: PGtkTreeViewColumn): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_remove_column'{$endif};
function gtk_tree_view_row_expanded(tree_view: PGtkTreeView; path: PGtkTreePath): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_row_expanded'{$endif};
function gtk_value_dup_expression(value: PGValue): PGtkExpression; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_value_dup_expression'{$endif};
function gtk_value_get_expression(value: PGValue): PGtkExpression; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_value_get_expression'{$endif};
function gtk_video_get_autoplay(self: PGtkVideo): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_video_get_autoplay'{$endif};
function gtk_video_get_file(self: PGtkVideo): PGFile; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_video_get_file'{$endif};
function gtk_video_get_loop(self: PGtkVideo): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_video_get_loop'{$endif};
function gtk_video_get_media_stream(self: PGtkVideo): PGtkMediaStream; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_video_get_media_stream'{$endif};
function gtk_video_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_video_get_type' {$endif};
function gtk_video_new: PGtkVideo; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_video_new'{$endif};
function gtk_video_new_for_file(file_: PGFile): PGtkVideo; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_video_new_for_file'{$endif};
function gtk_video_new_for_filename(filename: Pgchar): PGtkVideo; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_video_new_for_filename'{$endif};
function gtk_video_new_for_media_stream(stream: PGtkMediaStream): PGtkVideo; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_video_new_for_media_stream'{$endif};
function gtk_video_new_for_resource(resource_path: Pgchar): PGtkVideo; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_video_new_for_resource'{$endif};
function gtk_viewport_get_child(viewport: PGtkViewport): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_viewport_get_child'{$endif};
function gtk_viewport_get_scroll_to_focus(viewport: PGtkViewport): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_viewport_get_scroll_to_focus'{$endif};
function gtk_viewport_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_viewport_get_type' {$endif};
function gtk_viewport_new(hadjustment: PGtkAdjustment; vadjustment: PGtkAdjustment): PGtkViewport; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_viewport_new'{$endif};
function gtk_volume_button_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_volume_button_get_type' {$endif};
function gtk_volume_button_new: PGtkVolumeButton; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_volume_button_new'{$endif};
function gtk_widget_activate(widget: PGtkWidget): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_activate'{$endif};
function gtk_widget_activate_action(widget: PGtkWidget; name: Pgchar; format_string: Pgchar; args: array of const): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_activate_action'{$endif};
function gtk_widget_activate_action_variant(widget: PGtkWidget; name: Pgchar; args: PGVariant): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_activate_action_variant'{$endif};
function gtk_widget_add_tick_callback(widget: PGtkWidget; callback: TGtkTickCallback; user_data: gpointer; notify: TGDestroyNotify): guint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_add_tick_callback'{$endif};
function gtk_widget_child_focus(widget: PGtkWidget; direction: TGtkDirectionType): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_child_focus'{$endif};
function gtk_widget_class_get_accessible_role(widget_class: PGtkWidgetClass): TGtkAccessibleRole; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_class_get_accessible_role'{$endif};
function gtk_widget_class_get_activate_signal(widget_class: PGtkWidgetClass): guint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_class_get_activate_signal'{$endif};
function gtk_widget_class_get_css_name(widget_class: PGtkWidgetClass): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_class_get_css_name'{$endif};
function gtk_widget_class_get_layout_manager_type(widget_class: PGtkWidgetClass): TGType; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_class_get_layout_manager_type'{$endif};
function gtk_widget_class_query_action(widget_class: PGtkWidgetClass; index_: guint; owner: PGType; action_name: PPgchar; parameter_type: PPGVariantType; property_name: PPgchar): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_class_query_action'{$endif};
function gtk_widget_compute_bounds(widget: PGtkWidget; target: PGtkWidget; out_bounds: Pgraphene_rect_t): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_compute_bounds'{$endif};
function gtk_widget_compute_expand(widget: PGtkWidget; orientation: TGtkOrientation): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_compute_expand'{$endif};
function gtk_widget_compute_point(widget: PGtkWidget; target: PGtkWidget; point: Pgraphene_point_t; out_point: Pgraphene_point_t): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_compute_point'{$endif};
function gtk_widget_compute_transform(widget: PGtkWidget; target: PGtkWidget; out_transform: Pgraphene_matrix_t): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_compute_transform'{$endif};
function gtk_widget_contains(widget: PGtkWidget; x: gdouble; y: gdouble): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_contains'{$endif};
function gtk_widget_create_pango_context(widget: PGtkWidget): PPangoContext; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_create_pango_context'{$endif};
function gtk_widget_create_pango_layout(widget: PGtkWidget; text: Pgchar): PPangoLayout; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_create_pango_layout'{$endif};
function gtk_widget_get_allocated_baseline(widget: PGtkWidget): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_allocated_baseline'{$endif};
function gtk_widget_get_allocated_height(widget: PGtkWidget): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_allocated_height'{$endif};
function gtk_widget_get_allocated_width(widget: PGtkWidget): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_allocated_width'{$endif};
function gtk_widget_get_ancestor(widget: PGtkWidget; widget_type: TGType): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_ancestor'{$endif};
function gtk_widget_get_can_focus(widget: PGtkWidget): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_can_focus'{$endif};
function gtk_widget_get_can_target(widget: PGtkWidget): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_can_target'{$endif};
function gtk_widget_get_child_visible(widget: PGtkWidget): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_child_visible'{$endif};
function gtk_widget_get_clipboard(widget: PGtkWidget): PGdkClipboard; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_clipboard'{$endif};
function gtk_widget_get_css_classes(widget: PGtkWidget): PPgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_css_classes'{$endif};
function gtk_widget_get_css_name(self: PGtkWidget): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_css_name'{$endif};
function gtk_widget_get_cursor(widget: PGtkWidget): PGdkCursor; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_cursor'{$endif};
function gtk_widget_get_default_direction: TGtkTextDirection; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_default_direction'{$endif};
function gtk_widget_get_direction(widget: PGtkWidget): TGtkTextDirection; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_direction'{$endif};
function gtk_widget_get_display(widget: PGtkWidget): PGdkDisplay; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_display'{$endif};
function gtk_widget_get_first_child(widget: PGtkWidget): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_first_child'{$endif};
function gtk_widget_get_focus_child(widget: PGtkWidget): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_focus_child'{$endif};
function gtk_widget_get_focus_on_click(widget: PGtkWidget): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_focus_on_click'{$endif};
function gtk_widget_get_focusable(widget: PGtkWidget): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_focusable'{$endif};
function gtk_widget_get_font_map(widget: PGtkWidget): PPangoFontMap; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_font_map'{$endif};
function gtk_widget_get_font_options(widget: PGtkWidget): Pcairo_font_options_t; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_font_options'{$endif};
function gtk_widget_get_frame_clock(widget: PGtkWidget): PGdkFrameClock; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_frame_clock'{$endif};
function gtk_widget_get_halign(widget: PGtkWidget): TGtkAlign; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_halign'{$endif};
function gtk_widget_get_has_tooltip(widget: PGtkWidget): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_has_tooltip'{$endif};
function gtk_widget_get_height(widget: PGtkWidget): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_height'{$endif};
function gtk_widget_get_hexpand(widget: PGtkWidget): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_hexpand'{$endif};
function gtk_widget_get_hexpand_set(widget: PGtkWidget): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_hexpand_set'{$endif};
function gtk_widget_get_last_child(widget: PGtkWidget): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_last_child'{$endif};
function gtk_widget_get_layout_manager(widget: PGtkWidget): PGtkLayoutManager; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_layout_manager'{$endif};
function gtk_widget_get_mapped(widget: PGtkWidget): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_mapped'{$endif};
function gtk_widget_get_margin_bottom(widget: PGtkWidget): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_margin_bottom'{$endif};
function gtk_widget_get_margin_end(widget: PGtkWidget): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_margin_end'{$endif};
function gtk_widget_get_margin_start(widget: PGtkWidget): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_margin_start'{$endif};
function gtk_widget_get_margin_top(widget: PGtkWidget): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_margin_top'{$endif};
function gtk_widget_get_name(widget: PGtkWidget): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_name'{$endif};
function gtk_widget_get_native(widget: PGtkWidget): PGtkNative; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_native'{$endif};
function gtk_widget_get_next_sibling(widget: PGtkWidget): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_next_sibling'{$endif};
function gtk_widget_get_opacity(widget: PGtkWidget): gdouble; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_opacity'{$endif};
function gtk_widget_get_overflow(widget: PGtkWidget): TGtkOverflow; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_overflow'{$endif};
function gtk_widget_get_pango_context(widget: PGtkWidget): PPangoContext; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_pango_context'{$endif};
function gtk_widget_get_parent(widget: PGtkWidget): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_parent'{$endif};
function gtk_widget_get_prev_sibling(widget: PGtkWidget): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_prev_sibling'{$endif};
function gtk_widget_get_primary_clipboard(widget: PGtkWidget): PGdkClipboard; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_primary_clipboard'{$endif};
function gtk_widget_get_realized(widget: PGtkWidget): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_realized'{$endif};
function gtk_widget_get_receives_default(widget: PGtkWidget): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_receives_default'{$endif};
function gtk_widget_get_request_mode(widget: PGtkWidget): TGtkSizeRequestMode; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_request_mode'{$endif};
function gtk_widget_get_root(widget: PGtkWidget): PGtkRoot; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_root'{$endif};
function gtk_widget_get_scale_factor(widget: PGtkWidget): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_scale_factor'{$endif};
function gtk_widget_get_sensitive(widget: PGtkWidget): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_sensitive'{$endif};
function gtk_widget_get_settings(widget: PGtkWidget): PGtkSettings; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_settings'{$endif};
function gtk_widget_get_size(widget: PGtkWidget; orientation: TGtkOrientation): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_size'{$endif};
function gtk_widget_get_state_flags(widget: PGtkWidget): TGtkStateFlags; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_state_flags'{$endif};
function gtk_widget_get_style_context(widget: PGtkWidget): PGtkStyleContext; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_style_context'{$endif};
function gtk_widget_get_template_child(widget: PGtkWidget; widget_type: TGType; name: Pgchar): PGObject; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_template_child'{$endif};
function gtk_widget_get_tooltip_markup(widget: PGtkWidget): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_tooltip_markup'{$endif};
function gtk_widget_get_tooltip_text(widget: PGtkWidget): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_tooltip_text'{$endif};
function gtk_widget_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_widget_get_type' {$endif};
function gtk_widget_get_valign(widget: PGtkWidget): TGtkAlign; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_valign'{$endif};
function gtk_widget_get_vexpand(widget: PGtkWidget): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_vexpand'{$endif};
function gtk_widget_get_vexpand_set(widget: PGtkWidget): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_vexpand_set'{$endif};
function gtk_widget_get_visible(widget: PGtkWidget): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_visible'{$endif};
function gtk_widget_get_width(widget: PGtkWidget): gint; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_width'{$endif};
function gtk_widget_grab_focus(widget: PGtkWidget): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_grab_focus'{$endif};
function gtk_widget_has_css_class(widget: PGtkWidget; css_class: Pgchar): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_has_css_class'{$endif};
function gtk_widget_has_default(widget: PGtkWidget): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_has_default'{$endif};
function gtk_widget_has_focus(widget: PGtkWidget): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_has_focus'{$endif};
function gtk_widget_has_visible_focus(widget: PGtkWidget): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_has_visible_focus'{$endif};
function gtk_widget_in_destruction(widget: PGtkWidget): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_in_destruction'{$endif};
function gtk_widget_is_ancestor(widget: PGtkWidget; ancestor: PGtkWidget): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_is_ancestor'{$endif};
function gtk_widget_is_drawable(widget: PGtkWidget): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_is_drawable'{$endif};
function gtk_widget_is_focus(widget: PGtkWidget): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_is_focus'{$endif};
function gtk_widget_is_sensitive(widget: PGtkWidget): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_is_sensitive'{$endif};
function gtk_widget_is_visible(widget: PGtkWidget): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_is_visible'{$endif};
function gtk_widget_keynav_failed(widget: PGtkWidget; direction: TGtkDirectionType): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_keynav_failed'{$endif};
function gtk_widget_list_mnemonic_labels(widget: PGtkWidget): PGList; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_list_mnemonic_labels'{$endif};
function gtk_widget_mnemonic_activate(widget: PGtkWidget; group_cycling: gboolean): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_mnemonic_activate'{$endif};
function gtk_widget_observe_children(widget: PGtkWidget): PGListModel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_observe_children'{$endif};
function gtk_widget_observe_controllers(widget: PGtkWidget): PGListModel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_observe_controllers'{$endif};
function gtk_widget_paintable_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_widget_paintable_get_type' {$endif};
function gtk_widget_paintable_get_widget(self: PGtkWidgetPaintable): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_paintable_get_widget'{$endif};
function gtk_widget_paintable_new(widget: PGtkWidget): PGtkWidgetPaintable; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_paintable_new'{$endif};
function gtk_widget_pick(widget: PGtkWidget; x: gdouble; y: gdouble; flags: TGtkPickFlags): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_pick'{$endif};
function gtk_widget_should_layout(widget: PGtkWidget): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_should_layout'{$endif};
function gtk_widget_translate_coordinates(src_widget: PGtkWidget; dest_widget: PGtkWidget; src_x: gdouble; src_y: gdouble; dest_x: Pgdouble; dest_y: Pgdouble): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_translate_coordinates'{$endif};
function gtk_window_controls_get_decoration_layout(self: PGtkWindowControls): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_controls_get_decoration_layout'{$endif};
function gtk_window_controls_get_empty(self: PGtkWindowControls): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_controls_get_empty'{$endif};
function gtk_window_controls_get_side(self: PGtkWindowControls): TGtkPackType; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_controls_get_side'{$endif};
function gtk_window_controls_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_window_controls_get_type' {$endif};
function gtk_window_controls_new(side: TGtkPackType): PGtkWindowControls; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_controls_new'{$endif};
function gtk_window_get_application(window: PGtkWindow): PGtkApplication; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_get_application'{$endif};
function gtk_window_get_child(window: PGtkWindow): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_get_child'{$endif};
function gtk_window_get_decorated(window: PGtkWindow): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_get_decorated'{$endif};
function gtk_window_get_default_icon_name: Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_get_default_icon_name'{$endif};
function gtk_window_get_default_widget(window: PGtkWindow): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_get_default_widget'{$endif};
function gtk_window_get_deletable(window: PGtkWindow): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_get_deletable'{$endif};
function gtk_window_get_destroy_with_parent(window: PGtkWindow): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_get_destroy_with_parent'{$endif};
function gtk_window_get_focus(window: PGtkWindow): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_get_focus'{$endif};
function gtk_window_get_focus_visible(window: PGtkWindow): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_get_focus_visible'{$endif};
function gtk_window_get_group(window: PGtkWindow): PGtkWindowGroup; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_get_group'{$endif};
function gtk_window_get_handle_menubar_accel(window: PGtkWindow): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_get_handle_menubar_accel'{$endif};
function gtk_window_get_hide_on_close(window: PGtkWindow): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_get_hide_on_close'{$endif};
function gtk_window_get_icon_name(window: PGtkWindow): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_get_icon_name'{$endif};
function gtk_window_get_mnemonics_visible(window: PGtkWindow): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_get_mnemonics_visible'{$endif};
function gtk_window_get_modal(window: PGtkWindow): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_get_modal'{$endif};
function gtk_window_get_resizable(window: PGtkWindow): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_get_resizable'{$endif};
function gtk_window_get_title(window: PGtkWindow): Pgchar; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_get_title'{$endif};
function gtk_window_get_titlebar(window: PGtkWindow): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_get_titlebar'{$endif};
function gtk_window_get_toplevels: PGListModel; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_get_toplevels'{$endif};
function gtk_window_get_transient_for(window: PGtkWindow): PGtkWindow; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_get_transient_for'{$endif};
function gtk_window_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_window_get_type' {$endif};
function gtk_window_group_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_window_group_get_type' {$endif};
function gtk_window_group_list_windows(window_group: PGtkWindowGroup): PGList; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_group_list_windows'{$endif};
function gtk_window_group_new: PGtkWindowGroup; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_group_new'{$endif};
function gtk_window_handle_get_child(self: PGtkWindowHandle): PGtkWidget; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_handle_get_child'{$endif};
function gtk_window_handle_get_type: TGType; cdecl; external {$ifdef MSWindows} Gtk4_library name 'gtk_window_handle_get_type' {$endif};
function gtk_window_handle_new: PGtkWindowHandle; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_handle_new'{$endif};
function gtk_window_has_group(window: PGtkWindow): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_has_group'{$endif};
function gtk_window_is_active(window: PGtkWindow): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_is_active'{$endif};
function gtk_window_is_fullscreen(window: PGtkWindow): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_is_fullscreen'{$endif};
function gtk_window_is_maximized(window: PGtkWindow): gboolean; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_is_maximized'{$endif};
function gtk_window_list_toplevels: PGList; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_list_toplevels'{$endif};
function gtk_window_new: PGtkWindow; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_new'{$endif};
procedure gtk_about_dialog_add_credit_section(about: PGtkAboutDialog; section_name: Pgchar; people: PPgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_about_dialog_add_credit_section'{$endif};
procedure gtk_about_dialog_set_artists(about: PGtkAboutDialog; artists: PPgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_about_dialog_set_artists'{$endif};
procedure gtk_about_dialog_set_authors(about: PGtkAboutDialog; authors: PPgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_about_dialog_set_authors'{$endif};
procedure gtk_about_dialog_set_comments(about: PGtkAboutDialog; comments: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_about_dialog_set_comments'{$endif};
procedure gtk_about_dialog_set_copyright(about: PGtkAboutDialog; copyright: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_about_dialog_set_copyright'{$endif};
procedure gtk_about_dialog_set_documenters(about: PGtkAboutDialog; documenters: PPgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_about_dialog_set_documenters'{$endif};
procedure gtk_about_dialog_set_license(about: PGtkAboutDialog; license: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_about_dialog_set_license'{$endif};
procedure gtk_about_dialog_set_license_type(about: PGtkAboutDialog; license_type: TGtkLicense); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_about_dialog_set_license_type'{$endif};
procedure gtk_about_dialog_set_logo(about: PGtkAboutDialog; logo: PGdkPaintable); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_about_dialog_set_logo'{$endif};
procedure gtk_about_dialog_set_logo_icon_name(about: PGtkAboutDialog; icon_name: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_about_dialog_set_logo_icon_name'{$endif};
procedure gtk_about_dialog_set_program_name(about: PGtkAboutDialog; name: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_about_dialog_set_program_name'{$endif};
procedure gtk_about_dialog_set_system_information(about: PGtkAboutDialog; system_information: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_about_dialog_set_system_information'{$endif};
procedure gtk_about_dialog_set_translator_credits(about: PGtkAboutDialog; translator_credits: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_about_dialog_set_translator_credits'{$endif};
procedure gtk_about_dialog_set_version(about: PGtkAboutDialog; version: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_about_dialog_set_version'{$endif};
procedure gtk_about_dialog_set_website(about: PGtkAboutDialog; website: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_about_dialog_set_website'{$endif};
procedure gtk_about_dialog_set_website_label(about: PGtkAboutDialog; website_label: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_about_dialog_set_website_label'{$endif};
procedure gtk_about_dialog_set_wrap_license(about: PGtkAboutDialog; wrap_license: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_about_dialog_set_wrap_license'{$endif};
procedure gtk_accessible_property_init_value(property_: TGtkAccessibleProperty; value: PGValue); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_accessible_property_init_value'{$endif};
procedure gtk_accessible_relation_init_value(relation: TGtkAccessibleRelation; value: PGValue); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_accessible_relation_init_value'{$endif};
procedure gtk_accessible_reset_property(self: PGtkAccessible; property_: TGtkAccessibleProperty); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_accessible_reset_property'{$endif};
procedure gtk_accessible_reset_relation(self: PGtkAccessible; relation: TGtkAccessibleRelation); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_accessible_reset_relation'{$endif};
procedure gtk_accessible_reset_state(self: PGtkAccessible; state: TGtkAccessibleState); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_accessible_reset_state'{$endif};
procedure gtk_accessible_state_init_value(state: TGtkAccessibleState; value: PGValue); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_accessible_state_init_value'{$endif};
procedure gtk_accessible_update_property(self: PGtkAccessible; first_property: TGtkAccessibleProperty; args: array of const); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_accessible_update_property'{$endif};
procedure gtk_accessible_update_property_value(self: PGtkAccessible; n_properties: gint; properties: PGtkAccessibleProperty; values: PGValue); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_accessible_update_property_value'{$endif};
procedure gtk_accessible_update_relation(self: PGtkAccessible; first_relation: TGtkAccessibleRelation; args: array of const); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_accessible_update_relation'{$endif};
procedure gtk_accessible_update_relation_value(self: PGtkAccessible; n_relations: gint; relations: PGtkAccessibleRelation; values: PGValue); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_accessible_update_relation_value'{$endif};
procedure gtk_accessible_update_state(self: PGtkAccessible; first_state: TGtkAccessibleState; args: array of const); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_accessible_update_state'{$endif};
procedure gtk_accessible_update_state_value(self: PGtkAccessible; n_states: gint; states: PGtkAccessibleState; values: PGValue); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_accessible_update_state_value'{$endif};
procedure gtk_action_bar_pack_end(action_bar: PGtkActionBar; child: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_action_bar_pack_end'{$endif};
procedure gtk_action_bar_pack_start(action_bar: PGtkActionBar; child: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_action_bar_pack_start'{$endif};
procedure gtk_action_bar_remove(action_bar: PGtkActionBar; child: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_action_bar_remove'{$endif};
procedure gtk_action_bar_set_center_widget(action_bar: PGtkActionBar; center_widget: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_action_bar_set_center_widget'{$endif};
procedure gtk_action_bar_set_revealed(action_bar: PGtkActionBar; revealed: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_action_bar_set_revealed'{$endif};
procedure gtk_actionable_set_action_name(actionable: PGtkActionable; action_name: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_actionable_set_action_name'{$endif};
procedure gtk_actionable_set_action_target(actionable: PGtkActionable; format_string: Pgchar; args: array of const); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_actionable_set_action_target'{$endif};
procedure gtk_actionable_set_action_target_value(actionable: PGtkActionable; target_value: PGVariant); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_actionable_set_action_target_value'{$endif};
procedure gtk_actionable_set_detailed_action_name(actionable: PGtkActionable; detailed_action_name: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_actionable_set_detailed_action_name'{$endif};
procedure gtk_adjustment_clamp_page(adjustment: PGtkAdjustment; lower: gdouble; upper: gdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_adjustment_clamp_page'{$endif};
procedure gtk_adjustment_configure(adjustment: PGtkAdjustment; value: gdouble; lower: gdouble; upper: gdouble; step_increment: gdouble; page_increment: gdouble; page_size: gdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_adjustment_configure'{$endif};
procedure gtk_adjustment_set_lower(adjustment: PGtkAdjustment; lower: gdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_adjustment_set_lower'{$endif};
procedure gtk_adjustment_set_page_increment(adjustment: PGtkAdjustment; page_increment: gdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_adjustment_set_page_increment'{$endif};
procedure gtk_adjustment_set_page_size(adjustment: PGtkAdjustment; page_size: gdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_adjustment_set_page_size'{$endif};
procedure gtk_adjustment_set_step_increment(adjustment: PGtkAdjustment; step_increment: gdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_adjustment_set_step_increment'{$endif};
procedure gtk_adjustment_set_upper(adjustment: PGtkAdjustment; upper: gdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_adjustment_set_upper'{$endif};
procedure gtk_adjustment_set_value(adjustment: PGtkAdjustment; value: gdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_adjustment_set_value'{$endif};
procedure gtk_app_chooser_button_append_custom_item(self: PGtkAppChooserButton; name: Pgchar; label_: Pgchar; icon: PGIcon); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_app_chooser_button_append_custom_item'{$endif};
procedure gtk_app_chooser_button_append_separator(self: PGtkAppChooserButton); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_app_chooser_button_append_separator'{$endif};
procedure gtk_app_chooser_button_set_active_custom_item(self: PGtkAppChooserButton; name: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_app_chooser_button_set_active_custom_item'{$endif};
procedure gtk_app_chooser_button_set_heading(self: PGtkAppChooserButton; heading: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_app_chooser_button_set_heading'{$endif};
procedure gtk_app_chooser_button_set_modal(self: PGtkAppChooserButton; modal: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_app_chooser_button_set_modal'{$endif};
procedure gtk_app_chooser_button_set_show_default_item(self: PGtkAppChooserButton; setting: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_app_chooser_button_set_show_default_item'{$endif};
procedure gtk_app_chooser_button_set_show_dialog_item(self: PGtkAppChooserButton; setting: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_app_chooser_button_set_show_dialog_item'{$endif};
procedure gtk_app_chooser_dialog_set_heading(self: PGtkAppChooserDialog; heading: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_app_chooser_dialog_set_heading'{$endif};
procedure gtk_app_chooser_refresh(self: PGtkAppChooser); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_app_chooser_refresh'{$endif};
procedure gtk_app_chooser_widget_set_default_text(self: PGtkAppChooserWidget; text: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_app_chooser_widget_set_default_text'{$endif};
procedure gtk_app_chooser_widget_set_show_all(self: PGtkAppChooserWidget; setting: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_app_chooser_widget_set_show_all'{$endif};
procedure gtk_app_chooser_widget_set_show_default(self: PGtkAppChooserWidget; setting: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_app_chooser_widget_set_show_default'{$endif};
procedure gtk_app_chooser_widget_set_show_fallback(self: PGtkAppChooserWidget; setting: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_app_chooser_widget_set_show_fallback'{$endif};
procedure gtk_app_chooser_widget_set_show_other(self: PGtkAppChooserWidget; setting: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_app_chooser_widget_set_show_other'{$endif};
procedure gtk_app_chooser_widget_set_show_recommended(self: PGtkAppChooserWidget; setting: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_app_chooser_widget_set_show_recommended'{$endif};
procedure gtk_application_add_window(application: PGtkApplication; window: PGtkWindow); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_application_add_window'{$endif};
procedure gtk_application_remove_window(application: PGtkApplication; window: PGtkWindow); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_application_remove_window'{$endif};
procedure gtk_application_set_accels_for_action(application: PGtkApplication; detailed_action_name: Pgchar; accels: PPgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_application_set_accels_for_action'{$endif};
procedure gtk_application_set_menubar(application: PGtkApplication; menubar: PGMenuModel); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_application_set_menubar'{$endif};
procedure gtk_application_uninhibit(application: PGtkApplication; cookie: guint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_application_uninhibit'{$endif};
procedure gtk_application_window_set_help_overlay(window: PGtkApplicationWindow; help_overlay: PGtkShortcutsWindow); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_application_window_set_help_overlay'{$endif};
procedure gtk_application_window_set_show_menubar(window: PGtkApplicationWindow; show_menubar: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_application_window_set_show_menubar'{$endif};
procedure gtk_aspect_frame_set_child(self: PGtkAspectFrame; child: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_aspect_frame_set_child'{$endif};
procedure gtk_aspect_frame_set_obey_child(self: PGtkAspectFrame; obey_child: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_aspect_frame_set_obey_child'{$endif};
procedure gtk_aspect_frame_set_ratio(self: PGtkAspectFrame; ratio: gfloat); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_aspect_frame_set_ratio'{$endif};
procedure gtk_aspect_frame_set_xalign(self: PGtkAspectFrame; xalign: gfloat); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_aspect_frame_set_xalign'{$endif};
procedure gtk_aspect_frame_set_yalign(self: PGtkAspectFrame; yalign: gfloat); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_aspect_frame_set_yalign'{$endif};
procedure gtk_assistant_add_action_widget(assistant: PGtkAssistant; child: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_assistant_add_action_widget'{$endif};
procedure gtk_assistant_commit(assistant: PGtkAssistant); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_assistant_commit'{$endif};
procedure gtk_assistant_next_page(assistant: PGtkAssistant); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_assistant_next_page'{$endif};
procedure gtk_assistant_previous_page(assistant: PGtkAssistant); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_assistant_previous_page'{$endif};
procedure gtk_assistant_remove_action_widget(assistant: PGtkAssistant; child: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_assistant_remove_action_widget'{$endif};
procedure gtk_assistant_remove_page(assistant: PGtkAssistant; page_num: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_assistant_remove_page'{$endif};
procedure gtk_assistant_set_current_page(assistant: PGtkAssistant; page_num: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_assistant_set_current_page'{$endif};
procedure gtk_assistant_set_forward_page_func(assistant: PGtkAssistant; page_func: TGtkAssistantPageFunc; data: gpointer; destroy_: TGDestroyNotify); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_assistant_set_forward_page_func'{$endif};
procedure gtk_assistant_set_page_complete(assistant: PGtkAssistant; page: PGtkWidget; complete: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_assistant_set_page_complete'{$endif};
procedure gtk_assistant_set_page_title(assistant: PGtkAssistant; page: PGtkWidget; title: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_assistant_set_page_title'{$endif};
procedure gtk_assistant_set_page_type(assistant: PGtkAssistant; page: PGtkWidget; type_: TGtkAssistantPageType); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_assistant_set_page_type'{$endif};
procedure gtk_assistant_update_buttons_state(assistant: PGtkAssistant); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_assistant_update_buttons_state'{$endif};
procedure gtk_bitset_add_range(self: PGtkBitset; start: guint; n_items: guint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_bitset_add_range'{$endif};
procedure gtk_bitset_add_range_closed(self: PGtkBitset; first: guint; last: guint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_bitset_add_range_closed'{$endif};
procedure gtk_bitset_add_rectangle(self: PGtkBitset; start: guint; width: guint; height: guint; stride: guint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_bitset_add_rectangle'{$endif};
procedure gtk_bitset_difference(self: PGtkBitset; other: PGtkBitset); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_bitset_difference'{$endif};
procedure gtk_bitset_intersect(self: PGtkBitset; other: PGtkBitset); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_bitset_intersect'{$endif};
procedure gtk_bitset_remove_all(self: PGtkBitset); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_bitset_remove_all'{$endif};
procedure gtk_bitset_remove_range(self: PGtkBitset; start: guint; n_items: guint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_bitset_remove_range'{$endif};
procedure gtk_bitset_remove_range_closed(self: PGtkBitset; first: guint; last: guint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_bitset_remove_range_closed'{$endif};
procedure gtk_bitset_remove_rectangle(self: PGtkBitset; start: guint; width: guint; height: guint; stride: guint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_bitset_remove_rectangle'{$endif};
procedure gtk_bitset_shift_left(self: PGtkBitset; amount: guint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_bitset_shift_left'{$endif};
procedure gtk_bitset_shift_right(self: PGtkBitset; amount: guint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_bitset_shift_right'{$endif};
procedure gtk_bitset_splice(self: PGtkBitset; position: guint; removed: guint; added: guint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_bitset_splice'{$endif};
procedure gtk_bitset_subtract(self: PGtkBitset; other: PGtkBitset); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_bitset_subtract'{$endif};
procedure gtk_bitset_union(self: PGtkBitset; other: PGtkBitset); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_bitset_union'{$endif};
procedure gtk_bitset_unref(self: PGtkBitset); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_bitset_unref'{$endif};
procedure gtk_bookmark_list_set_attributes(self: PGtkBookmarkList; attributes: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_bookmark_list_set_attributes'{$endif};
procedure gtk_bookmark_list_set_io_priority(self: PGtkBookmarkList; io_priority: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_bookmark_list_set_io_priority'{$endif};
procedure gtk_bool_filter_set_expression(self: PGtkBoolFilter; expression: PGtkExpression); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_bool_filter_set_expression'{$endif};
procedure gtk_bool_filter_set_invert(self: PGtkBoolFilter; invert: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_bool_filter_set_invert'{$endif};
procedure gtk_border_free(border_: PGtkBorder); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_border_free'{$endif};
procedure gtk_box_append(box: PGtkBox; child: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_box_append'{$endif};
procedure gtk_box_insert_child_after(box: PGtkBox; child: PGtkWidget; sibling: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_box_insert_child_after'{$endif};
procedure gtk_box_layout_set_baseline_position(box_layout: PGtkBoxLayout; position: TGtkBaselinePosition); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_box_layout_set_baseline_position'{$endif};
procedure gtk_box_layout_set_homogeneous(box_layout: PGtkBoxLayout; homogeneous: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_box_layout_set_homogeneous'{$endif};
procedure gtk_box_layout_set_spacing(box_layout: PGtkBoxLayout; spacing: guint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_box_layout_set_spacing'{$endif};
procedure gtk_box_prepend(box: PGtkBox; child: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_box_prepend'{$endif};
procedure gtk_box_remove(box: PGtkBox; child: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_box_remove'{$endif};
procedure gtk_box_reorder_child_after(box: PGtkBox; child: PGtkWidget; sibling: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_box_reorder_child_after'{$endif};
procedure gtk_box_set_baseline_position(box: PGtkBox; position: TGtkBaselinePosition); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_box_set_baseline_position'{$endif};
procedure gtk_box_set_homogeneous(box: PGtkBox; homogeneous: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_box_set_homogeneous'{$endif};
procedure gtk_box_set_spacing(box: PGtkBox; spacing: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_box_set_spacing'{$endif};
procedure gtk_buildable_parse_context_get_position(context: PGtkBuildableParseContext; line_number: Pgint; char_number: Pgint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_buildable_parse_context_get_position'{$endif};
procedure gtk_buildable_parse_context_push(context: PGtkBuildableParseContext; parser: PGtkBuildableParser; user_data: gpointer); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_buildable_parse_context_push'{$endif};
procedure gtk_builder_cscope_add_callback_symbol(self: PGtkBuilderCScope; callback_name: Pgchar; callback_symbol: TGCallback); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_builder_cscope_add_callback_symbol'{$endif};
procedure gtk_builder_cscope_add_callback_symbols(self: PGtkBuilderCScope; first_callback_name: Pgchar; first_callback_symbol: TGCallback; args: array of const); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_builder_cscope_add_callback_symbols'{$endif};
procedure gtk_builder_expose_object(builder: PGtkBuilder; name: Pgchar; object_: PGObject); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_builder_expose_object'{$endif};
procedure gtk_builder_set_current_object(builder: PGtkBuilder; current_object: PGObject); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_builder_set_current_object'{$endif};
procedure gtk_builder_set_scope(builder: PGtkBuilder; scope: PGtkBuilderScope); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_builder_set_scope'{$endif};
procedure gtk_builder_set_translation_domain(builder: PGtkBuilder; domain: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_builder_set_translation_domain'{$endif};
procedure gtk_button_set_child(button: PGtkButton; child: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_button_set_child'{$endif};
procedure gtk_button_set_has_frame(button: PGtkButton; has_frame: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_button_set_has_frame'{$endif};
procedure gtk_button_set_icon_name(button: PGtkButton; icon_name: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_button_set_icon_name'{$endif};
procedure gtk_button_set_label(button: PGtkButton; label_: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_button_set_label'{$endif};
procedure gtk_button_set_use_underline(button: PGtkButton; use_underline: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_button_set_use_underline'{$endif};
procedure gtk_calendar_clear_marks(calendar: PGtkCalendar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_calendar_clear_marks'{$endif};
procedure gtk_calendar_mark_day(calendar: PGtkCalendar; day: guint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_calendar_mark_day'{$endif};
procedure gtk_calendar_select_day(self: PGtkCalendar; date: PGDateTime); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_calendar_select_day'{$endif};
procedure gtk_calendar_set_show_day_names(self: PGtkCalendar; value: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_calendar_set_show_day_names'{$endif};
procedure gtk_calendar_set_show_heading(self: PGtkCalendar; value: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_calendar_set_show_heading'{$endif};
procedure gtk_calendar_set_show_week_numbers(self: PGtkCalendar; value: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_calendar_set_show_week_numbers'{$endif};
procedure gtk_calendar_unmark_day(calendar: PGtkCalendar; day: guint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_calendar_unmark_day'{$endif};
procedure gtk_cell_area_add(area: PGtkCellArea; renderer: PGtkCellRenderer); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_add'{$endif};
procedure gtk_cell_area_add_focus_sibling(area: PGtkCellArea; renderer: PGtkCellRenderer; sibling: PGtkCellRenderer); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_add_focus_sibling'{$endif};
procedure gtk_cell_area_add_with_properties(area: PGtkCellArea; renderer: PGtkCellRenderer; first_prop_name: Pgchar; args: array of const); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_add_with_properties'{$endif};
procedure gtk_cell_area_apply_attributes(area: PGtkCellArea; tree_model: PGtkTreeModel; iter: PGtkTreeIter; is_expander: gboolean; is_expanded: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_apply_attributes'{$endif};
procedure gtk_cell_area_attribute_connect(area: PGtkCellArea; renderer: PGtkCellRenderer; attribute: Pgchar; column: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_attribute_connect'{$endif};
procedure gtk_cell_area_attribute_disconnect(area: PGtkCellArea; renderer: PGtkCellRenderer; attribute: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_attribute_disconnect'{$endif};
procedure gtk_cell_area_box_pack_end(box: PGtkCellAreaBox; renderer: PGtkCellRenderer; expand: gboolean; align: gboolean; fixed: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_box_pack_end'{$endif};
procedure gtk_cell_area_box_pack_start(box: PGtkCellAreaBox; renderer: PGtkCellRenderer; expand: gboolean; align: gboolean; fixed: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_box_pack_start'{$endif};
procedure gtk_cell_area_box_set_spacing(box: PGtkCellAreaBox; spacing: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_box_set_spacing'{$endif};
procedure gtk_cell_area_cell_get(area: PGtkCellArea; renderer: PGtkCellRenderer; first_prop_name: Pgchar; args: array of const); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_cell_get'{$endif};
procedure gtk_cell_area_cell_get_property(area: PGtkCellArea; renderer: PGtkCellRenderer; property_name: Pgchar; value: PGValue); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_cell_get_property'{$endif};
procedure gtk_cell_area_cell_get_valist(area: PGtkCellArea; renderer: PGtkCellRenderer; first_property_name: Pgchar; var_args: Tva_list); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_cell_get_valist'{$endif};
procedure gtk_cell_area_cell_set(area: PGtkCellArea; renderer: PGtkCellRenderer; first_prop_name: Pgchar; args: array of const); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_cell_set'{$endif};
procedure gtk_cell_area_cell_set_property(area: PGtkCellArea; renderer: PGtkCellRenderer; property_name: Pgchar; value: PGValue); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_cell_set_property'{$endif};
procedure gtk_cell_area_cell_set_valist(area: PGtkCellArea; renderer: PGtkCellRenderer; first_property_name: Pgchar; var_args: Tva_list); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_cell_set_valist'{$endif};
procedure gtk_cell_area_class_install_cell_property(aclass: PGtkCellAreaClass; property_id: guint; pspec: PGParamSpec); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_class_install_cell_property'{$endif};
procedure gtk_cell_area_context_allocate(context: PGtkCellAreaContext; width: gint; height: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_context_allocate'{$endif};
procedure gtk_cell_area_context_get_allocation(context: PGtkCellAreaContext; width: Pgint; height: Pgint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_context_get_allocation'{$endif};
procedure gtk_cell_area_context_get_preferred_height(context: PGtkCellAreaContext; minimum_height: Pgint; natural_height: Pgint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_context_get_preferred_height'{$endif};
procedure gtk_cell_area_context_get_preferred_height_for_width(context: PGtkCellAreaContext; width: gint; minimum_height: Pgint; natural_height: Pgint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_context_get_preferred_height_for_width'{$endif};
procedure gtk_cell_area_context_get_preferred_width(context: PGtkCellAreaContext; minimum_width: Pgint; natural_width: Pgint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_context_get_preferred_width'{$endif};
procedure gtk_cell_area_context_get_preferred_width_for_height(context: PGtkCellAreaContext; height: gint; minimum_width: Pgint; natural_width: Pgint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_context_get_preferred_width_for_height'{$endif};
procedure gtk_cell_area_context_push_preferred_height(context: PGtkCellAreaContext; minimum_height: gint; natural_height: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_context_push_preferred_height'{$endif};
procedure gtk_cell_area_context_push_preferred_width(context: PGtkCellAreaContext; minimum_width: gint; natural_width: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_context_push_preferred_width'{$endif};
procedure gtk_cell_area_context_reset(context: PGtkCellAreaContext); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_context_reset'{$endif};
procedure gtk_cell_area_foreach(area: PGtkCellArea; callback: TGtkCellCallback; callback_data: gpointer); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_foreach'{$endif};
procedure gtk_cell_area_foreach_alloc(area: PGtkCellArea; context: PGtkCellAreaContext; widget: PGtkWidget; cell_area: PGdkRectangle; background_area: PGdkRectangle; callback: TGtkCellAllocCallback; callback_data: gpointer); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_foreach_alloc'{$endif};
procedure gtk_cell_area_get_cell_allocation(area: PGtkCellArea; context: PGtkCellAreaContext; widget: PGtkWidget; renderer: PGtkCellRenderer; cell_area: PGdkRectangle; allocation: PGdkRectangle); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_get_cell_allocation'{$endif};
procedure gtk_cell_area_get_preferred_height(area: PGtkCellArea; context: PGtkCellAreaContext; widget: PGtkWidget; minimum_height: Pgint; natural_height: Pgint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_get_preferred_height'{$endif};
procedure gtk_cell_area_get_preferred_height_for_width(area: PGtkCellArea; context: PGtkCellAreaContext; widget: PGtkWidget; width: gint; minimum_height: Pgint; natural_height: Pgint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_get_preferred_height_for_width'{$endif};
procedure gtk_cell_area_get_preferred_width(area: PGtkCellArea; context: PGtkCellAreaContext; widget: PGtkWidget; minimum_width: Pgint; natural_width: Pgint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_get_preferred_width'{$endif};
procedure gtk_cell_area_get_preferred_width_for_height(area: PGtkCellArea; context: PGtkCellAreaContext; widget: PGtkWidget; height: gint; minimum_width: Pgint; natural_width: Pgint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_get_preferred_width_for_height'{$endif};
procedure gtk_cell_area_inner_cell_area(area: PGtkCellArea; widget: PGtkWidget; cell_area: PGdkRectangle; inner_area: PGdkRectangle); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_inner_cell_area'{$endif};
procedure gtk_cell_area_remove(area: PGtkCellArea; renderer: PGtkCellRenderer); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_remove'{$endif};
procedure gtk_cell_area_remove_focus_sibling(area: PGtkCellArea; renderer: PGtkCellRenderer; sibling: PGtkCellRenderer); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_remove_focus_sibling'{$endif};
procedure gtk_cell_area_request_renderer(area: PGtkCellArea; renderer: PGtkCellRenderer; orientation: TGtkOrientation; widget: PGtkWidget; for_size: gint; minimum_size: Pgint; natural_size: Pgint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_request_renderer'{$endif};
procedure gtk_cell_area_set_focus_cell(area: PGtkCellArea; renderer: PGtkCellRenderer); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_set_focus_cell'{$endif};
procedure gtk_cell_area_snapshot(area: PGtkCellArea; context: PGtkCellAreaContext; widget: PGtkWidget; snapshot: PGtkSnapshot; background_area: PGdkRectangle; cell_area: PGdkRectangle; flags: TGtkCellRendererState; paint_focus: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_snapshot'{$endif};
procedure gtk_cell_area_stop_editing(area: PGtkCellArea; canceled: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_area_stop_editing'{$endif};
procedure gtk_cell_editable_editing_done(cell_editable: PGtkCellEditable); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_editable_editing_done'{$endif};
procedure gtk_cell_editable_remove_widget(cell_editable: PGtkCellEditable); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_editable_remove_widget'{$endif};
procedure gtk_cell_editable_start_editing(cell_editable: PGtkCellEditable; event: PGdkEvent); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_editable_start_editing'{$endif};
procedure gtk_cell_layout_add_attribute(cell_layout: PGtkCellLayout; cell: PGtkCellRenderer; attribute: Pgchar; column: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_layout_add_attribute'{$endif};
procedure gtk_cell_layout_clear(cell_layout: PGtkCellLayout); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_layout_clear'{$endif};
procedure gtk_cell_layout_clear_attributes(cell_layout: PGtkCellLayout; cell: PGtkCellRenderer); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_layout_clear_attributes'{$endif};
procedure gtk_cell_layout_pack_end(cell_layout: PGtkCellLayout; cell: PGtkCellRenderer; expand: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_layout_pack_end'{$endif};
procedure gtk_cell_layout_pack_start(cell_layout: PGtkCellLayout; cell: PGtkCellRenderer; expand: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_layout_pack_start'{$endif};
procedure gtk_cell_layout_reorder(cell_layout: PGtkCellLayout; cell: PGtkCellRenderer; position: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_layout_reorder'{$endif};
procedure gtk_cell_layout_set_attributes(cell_layout: PGtkCellLayout; cell: PGtkCellRenderer; args: array of const); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_layout_set_attributes'{$endif};
procedure gtk_cell_layout_set_cell_data_func(cell_layout: PGtkCellLayout; cell: PGtkCellRenderer; func: TGtkCellLayoutDataFunc; func_data: gpointer; destroy_: TGDestroyNotify); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_layout_set_cell_data_func'{$endif};
procedure gtk_cell_renderer_get_aligned_area(cell: PGtkCellRenderer; widget: PGtkWidget; flags: TGtkCellRendererState; cell_area: PGdkRectangle; aligned_area: PGdkRectangle); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_renderer_get_aligned_area'{$endif};
procedure gtk_cell_renderer_get_alignment(cell: PGtkCellRenderer; xalign: Pgfloat; yalign: Pgfloat); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_renderer_get_alignment'{$endif};
procedure gtk_cell_renderer_get_fixed_size(cell: PGtkCellRenderer; width: Pgint; height: Pgint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_renderer_get_fixed_size'{$endif};
procedure gtk_cell_renderer_get_padding(cell: PGtkCellRenderer; xpad: Pgint; ypad: Pgint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_renderer_get_padding'{$endif};
procedure gtk_cell_renderer_get_preferred_height(cell: PGtkCellRenderer; widget: PGtkWidget; minimum_size: Pgint; natural_size: Pgint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_renderer_get_preferred_height'{$endif};
procedure gtk_cell_renderer_get_preferred_height_for_width(cell: PGtkCellRenderer; widget: PGtkWidget; width: gint; minimum_height: Pgint; natural_height: Pgint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_renderer_get_preferred_height_for_width'{$endif};
procedure gtk_cell_renderer_get_preferred_size(cell: PGtkCellRenderer; widget: PGtkWidget; minimum_size: PGtkRequisition; natural_size: PGtkRequisition); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_renderer_get_preferred_size'{$endif};
procedure gtk_cell_renderer_get_preferred_width(cell: PGtkCellRenderer; widget: PGtkWidget; minimum_size: Pgint; natural_size: Pgint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_renderer_get_preferred_width'{$endif};
procedure gtk_cell_renderer_get_preferred_width_for_height(cell: PGtkCellRenderer; widget: PGtkWidget; height: gint; minimum_width: Pgint; natural_width: Pgint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_renderer_get_preferred_width_for_height'{$endif};
procedure gtk_cell_renderer_set_alignment(cell: PGtkCellRenderer; xalign: gfloat; yalign: gfloat); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_renderer_set_alignment'{$endif};
procedure gtk_cell_renderer_set_fixed_size(cell: PGtkCellRenderer; width: gint; height: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_renderer_set_fixed_size'{$endif};
procedure gtk_cell_renderer_set_is_expanded(cell: PGtkCellRenderer; is_expanded: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_renderer_set_is_expanded'{$endif};
procedure gtk_cell_renderer_set_is_expander(cell: PGtkCellRenderer; is_expander: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_renderer_set_is_expander'{$endif};
procedure gtk_cell_renderer_set_padding(cell: PGtkCellRenderer; xpad: gint; ypad: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_renderer_set_padding'{$endif};
procedure gtk_cell_renderer_set_sensitive(cell: PGtkCellRenderer; sensitive: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_renderer_set_sensitive'{$endif};
procedure gtk_cell_renderer_set_visible(cell: PGtkCellRenderer; visible: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_renderer_set_visible'{$endif};
procedure gtk_cell_renderer_snapshot(cell: PGtkCellRenderer; snapshot: PGtkSnapshot; widget: PGtkWidget; background_area: PGdkRectangle; cell_area: PGdkRectangle; flags: TGtkCellRendererState); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_renderer_snapshot'{$endif};
procedure gtk_cell_renderer_stop_editing(cell: PGtkCellRenderer; canceled: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_renderer_stop_editing'{$endif};
procedure gtk_cell_renderer_text_set_fixed_height_from_font(renderer: PGtkCellRendererText; number_of_rows: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_renderer_text_set_fixed_height_from_font'{$endif};
procedure gtk_cell_renderer_toggle_set_activatable(toggle: PGtkCellRendererToggle; setting: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_renderer_toggle_set_activatable'{$endif};
procedure gtk_cell_renderer_toggle_set_active(toggle: PGtkCellRendererToggle; setting: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_renderer_toggle_set_active'{$endif};
procedure gtk_cell_renderer_toggle_set_radio(toggle: PGtkCellRendererToggle; radio: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_renderer_toggle_set_radio'{$endif};
procedure gtk_cell_view_set_displayed_row(cell_view: PGtkCellView; path: PGtkTreePath); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_view_set_displayed_row'{$endif};
procedure gtk_cell_view_set_draw_sensitive(cell_view: PGtkCellView; draw_sensitive: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_view_set_draw_sensitive'{$endif};
procedure gtk_cell_view_set_fit_model(cell_view: PGtkCellView; fit_model: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_view_set_fit_model'{$endif};
procedure gtk_cell_view_set_model(cell_view: PGtkCellView; model: PGtkTreeModel); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_cell_view_set_model'{$endif};
procedure gtk_center_box_set_baseline_position(self: PGtkCenterBox; position: TGtkBaselinePosition); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_center_box_set_baseline_position'{$endif};
procedure gtk_center_box_set_center_widget(self: PGtkCenterBox; child: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_center_box_set_center_widget'{$endif};
procedure gtk_center_box_set_end_widget(self: PGtkCenterBox; child: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_center_box_set_end_widget'{$endif};
procedure gtk_center_box_set_start_widget(self: PGtkCenterBox; child: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_center_box_set_start_widget'{$endif};
procedure gtk_center_layout_set_baseline_position(self: PGtkCenterLayout; baseline_position: TGtkBaselinePosition); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_center_layout_set_baseline_position'{$endif};
procedure gtk_center_layout_set_center_widget(self: PGtkCenterLayout; widget: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_center_layout_set_center_widget'{$endif};
procedure gtk_center_layout_set_end_widget(self: PGtkCenterLayout; widget: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_center_layout_set_end_widget'{$endif};
procedure gtk_center_layout_set_orientation(self: PGtkCenterLayout; orientation: TGtkOrientation); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_center_layout_set_orientation'{$endif};
procedure gtk_center_layout_set_start_widget(self: PGtkCenterLayout; widget: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_center_layout_set_start_widget'{$endif};
procedure gtk_check_button_set_active(self: PGtkCheckButton; setting: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_check_button_set_active'{$endif};
procedure gtk_check_button_set_group(self: PGtkCheckButton; group: PGtkCheckButton); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_check_button_set_group'{$endif};
procedure gtk_check_button_set_inconsistent(check_button: PGtkCheckButton; inconsistent: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_check_button_set_inconsistent'{$endif};
procedure gtk_check_button_set_label(self: PGtkCheckButton; label_: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_check_button_set_label'{$endif};
procedure gtk_check_button_set_use_underline(self: PGtkCheckButton; setting: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_check_button_set_use_underline'{$endif};
procedure gtk_color_button_set_modal(button: PGtkColorButton; modal: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_color_button_set_modal'{$endif};
procedure gtk_color_button_set_title(button: PGtkColorButton; title: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_color_button_set_title'{$endif};
procedure gtk_color_chooser_add_palette(chooser: PGtkColorChooser; orientation: TGtkOrientation; colors_per_line: gint; n_colors: gint; colors: PGdkRGBA); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_color_chooser_add_palette'{$endif};
procedure gtk_color_chooser_get_rgba(chooser: PGtkColorChooser; color: PGdkRGBA); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_color_chooser_get_rgba'{$endif};
procedure gtk_color_chooser_set_rgba(chooser: PGtkColorChooser; color: PGdkRGBA); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_color_chooser_set_rgba'{$endif};
procedure gtk_color_chooser_set_use_alpha(chooser: PGtkColorChooser; use_alpha: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_color_chooser_set_use_alpha'{$endif};
procedure gtk_column_view_append_column(self: PGtkColumnView; column: PGtkColumnViewColumn); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_column_view_append_column'{$endif};
procedure gtk_column_view_column_set_expand(self: PGtkColumnViewColumn; expand: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_column_view_column_set_expand'{$endif};
procedure gtk_column_view_column_set_factory(self: PGtkColumnViewColumn; factory: PGtkListItemFactory); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_column_view_column_set_factory'{$endif};
procedure gtk_column_view_column_set_fixed_width(self: PGtkColumnViewColumn; fixed_width: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_column_view_column_set_fixed_width'{$endif};
procedure gtk_column_view_column_set_header_menu(self: PGtkColumnViewColumn; menu: PGMenuModel); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_column_view_column_set_header_menu'{$endif};
procedure gtk_column_view_column_set_resizable(self: PGtkColumnViewColumn; resizable: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_column_view_column_set_resizable'{$endif};
procedure gtk_column_view_column_set_sorter(self: PGtkColumnViewColumn; sorter: PGtkSorter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_column_view_column_set_sorter'{$endif};
procedure gtk_column_view_column_set_title(self: PGtkColumnViewColumn; title: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_column_view_column_set_title'{$endif};
procedure gtk_column_view_column_set_visible(self: PGtkColumnViewColumn; visible: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_column_view_column_set_visible'{$endif};
procedure gtk_column_view_insert_column(self: PGtkColumnView; position: guint; column: PGtkColumnViewColumn); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_column_view_insert_column'{$endif};
procedure gtk_column_view_remove_column(self: PGtkColumnView; column: PGtkColumnViewColumn); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_column_view_remove_column'{$endif};
procedure gtk_column_view_set_enable_rubberband(self: PGtkColumnView; enable_rubberband: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_column_view_set_enable_rubberband'{$endif};
procedure gtk_column_view_set_model(self: PGtkColumnView; model: PGtkSelectionModel); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_column_view_set_model'{$endif};
procedure gtk_column_view_set_reorderable(self: PGtkColumnView; reorderable: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_column_view_set_reorderable'{$endif};
procedure gtk_column_view_set_show_column_separators(self: PGtkColumnView; show_column_separators: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_column_view_set_show_column_separators'{$endif};
procedure gtk_column_view_set_show_row_separators(self: PGtkColumnView; show_row_separators: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_column_view_set_show_row_separators'{$endif};
procedure gtk_column_view_set_single_click_activate(self: PGtkColumnView; single_click_activate: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_column_view_set_single_click_activate'{$endif};
procedure gtk_column_view_sort_by_column(self: PGtkColumnView; column: PGtkColumnViewColumn; direction: TGtkSortType); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_column_view_sort_by_column'{$endif};
procedure gtk_combo_box_popdown(combo_box: PGtkComboBox); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_combo_box_popdown'{$endif};
procedure gtk_combo_box_popup(combo_box: PGtkComboBox); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_combo_box_popup'{$endif};
procedure gtk_combo_box_popup_for_device(combo_box: PGtkComboBox; device: PGdkDevice); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_combo_box_popup_for_device'{$endif};
procedure gtk_combo_box_set_active(combo_box: PGtkComboBox; index_: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_combo_box_set_active'{$endif};
procedure gtk_combo_box_set_active_iter(combo_box: PGtkComboBox; iter: PGtkTreeIter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_combo_box_set_active_iter'{$endif};
procedure gtk_combo_box_set_button_sensitivity(combo_box: PGtkComboBox; sensitivity: TGtkSensitivityType); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_combo_box_set_button_sensitivity'{$endif};
procedure gtk_combo_box_set_child(combo_box: PGtkComboBox; child: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_combo_box_set_child'{$endif};
procedure gtk_combo_box_set_entry_text_column(combo_box: PGtkComboBox; text_column: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_combo_box_set_entry_text_column'{$endif};
procedure gtk_combo_box_set_id_column(combo_box: PGtkComboBox; id_column: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_combo_box_set_id_column'{$endif};
procedure gtk_combo_box_set_model(combo_box: PGtkComboBox; model: PGtkTreeModel); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_combo_box_set_model'{$endif};
procedure gtk_combo_box_set_popup_fixed_width(combo_box: PGtkComboBox; fixed: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_combo_box_set_popup_fixed_width'{$endif};
procedure gtk_combo_box_set_row_separator_func(combo_box: PGtkComboBox; func: TGtkTreeViewRowSeparatorFunc; data: gpointer; destroy_: TGDestroyNotify); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_combo_box_set_row_separator_func'{$endif};
procedure gtk_combo_box_text_append(combo_box: PGtkComboBoxText; id: Pgchar; text: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_combo_box_text_append'{$endif};
procedure gtk_combo_box_text_append_text(combo_box: PGtkComboBoxText; text: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_combo_box_text_append_text'{$endif};
procedure gtk_combo_box_text_insert(combo_box: PGtkComboBoxText; position: gint; id: Pgchar; text: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_combo_box_text_insert'{$endif};
procedure gtk_combo_box_text_insert_text(combo_box: PGtkComboBoxText; position: gint; text: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_combo_box_text_insert_text'{$endif};
procedure gtk_combo_box_text_prepend(combo_box: PGtkComboBoxText; id: Pgchar; text: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_combo_box_text_prepend'{$endif};
procedure gtk_combo_box_text_prepend_text(combo_box: PGtkComboBoxText; text: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_combo_box_text_prepend_text'{$endif};
procedure gtk_combo_box_text_remove(combo_box: PGtkComboBoxText; position: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_combo_box_text_remove'{$endif};
procedure gtk_combo_box_text_remove_all(combo_box: PGtkComboBoxText); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_combo_box_text_remove_all'{$endif};
procedure gtk_constraint_guide_get_max_size(guide: PGtkConstraintGuide; width: Pgint; height: Pgint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_constraint_guide_get_max_size'{$endif};
procedure gtk_constraint_guide_get_min_size(guide: PGtkConstraintGuide; width: Pgint; height: Pgint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_constraint_guide_get_min_size'{$endif};
procedure gtk_constraint_guide_get_nat_size(guide: PGtkConstraintGuide; width: Pgint; height: Pgint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_constraint_guide_get_nat_size'{$endif};
procedure gtk_constraint_guide_set_max_size(guide: PGtkConstraintGuide; width: gint; height: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_constraint_guide_set_max_size'{$endif};
procedure gtk_constraint_guide_set_min_size(guide: PGtkConstraintGuide; width: gint; height: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_constraint_guide_set_min_size'{$endif};
procedure gtk_constraint_guide_set_name(guide: PGtkConstraintGuide; name: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_constraint_guide_set_name'{$endif};
procedure gtk_constraint_guide_set_nat_size(guide: PGtkConstraintGuide; width: gint; height: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_constraint_guide_set_nat_size'{$endif};
procedure gtk_constraint_guide_set_strength(guide: PGtkConstraintGuide; strength: TGtkConstraintStrength); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_constraint_guide_set_strength'{$endif};
procedure gtk_constraint_layout_add_constraint(layout: PGtkConstraintLayout; constraint: PGtkConstraint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_constraint_layout_add_constraint'{$endif};
procedure gtk_constraint_layout_add_guide(layout: PGtkConstraintLayout; guide: PGtkConstraintGuide); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_constraint_layout_add_guide'{$endif};
procedure gtk_constraint_layout_remove_all_constraints(layout: PGtkConstraintLayout); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_constraint_layout_remove_all_constraints'{$endif};
procedure gtk_constraint_layout_remove_constraint(layout: PGtkConstraintLayout; constraint: PGtkConstraint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_constraint_layout_remove_constraint'{$endif};
procedure gtk_constraint_layout_remove_guide(layout: PGtkConstraintLayout; guide: PGtkConstraintGuide); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_constraint_layout_remove_guide'{$endif};
procedure gtk_css_provider_load_from_data(css_provider: PGtkCssProvider; data: Pgchar; length: gssize); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_css_provider_load_from_data'{$endif};
procedure gtk_css_provider_load_from_file(css_provider: PGtkCssProvider; file_: PGFile); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_css_provider_load_from_file'{$endif};
procedure gtk_css_provider_load_from_path(css_provider: PGtkCssProvider; path: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_css_provider_load_from_path'{$endif};
procedure gtk_css_provider_load_from_resource(css_provider: PGtkCssProvider; resource_path: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_css_provider_load_from_resource'{$endif};
procedure gtk_css_provider_load_named(provider: PGtkCssProvider; name: Pgchar; variant: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_css_provider_load_named'{$endif};
procedure gtk_css_section_print(section: PGtkCssSection; string_: PGString); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_css_section_print'{$endif};
procedure gtk_css_section_unref(section: PGtkCssSection); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_css_section_unref'{$endif};
procedure gtk_custom_filter_set_filter_func(self: PGtkCustomFilter; match_func: TGtkCustomFilterFunc; user_data: gpointer; user_destroy: TGDestroyNotify); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_custom_filter_set_filter_func'{$endif};
procedure gtk_custom_sorter_set_sort_func(self: PGtkCustomSorter; sort_func: TGCompareDataFunc; user_data: gpointer; user_destroy: TGDestroyNotify); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_custom_sorter_set_sort_func'{$endif};
procedure gtk_dialog_add_action_widget(dialog: PGtkDialog; child: PGtkWidget; response_id: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_dialog_add_action_widget'{$endif};
procedure gtk_dialog_add_buttons(dialog: PGtkDialog; first_button_text: Pgchar; args: array of const); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_dialog_add_buttons'{$endif};
procedure gtk_dialog_response(dialog: PGtkDialog; response_id: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_dialog_response'{$endif};
procedure gtk_dialog_set_default_response(dialog: PGtkDialog; response_id: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_dialog_set_default_response'{$endif};
procedure gtk_dialog_set_response_sensitive(dialog: PGtkDialog; response_id: gint; setting: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_dialog_set_response_sensitive'{$endif};
procedure gtk_directory_list_set_attributes(self: PGtkDirectoryList; attributes: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_directory_list_set_attributes'{$endif};
procedure gtk_directory_list_set_file(self: PGtkDirectoryList; file_: PGFile); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_directory_list_set_file'{$endif};
procedure gtk_directory_list_set_io_priority(self: PGtkDirectoryList; io_priority: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_directory_list_set_io_priority'{$endif};
procedure gtk_directory_list_set_monitored(self: PGtkDirectoryList; monitored: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_directory_list_set_monitored'{$endif};
procedure gtk_disable_setlocale; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_disable_setlocale'{$endif};
procedure gtk_drag_icon_set_child(self: PGtkDragIcon; child: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drag_icon_set_child'{$endif};
procedure gtk_drag_icon_set_from_paintable(drag: PGdkDrag; paintable: PGdkPaintable; hot_x: gint; hot_y: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drag_icon_set_from_paintable'{$endif};
procedure gtk_drag_source_drag_cancel(source: PGtkDragSource); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drag_source_drag_cancel'{$endif};
procedure gtk_drag_source_set_actions(source: PGtkDragSource; actions: TGdkDragAction); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drag_source_set_actions'{$endif};
procedure gtk_drag_source_set_content(source: PGtkDragSource; content: PGdkContentProvider); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drag_source_set_content'{$endif};
procedure gtk_drag_source_set_icon(source: PGtkDragSource; paintable: PGdkPaintable; hot_x: gint; hot_y: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drag_source_set_icon'{$endif};
procedure gtk_drawing_area_set_content_height(self: PGtkDrawingArea; height: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drawing_area_set_content_height'{$endif};
procedure gtk_drawing_area_set_content_width(self: PGtkDrawingArea; width: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drawing_area_set_content_width'{$endif};
procedure gtk_drawing_area_set_draw_func(self: PGtkDrawingArea; draw_func: TGtkDrawingAreaDrawFunc; user_data: gpointer; destroy_: TGDestroyNotify); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drawing_area_set_draw_func'{$endif};
procedure gtk_drop_down_set_enable_search(self: PGtkDropDown; enable_search: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drop_down_set_enable_search'{$endif};
procedure gtk_drop_down_set_expression(self: PGtkDropDown; expression: PGtkExpression); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drop_down_set_expression'{$endif};
procedure gtk_drop_down_set_factory(self: PGtkDropDown; factory: PGtkListItemFactory); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drop_down_set_factory'{$endif};
procedure gtk_drop_down_set_list_factory(self: PGtkDropDown; factory: PGtkListItemFactory); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drop_down_set_list_factory'{$endif};
procedure gtk_drop_down_set_model(self: PGtkDropDown; model: PGListModel); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drop_down_set_model'{$endif};
procedure gtk_drop_down_set_selected(self: PGtkDropDown; position: guint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drop_down_set_selected'{$endif};
procedure gtk_drop_down_set_show_arrow(self: PGtkDropDown; show_arrow: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drop_down_set_show_arrow'{$endif};
procedure gtk_drop_target_async_reject_drop(self: PGtkDropTargetAsync; drop: PGdkDrop); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drop_target_async_reject_drop'{$endif};
procedure gtk_drop_target_async_set_actions(self: PGtkDropTargetAsync; actions: TGdkDragAction); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drop_target_async_set_actions'{$endif};
procedure gtk_drop_target_async_set_formats(self: PGtkDropTargetAsync; formats: PGdkContentFormats); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drop_target_async_set_formats'{$endif};
procedure gtk_drop_target_reject(self: PGtkDropTarget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drop_target_reject'{$endif};
procedure gtk_drop_target_set_actions(self: PGtkDropTarget; actions: TGdkDragAction); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drop_target_set_actions'{$endif};
procedure gtk_drop_target_set_gtypes(self: PGtkDropTarget; types: PGType; n_types: gsize); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drop_target_set_gtypes'{$endif};
procedure gtk_drop_target_set_preload(self: PGtkDropTarget; preload: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_drop_target_set_preload'{$endif};
procedure gtk_editable_delete_selection(editable: PGtkEditable); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_editable_delete_selection'{$endif};
procedure gtk_editable_delete_text(editable: PGtkEditable; start_pos: gint; end_pos: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_editable_delete_text'{$endif};
procedure gtk_editable_finish_delegate(editable: PGtkEditable); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_editable_finish_delegate'{$endif};
procedure gtk_editable_init_delegate(editable: PGtkEditable); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_editable_init_delegate'{$endif};
procedure gtk_editable_insert_text(editable: PGtkEditable; text: Pgchar; length: gint; position: Pgint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_editable_insert_text'{$endif};
procedure gtk_editable_label_start_editing(self: PGtkEditableLabel); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_editable_label_start_editing'{$endif};
procedure gtk_editable_label_stop_editing(self: PGtkEditableLabel; commit: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_editable_label_stop_editing'{$endif};
procedure gtk_editable_select_region(editable: PGtkEditable; start_pos: gint; end_pos: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_editable_select_region'{$endif};
procedure gtk_editable_set_alignment(editable: PGtkEditable; xalign: gfloat); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_editable_set_alignment'{$endif};
procedure gtk_editable_set_editable(editable: PGtkEditable; is_editable: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_editable_set_editable'{$endif};
procedure gtk_editable_set_enable_undo(editable: PGtkEditable; enable_undo: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_editable_set_enable_undo'{$endif};
procedure gtk_editable_set_max_width_chars(editable: PGtkEditable; n_chars: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_editable_set_max_width_chars'{$endif};
procedure gtk_editable_set_position(editable: PGtkEditable; position: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_editable_set_position'{$endif};
procedure gtk_editable_set_text(editable: PGtkEditable; text: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_editable_set_text'{$endif};
procedure gtk_editable_set_width_chars(editable: PGtkEditable; n_chars: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_editable_set_width_chars'{$endif};
procedure gtk_entry_buffer_emit_deleted_text(buffer: PGtkEntryBuffer; position: guint; n_chars: guint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_buffer_emit_deleted_text'{$endif};
procedure gtk_entry_buffer_emit_inserted_text(buffer: PGtkEntryBuffer; position: guint; chars: Pgchar; n_chars: guint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_buffer_emit_inserted_text'{$endif};
procedure gtk_entry_buffer_set_max_length(buffer: PGtkEntryBuffer; max_length: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_buffer_set_max_length'{$endif};
procedure gtk_entry_buffer_set_text(buffer: PGtkEntryBuffer; chars: Pgchar; n_chars: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_buffer_set_text'{$endif};
procedure gtk_entry_completion_complete(completion: PGtkEntryCompletion); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_completion_complete'{$endif};
procedure gtk_entry_completion_insert_prefix(completion: PGtkEntryCompletion); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_completion_insert_prefix'{$endif};
procedure gtk_entry_completion_set_inline_completion(completion: PGtkEntryCompletion; inline_completion: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_completion_set_inline_completion'{$endif};
procedure gtk_entry_completion_set_inline_selection(completion: PGtkEntryCompletion; inline_selection: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_completion_set_inline_selection'{$endif};
procedure gtk_entry_completion_set_match_func(completion: PGtkEntryCompletion; func: TGtkEntryCompletionMatchFunc; func_data: gpointer; func_notify: TGDestroyNotify); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_completion_set_match_func'{$endif};
procedure gtk_entry_completion_set_minimum_key_length(completion: PGtkEntryCompletion; length: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_completion_set_minimum_key_length'{$endif};
procedure gtk_entry_completion_set_model(completion: PGtkEntryCompletion; model: PGtkTreeModel); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_completion_set_model'{$endif};
procedure gtk_entry_completion_set_popup_completion(completion: PGtkEntryCompletion; popup_completion: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_completion_set_popup_completion'{$endif};
procedure gtk_entry_completion_set_popup_set_width(completion: PGtkEntryCompletion; popup_set_width: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_completion_set_popup_set_width'{$endif};
procedure gtk_entry_completion_set_popup_single_match(completion: PGtkEntryCompletion; popup_single_match: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_completion_set_popup_single_match'{$endif};
procedure gtk_entry_completion_set_text_column(completion: PGtkEntryCompletion; column: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_completion_set_text_column'{$endif};
procedure gtk_entry_get_icon_area(entry: PGtkEntry; icon_pos: TGtkEntryIconPosition; icon_area: PGdkRectangle); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_get_icon_area'{$endif};
procedure gtk_entry_progress_pulse(entry: PGtkEntry); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_progress_pulse'{$endif};
procedure gtk_entry_reset_im_context(entry: PGtkEntry); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_reset_im_context'{$endif};
procedure gtk_entry_set_activates_default(entry: PGtkEntry; setting: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_set_activates_default'{$endif};
procedure gtk_entry_set_alignment(entry: PGtkEntry; xalign: gfloat); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_set_alignment'{$endif};
procedure gtk_entry_set_attributes(entry: PGtkEntry; attrs: PPangoAttrList); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_set_attributes'{$endif};
procedure gtk_entry_set_buffer(entry: PGtkEntry; buffer: PGtkEntryBuffer); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_set_buffer'{$endif};
procedure gtk_entry_set_completion(entry: PGtkEntry; completion: PGtkEntryCompletion); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_set_completion'{$endif};
procedure gtk_entry_set_extra_menu(entry: PGtkEntry; model: PGMenuModel); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_set_extra_menu'{$endif};
procedure gtk_entry_set_has_frame(entry: PGtkEntry; setting: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_set_has_frame'{$endif};
procedure gtk_entry_set_icon_activatable(entry: PGtkEntry; icon_pos: TGtkEntryIconPosition; activatable: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_set_icon_activatable'{$endif};
procedure gtk_entry_set_icon_drag_source(entry: PGtkEntry; icon_pos: TGtkEntryIconPosition; provider: PGdkContentProvider; actions: TGdkDragAction); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_set_icon_drag_source'{$endif};
procedure gtk_entry_set_icon_from_gicon(entry: PGtkEntry; icon_pos: TGtkEntryIconPosition; icon: PGIcon); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_set_icon_from_gicon'{$endif};
procedure gtk_entry_set_icon_from_icon_name(entry: PGtkEntry; icon_pos: TGtkEntryIconPosition; icon_name: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_set_icon_from_icon_name'{$endif};
procedure gtk_entry_set_icon_from_paintable(entry: PGtkEntry; icon_pos: TGtkEntryIconPosition; paintable: PGdkPaintable); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_set_icon_from_paintable'{$endif};
procedure gtk_entry_set_icon_sensitive(entry: PGtkEntry; icon_pos: TGtkEntryIconPosition; sensitive: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_set_icon_sensitive'{$endif};
procedure gtk_entry_set_icon_tooltip_markup(entry: PGtkEntry; icon_pos: TGtkEntryIconPosition; tooltip: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_set_icon_tooltip_markup'{$endif};
procedure gtk_entry_set_icon_tooltip_text(entry: PGtkEntry; icon_pos: TGtkEntryIconPosition; tooltip: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_set_icon_tooltip_text'{$endif};
procedure gtk_entry_set_input_hints(entry: PGtkEntry; hints: TGtkInputHints); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_set_input_hints'{$endif};
procedure gtk_entry_set_input_purpose(entry: PGtkEntry; purpose: TGtkInputPurpose); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_set_input_purpose'{$endif};
procedure gtk_entry_set_invisible_char(entry: PGtkEntry; ch: gunichar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_set_invisible_char'{$endif};
procedure gtk_entry_set_max_length(entry: PGtkEntry; max: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_set_max_length'{$endif};
procedure gtk_entry_set_overwrite_mode(entry: PGtkEntry; overwrite: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_set_overwrite_mode'{$endif};
procedure gtk_entry_set_placeholder_text(entry: PGtkEntry; text: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_set_placeholder_text'{$endif};
procedure gtk_entry_set_progress_fraction(entry: PGtkEntry; fraction: gdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_set_progress_fraction'{$endif};
procedure gtk_entry_set_progress_pulse_step(entry: PGtkEntry; fraction: gdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_set_progress_pulse_step'{$endif};
procedure gtk_entry_set_tabs(entry: PGtkEntry; tabs: PPangoTabArray); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_set_tabs'{$endif};
procedure gtk_entry_set_visibility(entry: PGtkEntry; visible: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_set_visibility'{$endif};
procedure gtk_entry_unset_invisible_char(entry: PGtkEntry); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_entry_unset_invisible_char'{$endif};
procedure gtk_enumerate_printers(func: TGtkPrinterFunc; data: gpointer; destroy_: TGDestroyNotify; wait: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_enumerate_printers'{$endif};
procedure gtk_event_controller_key_set_im_context(controller: PGtkEventControllerKey; im_context: PGtkIMContext); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_event_controller_key_set_im_context'{$endif};
procedure gtk_event_controller_reset(controller: PGtkEventController); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_event_controller_reset'{$endif};
procedure gtk_event_controller_scroll_set_flags(scroll: PGtkEventControllerScroll; flags: TGtkEventControllerScrollFlags); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_event_controller_scroll_set_flags'{$endif};
procedure gtk_event_controller_set_name(controller: PGtkEventController; name: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_event_controller_set_name'{$endif};
procedure gtk_event_controller_set_propagation_limit(controller: PGtkEventController; limit: TGtkPropagationLimit); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_event_controller_set_propagation_limit'{$endif};
procedure gtk_event_controller_set_propagation_phase(controller: PGtkEventController; phase: TGtkPropagationPhase); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_event_controller_set_propagation_phase'{$endif};
procedure gtk_expander_set_child(expander: PGtkExpander; child: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_expander_set_child'{$endif};
procedure gtk_expander_set_expanded(expander: PGtkExpander; expanded: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_expander_set_expanded'{$endif};
procedure gtk_expander_set_label(expander: PGtkExpander; label_: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_expander_set_label'{$endif};
procedure gtk_expander_set_label_widget(expander: PGtkExpander; label_widget: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_expander_set_label_widget'{$endif};
procedure gtk_expander_set_resize_toplevel(expander: PGtkExpander; resize_toplevel: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_expander_set_resize_toplevel'{$endif};
procedure gtk_expander_set_use_markup(expander: PGtkExpander; use_markup: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_expander_set_use_markup'{$endif};
procedure gtk_expander_set_use_underline(expander: PGtkExpander; use_underline: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_expander_set_use_underline'{$endif};
procedure gtk_expression_unref(self: PGtkExpression); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_expression_unref'{$endif};
procedure gtk_expression_watch_unref(watch: PGtkExpressionWatch); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_expression_watch_unref'{$endif};
procedure gtk_expression_watch_unwatch(watch: PGtkExpressionWatch); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_expression_watch_unwatch'{$endif};
procedure gtk_file_chooser_add_choice(chooser: PGtkFileChooser; id: Pgchar; label_: Pgchar; options: PPgchar; option_labels: PPgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_file_chooser_add_choice'{$endif};
procedure gtk_file_chooser_add_filter(chooser: PGtkFileChooser; filter: PGtkFileFilter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_file_chooser_add_filter'{$endif};
procedure gtk_file_chooser_native_set_accept_label(self: PGtkFileChooserNative; accept_label: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_file_chooser_native_set_accept_label'{$endif};
procedure gtk_file_chooser_native_set_cancel_label(self: PGtkFileChooserNative; cancel_label: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_file_chooser_native_set_cancel_label'{$endif};
procedure gtk_file_chooser_remove_choice(chooser: PGtkFileChooser; id: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_file_chooser_remove_choice'{$endif};
procedure gtk_file_chooser_remove_filter(chooser: PGtkFileChooser; filter: PGtkFileFilter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_file_chooser_remove_filter'{$endif};
procedure gtk_file_chooser_set_action(chooser: PGtkFileChooser; action: TGtkFileChooserAction); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_file_chooser_set_action'{$endif};
procedure gtk_file_chooser_set_choice(chooser: PGtkFileChooser; id: Pgchar; option: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_file_chooser_set_choice'{$endif};
procedure gtk_file_chooser_set_create_folders(chooser: PGtkFileChooser; create_folders: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_file_chooser_set_create_folders'{$endif};
procedure gtk_file_chooser_set_current_name(chooser: PGtkFileChooser; name: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_file_chooser_set_current_name'{$endif};
procedure gtk_file_chooser_set_filter(chooser: PGtkFileChooser; filter: PGtkFileFilter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_file_chooser_set_filter'{$endif};
procedure gtk_file_chooser_set_select_multiple(chooser: PGtkFileChooser; select_multiple: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_file_chooser_set_select_multiple'{$endif};
procedure gtk_file_filter_add_mime_type(filter: PGtkFileFilter; mime_type: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_file_filter_add_mime_type'{$endif};
procedure gtk_file_filter_add_pattern(filter: PGtkFileFilter; pattern: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_file_filter_add_pattern'{$endif};
procedure gtk_file_filter_add_pixbuf_formats(filter: PGtkFileFilter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_file_filter_add_pixbuf_formats'{$endif};
procedure gtk_file_filter_add_suffix(filter: PGtkFileFilter; suffix: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_file_filter_add_suffix'{$endif};
procedure gtk_file_filter_set_name(filter: PGtkFileFilter; name: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_file_filter_set_name'{$endif};
procedure gtk_filter_changed(self: PGtkFilter; change: TGtkFilterChange); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_filter_changed'{$endif};
procedure gtk_filter_list_model_set_filter(self: PGtkFilterListModel; filter: PGtkFilter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_filter_list_model_set_filter'{$endif};
procedure gtk_filter_list_model_set_incremental(self: PGtkFilterListModel; incremental: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_filter_list_model_set_incremental'{$endif};
procedure gtk_filter_list_model_set_model(self: PGtkFilterListModel; model: PGListModel); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_filter_list_model_set_model'{$endif};
procedure gtk_fixed_get_child_position(fixed: PGtkFixed; widget: PGtkWidget; x: Pgdouble; y: Pgdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_fixed_get_child_position'{$endif};
procedure gtk_fixed_layout_child_set_transform(child: PGtkFixedLayoutChild; transform: PGskTransform); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_fixed_layout_child_set_transform'{$endif};
procedure gtk_fixed_move(fixed: PGtkFixed; widget: PGtkWidget; x: gdouble; y: gdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_fixed_move'{$endif};
procedure gtk_fixed_put(fixed: PGtkFixed; widget: PGtkWidget; x: gdouble; y: gdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_fixed_put'{$endif};
procedure gtk_fixed_remove(fixed: PGtkFixed; widget: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_fixed_remove'{$endif};
procedure gtk_fixed_set_child_transform(fixed: PGtkFixed; widget: PGtkWidget; transform: PGskTransform); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_fixed_set_child_transform'{$endif};
procedure gtk_flatten_list_model_set_model(self: PGtkFlattenListModel; model: PGListModel); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_flatten_list_model_set_model'{$endif};
procedure gtk_flow_box_append(self: PGtkFlowBox; child: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_flow_box_append'{$endif};
procedure gtk_flow_box_bind_model(box: PGtkFlowBox; model: PGListModel; create_widget_func: TGtkFlowBoxCreateWidgetFunc; user_data: gpointer; user_data_free_func: TGDestroyNotify); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_flow_box_bind_model'{$endif};
procedure gtk_flow_box_child_changed(child: PGtkFlowBoxChild); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_flow_box_child_changed'{$endif};
procedure gtk_flow_box_child_set_child(self: PGtkFlowBoxChild; child: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_flow_box_child_set_child'{$endif};
procedure gtk_flow_box_insert(box: PGtkFlowBox; widget: PGtkWidget; position: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_flow_box_insert'{$endif};
procedure gtk_flow_box_invalidate_filter(box: PGtkFlowBox); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_flow_box_invalidate_filter'{$endif};
procedure gtk_flow_box_invalidate_sort(box: PGtkFlowBox); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_flow_box_invalidate_sort'{$endif};
procedure gtk_flow_box_prepend(self: PGtkFlowBox; child: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_flow_box_prepend'{$endif};
procedure gtk_flow_box_remove(box: PGtkFlowBox; widget: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_flow_box_remove'{$endif};
procedure gtk_flow_box_select_all(box: PGtkFlowBox); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_flow_box_select_all'{$endif};
procedure gtk_flow_box_select_child(box: PGtkFlowBox; child: PGtkFlowBoxChild); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_flow_box_select_child'{$endif};
procedure gtk_flow_box_selected_foreach(box: PGtkFlowBox; func: TGtkFlowBoxForeachFunc; data: gpointer); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_flow_box_selected_foreach'{$endif};
procedure gtk_flow_box_set_activate_on_single_click(box: PGtkFlowBox; single: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_flow_box_set_activate_on_single_click'{$endif};
procedure gtk_flow_box_set_column_spacing(box: PGtkFlowBox; spacing: guint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_flow_box_set_column_spacing'{$endif};
procedure gtk_flow_box_set_filter_func(box: PGtkFlowBox; filter_func: TGtkFlowBoxFilterFunc; user_data: gpointer; destroy_: TGDestroyNotify); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_flow_box_set_filter_func'{$endif};
procedure gtk_flow_box_set_hadjustment(box: PGtkFlowBox; adjustment: PGtkAdjustment); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_flow_box_set_hadjustment'{$endif};
procedure gtk_flow_box_set_homogeneous(box: PGtkFlowBox; homogeneous: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_flow_box_set_homogeneous'{$endif};
procedure gtk_flow_box_set_max_children_per_line(box: PGtkFlowBox; n_children: guint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_flow_box_set_max_children_per_line'{$endif};
procedure gtk_flow_box_set_min_children_per_line(box: PGtkFlowBox; n_children: guint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_flow_box_set_min_children_per_line'{$endif};
procedure gtk_flow_box_set_row_spacing(box: PGtkFlowBox; spacing: guint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_flow_box_set_row_spacing'{$endif};
procedure gtk_flow_box_set_selection_mode(box: PGtkFlowBox; mode: TGtkSelectionMode); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_flow_box_set_selection_mode'{$endif};
procedure gtk_flow_box_set_sort_func(box: PGtkFlowBox; sort_func: TGtkFlowBoxSortFunc; user_data: gpointer; destroy_: TGDestroyNotify); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_flow_box_set_sort_func'{$endif};
procedure gtk_flow_box_set_vadjustment(box: PGtkFlowBox; adjustment: PGtkAdjustment); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_flow_box_set_vadjustment'{$endif};
procedure gtk_flow_box_unselect_all(box: PGtkFlowBox); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_flow_box_unselect_all'{$endif};
procedure gtk_flow_box_unselect_child(box: PGtkFlowBox; child: PGtkFlowBoxChild); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_flow_box_unselect_child'{$endif};
procedure gtk_font_button_set_modal(font_button: PGtkFontButton; modal: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_font_button_set_modal'{$endif};
procedure gtk_font_button_set_title(font_button: PGtkFontButton; title: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_font_button_set_title'{$endif};
procedure gtk_font_button_set_use_font(font_button: PGtkFontButton; use_font: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_font_button_set_use_font'{$endif};
procedure gtk_font_button_set_use_size(font_button: PGtkFontButton; use_size: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_font_button_set_use_size'{$endif};
procedure gtk_font_chooser_set_filter_func(fontchooser: PGtkFontChooser; filter: TGtkFontFilterFunc; user_data: gpointer; destroy_: TGDestroyNotify); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_font_chooser_set_filter_func'{$endif};
procedure gtk_font_chooser_set_font(fontchooser: PGtkFontChooser; fontname: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_font_chooser_set_font'{$endif};
procedure gtk_font_chooser_set_font_desc(fontchooser: PGtkFontChooser; font_desc: PPangoFontDescription); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_font_chooser_set_font_desc'{$endif};
procedure gtk_font_chooser_set_font_map(fontchooser: PGtkFontChooser; fontmap: PPangoFontMap); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_font_chooser_set_font_map'{$endif};
procedure gtk_font_chooser_set_language(fontchooser: PGtkFontChooser; language: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_font_chooser_set_language'{$endif};
procedure gtk_font_chooser_set_level(fontchooser: PGtkFontChooser; level: TGtkFontChooserLevel); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_font_chooser_set_level'{$endif};
procedure gtk_font_chooser_set_preview_text(fontchooser: PGtkFontChooser; text: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_font_chooser_set_preview_text'{$endif};
procedure gtk_font_chooser_set_show_preview_entry(fontchooser: PGtkFontChooser; show_preview_entry: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_font_chooser_set_show_preview_entry'{$endif};
procedure gtk_frame_set_child(frame: PGtkFrame; child: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_frame_set_child'{$endif};
procedure gtk_frame_set_label(frame: PGtkFrame; label_: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_frame_set_label'{$endif};
procedure gtk_frame_set_label_align(frame: PGtkFrame; xalign: gfloat); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_frame_set_label_align'{$endif};
procedure gtk_frame_set_label_widget(frame: PGtkFrame; label_widget: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_frame_set_label_widget'{$endif};
procedure gtk_gesture_group(group_gesture: PGtkGesture; gesture: PGtkGesture); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gesture_group'{$endif};
procedure gtk_gesture_long_press_set_delay_factor(gesture: PGtkGestureLongPress; delay_factor: gdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gesture_long_press_set_delay_factor'{$endif};
procedure gtk_gesture_pan_set_orientation(gesture: PGtkGesturePan; orientation: TGtkOrientation); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gesture_pan_set_orientation'{$endif};
procedure gtk_gesture_single_set_button(gesture: PGtkGestureSingle; button: guint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gesture_single_set_button'{$endif};
procedure gtk_gesture_single_set_exclusive(gesture: PGtkGestureSingle; exclusive: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gesture_single_set_exclusive'{$endif};
procedure gtk_gesture_single_set_touch_only(gesture: PGtkGestureSingle; touch_only: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gesture_single_set_touch_only'{$endif};
procedure gtk_gesture_ungroup(gesture: PGtkGesture); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gesture_ungroup'{$endif};
procedure gtk_gl_area_attach_buffers(area: PGtkGLArea); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gl_area_attach_buffers'{$endif};
procedure gtk_gl_area_get_required_version(area: PGtkGLArea; major: Pgint; minor: Pgint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gl_area_get_required_version'{$endif};
procedure gtk_gl_area_make_current(area: PGtkGLArea); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gl_area_make_current'{$endif};
procedure gtk_gl_area_queue_render(area: PGtkGLArea); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gl_area_queue_render'{$endif};
procedure gtk_gl_area_set_auto_render(area: PGtkGLArea; auto_render: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gl_area_set_auto_render'{$endif};
procedure gtk_gl_area_set_error(area: PGtkGLArea; error: PGError); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gl_area_set_error'{$endif};
procedure gtk_gl_area_set_has_depth_buffer(area: PGtkGLArea; has_depth_buffer: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gl_area_set_has_depth_buffer'{$endif};
procedure gtk_gl_area_set_has_stencil_buffer(area: PGtkGLArea; has_stencil_buffer: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gl_area_set_has_stencil_buffer'{$endif};
procedure gtk_gl_area_set_required_version(area: PGtkGLArea; major: gint; minor: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gl_area_set_required_version'{$endif};
procedure gtk_gl_area_set_use_es(area: PGtkGLArea; use_es: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_gl_area_set_use_es'{$endif};
procedure gtk_grid_attach(grid: PGtkGrid; child: PGtkWidget; column: gint; row: gint; width: gint; height: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_attach'{$endif};
procedure gtk_grid_attach_next_to(grid: PGtkGrid; child: PGtkWidget; sibling: PGtkWidget; side: TGtkPositionType; width: gint; height: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_attach_next_to'{$endif};
procedure gtk_grid_insert_column(grid: PGtkGrid; position: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_insert_column'{$endif};
procedure gtk_grid_insert_next_to(grid: PGtkGrid; sibling: PGtkWidget; side: TGtkPositionType); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_insert_next_to'{$endif};
procedure gtk_grid_insert_row(grid: PGtkGrid; position: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_insert_row'{$endif};
procedure gtk_grid_layout_child_set_column(child: PGtkGridLayoutChild; column: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_layout_child_set_column'{$endif};
procedure gtk_grid_layout_child_set_column_span(child: PGtkGridLayoutChild; span: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_layout_child_set_column_span'{$endif};
procedure gtk_grid_layout_child_set_row(child: PGtkGridLayoutChild; row: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_layout_child_set_row'{$endif};
procedure gtk_grid_layout_child_set_row_span(child: PGtkGridLayoutChild; span: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_layout_child_set_row_span'{$endif};
procedure gtk_grid_layout_set_baseline_row(grid: PGtkGridLayout; row: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_layout_set_baseline_row'{$endif};
procedure gtk_grid_layout_set_column_homogeneous(grid: PGtkGridLayout; homogeneous: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_layout_set_column_homogeneous'{$endif};
procedure gtk_grid_layout_set_column_spacing(grid: PGtkGridLayout; spacing: guint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_layout_set_column_spacing'{$endif};
procedure gtk_grid_layout_set_row_baseline_position(grid: PGtkGridLayout; row: gint; pos: TGtkBaselinePosition); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_layout_set_row_baseline_position'{$endif};
procedure gtk_grid_layout_set_row_homogeneous(grid: PGtkGridLayout; homogeneous: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_layout_set_row_homogeneous'{$endif};
procedure gtk_grid_layout_set_row_spacing(grid: PGtkGridLayout; spacing: guint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_layout_set_row_spacing'{$endif};
procedure gtk_grid_query_child(grid: PGtkGrid; child: PGtkWidget; column: Pgint; row: Pgint; width: Pgint; height: Pgint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_query_child'{$endif};
procedure gtk_grid_remove(grid: PGtkGrid; child: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_remove'{$endif};
procedure gtk_grid_remove_column(grid: PGtkGrid; position: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_remove_column'{$endif};
procedure gtk_grid_remove_row(grid: PGtkGrid; position: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_remove_row'{$endif};
procedure gtk_grid_set_baseline_row(grid: PGtkGrid; row: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_set_baseline_row'{$endif};
procedure gtk_grid_set_column_homogeneous(grid: PGtkGrid; homogeneous: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_set_column_homogeneous'{$endif};
procedure gtk_grid_set_column_spacing(grid: PGtkGrid; spacing: guint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_set_column_spacing'{$endif};
procedure gtk_grid_set_row_baseline_position(grid: PGtkGrid; row: gint; pos: TGtkBaselinePosition); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_set_row_baseline_position'{$endif};
procedure gtk_grid_set_row_homogeneous(grid: PGtkGrid; homogeneous: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_set_row_homogeneous'{$endif};
procedure gtk_grid_set_row_spacing(grid: PGtkGrid; spacing: guint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_set_row_spacing'{$endif};
procedure gtk_grid_view_set_enable_rubberband(self: PGtkGridView; enable_rubberband: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_view_set_enable_rubberband'{$endif};
procedure gtk_grid_view_set_factory(self: PGtkGridView; factory: PGtkListItemFactory); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_view_set_factory'{$endif};
procedure gtk_grid_view_set_max_columns(self: PGtkGridView; max_columns: guint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_view_set_max_columns'{$endif};
procedure gtk_grid_view_set_min_columns(self: PGtkGridView; min_columns: guint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_view_set_min_columns'{$endif};
procedure gtk_grid_view_set_model(self: PGtkGridView; model: PGtkSelectionModel); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_view_set_model'{$endif};
procedure gtk_grid_view_set_single_click_activate(self: PGtkGridView; single_click_activate: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_grid_view_set_single_click_activate'{$endif};
procedure gtk_header_bar_pack_end(bar: PGtkHeaderBar; child: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_header_bar_pack_end'{$endif};
procedure gtk_header_bar_pack_start(bar: PGtkHeaderBar; child: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_header_bar_pack_start'{$endif};
procedure gtk_header_bar_remove(bar: PGtkHeaderBar; child: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_header_bar_remove'{$endif};
procedure gtk_header_bar_set_decoration_layout(bar: PGtkHeaderBar; layout: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_header_bar_set_decoration_layout'{$endif};
procedure gtk_header_bar_set_show_title_buttons(bar: PGtkHeaderBar; setting: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_header_bar_set_show_title_buttons'{$endif};
procedure gtk_header_bar_set_title_widget(bar: PGtkHeaderBar; title_widget: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_header_bar_set_title_widget'{$endif};
procedure gtk_hsv_to_rgb(h: gfloat; s: gfloat; v: gfloat; r: Pgfloat; g: Pgfloat; b: Pgfloat); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_hsv_to_rgb'{$endif};
procedure gtk_icon_theme_add_resource_path(self: PGtkIconTheme; path: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_theme_add_resource_path'{$endif};
procedure gtk_icon_theme_add_search_path(self: PGtkIconTheme; path: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_theme_add_search_path'{$endif};
procedure gtk_icon_theme_set_resource_path(self: PGtkIconTheme; path: PPgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_theme_set_resource_path'{$endif};
procedure gtk_icon_theme_set_search_path(self: PGtkIconTheme; path: PPchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_theme_set_search_path'{$endif};
procedure gtk_icon_theme_set_theme_name(self: PGtkIconTheme; theme_name: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_theme_set_theme_name'{$endif};
procedure gtk_icon_view_enable_model_drag_dest(icon_view: PGtkIconView; formats: PGdkContentFormats; actions: TGdkDragAction); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_enable_model_drag_dest'{$endif};
procedure gtk_icon_view_enable_model_drag_source(icon_view: PGtkIconView; start_button_mask: TGdkModifierType; formats: PGdkContentFormats; actions: TGdkDragAction); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_enable_model_drag_source'{$endif};
procedure gtk_icon_view_get_drag_dest_item(icon_view: PGtkIconView; path: PPGtkTreePath; pos: PGtkIconViewDropPosition); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_get_drag_dest_item'{$endif};
procedure gtk_icon_view_item_activated(icon_view: PGtkIconView; path: PGtkTreePath); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_item_activated'{$endif};
procedure gtk_icon_view_scroll_to_path(icon_view: PGtkIconView; path: PGtkTreePath; use_align: gboolean; row_align: gfloat; col_align: gfloat); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_scroll_to_path'{$endif};
procedure gtk_icon_view_select_all(icon_view: PGtkIconView); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_select_all'{$endif};
procedure gtk_icon_view_select_path(icon_view: PGtkIconView; path: PGtkTreePath); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_select_path'{$endif};
procedure gtk_icon_view_selected_foreach(icon_view: PGtkIconView; func: TGtkIconViewForeachFunc; data: gpointer); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_selected_foreach'{$endif};
procedure gtk_icon_view_set_activate_on_single_click(icon_view: PGtkIconView; single: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_set_activate_on_single_click'{$endif};
procedure gtk_icon_view_set_column_spacing(icon_view: PGtkIconView; column_spacing: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_set_column_spacing'{$endif};
procedure gtk_icon_view_set_columns(icon_view: PGtkIconView; columns: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_set_columns'{$endif};
procedure gtk_icon_view_set_cursor(icon_view: PGtkIconView; path: PGtkTreePath; cell: PGtkCellRenderer; start_editing: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_set_cursor'{$endif};
procedure gtk_icon_view_set_drag_dest_item(icon_view: PGtkIconView; path: PGtkTreePath; pos: TGtkIconViewDropPosition); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_set_drag_dest_item'{$endif};
procedure gtk_icon_view_set_item_orientation(icon_view: PGtkIconView; orientation: TGtkOrientation); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_set_item_orientation'{$endif};
procedure gtk_icon_view_set_item_padding(icon_view: PGtkIconView; item_padding: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_set_item_padding'{$endif};
procedure gtk_icon_view_set_item_width(icon_view: PGtkIconView; item_width: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_set_item_width'{$endif};
procedure gtk_icon_view_set_margin(icon_view: PGtkIconView; margin: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_set_margin'{$endif};
procedure gtk_icon_view_set_markup_column(icon_view: PGtkIconView; column: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_set_markup_column'{$endif};
procedure gtk_icon_view_set_model(icon_view: PGtkIconView; model: PGtkTreeModel); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_set_model'{$endif};
procedure gtk_icon_view_set_pixbuf_column(icon_view: PGtkIconView; column: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_set_pixbuf_column'{$endif};
procedure gtk_icon_view_set_reorderable(icon_view: PGtkIconView; reorderable: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_set_reorderable'{$endif};
procedure gtk_icon_view_set_row_spacing(icon_view: PGtkIconView; row_spacing: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_set_row_spacing'{$endif};
procedure gtk_icon_view_set_selection_mode(icon_view: PGtkIconView; mode: TGtkSelectionMode); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_set_selection_mode'{$endif};
procedure gtk_icon_view_set_spacing(icon_view: PGtkIconView; spacing: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_set_spacing'{$endif};
procedure gtk_icon_view_set_text_column(icon_view: PGtkIconView; column: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_set_text_column'{$endif};
procedure gtk_icon_view_set_tooltip_cell(icon_view: PGtkIconView; tooltip: PGtkTooltip; path: PGtkTreePath; cell: PGtkCellRenderer); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_set_tooltip_cell'{$endif};
procedure gtk_icon_view_set_tooltip_column(icon_view: PGtkIconView; column: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_set_tooltip_column'{$endif};
procedure gtk_icon_view_set_tooltip_item(icon_view: PGtkIconView; tooltip: PGtkTooltip; path: PGtkTreePath); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_set_tooltip_item'{$endif};
procedure gtk_icon_view_unselect_all(icon_view: PGtkIconView); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_unselect_all'{$endif};
procedure gtk_icon_view_unselect_path(icon_view: PGtkIconView; path: PGtkTreePath); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_unselect_path'{$endif};
procedure gtk_icon_view_unset_model_drag_dest(icon_view: PGtkIconView); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_unset_model_drag_dest'{$endif};
procedure gtk_icon_view_unset_model_drag_source(icon_view: PGtkIconView); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_icon_view_unset_model_drag_source'{$endif};
procedure gtk_im_context_focus_in(context: PGtkIMContext); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_im_context_focus_in'{$endif};
procedure gtk_im_context_focus_out(context: PGtkIMContext); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_im_context_focus_out'{$endif};
procedure gtk_im_context_get_preedit_string(context: PGtkIMContext; str: PPgchar; attrs: PPPangoAttrList; cursor_pos: Pgint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_im_context_get_preedit_string'{$endif};
procedure gtk_im_context_reset(context: PGtkIMContext); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_im_context_reset'{$endif};
procedure gtk_im_context_set_client_widget(context: PGtkIMContext; widget: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_im_context_set_client_widget'{$endif};
procedure gtk_im_context_set_cursor_location(context: PGtkIMContext; area: PGdkRectangle); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_im_context_set_cursor_location'{$endif};
procedure gtk_im_context_set_surrounding_with_selection(context: PGtkIMContext; text: Pgchar; len: gint; cursor_index: gint; anchor_index: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_im_context_set_surrounding_with_selection'{$endif};
procedure gtk_im_context_set_use_preedit(context: PGtkIMContext; use_preedit: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_im_context_set_use_preedit'{$endif};
procedure gtk_im_context_simple_add_compose_file(context_simple: PGtkIMContextSimple; compose_file: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_im_context_simple_add_compose_file'{$endif};
procedure gtk_im_multicontext_set_context_id(context: PGtkIMMulticontext; context_id: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_im_multicontext_set_context_id'{$endif};
procedure gtk_image_clear(image: PGtkImage); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_image_clear'{$endif};
procedure gtk_image_set_from_file(image: PGtkImage; filename: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_image_set_from_file'{$endif};
procedure gtk_image_set_from_gicon(image: PGtkImage; icon: PGIcon); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_image_set_from_gicon'{$endif};
procedure gtk_image_set_from_icon_name(image: PGtkImage; icon_name: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_image_set_from_icon_name'{$endif};
procedure gtk_image_set_from_paintable(image: PGtkImage; paintable: PGdkPaintable); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_image_set_from_paintable'{$endif};
procedure gtk_image_set_from_pixbuf(image: PGtkImage; pixbuf: PGdkPixbuf); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_image_set_from_pixbuf'{$endif};
procedure gtk_image_set_from_resource(image: PGtkImage; resource_path: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_image_set_from_resource'{$endif};
procedure gtk_image_set_icon_size(image: PGtkImage; icon_size: TGtkIconSize); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_image_set_icon_size'{$endif};
procedure gtk_image_set_pixel_size(image: PGtkImage; pixel_size: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_image_set_pixel_size'{$endif};
procedure gtk_info_bar_add_action_widget(info_bar: PGtkInfoBar; child: PGtkWidget; response_id: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_info_bar_add_action_widget'{$endif};
procedure gtk_info_bar_add_buttons(info_bar: PGtkInfoBar; first_button_text: Pgchar; args: array of const); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_info_bar_add_buttons'{$endif};
procedure gtk_info_bar_add_child(info_bar: PGtkInfoBar; widget: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_info_bar_add_child'{$endif};
procedure gtk_info_bar_remove_action_widget(info_bar: PGtkInfoBar; widget: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_info_bar_remove_action_widget'{$endif};
procedure gtk_info_bar_remove_child(info_bar: PGtkInfoBar; widget: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_info_bar_remove_child'{$endif};
procedure gtk_info_bar_response(info_bar: PGtkInfoBar; response_id: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_info_bar_response'{$endif};
procedure gtk_info_bar_set_default_response(info_bar: PGtkInfoBar; response_id: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_info_bar_set_default_response'{$endif};
procedure gtk_info_bar_set_message_type(info_bar: PGtkInfoBar; message_type: TGtkMessageType); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_info_bar_set_message_type'{$endif};
procedure gtk_info_bar_set_response_sensitive(info_bar: PGtkInfoBar; response_id: gint; setting: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_info_bar_set_response_sensitive'{$endif};
procedure gtk_info_bar_set_revealed(info_bar: PGtkInfoBar; revealed: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_info_bar_set_revealed'{$endif};
procedure gtk_info_bar_set_show_close_button(info_bar: PGtkInfoBar; setting: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_info_bar_set_show_close_button'{$endif};
procedure gtk_init; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_init'{$endif};
procedure gtk_label_get_layout_offsets(self: PGtkLabel; x: Pgint; y: Pgint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_label_get_layout_offsets'{$endif};
procedure gtk_label_select_region(self: PGtkLabel; start_offset: gint; end_offset: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_label_select_region'{$endif};
procedure gtk_label_set_attributes(self: PGtkLabel; attrs: PPangoAttrList); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_label_set_attributes'{$endif};
procedure gtk_label_set_ellipsize(self: PGtkLabel; mode: TPangoEllipsizeMode); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_label_set_ellipsize'{$endif};
procedure gtk_label_set_extra_menu(self: PGtkLabel; model: PGMenuModel); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_label_set_extra_menu'{$endif};
procedure gtk_label_set_justify(self: PGtkLabel; jtype: TGtkJustification); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_label_set_justify'{$endif};
procedure gtk_label_set_label(self: PGtkLabel; str: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_label_set_label'{$endif};
procedure gtk_label_set_lines(self: PGtkLabel; lines: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_label_set_lines'{$endif};
procedure gtk_label_set_markup(self: PGtkLabel; str: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_label_set_markup'{$endif};
procedure gtk_label_set_markup_with_mnemonic(self: PGtkLabel; str: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_label_set_markup_with_mnemonic'{$endif};
procedure gtk_label_set_max_width_chars(self: PGtkLabel; n_chars: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_label_set_max_width_chars'{$endif};
procedure gtk_label_set_mnemonic_widget(self: PGtkLabel; widget: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_label_set_mnemonic_widget'{$endif};
procedure gtk_label_set_natural_wrap_mode(self: PGtkLabel; wrap_mode: TGtkNaturalWrapMode); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_label_set_natural_wrap_mode'{$endif};
procedure gtk_label_set_selectable(self: PGtkLabel; setting: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_label_set_selectable'{$endif};
procedure gtk_label_set_single_line_mode(self: PGtkLabel; single_line_mode: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_label_set_single_line_mode'{$endif};
procedure gtk_label_set_text(self: PGtkLabel; str: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_label_set_text'{$endif};
procedure gtk_label_set_text_with_mnemonic(self: PGtkLabel; str: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_label_set_text_with_mnemonic'{$endif};
procedure gtk_label_set_use_markup(self: PGtkLabel; setting: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_label_set_use_markup'{$endif};
procedure gtk_label_set_use_underline(self: PGtkLabel; setting: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_label_set_use_underline'{$endif};
procedure gtk_label_set_width_chars(self: PGtkLabel; n_chars: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_label_set_width_chars'{$endif};
procedure gtk_label_set_wrap(self: PGtkLabel; wrap: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_label_set_wrap'{$endif};
procedure gtk_label_set_wrap_mode(self: PGtkLabel; wrap_mode: TPangoWrapMode); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_label_set_wrap_mode'{$endif};
procedure gtk_label_set_xalign(self: PGtkLabel; xalign: gfloat); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_label_set_xalign'{$endif};
procedure gtk_label_set_yalign(self: PGtkLabel; yalign: gfloat); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_label_set_yalign'{$endif};
procedure gtk_layout_manager_allocate(manager: PGtkLayoutManager; widget: PGtkWidget; width: gint; height: gint; baseline: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_layout_manager_allocate'{$endif};
procedure gtk_layout_manager_layout_changed(manager: PGtkLayoutManager); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_layout_manager_layout_changed'{$endif};
procedure gtk_layout_manager_measure(manager: PGtkLayoutManager; widget: PGtkWidget; orientation: TGtkOrientation; for_size: gint; minimum: Pgint; natural: Pgint; minimum_baseline: Pgint; natural_baseline: Pgint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_layout_manager_measure'{$endif};
procedure gtk_level_bar_add_offset_value(self: PGtkLevelBar; name: Pgchar; value: gdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_level_bar_add_offset_value'{$endif};
procedure gtk_level_bar_remove_offset_value(self: PGtkLevelBar; name: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_level_bar_remove_offset_value'{$endif};
procedure gtk_level_bar_set_inverted(self: PGtkLevelBar; inverted: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_level_bar_set_inverted'{$endif};
procedure gtk_level_bar_set_max_value(self: PGtkLevelBar; value: gdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_level_bar_set_max_value'{$endif};
procedure gtk_level_bar_set_min_value(self: PGtkLevelBar; value: gdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_level_bar_set_min_value'{$endif};
procedure gtk_level_bar_set_mode(self: PGtkLevelBar; mode: TGtkLevelBarMode); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_level_bar_set_mode'{$endif};
procedure gtk_level_bar_set_value(self: PGtkLevelBar; value: gdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_level_bar_set_value'{$endif};
procedure gtk_link_button_set_uri(link_button: PGtkLinkButton; uri: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_link_button_set_uri'{$endif};
procedure gtk_link_button_set_visited(link_button: PGtkLinkButton; visited: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_link_button_set_visited'{$endif};
procedure gtk_list_box_append(box: PGtkListBox; child: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_box_append'{$endif};
procedure gtk_list_box_bind_model(box: PGtkListBox; model: PGListModel; create_widget_func: TGtkListBoxCreateWidgetFunc; user_data: gpointer; user_data_free_func: TGDestroyNotify); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_box_bind_model'{$endif};
procedure gtk_list_box_drag_highlight_row(box: PGtkListBox; row: PGtkListBoxRow); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_box_drag_highlight_row'{$endif};
procedure gtk_list_box_drag_unhighlight_row(box: PGtkListBox); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_box_drag_unhighlight_row'{$endif};
procedure gtk_list_box_insert(box: PGtkListBox; child: PGtkWidget; position: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_box_insert'{$endif};
procedure gtk_list_box_invalidate_filter(box: PGtkListBox); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_box_invalidate_filter'{$endif};
procedure gtk_list_box_invalidate_headers(box: PGtkListBox); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_box_invalidate_headers'{$endif};
procedure gtk_list_box_invalidate_sort(box: PGtkListBox); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_box_invalidate_sort'{$endif};
procedure gtk_list_box_prepend(box: PGtkListBox; child: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_box_prepend'{$endif};
procedure gtk_list_box_remove(box: PGtkListBox; child: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_box_remove'{$endif};
procedure gtk_list_box_row_changed(row: PGtkListBoxRow); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_box_row_changed'{$endif};
procedure gtk_list_box_row_set_activatable(row: PGtkListBoxRow; activatable: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_box_row_set_activatable'{$endif};
procedure gtk_list_box_row_set_child(row: PGtkListBoxRow; child: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_box_row_set_child'{$endif};
procedure gtk_list_box_row_set_header(row: PGtkListBoxRow; header: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_box_row_set_header'{$endif};
procedure gtk_list_box_row_set_selectable(row: PGtkListBoxRow; selectable: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_box_row_set_selectable'{$endif};
procedure gtk_list_box_select_all(box: PGtkListBox); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_box_select_all'{$endif};
procedure gtk_list_box_select_row(box: PGtkListBox; row: PGtkListBoxRow); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_box_select_row'{$endif};
procedure gtk_list_box_selected_foreach(box: PGtkListBox; func: TGtkListBoxForeachFunc; data: gpointer); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_box_selected_foreach'{$endif};
procedure gtk_list_box_set_activate_on_single_click(box: PGtkListBox; single: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_box_set_activate_on_single_click'{$endif};
procedure gtk_list_box_set_adjustment(box: PGtkListBox; adjustment: PGtkAdjustment); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_box_set_adjustment'{$endif};
procedure gtk_list_box_set_filter_func(box: PGtkListBox; filter_func: TGtkListBoxFilterFunc; user_data: gpointer; destroy_: TGDestroyNotify); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_box_set_filter_func'{$endif};
procedure gtk_list_box_set_header_func(box: PGtkListBox; update_header: TGtkListBoxUpdateHeaderFunc; user_data: gpointer; destroy_: TGDestroyNotify); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_box_set_header_func'{$endif};
procedure gtk_list_box_set_placeholder(box: PGtkListBox; placeholder: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_box_set_placeholder'{$endif};
procedure gtk_list_box_set_selection_mode(box: PGtkListBox; mode: TGtkSelectionMode); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_box_set_selection_mode'{$endif};
procedure gtk_list_box_set_show_separators(box: PGtkListBox; show_separators: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_box_set_show_separators'{$endif};
procedure gtk_list_box_set_sort_func(box: PGtkListBox; sort_func: TGtkListBoxSortFunc; user_data: gpointer; destroy_: TGDestroyNotify); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_box_set_sort_func'{$endif};
procedure gtk_list_box_unselect_all(box: PGtkListBox); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_box_unselect_all'{$endif};
procedure gtk_list_box_unselect_row(box: PGtkListBox; row: PGtkListBoxRow); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_box_unselect_row'{$endif};
procedure gtk_list_item_set_activatable(self: PGtkListItem; activatable: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_item_set_activatable'{$endif};
procedure gtk_list_item_set_child(self: PGtkListItem; child: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_item_set_child'{$endif};
procedure gtk_list_item_set_selectable(self: PGtkListItem; selectable: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_item_set_selectable'{$endif};
procedure gtk_list_store_append(list_store: PGtkListStore; iter: PGtkTreeIter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_store_append'{$endif};
procedure gtk_list_store_clear(list_store: PGtkListStore); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_store_clear'{$endif};
procedure gtk_list_store_insert(list_store: PGtkListStore; iter: PGtkTreeIter; position: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_store_insert'{$endif};
procedure gtk_list_store_insert_after(list_store: PGtkListStore; iter: PGtkTreeIter; sibling: PGtkTreeIter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_store_insert_after'{$endif};
procedure gtk_list_store_insert_before(list_store: PGtkListStore; iter: PGtkTreeIter; sibling: PGtkTreeIter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_store_insert_before'{$endif};
procedure gtk_list_store_insert_with_values(list_store: PGtkListStore; iter: PGtkTreeIter; position: gint; args: array of const); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_store_insert_with_values'{$endif};
procedure gtk_list_store_insert_with_valuesv(list_store: PGtkListStore; iter: PGtkTreeIter; position: gint; columns: Pgint; values: PGValue; n_values: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_store_insert_with_valuesv'{$endif};
procedure gtk_list_store_move_after(store: PGtkListStore; iter: PGtkTreeIter; position: PGtkTreeIter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_store_move_after'{$endif};
procedure gtk_list_store_move_before(store: PGtkListStore; iter: PGtkTreeIter; position: PGtkTreeIter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_store_move_before'{$endif};
procedure gtk_list_store_prepend(list_store: PGtkListStore; iter: PGtkTreeIter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_store_prepend'{$endif};
procedure gtk_list_store_reorder(store: PGtkListStore; new_order: Pgint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_store_reorder'{$endif};
procedure gtk_list_store_set(list_store: PGtkListStore; iter: PGtkTreeIter; args: array of const); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_store_set'{$endif};
procedure gtk_list_store_set_column_types(list_store: PGtkListStore; n_columns: gint; types: PGType); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_store_set_column_types'{$endif};
procedure gtk_list_store_set_valist(list_store: PGtkListStore; iter: PGtkTreeIter; var_args: Tva_list); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_store_set_valist'{$endif};
procedure gtk_list_store_set_value(list_store: PGtkListStore; iter: PGtkTreeIter; column: gint; value: PGValue); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_store_set_value'{$endif};
procedure gtk_list_store_set_valuesv(list_store: PGtkListStore; iter: PGtkTreeIter; columns: Pgint; values: PGValue; n_values: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_store_set_valuesv'{$endif};
procedure gtk_list_store_swap(store: PGtkListStore; a: PGtkTreeIter; b: PGtkTreeIter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_store_swap'{$endif};
procedure gtk_list_view_set_enable_rubberband(self: PGtkListView; enable_rubberband: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_view_set_enable_rubberband'{$endif};
procedure gtk_list_view_set_factory(self: PGtkListView; factory: PGtkListItemFactory); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_view_set_factory'{$endif};
procedure gtk_list_view_set_model(self: PGtkListView; model: PGtkSelectionModel); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_view_set_model'{$endif};
procedure gtk_list_view_set_show_separators(self: PGtkListView; show_separators: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_view_set_show_separators'{$endif};
procedure gtk_list_view_set_single_click_activate(self: PGtkListView; single_click_activate: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_list_view_set_single_click_activate'{$endif};
procedure gtk_lock_button_set_permission(button: PGtkLockButton; permission: PGPermission); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_lock_button_set_permission'{$endif};
procedure gtk_map_list_model_set_map_func(self: PGtkMapListModel; map_func: TGtkMapListModelMapFunc; user_data: gpointer; user_destroy: TGDestroyNotify); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_map_list_model_set_map_func'{$endif};
procedure gtk_map_list_model_set_model(self: PGtkMapListModel; model: PGListModel); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_map_list_model_set_model'{$endif};
procedure gtk_media_controls_set_media_stream(controls: PGtkMediaControls; stream: PGtkMediaStream); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_media_controls_set_media_stream'{$endif};
procedure gtk_media_file_clear(self: PGtkMediaFile); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_media_file_clear'{$endif};
procedure gtk_media_file_set_file(self: PGtkMediaFile; file_: PGFile); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_media_file_set_file'{$endif};
procedure gtk_media_file_set_filename(self: PGtkMediaFile; filename: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_media_file_set_filename'{$endif};
procedure gtk_media_file_set_input_stream(self: PGtkMediaFile; stream: PGInputStream); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_media_file_set_input_stream'{$endif};
procedure gtk_media_file_set_resource(self: PGtkMediaFile; resource_path: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_media_file_set_resource'{$endif};
procedure gtk_media_stream_error(self: PGtkMediaStream; domain: TGQuark; code: gint; format: Pgchar; args: array of const); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_media_stream_error'{$endif};
procedure gtk_media_stream_error_valist(self: PGtkMediaStream; domain: TGQuark; code: gint; format: Pgchar; args: Tva_list); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_media_stream_error_valist'{$endif};
procedure gtk_media_stream_gerror(self: PGtkMediaStream; error: PGError); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_media_stream_gerror'{$endif};
procedure gtk_media_stream_pause(self: PGtkMediaStream); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_media_stream_pause'{$endif};
procedure gtk_media_stream_play(self: PGtkMediaStream); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_media_stream_play'{$endif};
procedure gtk_media_stream_realize(self: PGtkMediaStream; surface: PGdkSurface); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_media_stream_realize'{$endif};
procedure gtk_media_stream_seek(self: PGtkMediaStream; timestamp: gint64); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_media_stream_seek'{$endif};
procedure gtk_media_stream_seek_failed(self: PGtkMediaStream); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_media_stream_seek_failed'{$endif};
procedure gtk_media_stream_seek_success(self: PGtkMediaStream); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_media_stream_seek_success'{$endif};
procedure gtk_media_stream_set_loop(self: PGtkMediaStream; loop: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_media_stream_set_loop'{$endif};
procedure gtk_media_stream_set_muted(self: PGtkMediaStream; muted: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_media_stream_set_muted'{$endif};
procedure gtk_media_stream_set_playing(self: PGtkMediaStream; playing: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_media_stream_set_playing'{$endif};
procedure gtk_media_stream_set_volume(self: PGtkMediaStream; volume: gdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_media_stream_set_volume'{$endif};
procedure gtk_media_stream_stream_ended(self: PGtkMediaStream); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_media_stream_stream_ended'{$endif};
procedure gtk_media_stream_stream_prepared(self: PGtkMediaStream; has_audio: gboolean; has_video: gboolean; seekable: gboolean; duration: gint64); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_media_stream_stream_prepared'{$endif};
procedure gtk_media_stream_stream_unprepared(self: PGtkMediaStream); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_media_stream_stream_unprepared'{$endif};
procedure gtk_media_stream_unrealize(self: PGtkMediaStream; surface: PGdkSurface); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_media_stream_unrealize'{$endif};
procedure gtk_media_stream_update(self: PGtkMediaStream; timestamp: gint64); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_media_stream_update'{$endif};
procedure gtk_menu_button_popdown(menu_button: PGtkMenuButton); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_menu_button_popdown'{$endif};
procedure gtk_menu_button_popup(menu_button: PGtkMenuButton); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_menu_button_popup'{$endif};
procedure gtk_menu_button_set_always_show_arrow(menu_button: PGtkMenuButton; always_show_arrow: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_menu_button_set_always_show_arrow'{$endif};
procedure gtk_menu_button_set_child(menu_button: PGtkMenuButton; child: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_menu_button_set_child'{$endif};
procedure gtk_menu_button_set_create_popup_func(menu_button: PGtkMenuButton; func: TGtkMenuButtonCreatePopupFunc; user_data: gpointer; destroy_notify: TGDestroyNotify); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_menu_button_set_create_popup_func'{$endif};
procedure gtk_menu_button_set_direction(menu_button: PGtkMenuButton; direction: TGtkArrowType); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_menu_button_set_direction'{$endif};
procedure gtk_menu_button_set_has_frame(menu_button: PGtkMenuButton; has_frame: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_menu_button_set_has_frame'{$endif};
procedure gtk_menu_button_set_icon_name(menu_button: PGtkMenuButton; icon_name: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_menu_button_set_icon_name'{$endif};
procedure gtk_menu_button_set_label(menu_button: PGtkMenuButton; label_: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_menu_button_set_label'{$endif};
procedure gtk_menu_button_set_menu_model(menu_button: PGtkMenuButton; menu_model: PGMenuModel); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_menu_button_set_menu_model'{$endif};
procedure gtk_menu_button_set_popover(menu_button: PGtkMenuButton; popover: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_menu_button_set_popover'{$endif};
procedure gtk_menu_button_set_primary(menu_button: PGtkMenuButton; primary: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_menu_button_set_primary'{$endif};
procedure gtk_menu_button_set_use_underline(menu_button: PGtkMenuButton; use_underline: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_menu_button_set_use_underline'{$endif};
procedure gtk_message_dialog_format_secondary_markup(message_dialog: PGtkMessageDialog; message_format: Pgchar; args: array of const); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_message_dialog_format_secondary_markup'{$endif};
procedure gtk_message_dialog_format_secondary_text(message_dialog: PGtkMessageDialog; message_format: Pgchar; args: array of const); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_message_dialog_format_secondary_text'{$endif};
procedure gtk_message_dialog_set_markup(message_dialog: PGtkMessageDialog; str: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_message_dialog_set_markup'{$endif};
procedure gtk_mount_operation_set_display(op: PGtkMountOperation; display: PGdkDisplay); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_mount_operation_set_display'{$endif};
procedure gtk_mount_operation_set_parent(op: PGtkMountOperation; parent: PGtkWindow); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_mount_operation_set_parent'{$endif};
procedure gtk_multi_filter_append(self: PGtkMultiFilter; filter: PGtkFilter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_multi_filter_append'{$endif};
procedure gtk_multi_filter_remove(self: PGtkMultiFilter; position: guint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_multi_filter_remove'{$endif};
procedure gtk_multi_selection_set_model(self: PGtkMultiSelection; model: PGListModel); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_multi_selection_set_model'{$endif};
procedure gtk_multi_sorter_append(self: PGtkMultiSorter; sorter: PGtkSorter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_multi_sorter_append'{$endif};
procedure gtk_multi_sorter_remove(self: PGtkMultiSorter; position: guint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_multi_sorter_remove'{$endif};
procedure gtk_native_dialog_destroy(self: PGtkNativeDialog); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_native_dialog_destroy'{$endif};
procedure gtk_native_dialog_hide(self: PGtkNativeDialog); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_native_dialog_hide'{$endif};
procedure gtk_native_dialog_set_modal(self: PGtkNativeDialog; modal: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_native_dialog_set_modal'{$endif};
procedure gtk_native_dialog_set_title(self: PGtkNativeDialog; title: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_native_dialog_set_title'{$endif};
procedure gtk_native_dialog_set_transient_for(self: PGtkNativeDialog; parent: PGtkWindow); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_native_dialog_set_transient_for'{$endif};
procedure gtk_native_dialog_show(self: PGtkNativeDialog); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_native_dialog_show'{$endif};
procedure gtk_native_get_surface_transform(self: PGtkNative; x: Pgdouble; y: Pgdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_native_get_surface_transform'{$endif};
procedure gtk_native_realize(self: PGtkNative); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_native_realize'{$endif};
procedure gtk_native_unrealize(self: PGtkNative); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_native_unrealize'{$endif};
procedure gtk_no_selection_set_model(self: PGtkNoSelection; model: PGListModel); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_no_selection_set_model'{$endif};
procedure gtk_notebook_detach_tab(notebook: PGtkNotebook; child: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_notebook_detach_tab'{$endif};
procedure gtk_notebook_next_page(notebook: PGtkNotebook); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_notebook_next_page'{$endif};
procedure gtk_notebook_popup_disable(notebook: PGtkNotebook); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_notebook_popup_disable'{$endif};
procedure gtk_notebook_popup_enable(notebook: PGtkNotebook); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_notebook_popup_enable'{$endif};
procedure gtk_notebook_prev_page(notebook: PGtkNotebook); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_notebook_prev_page'{$endif};
procedure gtk_notebook_remove_page(notebook: PGtkNotebook; page_num: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_notebook_remove_page'{$endif};
procedure gtk_notebook_reorder_child(notebook: PGtkNotebook; child: PGtkWidget; position: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_notebook_reorder_child'{$endif};
procedure gtk_notebook_set_action_widget(notebook: PGtkNotebook; widget: PGtkWidget; pack_type: TGtkPackType); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_notebook_set_action_widget'{$endif};
procedure gtk_notebook_set_current_page(notebook: PGtkNotebook; page_num: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_notebook_set_current_page'{$endif};
procedure gtk_notebook_set_group_name(notebook: PGtkNotebook; group_name: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_notebook_set_group_name'{$endif};
procedure gtk_notebook_set_menu_label(notebook: PGtkNotebook; child: PGtkWidget; menu_label: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_notebook_set_menu_label'{$endif};
procedure gtk_notebook_set_menu_label_text(notebook: PGtkNotebook; child: PGtkWidget; menu_text: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_notebook_set_menu_label_text'{$endif};
procedure gtk_notebook_set_scrollable(notebook: PGtkNotebook; scrollable: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_notebook_set_scrollable'{$endif};
procedure gtk_notebook_set_show_border(notebook: PGtkNotebook; show_border: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_notebook_set_show_border'{$endif};
procedure gtk_notebook_set_show_tabs(notebook: PGtkNotebook; show_tabs: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_notebook_set_show_tabs'{$endif};
procedure gtk_notebook_set_tab_detachable(notebook: PGtkNotebook; child: PGtkWidget; detachable: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_notebook_set_tab_detachable'{$endif};
procedure gtk_notebook_set_tab_label(notebook: PGtkNotebook; child: PGtkWidget; tab_label: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_notebook_set_tab_label'{$endif};
procedure gtk_notebook_set_tab_label_text(notebook: PGtkNotebook; child: PGtkWidget; tab_text: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_notebook_set_tab_label_text'{$endif};
procedure gtk_notebook_set_tab_pos(notebook: PGtkNotebook; pos: TGtkPositionType); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_notebook_set_tab_pos'{$endif};
procedure gtk_notebook_set_tab_reorderable(notebook: PGtkNotebook; child: PGtkWidget; reorderable: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_notebook_set_tab_reorderable'{$endif};
procedure gtk_numeric_sorter_set_expression(self: PGtkNumericSorter; expression: PGtkExpression); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_numeric_sorter_set_expression'{$endif};
procedure gtk_numeric_sorter_set_sort_order(self: PGtkNumericSorter; sort_order: TGtkSortType); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_numeric_sorter_set_sort_order'{$endif};
procedure gtk_orientable_set_orientation(orientable: PGtkOrientable; orientation: TGtkOrientation); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_orientable_set_orientation'{$endif};
procedure gtk_overlay_add_overlay(overlay: PGtkOverlay; widget: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_overlay_add_overlay'{$endif};
procedure gtk_overlay_layout_child_set_clip_overlay(child: PGtkOverlayLayoutChild; clip_overlay: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_overlay_layout_child_set_clip_overlay'{$endif};
procedure gtk_overlay_layout_child_set_measure(child: PGtkOverlayLayoutChild; measure: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_overlay_layout_child_set_measure'{$endif};
procedure gtk_overlay_remove_overlay(overlay: PGtkOverlay; widget: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_overlay_remove_overlay'{$endif};
procedure gtk_overlay_set_child(overlay: PGtkOverlay; child: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_overlay_set_child'{$endif};
procedure gtk_overlay_set_clip_overlay(overlay: PGtkOverlay; widget: PGtkWidget; clip_overlay: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_overlay_set_clip_overlay'{$endif};
procedure gtk_overlay_set_measure_overlay(overlay: PGtkOverlay; widget: PGtkWidget; measure: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_overlay_set_measure_overlay'{$endif};
procedure gtk_pad_controller_set_action(controller: PGtkPadController; type_: TGtkPadActionType; index: gint; mode: gint; label_: Pgchar; action_name: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_pad_controller_set_action'{$endif};
procedure gtk_pad_controller_set_action_entries(controller: PGtkPadController; entries: PGtkPadActionEntry; n_entries: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_pad_controller_set_action_entries'{$endif};
procedure gtk_page_setup_set_bottom_margin(setup: PGtkPageSetup; margin: gdouble; unit_: TGtkUnit); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_page_setup_set_bottom_margin'{$endif};
procedure gtk_page_setup_set_left_margin(setup: PGtkPageSetup; margin: gdouble; unit_: TGtkUnit); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_page_setup_set_left_margin'{$endif};
procedure gtk_page_setup_set_orientation(setup: PGtkPageSetup; orientation: TGtkPageOrientation); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_page_setup_set_orientation'{$endif};
procedure gtk_page_setup_set_paper_size(setup: PGtkPageSetup; size: PGtkPaperSize); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_page_setup_set_paper_size'{$endif};
procedure gtk_page_setup_set_paper_size_and_default_margins(setup: PGtkPageSetup; size: PGtkPaperSize); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_page_setup_set_paper_size_and_default_margins'{$endif};
procedure gtk_page_setup_set_right_margin(setup: PGtkPageSetup; margin: gdouble; unit_: TGtkUnit); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_page_setup_set_right_margin'{$endif};
procedure gtk_page_setup_set_top_margin(setup: PGtkPageSetup; margin: gdouble; unit_: TGtkUnit); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_page_setup_set_top_margin'{$endif};
procedure gtk_page_setup_to_key_file(setup: PGtkPageSetup; key_file: PGKeyFile; group_name: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_page_setup_to_key_file'{$endif};
procedure gtk_page_setup_unix_dialog_set_page_setup(dialog: PGtkPageSetupUnixDialog; page_setup: PGtkPageSetup); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_page_setup_unix_dialog_set_page_setup'{$endif};
procedure gtk_page_setup_unix_dialog_set_print_settings(dialog: PGtkPageSetupUnixDialog; print_settings: PGtkPrintSettings); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_page_setup_unix_dialog_set_print_settings'{$endif};
procedure gtk_paned_set_end_child(paned: PGtkPaned; child: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_paned_set_end_child'{$endif};
procedure gtk_paned_set_position(paned: PGtkPaned; position: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_paned_set_position'{$endif};
procedure gtk_paned_set_resize_end_child(paned: PGtkPaned; resize: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_paned_set_resize_end_child'{$endif};
procedure gtk_paned_set_resize_start_child(paned: PGtkPaned; resize: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_paned_set_resize_start_child'{$endif};
procedure gtk_paned_set_shrink_end_child(paned: PGtkPaned; resize: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_paned_set_shrink_end_child'{$endif};
procedure gtk_paned_set_shrink_start_child(paned: PGtkPaned; resize: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_paned_set_shrink_start_child'{$endif};
procedure gtk_paned_set_start_child(paned: PGtkPaned; child: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_paned_set_start_child'{$endif};
procedure gtk_paned_set_wide_handle(paned: PGtkPaned; wide: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_paned_set_wide_handle'{$endif};
procedure gtk_paper_size_free(size: PGtkPaperSize); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_paper_size_free'{$endif};
procedure gtk_paper_size_set_size(size: PGtkPaperSize; width: gdouble; height: gdouble; unit_: TGtkUnit); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_paper_size_set_size'{$endif};
procedure gtk_paper_size_to_key_file(size: PGtkPaperSize; key_file: PGKeyFile; group_name: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_paper_size_to_key_file'{$endif};
procedure gtk_password_entry_set_extra_menu(entry: PGtkPasswordEntry; model: PGMenuModel); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_password_entry_set_extra_menu'{$endif};
procedure gtk_password_entry_set_show_peek_icon(entry: PGtkPasswordEntry; show_peek_icon: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_password_entry_set_show_peek_icon'{$endif};
procedure gtk_picture_set_alternative_text(self: PGtkPicture; alternative_text: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_picture_set_alternative_text'{$endif};
procedure gtk_picture_set_can_shrink(self: PGtkPicture; can_shrink: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_picture_set_can_shrink'{$endif};
procedure gtk_picture_set_file(self: PGtkPicture; file_: PGFile); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_picture_set_file'{$endif};
procedure gtk_picture_set_filename(self: PGtkPicture; filename: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_picture_set_filename'{$endif};
procedure gtk_picture_set_keep_aspect_ratio(self: PGtkPicture; keep_aspect_ratio: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_picture_set_keep_aspect_ratio'{$endif};
procedure gtk_picture_set_paintable(self: PGtkPicture; paintable: PGdkPaintable); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_picture_set_paintable'{$endif};
procedure gtk_picture_set_pixbuf(self: PGtkPicture; pixbuf: PGdkPixbuf); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_picture_set_pixbuf'{$endif};
procedure gtk_picture_set_resource(self: PGtkPicture; resource_path: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_picture_set_resource'{$endif};
procedure gtk_popover_get_offset(popover: PGtkPopover; x_offset: Pgint; y_offset: Pgint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_popover_get_offset'{$endif};
procedure gtk_popover_menu_bar_set_menu_model(bar: PGtkPopoverMenuBar; model: PGMenuModel); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_popover_menu_bar_set_menu_model'{$endif};
procedure gtk_popover_menu_set_menu_model(popover: PGtkPopoverMenu; model: PGMenuModel); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_popover_menu_set_menu_model'{$endif};
procedure gtk_popover_popdown(popover: PGtkPopover); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_popover_popdown'{$endif};
procedure gtk_popover_popup(popover: PGtkPopover); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_popover_popup'{$endif};
procedure gtk_popover_present(popover: PGtkPopover); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_popover_present'{$endif};
procedure gtk_popover_set_autohide(popover: PGtkPopover; autohide: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_popover_set_autohide'{$endif};
procedure gtk_popover_set_cascade_popdown(popover: PGtkPopover; cascade_popdown: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_popover_set_cascade_popdown'{$endif};
procedure gtk_popover_set_child(popover: PGtkPopover; child: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_popover_set_child'{$endif};
procedure gtk_popover_set_default_widget(popover: PGtkPopover; widget: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_popover_set_default_widget'{$endif};
procedure gtk_popover_set_has_arrow(popover: PGtkPopover; has_arrow: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_popover_set_has_arrow'{$endif};
procedure gtk_popover_set_mnemonics_visible(popover: PGtkPopover; mnemonics_visible: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_popover_set_mnemonics_visible'{$endif};
procedure gtk_popover_set_offset(popover: PGtkPopover; x_offset: gint; y_offset: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_popover_set_offset'{$endif};
procedure gtk_popover_set_pointing_to(popover: PGtkPopover; rect: PGdkRectangle); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_popover_set_pointing_to'{$endif};
procedure gtk_popover_set_position(popover: PGtkPopover; position: TGtkPositionType); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_popover_set_position'{$endif};
procedure gtk_print_context_set_cairo_context(context: PGtkPrintContext; cr: Pcairo_t; dpi_x: gdouble; dpi_y: gdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_context_set_cairo_context'{$endif};
procedure gtk_print_job_send(job: PGtkPrintJob; callback: TGtkPrintJobCompleteFunc; user_data: gpointer; dnotify: TGDestroyNotify); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_job_send'{$endif};
procedure gtk_print_job_set_collate(job: PGtkPrintJob; collate: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_job_set_collate'{$endif};
procedure gtk_print_job_set_n_up(job: PGtkPrintJob; n_up: guint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_job_set_n_up'{$endif};
procedure gtk_print_job_set_n_up_layout(job: PGtkPrintJob; layout: TGtkNumberUpLayout); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_job_set_n_up_layout'{$endif};
procedure gtk_print_job_set_num_copies(job: PGtkPrintJob; num_copies: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_job_set_num_copies'{$endif};
procedure gtk_print_job_set_page_ranges(job: PGtkPrintJob; ranges: PGtkPageRange; n_ranges: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_job_set_page_ranges'{$endif};
procedure gtk_print_job_set_page_set(job: PGtkPrintJob; page_set: TGtkPageSet); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_job_set_page_set'{$endif};
procedure gtk_print_job_set_pages(job: PGtkPrintJob; pages: TGtkPrintPages); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_job_set_pages'{$endif};
procedure gtk_print_job_set_reverse(job: PGtkPrintJob; reverse: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_job_set_reverse'{$endif};
procedure gtk_print_job_set_rotate(job: PGtkPrintJob; rotate: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_job_set_rotate'{$endif};
procedure gtk_print_job_set_scale(job: PGtkPrintJob; scale: gdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_job_set_scale'{$endif};
procedure gtk_print_job_set_track_print_status(job: PGtkPrintJob; track_status: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_job_set_track_print_status'{$endif};
procedure gtk_print_operation_cancel(op: PGtkPrintOperation); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_operation_cancel'{$endif};
procedure gtk_print_operation_draw_page_finish(op: PGtkPrintOperation); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_operation_draw_page_finish'{$endif};
procedure gtk_print_operation_get_error(op: PGtkPrintOperation; error: PPGError); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_operation_get_error'{$endif};
procedure gtk_print_operation_preview_end_preview(preview: PGtkPrintOperationPreview); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_operation_preview_end_preview'{$endif};
procedure gtk_print_operation_preview_render_page(preview: PGtkPrintOperationPreview; page_nr: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_operation_preview_render_page'{$endif};
procedure gtk_print_operation_set_allow_async(op: PGtkPrintOperation; allow_async: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_operation_set_allow_async'{$endif};
procedure gtk_print_operation_set_current_page(op: PGtkPrintOperation; current_page: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_operation_set_current_page'{$endif};
procedure gtk_print_operation_set_custom_tab_label(op: PGtkPrintOperation; label_: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_operation_set_custom_tab_label'{$endif};
procedure gtk_print_operation_set_default_page_setup(op: PGtkPrintOperation; default_page_setup: PGtkPageSetup); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_operation_set_default_page_setup'{$endif};
procedure gtk_print_operation_set_defer_drawing(op: PGtkPrintOperation); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_operation_set_defer_drawing'{$endif};
procedure gtk_print_operation_set_embed_page_setup(op: PGtkPrintOperation; embed: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_operation_set_embed_page_setup'{$endif};
procedure gtk_print_operation_set_export_filename(op: PGtkPrintOperation; filename: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_operation_set_export_filename'{$endif};
procedure gtk_print_operation_set_has_selection(op: PGtkPrintOperation; has_selection: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_operation_set_has_selection'{$endif};
procedure gtk_print_operation_set_job_name(op: PGtkPrintOperation; job_name: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_operation_set_job_name'{$endif};
procedure gtk_print_operation_set_n_pages(op: PGtkPrintOperation; n_pages: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_operation_set_n_pages'{$endif};
procedure gtk_print_operation_set_print_settings(op: PGtkPrintOperation; print_settings: PGtkPrintSettings); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_operation_set_print_settings'{$endif};
procedure gtk_print_operation_set_show_progress(op: PGtkPrintOperation; show_progress: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_operation_set_show_progress'{$endif};
procedure gtk_print_operation_set_support_selection(op: PGtkPrintOperation; support_selection: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_operation_set_support_selection'{$endif};
procedure gtk_print_operation_set_track_print_status(op: PGtkPrintOperation; track_status: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_operation_set_track_print_status'{$endif};
procedure gtk_print_operation_set_unit(op: PGtkPrintOperation; unit_: TGtkUnit); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_operation_set_unit'{$endif};
procedure gtk_print_operation_set_use_full_page(op: PGtkPrintOperation; full_page: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_operation_set_use_full_page'{$endif};
procedure gtk_print_run_page_setup_dialog_async(parent: PGtkWindow; page_setup: PGtkPageSetup; settings: PGtkPrintSettings; done_cb: TGtkPageSetupDoneFunc; data: gpointer); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_run_page_setup_dialog_async'{$endif};
procedure gtk_print_settings_foreach(settings: PGtkPrintSettings; func: TGtkPrintSettingsFunc; user_data: gpointer); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_foreach'{$endif};
procedure gtk_print_settings_set(settings: PGtkPrintSettings; key: Pgchar; value: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_set'{$endif};
procedure gtk_print_settings_set_bool(settings: PGtkPrintSettings; key: Pgchar; value: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_set_bool'{$endif};
procedure gtk_print_settings_set_collate(settings: PGtkPrintSettings; collate: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_set_collate'{$endif};
procedure gtk_print_settings_set_default_source(settings: PGtkPrintSettings; default_source: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_set_default_source'{$endif};
procedure gtk_print_settings_set_dither(settings: PGtkPrintSettings; dither: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_set_dither'{$endif};
procedure gtk_print_settings_set_double(settings: PGtkPrintSettings; key: Pgchar; value: gdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_set_double'{$endif};
procedure gtk_print_settings_set_duplex(settings: PGtkPrintSettings; duplex: TGtkPrintDuplex); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_set_duplex'{$endif};
procedure gtk_print_settings_set_finishings(settings: PGtkPrintSettings; finishings: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_set_finishings'{$endif};
procedure gtk_print_settings_set_int(settings: PGtkPrintSettings; key: Pgchar; value: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_set_int'{$endif};
procedure gtk_print_settings_set_length(settings: PGtkPrintSettings; key: Pgchar; value: gdouble; unit_: TGtkUnit); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_set_length'{$endif};
procedure gtk_print_settings_set_media_type(settings: PGtkPrintSettings; media_type: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_set_media_type'{$endif};
procedure gtk_print_settings_set_n_copies(settings: PGtkPrintSettings; num_copies: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_set_n_copies'{$endif};
procedure gtk_print_settings_set_number_up(settings: PGtkPrintSettings; number_up: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_set_number_up'{$endif};
procedure gtk_print_settings_set_number_up_layout(settings: PGtkPrintSettings; number_up_layout: TGtkNumberUpLayout); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_set_number_up_layout'{$endif};
procedure gtk_print_settings_set_orientation(settings: PGtkPrintSettings; orientation: TGtkPageOrientation); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_set_orientation'{$endif};
procedure gtk_print_settings_set_output_bin(settings: PGtkPrintSettings; output_bin: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_set_output_bin'{$endif};
procedure gtk_print_settings_set_page_ranges(settings: PGtkPrintSettings; page_ranges: PGtkPageRange; num_ranges: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_set_page_ranges'{$endif};
procedure gtk_print_settings_set_page_set(settings: PGtkPrintSettings; page_set: TGtkPageSet); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_set_page_set'{$endif};
procedure gtk_print_settings_set_paper_height(settings: PGtkPrintSettings; height: gdouble; unit_: TGtkUnit); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_set_paper_height'{$endif};
procedure gtk_print_settings_set_paper_size(settings: PGtkPrintSettings; paper_size: PGtkPaperSize); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_set_paper_size'{$endif};
procedure gtk_print_settings_set_paper_width(settings: PGtkPrintSettings; width: gdouble; unit_: TGtkUnit); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_set_paper_width'{$endif};
procedure gtk_print_settings_set_print_pages(settings: PGtkPrintSettings; pages: TGtkPrintPages); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_set_print_pages'{$endif};
procedure gtk_print_settings_set_printer(settings: PGtkPrintSettings; printer: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_set_printer'{$endif};
procedure gtk_print_settings_set_printer_lpi(settings: PGtkPrintSettings; lpi: gdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_set_printer_lpi'{$endif};
procedure gtk_print_settings_set_quality(settings: PGtkPrintSettings; quality: TGtkPrintQuality); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_set_quality'{$endif};
procedure gtk_print_settings_set_resolution(settings: PGtkPrintSettings; resolution: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_set_resolution'{$endif};
procedure gtk_print_settings_set_resolution_xy(settings: PGtkPrintSettings; resolution_x: gint; resolution_y: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_set_resolution_xy'{$endif};
procedure gtk_print_settings_set_reverse(settings: PGtkPrintSettings; reverse: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_set_reverse'{$endif};
procedure gtk_print_settings_set_scale(settings: PGtkPrintSettings; scale: gdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_set_scale'{$endif};
procedure gtk_print_settings_set_use_color(settings: PGtkPrintSettings; use_color: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_set_use_color'{$endif};
procedure gtk_print_settings_to_key_file(settings: PGtkPrintSettings; key_file: PGKeyFile; group_name: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_to_key_file'{$endif};
procedure gtk_print_settings_unset(settings: PGtkPrintSettings; key: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_settings_unset'{$endif};
procedure gtk_print_unix_dialog_add_custom_tab(dialog: PGtkPrintUnixDialog; child: PGtkWidget; tab_label: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_unix_dialog_add_custom_tab'{$endif};
procedure gtk_print_unix_dialog_set_current_page(dialog: PGtkPrintUnixDialog; current_page: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_unix_dialog_set_current_page'{$endif};
procedure gtk_print_unix_dialog_set_embed_page_setup(dialog: PGtkPrintUnixDialog; embed: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_unix_dialog_set_embed_page_setup'{$endif};
procedure gtk_print_unix_dialog_set_has_selection(dialog: PGtkPrintUnixDialog; has_selection: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_unix_dialog_set_has_selection'{$endif};
procedure gtk_print_unix_dialog_set_manual_capabilities(dialog: PGtkPrintUnixDialog; capabilities: TGtkPrintCapabilities); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_unix_dialog_set_manual_capabilities'{$endif};
procedure gtk_print_unix_dialog_set_page_setup(dialog: PGtkPrintUnixDialog; page_setup: PGtkPageSetup); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_unix_dialog_set_page_setup'{$endif};
procedure gtk_print_unix_dialog_set_settings(dialog: PGtkPrintUnixDialog; settings: PGtkPrintSettings); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_unix_dialog_set_settings'{$endif};
procedure gtk_print_unix_dialog_set_support_selection(dialog: PGtkPrintUnixDialog; support_selection: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_print_unix_dialog_set_support_selection'{$endif};
procedure gtk_printer_request_details(printer: PGtkPrinter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_printer_request_details'{$endif};
procedure gtk_progress_bar_pulse(pbar: PGtkProgressBar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_progress_bar_pulse'{$endif};
procedure gtk_progress_bar_set_ellipsize(pbar: PGtkProgressBar; mode: TPangoEllipsizeMode); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_progress_bar_set_ellipsize'{$endif};
procedure gtk_progress_bar_set_fraction(pbar: PGtkProgressBar; fraction: gdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_progress_bar_set_fraction'{$endif};
procedure gtk_progress_bar_set_inverted(pbar: PGtkProgressBar; inverted: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_progress_bar_set_inverted'{$endif};
procedure gtk_progress_bar_set_pulse_step(pbar: PGtkProgressBar; fraction: gdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_progress_bar_set_pulse_step'{$endif};
procedure gtk_progress_bar_set_show_text(pbar: PGtkProgressBar; show_text: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_progress_bar_set_show_text'{$endif};
procedure gtk_progress_bar_set_text(pbar: PGtkProgressBar; text: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_progress_bar_set_text'{$endif};
procedure gtk_range_get_range_rect(range: PGtkRange; range_rect: PGdkRectangle); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_range_get_range_rect'{$endif};
procedure gtk_range_get_slider_range(range: PGtkRange; slider_start: Pgint; slider_end: Pgint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_range_get_slider_range'{$endif};
procedure gtk_range_set_adjustment(range: PGtkRange; adjustment: PGtkAdjustment); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_range_set_adjustment'{$endif};
procedure gtk_range_set_fill_level(range: PGtkRange; fill_level: gdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_range_set_fill_level'{$endif};
procedure gtk_range_set_flippable(range: PGtkRange; flippable: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_range_set_flippable'{$endif};
procedure gtk_range_set_increments(range: PGtkRange; step: gdouble; page: gdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_range_set_increments'{$endif};
procedure gtk_range_set_inverted(range: PGtkRange; setting: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_range_set_inverted'{$endif};
procedure gtk_range_set_range(range: PGtkRange; min: gdouble; max: gdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_range_set_range'{$endif};
procedure gtk_range_set_restrict_to_fill_level(range: PGtkRange; restrict_to_fill_level: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_range_set_restrict_to_fill_level'{$endif};
procedure gtk_range_set_round_digits(range: PGtkRange; round_digits: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_range_set_round_digits'{$endif};
procedure gtk_range_set_show_fill_level(range: PGtkRange; show_fill_level: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_range_set_show_fill_level'{$endif};
procedure gtk_range_set_slider_size_fixed(range: PGtkRange; size_fixed: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_range_set_slider_size_fixed'{$endif};
procedure gtk_range_set_value(range: PGtkRange; value: gdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_range_set_value'{$endif};
procedure gtk_recent_info_unref(info: PGtkRecentInfo); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_recent_info_unref'{$endif};
procedure gtk_render_activity(context: PGtkStyleContext; cr: Pcairo_t; x: gdouble; y: gdouble; width: gdouble; height: gdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_render_activity'{$endif};
procedure gtk_render_arrow(context: PGtkStyleContext; cr: Pcairo_t; angle: gdouble; x: gdouble; y: gdouble; size: gdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_render_arrow'{$endif};
procedure gtk_render_background(context: PGtkStyleContext; cr: Pcairo_t; x: gdouble; y: gdouble; width: gdouble; height: gdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_render_background'{$endif};
procedure gtk_render_check(context: PGtkStyleContext; cr: Pcairo_t; x: gdouble; y: gdouble; width: gdouble; height: gdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_render_check'{$endif};
procedure gtk_render_expander(context: PGtkStyleContext; cr: Pcairo_t; x: gdouble; y: gdouble; width: gdouble; height: gdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_render_expander'{$endif};
procedure gtk_render_focus(context: PGtkStyleContext; cr: Pcairo_t; x: gdouble; y: gdouble; width: gdouble; height: gdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_render_focus'{$endif};
procedure gtk_render_frame(context: PGtkStyleContext; cr: Pcairo_t; x: gdouble; y: gdouble; width: gdouble; height: gdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_render_frame'{$endif};
procedure gtk_render_handle(context: PGtkStyleContext; cr: Pcairo_t; x: gdouble; y: gdouble; width: gdouble; height: gdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_render_handle'{$endif};
procedure gtk_render_icon(context: PGtkStyleContext; cr: Pcairo_t; texture: PGdkTexture; x: gdouble; y: gdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_render_icon'{$endif};
procedure gtk_render_layout(context: PGtkStyleContext; cr: Pcairo_t; x: gdouble; y: gdouble; layout: PPangoLayout); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_render_layout'{$endif};
procedure gtk_render_line(context: PGtkStyleContext; cr: Pcairo_t; x0: gdouble; y0: gdouble; x1: gdouble; y1: gdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_render_line'{$endif};
procedure gtk_render_option(context: PGtkStyleContext; cr: Pcairo_t; x: gdouble; y: gdouble; width: gdouble; height: gdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_render_option'{$endif};
procedure gtk_requisition_free(requisition: PGtkRequisition); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_requisition_free'{$endif};
procedure gtk_revealer_set_child(revealer: PGtkRevealer; child: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_revealer_set_child'{$endif};
procedure gtk_revealer_set_reveal_child(revealer: PGtkRevealer; reveal_child: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_revealer_set_reveal_child'{$endif};
procedure gtk_revealer_set_transition_duration(revealer: PGtkRevealer; duration: guint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_revealer_set_transition_duration'{$endif};
procedure gtk_revealer_set_transition_type(revealer: PGtkRevealer; transition: TGtkRevealerTransitionType); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_revealer_set_transition_type'{$endif};
procedure gtk_rgb_to_hsv(r: gfloat; g: gfloat; b: gfloat; h: Pgfloat; s: Pgfloat; v: Pgfloat); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_rgb_to_hsv'{$endif};
procedure gtk_root_set_focus(self: PGtkRoot; focus: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_root_set_focus'{$endif};
procedure gtk_scale_add_mark(scale: PGtkScale; value: gdouble; position: TGtkPositionType; markup: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scale_add_mark'{$endif};
procedure gtk_scale_button_set_adjustment(button: PGtkScaleButton; adjustment: PGtkAdjustment); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scale_button_set_adjustment'{$endif};
procedure gtk_scale_button_set_icons(button: PGtkScaleButton; icons: PPgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scale_button_set_icons'{$endif};
procedure gtk_scale_button_set_value(button: PGtkScaleButton; value: gdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scale_button_set_value'{$endif};
procedure gtk_scale_clear_marks(scale: PGtkScale); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scale_clear_marks'{$endif};
procedure gtk_scale_get_layout_offsets(scale: PGtkScale; x: Pgint; y: Pgint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scale_get_layout_offsets'{$endif};
procedure gtk_scale_set_digits(scale: PGtkScale; digits: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scale_set_digits'{$endif};
procedure gtk_scale_set_draw_value(scale: PGtkScale; draw_value: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scale_set_draw_value'{$endif};
procedure gtk_scale_set_format_value_func(scale: PGtkScale; func: TGtkScaleFormatValueFunc; user_data: gpointer; destroy_notify: TGDestroyNotify); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scale_set_format_value_func'{$endif};
procedure gtk_scale_set_has_origin(scale: PGtkScale; has_origin: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scale_set_has_origin'{$endif};
procedure gtk_scale_set_value_pos(scale: PGtkScale; pos: TGtkPositionType); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scale_set_value_pos'{$endif};
procedure gtk_scrollable_set_hadjustment(scrollable: PGtkScrollable; hadjustment: PGtkAdjustment); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scrollable_set_hadjustment'{$endif};
procedure gtk_scrollable_set_hscroll_policy(scrollable: PGtkScrollable; policy: TGtkScrollablePolicy); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scrollable_set_hscroll_policy'{$endif};
procedure gtk_scrollable_set_vadjustment(scrollable: PGtkScrollable; vadjustment: PGtkAdjustment); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scrollable_set_vadjustment'{$endif};
procedure gtk_scrollable_set_vscroll_policy(scrollable: PGtkScrollable; policy: TGtkScrollablePolicy); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scrollable_set_vscroll_policy'{$endif};
procedure gtk_scrollbar_set_adjustment(self: PGtkScrollbar; adjustment: PGtkAdjustment); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scrollbar_set_adjustment'{$endif};
procedure gtk_scrolled_window_get_policy(scrolled_window: PGtkScrolledWindow; hscrollbar_policy: PGtkPolicyType; vscrollbar_policy: PGtkPolicyType); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scrolled_window_get_policy'{$endif};
procedure gtk_scrolled_window_set_child(scrolled_window: PGtkScrolledWindow; child: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scrolled_window_set_child'{$endif};
procedure gtk_scrolled_window_set_hadjustment(scrolled_window: PGtkScrolledWindow; hadjustment: PGtkAdjustment); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scrolled_window_set_hadjustment'{$endif};
procedure gtk_scrolled_window_set_has_frame(scrolled_window: PGtkScrolledWindow; has_frame: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scrolled_window_set_has_frame'{$endif};
procedure gtk_scrolled_window_set_kinetic_scrolling(scrolled_window: PGtkScrolledWindow; kinetic_scrolling: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scrolled_window_set_kinetic_scrolling'{$endif};
procedure gtk_scrolled_window_set_max_content_height(scrolled_window: PGtkScrolledWindow; height: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scrolled_window_set_max_content_height'{$endif};
procedure gtk_scrolled_window_set_max_content_width(scrolled_window: PGtkScrolledWindow; width: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scrolled_window_set_max_content_width'{$endif};
procedure gtk_scrolled_window_set_min_content_height(scrolled_window: PGtkScrolledWindow; height: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scrolled_window_set_min_content_height'{$endif};
procedure gtk_scrolled_window_set_min_content_width(scrolled_window: PGtkScrolledWindow; width: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scrolled_window_set_min_content_width'{$endif};
procedure gtk_scrolled_window_set_overlay_scrolling(scrolled_window: PGtkScrolledWindow; overlay_scrolling: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scrolled_window_set_overlay_scrolling'{$endif};
procedure gtk_scrolled_window_set_placement(scrolled_window: PGtkScrolledWindow; window_placement: TGtkCornerType); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scrolled_window_set_placement'{$endif};
procedure gtk_scrolled_window_set_policy(scrolled_window: PGtkScrolledWindow; hscrollbar_policy: TGtkPolicyType; vscrollbar_policy: TGtkPolicyType); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scrolled_window_set_policy'{$endif};
procedure gtk_scrolled_window_set_propagate_natural_height(scrolled_window: PGtkScrolledWindow; propagate: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scrolled_window_set_propagate_natural_height'{$endif};
procedure gtk_scrolled_window_set_propagate_natural_width(scrolled_window: PGtkScrolledWindow; propagate: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scrolled_window_set_propagate_natural_width'{$endif};
procedure gtk_scrolled_window_set_vadjustment(scrolled_window: PGtkScrolledWindow; vadjustment: PGtkAdjustment); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scrolled_window_set_vadjustment'{$endif};
procedure gtk_scrolled_window_unset_placement(scrolled_window: PGtkScrolledWindow); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_scrolled_window_unset_placement'{$endif};
procedure gtk_search_bar_connect_entry(bar: PGtkSearchBar; entry: PGtkEditable); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_search_bar_connect_entry'{$endif};
procedure gtk_search_bar_set_child(bar: PGtkSearchBar; child: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_search_bar_set_child'{$endif};
procedure gtk_search_bar_set_key_capture_widget(bar: PGtkSearchBar; widget: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_search_bar_set_key_capture_widget'{$endif};
procedure gtk_search_bar_set_search_mode(bar: PGtkSearchBar; search_mode: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_search_bar_set_search_mode'{$endif};
procedure gtk_search_bar_set_show_close_button(bar: PGtkSearchBar; visible: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_search_bar_set_show_close_button'{$endif};
procedure gtk_search_entry_set_key_capture_widget(entry: PGtkSearchEntry; widget: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_search_entry_set_key_capture_widget'{$endif};
procedure gtk_selection_filter_model_set_model(self: PGtkSelectionFilterModel; model: PGtkSelectionModel); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_selection_filter_model_set_model'{$endif};
procedure gtk_selection_model_selection_changed(model: PGtkSelectionModel; position: guint; n_items: guint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_selection_model_selection_changed'{$endif};
procedure gtk_set_debug_flags(flags: TGtkDebugFlags); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_set_debug_flags'{$endif};
procedure gtk_settings_reset_property(settings: PGtkSettings; name: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_settings_reset_property'{$endif};
procedure gtk_shortcut_action_print(self: PGtkShortcutAction; string_: PGString); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_shortcut_action_print'{$endif};
procedure gtk_shortcut_controller_add_shortcut(self: PGtkShortcutController; shortcut: PGtkShortcut); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_shortcut_controller_add_shortcut'{$endif};
procedure gtk_shortcut_controller_remove_shortcut(self: PGtkShortcutController; shortcut: PGtkShortcut); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_shortcut_controller_remove_shortcut'{$endif};
procedure gtk_shortcut_controller_set_mnemonics_modifiers(self: PGtkShortcutController; modifiers: TGdkModifierType); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_shortcut_controller_set_mnemonics_modifiers'{$endif};
procedure gtk_shortcut_controller_set_scope(self: PGtkShortcutController; scope: TGtkShortcutScope); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_shortcut_controller_set_scope'{$endif};
procedure gtk_shortcut_label_set_accelerator(self: PGtkShortcutLabel; accelerator: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_shortcut_label_set_accelerator'{$endif};
procedure gtk_shortcut_label_set_disabled_text(self: PGtkShortcutLabel; disabled_text: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_shortcut_label_set_disabled_text'{$endif};
procedure gtk_shortcut_set_action(self: PGtkShortcut; action: PGtkShortcutAction); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_shortcut_set_action'{$endif};
procedure gtk_shortcut_set_arguments(self: PGtkShortcut; args: PGVariant); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_shortcut_set_arguments'{$endif};
procedure gtk_shortcut_set_trigger(self: PGtkShortcut; trigger: PGtkShortcutTrigger); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_shortcut_set_trigger'{$endif};
procedure gtk_shortcut_trigger_print(self: PGtkShortcutTrigger; string_: PGString); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_shortcut_trigger_print'{$endif};
procedure gtk_show_about_dialog(parent: PGtkWindow; first_property_name: Pgchar; args: array of const); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_show_about_dialog'{$endif};
procedure gtk_show_uri(parent: PGtkWindow; uri: Pgchar; timestamp: guint32); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_show_uri'{$endif};
procedure gtk_show_uri_full(parent: PGtkWindow; uri: Pgchar; timestamp: guint32; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_show_uri_full'{$endif};
procedure gtk_single_selection_set_autoselect(self: PGtkSingleSelection; autoselect: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_single_selection_set_autoselect'{$endif};
procedure gtk_single_selection_set_can_unselect(self: PGtkSingleSelection; can_unselect: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_single_selection_set_can_unselect'{$endif};
procedure gtk_single_selection_set_model(self: PGtkSingleSelection; model: PGListModel); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_single_selection_set_model'{$endif};
procedure gtk_single_selection_set_selected(self: PGtkSingleSelection; position: guint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_single_selection_set_selected'{$endif};
procedure gtk_size_group_add_widget(size_group: PGtkSizeGroup; widget: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_size_group_add_widget'{$endif};
procedure gtk_size_group_remove_widget(size_group: PGtkSizeGroup; widget: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_size_group_remove_widget'{$endif};
procedure gtk_size_group_set_mode(size_group: PGtkSizeGroup; mode: TGtkSizeGroupMode); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_size_group_set_mode'{$endif};
procedure gtk_slice_list_model_set_model(self: PGtkSliceListModel; model: PGListModel); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_slice_list_model_set_model'{$endif};
procedure gtk_slice_list_model_set_offset(self: PGtkSliceListModel; offset: guint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_slice_list_model_set_offset'{$endif};
procedure gtk_slice_list_model_set_size(self: PGtkSliceListModel; size: guint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_slice_list_model_set_size'{$endif};
procedure gtk_snapshot_append_border(snapshot: PGtkSnapshot; outline: PGskRoundedRect; border_width: Pgfloat; border_color: PGdkRGBA); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_snapshot_append_border'{$endif};
procedure gtk_snapshot_append_color(snapshot: PGtkSnapshot; color: PGdkRGBA; bounds: Pgraphene_rect_t); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_snapshot_append_color'{$endif};
procedure gtk_snapshot_append_conic_gradient(snapshot: PGtkSnapshot; bounds: Pgraphene_rect_t; center: Pgraphene_point_t; rotation: gfloat; stops: PGskColorStop; n_stops: gsize); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_snapshot_append_conic_gradient'{$endif};
procedure gtk_snapshot_append_inset_shadow(snapshot: PGtkSnapshot; outline: PGskRoundedRect; color: PGdkRGBA; dx: gfloat; dy: gfloat; spread: gfloat; blur_radius: gfloat); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_snapshot_append_inset_shadow'{$endif};
procedure gtk_snapshot_append_layout(snapshot: PGtkSnapshot; layout: PPangoLayout; color: PGdkRGBA); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_snapshot_append_layout'{$endif};
procedure gtk_snapshot_append_linear_gradient(snapshot: PGtkSnapshot; bounds: Pgraphene_rect_t; start_point: Pgraphene_point_t; end_point: Pgraphene_point_t; stops: PGskColorStop; n_stops: gsize); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_snapshot_append_linear_gradient'{$endif};
procedure gtk_snapshot_append_node(snapshot: PGtkSnapshot; node: PGskRenderNode); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_snapshot_append_node'{$endif};
procedure gtk_snapshot_append_outset_shadow(snapshot: PGtkSnapshot; outline: PGskRoundedRect; color: PGdkRGBA; dx: gfloat; dy: gfloat; spread: gfloat; blur_radius: gfloat); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_snapshot_append_outset_shadow'{$endif};
procedure gtk_snapshot_append_radial_gradient(snapshot: PGtkSnapshot; bounds: Pgraphene_rect_t; center: Pgraphene_point_t; hradius: gfloat; vradius: gfloat; start: gfloat; end_: gfloat; stops: PGskColorStop; n_stops: gsize); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_snapshot_append_radial_gradient'{$endif};
procedure gtk_snapshot_append_repeating_linear_gradient(snapshot: PGtkSnapshot; bounds: Pgraphene_rect_t; start_point: Pgraphene_point_t; end_point: Pgraphene_point_t; stops: PGskColorStop; n_stops: gsize); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_snapshot_append_repeating_linear_gradient'{$endif};
procedure gtk_snapshot_append_repeating_radial_gradient(snapshot: PGtkSnapshot; bounds: Pgraphene_rect_t; center: Pgraphene_point_t; hradius: gfloat; vradius: gfloat; start: gfloat; end_: gfloat; stops: PGskColorStop; n_stops: gsize); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_snapshot_append_repeating_radial_gradient'{$endif};
procedure gtk_snapshot_append_texture(snapshot: PGtkSnapshot; texture: PGdkTexture; bounds: Pgraphene_rect_t); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_snapshot_append_texture'{$endif};
procedure gtk_snapshot_gl_shader_pop_texture(snapshot: PGtkSnapshot); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_snapshot_gl_shader_pop_texture'{$endif};
procedure gtk_snapshot_perspective(snapshot: PGtkSnapshot; depth: gfloat); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_snapshot_perspective'{$endif};
procedure gtk_snapshot_pop(snapshot: PGtkSnapshot); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_snapshot_pop'{$endif};
procedure gtk_snapshot_push_blend(snapshot: PGtkSnapshot; blend_mode: TGskBlendMode); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_snapshot_push_blend'{$endif};
procedure gtk_snapshot_push_blur(snapshot: PGtkSnapshot; radius: gdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_snapshot_push_blur'{$endif};
procedure gtk_snapshot_push_clip(snapshot: PGtkSnapshot; bounds: Pgraphene_rect_t); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_snapshot_push_clip'{$endif};
procedure gtk_snapshot_push_color_matrix(snapshot: PGtkSnapshot; color_matrix: Pgraphene_matrix_t; color_offset: Pgraphene_vec4_t); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_snapshot_push_color_matrix'{$endif};
procedure gtk_snapshot_push_cross_fade(snapshot: PGtkSnapshot; progress: gdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_snapshot_push_cross_fade'{$endif};
procedure gtk_snapshot_push_debug(snapshot: PGtkSnapshot; message: Pgchar; args: array of const); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_snapshot_push_debug'{$endif};
procedure gtk_snapshot_push_gl_shader(snapshot: PGtkSnapshot; shader: PGskGLShader; bounds: Pgraphene_rect_t; take_args: PGBytes); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_snapshot_push_gl_shader'{$endif};
procedure gtk_snapshot_push_opacity(snapshot: PGtkSnapshot; opacity: gdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_snapshot_push_opacity'{$endif};
procedure gtk_snapshot_push_repeat(snapshot: PGtkSnapshot; bounds: Pgraphene_rect_t; child_bounds: Pgraphene_rect_t); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_snapshot_push_repeat'{$endif};
procedure gtk_snapshot_push_rounded_clip(snapshot: PGtkSnapshot; bounds: PGskRoundedRect); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_snapshot_push_rounded_clip'{$endif};
procedure gtk_snapshot_push_shadow(snapshot: PGtkSnapshot; shadow: PGskShadow; n_shadows: gsize); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_snapshot_push_shadow'{$endif};
procedure gtk_snapshot_render_background(snapshot: PGtkSnapshot; context: PGtkStyleContext; x: gdouble; y: gdouble; width: gdouble; height: gdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_snapshot_render_background'{$endif};
procedure gtk_snapshot_render_focus(snapshot: PGtkSnapshot; context: PGtkStyleContext; x: gdouble; y: gdouble; width: gdouble; height: gdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_snapshot_render_focus'{$endif};
procedure gtk_snapshot_render_frame(snapshot: PGtkSnapshot; context: PGtkStyleContext; x: gdouble; y: gdouble; width: gdouble; height: gdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_snapshot_render_frame'{$endif};
procedure gtk_snapshot_render_insertion_cursor(snapshot: PGtkSnapshot; context: PGtkStyleContext; x: gdouble; y: gdouble; layout: PPangoLayout; index: gint; direction: TPangoDirection); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_snapshot_render_insertion_cursor'{$endif};
procedure gtk_snapshot_render_layout(snapshot: PGtkSnapshot; context: PGtkStyleContext; x: gdouble; y: gdouble; layout: PPangoLayout); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_snapshot_render_layout'{$endif};
procedure gtk_snapshot_restore(snapshot: PGtkSnapshot); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_snapshot_restore'{$endif};
procedure gtk_snapshot_rotate(snapshot: PGtkSnapshot; angle: gfloat); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_snapshot_rotate'{$endif};
procedure gtk_snapshot_rotate_3d(snapshot: PGtkSnapshot; angle: gfloat; axis: Pgraphene_vec3_t); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_snapshot_rotate_3d'{$endif};
procedure gtk_snapshot_save(snapshot: PGtkSnapshot); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_snapshot_save'{$endif};
procedure gtk_snapshot_scale(snapshot: PGtkSnapshot; factor_x: gfloat; factor_y: gfloat); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_snapshot_scale'{$endif};
procedure gtk_snapshot_scale_3d(snapshot: PGtkSnapshot; factor_x: gfloat; factor_y: gfloat; factor_z: gfloat); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_snapshot_scale_3d'{$endif};
procedure gtk_snapshot_transform(snapshot: PGtkSnapshot; transform: PGskTransform); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_snapshot_transform'{$endif};
procedure gtk_snapshot_transform_matrix(snapshot: PGtkSnapshot; matrix: Pgraphene_matrix_t); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_snapshot_transform_matrix'{$endif};
procedure gtk_snapshot_translate(snapshot: PGtkSnapshot; point: Pgraphene_point_t); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_snapshot_translate'{$endif};
procedure gtk_snapshot_translate_3d(snapshot: PGtkSnapshot; point: Pgraphene_point3d_t); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_snapshot_translate_3d'{$endif};
procedure gtk_sort_list_model_set_incremental(self: PGtkSortListModel; incremental: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_sort_list_model_set_incremental'{$endif};
procedure gtk_sort_list_model_set_model(self: PGtkSortListModel; model: PGListModel); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_sort_list_model_set_model'{$endif};
procedure gtk_sort_list_model_set_sorter(self: PGtkSortListModel; sorter: PGtkSorter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_sort_list_model_set_sorter'{$endif};
procedure gtk_sorter_changed(self: PGtkSorter; change: TGtkSorterChange); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_sorter_changed'{$endif};
procedure gtk_spin_button_configure(spin_button: PGtkSpinButton; adjustment: PGtkAdjustment; climb_rate: gdouble; digits: guint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_spin_button_configure'{$endif};
procedure gtk_spin_button_get_increments(spin_button: PGtkSpinButton; step: Pgdouble; page: Pgdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_spin_button_get_increments'{$endif};
procedure gtk_spin_button_get_range(spin_button: PGtkSpinButton; min: Pgdouble; max: Pgdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_spin_button_get_range'{$endif};
procedure gtk_spin_button_set_adjustment(spin_button: PGtkSpinButton; adjustment: PGtkAdjustment); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_spin_button_set_adjustment'{$endif};
procedure gtk_spin_button_set_climb_rate(spin_button: PGtkSpinButton; climb_rate: gdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_spin_button_set_climb_rate'{$endif};
procedure gtk_spin_button_set_digits(spin_button: PGtkSpinButton; digits: guint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_spin_button_set_digits'{$endif};
procedure gtk_spin_button_set_increments(spin_button: PGtkSpinButton; step: gdouble; page: gdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_spin_button_set_increments'{$endif};
procedure gtk_spin_button_set_numeric(spin_button: PGtkSpinButton; numeric: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_spin_button_set_numeric'{$endif};
procedure gtk_spin_button_set_range(spin_button: PGtkSpinButton; min: gdouble; max: gdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_spin_button_set_range'{$endif};
procedure gtk_spin_button_set_snap_to_ticks(spin_button: PGtkSpinButton; snap_to_ticks: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_spin_button_set_snap_to_ticks'{$endif};
procedure gtk_spin_button_set_update_policy(spin_button: PGtkSpinButton; policy: TGtkSpinButtonUpdatePolicy); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_spin_button_set_update_policy'{$endif};
procedure gtk_spin_button_set_value(spin_button: PGtkSpinButton; value: gdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_spin_button_set_value'{$endif};
procedure gtk_spin_button_set_wrap(spin_button: PGtkSpinButton; wrap: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_spin_button_set_wrap'{$endif};
procedure gtk_spin_button_spin(spin_button: PGtkSpinButton; direction: TGtkSpinType; increment: gdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_spin_button_spin'{$endif};
procedure gtk_spin_button_update(spin_button: PGtkSpinButton); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_spin_button_update'{$endif};
procedure gtk_spinner_set_spinning(spinner: PGtkSpinner; spinning: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_spinner_set_spinning'{$endif};
procedure gtk_spinner_start(spinner: PGtkSpinner); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_spinner_start'{$endif};
procedure gtk_spinner_stop(spinner: PGtkSpinner); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_spinner_stop'{$endif};
procedure gtk_stack_page_set_icon_name(self: PGtkStackPage; setting: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_stack_page_set_icon_name'{$endif};
procedure gtk_stack_page_set_name(self: PGtkStackPage; setting: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_stack_page_set_name'{$endif};
procedure gtk_stack_page_set_needs_attention(self: PGtkStackPage; setting: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_stack_page_set_needs_attention'{$endif};
procedure gtk_stack_page_set_title(self: PGtkStackPage; setting: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_stack_page_set_title'{$endif};
procedure gtk_stack_page_set_use_underline(self: PGtkStackPage; setting: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_stack_page_set_use_underline'{$endif};
procedure gtk_stack_page_set_visible(self: PGtkStackPage; visible: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_stack_page_set_visible'{$endif};
procedure gtk_stack_remove(stack: PGtkStack; child: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_stack_remove'{$endif};
procedure gtk_stack_set_hhomogeneous(stack: PGtkStack; hhomogeneous: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_stack_set_hhomogeneous'{$endif};
procedure gtk_stack_set_interpolate_size(stack: PGtkStack; interpolate_size: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_stack_set_interpolate_size'{$endif};
procedure gtk_stack_set_transition_duration(stack: PGtkStack; duration: guint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_stack_set_transition_duration'{$endif};
procedure gtk_stack_set_transition_type(stack: PGtkStack; transition: TGtkStackTransitionType); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_stack_set_transition_type'{$endif};
procedure gtk_stack_set_vhomogeneous(stack: PGtkStack; vhomogeneous: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_stack_set_vhomogeneous'{$endif};
procedure gtk_stack_set_visible_child(stack: PGtkStack; child: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_stack_set_visible_child'{$endif};
procedure gtk_stack_set_visible_child_full(stack: PGtkStack; name: Pgchar; transition: TGtkStackTransitionType); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_stack_set_visible_child_full'{$endif};
procedure gtk_stack_set_visible_child_name(stack: PGtkStack; name: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_stack_set_visible_child_name'{$endif};
procedure gtk_stack_sidebar_set_stack(self: PGtkStackSidebar; stack: PGtkStack); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_stack_sidebar_set_stack'{$endif};
procedure gtk_stack_switcher_set_stack(switcher: PGtkStackSwitcher; stack: PGtkStack); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_stack_switcher_set_stack'{$endif};
procedure gtk_statusbar_pop(statusbar: PGtkStatusbar; context_id: guint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_statusbar_pop'{$endif};
procedure gtk_statusbar_remove(statusbar: PGtkStatusbar; context_id: guint; message_id: guint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_statusbar_remove'{$endif};
procedure gtk_statusbar_remove_all(statusbar: PGtkStatusbar; context_id: guint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_statusbar_remove_all'{$endif};
procedure gtk_string_filter_set_expression(self: PGtkStringFilter; expression: PGtkExpression); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_string_filter_set_expression'{$endif};
procedure gtk_string_filter_set_ignore_case(self: PGtkStringFilter; ignore_case: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_string_filter_set_ignore_case'{$endif};
procedure gtk_string_filter_set_match_mode(self: PGtkStringFilter; mode: TGtkStringFilterMatchMode); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_string_filter_set_match_mode'{$endif};
procedure gtk_string_filter_set_search(self: PGtkStringFilter; search: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_string_filter_set_search'{$endif};
procedure gtk_string_list_append(self: PGtkStringList; string_: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_string_list_append'{$endif};
procedure gtk_string_list_remove(self: PGtkStringList; position: guint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_string_list_remove'{$endif};
procedure gtk_string_list_splice(self: PGtkStringList; position: guint; n_removals: guint; additions: PPgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_string_list_splice'{$endif};
procedure gtk_string_list_take(self: PGtkStringList; string_: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_string_list_take'{$endif};
procedure gtk_string_sorter_set_expression(self: PGtkStringSorter; expression: PGtkExpression); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_string_sorter_set_expression'{$endif};
procedure gtk_string_sorter_set_ignore_case(self: PGtkStringSorter; ignore_case: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_string_sorter_set_ignore_case'{$endif};
procedure gtk_style_context_add_class(context: PGtkStyleContext; class_name: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_style_context_add_class'{$endif};
procedure gtk_style_context_add_provider(context: PGtkStyleContext; provider: PGtkStyleProvider; priority: guint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_style_context_add_provider'{$endif};
procedure gtk_style_context_add_provider_for_display(display: PGdkDisplay; provider: PGtkStyleProvider; priority: guint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_style_context_add_provider_for_display'{$endif};
procedure gtk_style_context_get_border(context: PGtkStyleContext; border: PGtkBorder); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_style_context_get_border'{$endif};
procedure gtk_style_context_get_color(context: PGtkStyleContext; color: PGdkRGBA); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_style_context_get_color'{$endif};
procedure gtk_style_context_get_margin(context: PGtkStyleContext; margin: PGtkBorder); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_style_context_get_margin'{$endif};
procedure gtk_style_context_get_padding(context: PGtkStyleContext; padding: PGtkBorder); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_style_context_get_padding'{$endif};
procedure gtk_style_context_remove_class(context: PGtkStyleContext; class_name: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_style_context_remove_class'{$endif};
procedure gtk_style_context_remove_provider(context: PGtkStyleContext; provider: PGtkStyleProvider); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_style_context_remove_provider'{$endif};
procedure gtk_style_context_remove_provider_for_display(display: PGdkDisplay; provider: PGtkStyleProvider); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_style_context_remove_provider_for_display'{$endif};
procedure gtk_style_context_restore(context: PGtkStyleContext); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_style_context_restore'{$endif};
procedure gtk_style_context_save(context: PGtkStyleContext); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_style_context_save'{$endif};
procedure gtk_style_context_set_display(context: PGtkStyleContext; display: PGdkDisplay); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_style_context_set_display'{$endif};
procedure gtk_style_context_set_scale(context: PGtkStyleContext; scale: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_style_context_set_scale'{$endif};
procedure gtk_style_context_set_state(context: PGtkStyleContext; flags: TGtkStateFlags); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_style_context_set_state'{$endif};
procedure gtk_switch_set_active(self: PGtkSwitch; is_active: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_switch_set_active'{$endif};
procedure gtk_switch_set_state(self: PGtkSwitch; state: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_switch_set_state'{$endif};
procedure gtk_symbolic_paintable_snapshot_symbolic(paintable: PGtkSymbolicPaintable; snapshot: PGdkSnapshot; width: gdouble; height: gdouble; colors: PGdkRGBA; n_colors: gsize); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_symbolic_paintable_snapshot_symbolic'{$endif};
procedure gtk_test_accessible_assertion_message_role(domain: Pgchar; file_: Pgchar; line: gint; func: Pgchar; expr: Pgchar; accessible: PGtkAccessible; expected_role: TGtkAccessibleRole; actual_role: TGtkAccessibleRole); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_test_accessible_assertion_message_role'{$endif};
procedure gtk_test_init(argcp: Pgint; argvp: PPPgchar; args: array of const); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_test_init'{$endif};
procedure gtk_test_register_all_types; cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_test_register_all_types'{$endif};
procedure gtk_test_widget_wait_for_draw(widget: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_test_widget_wait_for_draw'{$endif};
procedure gtk_text_buffer_add_mark(buffer: PGtkTextBuffer; mark: PGtkTextMark; where: PGtkTextIter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_add_mark'{$endif};
procedure gtk_text_buffer_add_selection_clipboard(buffer: PGtkTextBuffer; clipboard: PGdkClipboard); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_add_selection_clipboard'{$endif};
procedure gtk_text_buffer_apply_tag(buffer: PGtkTextBuffer; tag: PGtkTextTag; start: PGtkTextIter; end_: PGtkTextIter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_apply_tag'{$endif};
procedure gtk_text_buffer_apply_tag_by_name(buffer: PGtkTextBuffer; name: Pgchar; start: PGtkTextIter; end_: PGtkTextIter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_apply_tag_by_name'{$endif};
procedure gtk_text_buffer_begin_irreversible_action(buffer: PGtkTextBuffer); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_begin_irreversible_action'{$endif};
procedure gtk_text_buffer_begin_user_action(buffer: PGtkTextBuffer); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_begin_user_action'{$endif};
procedure gtk_text_buffer_copy_clipboard(buffer: PGtkTextBuffer; clipboard: PGdkClipboard); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_copy_clipboard'{$endif};
procedure gtk_text_buffer_cut_clipboard(buffer: PGtkTextBuffer; clipboard: PGdkClipboard; default_editable: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_cut_clipboard'{$endif};
procedure gtk_text_buffer_delete(buffer: PGtkTextBuffer; start: PGtkTextIter; end_: PGtkTextIter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_delete'{$endif};
procedure gtk_text_buffer_delete_mark(buffer: PGtkTextBuffer; mark: PGtkTextMark); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_delete_mark'{$endif};
procedure gtk_text_buffer_delete_mark_by_name(buffer: PGtkTextBuffer; name: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_delete_mark_by_name'{$endif};
procedure gtk_text_buffer_end_irreversible_action(buffer: PGtkTextBuffer); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_end_irreversible_action'{$endif};
procedure gtk_text_buffer_end_user_action(buffer: PGtkTextBuffer); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_end_user_action'{$endif};
procedure gtk_text_buffer_get_bounds(buffer: PGtkTextBuffer; start: PGtkTextIter; end_: PGtkTextIter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_get_bounds'{$endif};
procedure gtk_text_buffer_get_end_iter(buffer: PGtkTextBuffer; iter: PGtkTextIter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_get_end_iter'{$endif};
procedure gtk_text_buffer_get_iter_at_child_anchor(buffer: PGtkTextBuffer; iter: PGtkTextIter; anchor: PGtkTextChildAnchor); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_get_iter_at_child_anchor'{$endif};
procedure gtk_text_buffer_get_iter_at_mark(buffer: PGtkTextBuffer; iter: PGtkTextIter; mark: PGtkTextMark); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_get_iter_at_mark'{$endif};
procedure gtk_text_buffer_get_iter_at_offset(buffer: PGtkTextBuffer; iter: PGtkTextIter; char_offset: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_get_iter_at_offset'{$endif};
procedure gtk_text_buffer_get_start_iter(buffer: PGtkTextBuffer; iter: PGtkTextIter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_get_start_iter'{$endif};
procedure gtk_text_buffer_insert(buffer: PGtkTextBuffer; iter: PGtkTextIter; text: Pgchar; len: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_insert'{$endif};
procedure gtk_text_buffer_insert_at_cursor(buffer: PGtkTextBuffer; text: Pgchar; len: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_insert_at_cursor'{$endif};
procedure gtk_text_buffer_insert_child_anchor(buffer: PGtkTextBuffer; iter: PGtkTextIter; anchor: PGtkTextChildAnchor); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_insert_child_anchor'{$endif};
procedure gtk_text_buffer_insert_markup(buffer: PGtkTextBuffer; iter: PGtkTextIter; markup: Pgchar; len: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_insert_markup'{$endif};
procedure gtk_text_buffer_insert_paintable(buffer: PGtkTextBuffer; iter: PGtkTextIter; paintable: PGdkPaintable); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_insert_paintable'{$endif};
procedure gtk_text_buffer_insert_range(buffer: PGtkTextBuffer; iter: PGtkTextIter; start: PGtkTextIter; end_: PGtkTextIter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_insert_range'{$endif};
procedure gtk_text_buffer_insert_with_tags(buffer: PGtkTextBuffer; iter: PGtkTextIter; text: Pgchar; len: gint; first_tag: PGtkTextTag; args: array of const); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_insert_with_tags'{$endif};
procedure gtk_text_buffer_insert_with_tags_by_name(buffer: PGtkTextBuffer; iter: PGtkTextIter; text: Pgchar; len: gint; first_tag_name: Pgchar; args: array of const); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_insert_with_tags_by_name'{$endif};
procedure gtk_text_buffer_move_mark(buffer: PGtkTextBuffer; mark: PGtkTextMark; where: PGtkTextIter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_move_mark'{$endif};
procedure gtk_text_buffer_move_mark_by_name(buffer: PGtkTextBuffer; name: Pgchar; where: PGtkTextIter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_move_mark_by_name'{$endif};
procedure gtk_text_buffer_paste_clipboard(buffer: PGtkTextBuffer; clipboard: PGdkClipboard; override_location: PGtkTextIter; default_editable: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_paste_clipboard'{$endif};
procedure gtk_text_buffer_place_cursor(buffer: PGtkTextBuffer; where: PGtkTextIter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_place_cursor'{$endif};
procedure gtk_text_buffer_redo(buffer: PGtkTextBuffer); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_redo'{$endif};
procedure gtk_text_buffer_remove_all_tags(buffer: PGtkTextBuffer; start: PGtkTextIter; end_: PGtkTextIter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_remove_all_tags'{$endif};
procedure gtk_text_buffer_remove_selection_clipboard(buffer: PGtkTextBuffer; clipboard: PGdkClipboard); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_remove_selection_clipboard'{$endif};
procedure gtk_text_buffer_remove_tag(buffer: PGtkTextBuffer; tag: PGtkTextTag; start: PGtkTextIter; end_: PGtkTextIter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_remove_tag'{$endif};
procedure gtk_text_buffer_remove_tag_by_name(buffer: PGtkTextBuffer; name: Pgchar; start: PGtkTextIter; end_: PGtkTextIter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_remove_tag_by_name'{$endif};
procedure gtk_text_buffer_select_range(buffer: PGtkTextBuffer; ins: PGtkTextIter; bound: PGtkTextIter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_select_range'{$endif};
procedure gtk_text_buffer_set_enable_undo(buffer: PGtkTextBuffer; enable_undo: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_set_enable_undo'{$endif};
procedure gtk_text_buffer_set_max_undo_levels(buffer: PGtkTextBuffer; max_undo_levels: guint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_set_max_undo_levels'{$endif};
procedure gtk_text_buffer_set_modified(buffer: PGtkTextBuffer; setting: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_set_modified'{$endif};
procedure gtk_text_buffer_set_text(buffer: PGtkTextBuffer; text: Pgchar; len: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_set_text'{$endif};
procedure gtk_text_buffer_undo(buffer: PGtkTextBuffer); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_buffer_undo'{$endif};
procedure gtk_text_compute_cursor_extents(self: PGtkText; position: gsize; strong: Pgraphene_rect_t; weak: Pgraphene_rect_t); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_compute_cursor_extents'{$endif};
procedure gtk_text_iter_assign(iter: PGtkTextIter; other: PGtkTextIter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_assign'{$endif};
procedure gtk_text_iter_forward_to_end(iter: PGtkTextIter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_forward_to_end'{$endif};
procedure gtk_text_iter_free(iter: PGtkTextIter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_free'{$endif};
procedure gtk_text_iter_order(first: PGtkTextIter; second: PGtkTextIter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_order'{$endif};
procedure gtk_text_iter_set_line(iter: PGtkTextIter; line_number: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_set_line'{$endif};
procedure gtk_text_iter_set_line_index(iter: PGtkTextIter; byte_on_line: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_set_line_index'{$endif};
procedure gtk_text_iter_set_line_offset(iter: PGtkTextIter; char_on_line: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_set_line_offset'{$endif};
procedure gtk_text_iter_set_offset(iter: PGtkTextIter; char_offset: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_set_offset'{$endif};
procedure gtk_text_iter_set_visible_line_index(iter: PGtkTextIter; byte_on_line: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_set_visible_line_index'{$endif};
procedure gtk_text_iter_set_visible_line_offset(iter: PGtkTextIter; char_on_line: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_iter_set_visible_line_offset'{$endif};
procedure gtk_text_mark_set_visible(mark: PGtkTextMark; setting: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_mark_set_visible'{$endif};
procedure gtk_text_set_activates_default(self: PGtkText; activates: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_set_activates_default'{$endif};
procedure gtk_text_set_attributes(self: PGtkText; attrs: PPangoAttrList); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_set_attributes'{$endif};
procedure gtk_text_set_buffer(self: PGtkText; buffer: PGtkEntryBuffer); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_set_buffer'{$endif};
procedure gtk_text_set_enable_emoji_completion(self: PGtkText; enable_emoji_completion: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_set_enable_emoji_completion'{$endif};
procedure gtk_text_set_extra_menu(self: PGtkText; model: PGMenuModel); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_set_extra_menu'{$endif};
procedure gtk_text_set_input_hints(self: PGtkText; hints: TGtkInputHints); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_set_input_hints'{$endif};
procedure gtk_text_set_input_purpose(self: PGtkText; purpose: TGtkInputPurpose); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_set_input_purpose'{$endif};
procedure gtk_text_set_invisible_char(self: PGtkText; ch: gunichar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_set_invisible_char'{$endif};
procedure gtk_text_set_max_length(self: PGtkText; length: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_set_max_length'{$endif};
procedure gtk_text_set_overwrite_mode(self: PGtkText; overwrite: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_set_overwrite_mode'{$endif};
procedure gtk_text_set_placeholder_text(self: PGtkText; text: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_set_placeholder_text'{$endif};
procedure gtk_text_set_propagate_text_width(self: PGtkText; propagate_text_width: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_set_propagate_text_width'{$endif};
procedure gtk_text_set_tabs(self: PGtkText; tabs: PPangoTabArray); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_set_tabs'{$endif};
procedure gtk_text_set_truncate_multiline(self: PGtkText; truncate_multiline: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_set_truncate_multiline'{$endif};
procedure gtk_text_set_visibility(self: PGtkText; visible: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_set_visibility'{$endif};
procedure gtk_text_tag_changed(tag: PGtkTextTag; size_changed: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_tag_changed'{$endif};
procedure gtk_text_tag_set_priority(tag: PGtkTextTag; priority: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_tag_set_priority'{$endif};
procedure gtk_text_tag_table_foreach(table: PGtkTextTagTable; func: TGtkTextTagTableForeach; data: gpointer); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_tag_table_foreach'{$endif};
procedure gtk_text_tag_table_remove(table: PGtkTextTagTable; tag: PGtkTextTag); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_tag_table_remove'{$endif};
procedure gtk_text_unset_invisible_char(self: PGtkText); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_unset_invisible_char'{$endif};
procedure gtk_text_view_add_child_at_anchor(text_view: PGtkTextView; child: PGtkWidget; anchor: PGtkTextChildAnchor); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_add_child_at_anchor'{$endif};
procedure gtk_text_view_add_overlay(text_view: PGtkTextView; child: PGtkWidget; xpos: gint; ypos: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_add_overlay'{$endif};
procedure gtk_text_view_buffer_to_window_coords(text_view: PGtkTextView; win: TGtkTextWindowType; buffer_x: gint; buffer_y: gint; window_x: Pgint; window_y: Pgint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_buffer_to_window_coords'{$endif};
procedure gtk_text_view_get_cursor_locations(text_view: PGtkTextView; iter: PGtkTextIter; strong: PGdkRectangle; weak: PGdkRectangle); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_get_cursor_locations'{$endif};
procedure gtk_text_view_get_iter_location(text_view: PGtkTextView; iter: PGtkTextIter; location: PGdkRectangle); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_get_iter_location'{$endif};
procedure gtk_text_view_get_line_at_y(text_view: PGtkTextView; target_iter: PGtkTextIter; y: gint; line_top: Pgint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_get_line_at_y'{$endif};
procedure gtk_text_view_get_line_yrange(text_view: PGtkTextView; iter: PGtkTextIter; y: Pgint; height: Pgint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_get_line_yrange'{$endif};
procedure gtk_text_view_get_visible_rect(text_view: PGtkTextView; visible_rect: PGdkRectangle); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_get_visible_rect'{$endif};
procedure gtk_text_view_move_overlay(text_view: PGtkTextView; child: PGtkWidget; xpos: gint; ypos: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_move_overlay'{$endif};
procedure gtk_text_view_remove(text_view: PGtkTextView; child: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_remove'{$endif};
procedure gtk_text_view_reset_cursor_blink(text_view: PGtkTextView); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_reset_cursor_blink'{$endif};
procedure gtk_text_view_reset_im_context(text_view: PGtkTextView); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_reset_im_context'{$endif};
procedure gtk_text_view_scroll_mark_onscreen(text_view: PGtkTextView; mark: PGtkTextMark); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_scroll_mark_onscreen'{$endif};
procedure gtk_text_view_scroll_to_mark(text_view: PGtkTextView; mark: PGtkTextMark; within_margin: gdouble; use_align: gboolean; xalign: gdouble; yalign: gdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_scroll_to_mark'{$endif};
procedure gtk_text_view_set_accepts_tab(text_view: PGtkTextView; accepts_tab: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_set_accepts_tab'{$endif};
procedure gtk_text_view_set_bottom_margin(text_view: PGtkTextView; bottom_margin: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_set_bottom_margin'{$endif};
procedure gtk_text_view_set_buffer(text_view: PGtkTextView; buffer: PGtkTextBuffer); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_set_buffer'{$endif};
procedure gtk_text_view_set_cursor_visible(text_view: PGtkTextView; setting: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_set_cursor_visible'{$endif};
procedure gtk_text_view_set_editable(text_view: PGtkTextView; setting: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_set_editable'{$endif};
procedure gtk_text_view_set_extra_menu(text_view: PGtkTextView; model: PGMenuModel); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_set_extra_menu'{$endif};
procedure gtk_text_view_set_gutter(text_view: PGtkTextView; win: TGtkTextWindowType; widget: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_set_gutter'{$endif};
procedure gtk_text_view_set_indent(text_view: PGtkTextView; indent: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_set_indent'{$endif};
procedure gtk_text_view_set_input_hints(text_view: PGtkTextView; hints: TGtkInputHints); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_set_input_hints'{$endif};
procedure gtk_text_view_set_input_purpose(text_view: PGtkTextView; purpose: TGtkInputPurpose); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_set_input_purpose'{$endif};
procedure gtk_text_view_set_justification(text_view: PGtkTextView; justification: TGtkJustification); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_set_justification'{$endif};
procedure gtk_text_view_set_left_margin(text_view: PGtkTextView; left_margin: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_set_left_margin'{$endif};
procedure gtk_text_view_set_monospace(text_view: PGtkTextView; monospace: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_set_monospace'{$endif};
procedure gtk_text_view_set_overwrite(text_view: PGtkTextView; overwrite: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_set_overwrite'{$endif};
procedure gtk_text_view_set_pixels_above_lines(text_view: PGtkTextView; pixels_above_lines: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_set_pixels_above_lines'{$endif};
procedure gtk_text_view_set_pixels_below_lines(text_view: PGtkTextView; pixels_below_lines: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_set_pixels_below_lines'{$endif};
procedure gtk_text_view_set_pixels_inside_wrap(text_view: PGtkTextView; pixels_inside_wrap: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_set_pixels_inside_wrap'{$endif};
procedure gtk_text_view_set_right_margin(text_view: PGtkTextView; right_margin: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_set_right_margin'{$endif};
procedure gtk_text_view_set_tabs(text_view: PGtkTextView; tabs: PPangoTabArray); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_set_tabs'{$endif};
procedure gtk_text_view_set_top_margin(text_view: PGtkTextView; top_margin: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_set_top_margin'{$endif};
procedure gtk_text_view_set_wrap_mode(text_view: PGtkTextView; wrap_mode: TGtkWrapMode); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_set_wrap_mode'{$endif};
procedure gtk_text_view_window_to_buffer_coords(text_view: PGtkTextView; win: TGtkTextWindowType; window_x: gint; window_y: gint; buffer_x: Pgint; buffer_y: Pgint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_text_view_window_to_buffer_coords'{$endif};
procedure gtk_toggle_button_set_active(toggle_button: PGtkToggleButton; is_active: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_toggle_button_set_active'{$endif};
procedure gtk_toggle_button_set_group(toggle_button: PGtkToggleButton; group: PGtkToggleButton); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_toggle_button_set_group'{$endif};
procedure gtk_toggle_button_toggled(toggle_button: PGtkToggleButton); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_toggle_button_toggled'{$endif};
procedure gtk_tooltip_set_custom(tooltip: PGtkTooltip; custom_widget: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tooltip_set_custom'{$endif};
procedure gtk_tooltip_set_icon(tooltip: PGtkTooltip; paintable: PGdkPaintable); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tooltip_set_icon'{$endif};
procedure gtk_tooltip_set_icon_from_gicon(tooltip: PGtkTooltip; gicon: PGIcon); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tooltip_set_icon_from_gicon'{$endif};
procedure gtk_tooltip_set_icon_from_icon_name(tooltip: PGtkTooltip; icon_name: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tooltip_set_icon_from_icon_name'{$endif};
procedure gtk_tooltip_set_markup(tooltip: PGtkTooltip; markup: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tooltip_set_markup'{$endif};
procedure gtk_tooltip_set_text(tooltip: PGtkTooltip; text: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tooltip_set_text'{$endif};
procedure gtk_tooltip_set_tip_area(tooltip: PGtkTooltip; rect: PGdkRectangle); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tooltip_set_tip_area'{$endif};
procedure gtk_tree_expander_set_child(self: PGtkTreeExpander; child: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_expander_set_child'{$endif};
procedure gtk_tree_expander_set_indent_for_icon(self: PGtkTreeExpander; indent_for_icon: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_expander_set_indent_for_icon'{$endif};
procedure gtk_tree_expander_set_list_row(self: PGtkTreeExpander; list_row: PGtkTreeListRow); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_expander_set_list_row'{$endif};
procedure gtk_tree_iter_free(iter: PGtkTreeIter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_iter_free'{$endif};
procedure gtk_tree_list_model_set_autoexpand(self: PGtkTreeListModel; autoexpand: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_list_model_set_autoexpand'{$endif};
procedure gtk_tree_list_row_set_expanded(self: PGtkTreeListRow; expanded: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_list_row_set_expanded'{$endif};
procedure gtk_tree_list_row_sorter_set_sorter(self: PGtkTreeListRowSorter; sorter: PGtkSorter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_list_row_sorter_set_sorter'{$endif};
procedure gtk_tree_model_filter_clear_cache(filter: PGtkTreeModelFilter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_model_filter_clear_cache'{$endif};
procedure gtk_tree_model_filter_convert_iter_to_child_iter(filter: PGtkTreeModelFilter; child_iter: PGtkTreeIter; filter_iter: PGtkTreeIter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_model_filter_convert_iter_to_child_iter'{$endif};
procedure gtk_tree_model_filter_refilter(filter: PGtkTreeModelFilter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_model_filter_refilter'{$endif};
procedure gtk_tree_model_filter_set_modify_func(filter: PGtkTreeModelFilter; n_columns: gint; types: PGType; func: TGtkTreeModelFilterModifyFunc; data: gpointer; destroy_: TGDestroyNotify); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_model_filter_set_modify_func'{$endif};
procedure gtk_tree_model_filter_set_visible_column(filter: PGtkTreeModelFilter; column: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_model_filter_set_visible_column'{$endif};
procedure gtk_tree_model_filter_set_visible_func(filter: PGtkTreeModelFilter; func: TGtkTreeModelFilterVisibleFunc; data: gpointer; destroy_: TGDestroyNotify); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_model_filter_set_visible_func'{$endif};
procedure gtk_tree_model_foreach(model: PGtkTreeModel; func: TGtkTreeModelForeachFunc; user_data: gpointer); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_model_foreach'{$endif};
procedure gtk_tree_model_get(tree_model: PGtkTreeModel; iter: PGtkTreeIter; args: array of const); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_model_get'{$endif};
procedure gtk_tree_model_get_valist(tree_model: PGtkTreeModel; iter: PGtkTreeIter; var_args: Tva_list); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_model_get_valist'{$endif};
procedure gtk_tree_model_get_value(tree_model: PGtkTreeModel; iter: PGtkTreeIter; column: gint; value: PGValue); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_model_get_value'{$endif};
procedure gtk_tree_model_ref_node(tree_model: PGtkTreeModel; iter: PGtkTreeIter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_model_ref_node'{$endif};
procedure gtk_tree_model_row_changed(tree_model: PGtkTreeModel; path: PGtkTreePath; iter: PGtkTreeIter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_model_row_changed'{$endif};
procedure gtk_tree_model_row_deleted(tree_model: PGtkTreeModel; path: PGtkTreePath); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_model_row_deleted'{$endif};
procedure gtk_tree_model_row_has_child_toggled(tree_model: PGtkTreeModel; path: PGtkTreePath; iter: PGtkTreeIter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_model_row_has_child_toggled'{$endif};
procedure gtk_tree_model_row_inserted(tree_model: PGtkTreeModel; path: PGtkTreePath; iter: PGtkTreeIter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_model_row_inserted'{$endif};
procedure gtk_tree_model_rows_reordered(tree_model: PGtkTreeModel; path: PGtkTreePath; iter: PGtkTreeIter; new_order: Pgint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_model_rows_reordered'{$endif};
procedure gtk_tree_model_rows_reordered_with_length(tree_model: PGtkTreeModel; path: PGtkTreePath; iter: PGtkTreeIter; new_order: Pgint; length: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_model_rows_reordered_with_length'{$endif};
procedure gtk_tree_model_sort_clear_cache(tree_model_sort: PGtkTreeModelSort); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_model_sort_clear_cache'{$endif};
procedure gtk_tree_model_sort_convert_iter_to_child_iter(tree_model_sort: PGtkTreeModelSort; child_iter: PGtkTreeIter; sorted_iter: PGtkTreeIter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_model_sort_convert_iter_to_child_iter'{$endif};
procedure gtk_tree_model_sort_reset_default_sort_func(tree_model_sort: PGtkTreeModelSort); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_model_sort_reset_default_sort_func'{$endif};
procedure gtk_tree_model_unref_node(tree_model: PGtkTreeModel; iter: PGtkTreeIter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_model_unref_node'{$endif};
procedure gtk_tree_path_append_index(path: PGtkTreePath; index_: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_path_append_index'{$endif};
procedure gtk_tree_path_down(path: PGtkTreePath); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_path_down'{$endif};
procedure gtk_tree_path_free(path: PGtkTreePath); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_path_free'{$endif};
procedure gtk_tree_path_next(path: PGtkTreePath); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_path_next'{$endif};
procedure gtk_tree_path_prepend_index(path: PGtkTreePath; index_: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_path_prepend_index'{$endif};
procedure gtk_tree_row_reference_deleted(proxy: PGObject; path: PGtkTreePath); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_row_reference_deleted'{$endif};
procedure gtk_tree_row_reference_free(reference: PGtkTreeRowReference); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_row_reference_free'{$endif};
procedure gtk_tree_row_reference_inserted(proxy: PGObject; path: PGtkTreePath); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_row_reference_inserted'{$endif};
procedure gtk_tree_row_reference_reordered(proxy: PGObject; path: PGtkTreePath; iter: PGtkTreeIter; new_order: Pgint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_row_reference_reordered'{$endif};
procedure gtk_tree_selection_select_all(selection: PGtkTreeSelection); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_selection_select_all'{$endif};
procedure gtk_tree_selection_select_iter(selection: PGtkTreeSelection; iter: PGtkTreeIter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_selection_select_iter'{$endif};
procedure gtk_tree_selection_select_path(selection: PGtkTreeSelection; path: PGtkTreePath); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_selection_select_path'{$endif};
procedure gtk_tree_selection_select_range(selection: PGtkTreeSelection; start_path: PGtkTreePath; end_path: PGtkTreePath); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_selection_select_range'{$endif};
procedure gtk_tree_selection_selected_foreach(selection: PGtkTreeSelection; func: TGtkTreeSelectionForeachFunc; data: gpointer); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_selection_selected_foreach'{$endif};
procedure gtk_tree_selection_set_mode(selection: PGtkTreeSelection; type_: TGtkSelectionMode); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_selection_set_mode'{$endif};
procedure gtk_tree_selection_set_select_function(selection: PGtkTreeSelection; func: TGtkTreeSelectionFunc; data: gpointer; destroy_: TGDestroyNotify); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_selection_set_select_function'{$endif};
procedure gtk_tree_selection_unselect_all(selection: PGtkTreeSelection); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_selection_unselect_all'{$endif};
procedure gtk_tree_selection_unselect_iter(selection: PGtkTreeSelection; iter: PGtkTreeIter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_selection_unselect_iter'{$endif};
procedure gtk_tree_selection_unselect_path(selection: PGtkTreeSelection; path: PGtkTreePath); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_selection_unselect_path'{$endif};
procedure gtk_tree_selection_unselect_range(selection: PGtkTreeSelection; start_path: PGtkTreePath; end_path: PGtkTreePath); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_selection_unselect_range'{$endif};
procedure gtk_tree_sortable_set_default_sort_func(sortable: PGtkTreeSortable; sort_func: TGtkTreeIterCompareFunc; user_data: gpointer; destroy_: TGDestroyNotify); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_sortable_set_default_sort_func'{$endif};
procedure gtk_tree_sortable_set_sort_column_id(sortable: PGtkTreeSortable; sort_column_id: gint; order: TGtkSortType); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_sortable_set_sort_column_id'{$endif};
procedure gtk_tree_sortable_set_sort_func(sortable: PGtkTreeSortable; sort_column_id: gint; sort_func: TGtkTreeIterCompareFunc; user_data: gpointer; destroy_: TGDestroyNotify); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_sortable_set_sort_func'{$endif};
procedure gtk_tree_sortable_sort_column_changed(sortable: PGtkTreeSortable); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_sortable_sort_column_changed'{$endif};
procedure gtk_tree_store_append(tree_store: PGtkTreeStore; iter: PGtkTreeIter; parent: PGtkTreeIter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_store_append'{$endif};
procedure gtk_tree_store_clear(tree_store: PGtkTreeStore); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_store_clear'{$endif};
procedure gtk_tree_store_insert(tree_store: PGtkTreeStore; iter: PGtkTreeIter; parent: PGtkTreeIter; position: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_store_insert'{$endif};
procedure gtk_tree_store_insert_after(tree_store: PGtkTreeStore; iter: PGtkTreeIter; parent: PGtkTreeIter; sibling: PGtkTreeIter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_store_insert_after'{$endif};
procedure gtk_tree_store_insert_before(tree_store: PGtkTreeStore; iter: PGtkTreeIter; parent: PGtkTreeIter; sibling: PGtkTreeIter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_store_insert_before'{$endif};
procedure gtk_tree_store_insert_with_values(tree_store: PGtkTreeStore; iter: PGtkTreeIter; parent: PGtkTreeIter; position: gint; args: array of const); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_store_insert_with_values'{$endif};
procedure gtk_tree_store_insert_with_valuesv(tree_store: PGtkTreeStore; iter: PGtkTreeIter; parent: PGtkTreeIter; position: gint; columns: Pgint; values: PGValue; n_values: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_store_insert_with_valuesv'{$endif};
procedure gtk_tree_store_move_after(tree_store: PGtkTreeStore; iter: PGtkTreeIter; position: PGtkTreeIter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_store_move_after'{$endif};
procedure gtk_tree_store_move_before(tree_store: PGtkTreeStore; iter: PGtkTreeIter; position: PGtkTreeIter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_store_move_before'{$endif};
procedure gtk_tree_store_prepend(tree_store: PGtkTreeStore; iter: PGtkTreeIter; parent: PGtkTreeIter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_store_prepend'{$endif};
procedure gtk_tree_store_reorder(tree_store: PGtkTreeStore; parent: PGtkTreeIter; new_order: Pgint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_store_reorder'{$endif};
procedure gtk_tree_store_set(tree_store: PGtkTreeStore; iter: PGtkTreeIter; args: array of const); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_store_set'{$endif};
procedure gtk_tree_store_set_column_types(tree_store: PGtkTreeStore; n_columns: gint; types: PGType); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_store_set_column_types'{$endif};
procedure gtk_tree_store_set_valist(tree_store: PGtkTreeStore; iter: PGtkTreeIter; var_args: Tva_list); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_store_set_valist'{$endif};
procedure gtk_tree_store_set_value(tree_store: PGtkTreeStore; iter: PGtkTreeIter; column: gint; value: PGValue); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_store_set_value'{$endif};
procedure gtk_tree_store_set_valuesv(tree_store: PGtkTreeStore; iter: PGtkTreeIter; columns: Pgint; values: PGValue; n_values: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_store_set_valuesv'{$endif};
procedure gtk_tree_store_swap(tree_store: PGtkTreeStore; a: PGtkTreeIter; b: PGtkTreeIter); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_store_swap'{$endif};
procedure gtk_tree_view_collapse_all(tree_view: PGtkTreeView); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_collapse_all'{$endif};
procedure gtk_tree_view_column_add_attribute(tree_column: PGtkTreeViewColumn; cell_renderer: PGtkCellRenderer; attribute: Pgchar; column: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_column_add_attribute'{$endif};
procedure gtk_tree_view_column_cell_get_size(tree_column: PGtkTreeViewColumn; x_offset: Pgint; y_offset: Pgint; width: Pgint; height: Pgint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_column_cell_get_size'{$endif};
procedure gtk_tree_view_column_cell_set_cell_data(tree_column: PGtkTreeViewColumn; tree_model: PGtkTreeModel; iter: PGtkTreeIter; is_expander: gboolean; is_expanded: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_column_cell_set_cell_data'{$endif};
procedure gtk_tree_view_column_clear(tree_column: PGtkTreeViewColumn); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_column_clear'{$endif};
procedure gtk_tree_view_column_clear_attributes(tree_column: PGtkTreeViewColumn; cell_renderer: PGtkCellRenderer); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_column_clear_attributes'{$endif};
procedure gtk_tree_view_column_clicked(tree_column: PGtkTreeViewColumn); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_column_clicked'{$endif};
procedure gtk_tree_view_column_focus_cell(tree_column: PGtkTreeViewColumn; cell: PGtkCellRenderer); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_column_focus_cell'{$endif};
procedure gtk_tree_view_column_pack_end(tree_column: PGtkTreeViewColumn; cell: PGtkCellRenderer; expand: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_column_pack_end'{$endif};
procedure gtk_tree_view_column_pack_start(tree_column: PGtkTreeViewColumn; cell: PGtkCellRenderer; expand: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_column_pack_start'{$endif};
procedure gtk_tree_view_column_queue_resize(tree_column: PGtkTreeViewColumn); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_column_queue_resize'{$endif};
procedure gtk_tree_view_column_set_alignment(tree_column: PGtkTreeViewColumn; xalign: gfloat); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_column_set_alignment'{$endif};
procedure gtk_tree_view_column_set_attributes(tree_column: PGtkTreeViewColumn; cell_renderer: PGtkCellRenderer; args: array of const); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_column_set_attributes'{$endif};
procedure gtk_tree_view_column_set_cell_data_func(tree_column: PGtkTreeViewColumn; cell_renderer: PGtkCellRenderer; func: TGtkTreeCellDataFunc; func_data: gpointer; destroy_: TGDestroyNotify); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_column_set_cell_data_func'{$endif};
procedure gtk_tree_view_column_set_clickable(tree_column: PGtkTreeViewColumn; clickable: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_column_set_clickable'{$endif};
procedure gtk_tree_view_column_set_expand(tree_column: PGtkTreeViewColumn; expand: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_column_set_expand'{$endif};
procedure gtk_tree_view_column_set_fixed_width(tree_column: PGtkTreeViewColumn; fixed_width: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_column_set_fixed_width'{$endif};
procedure gtk_tree_view_column_set_max_width(tree_column: PGtkTreeViewColumn; max_width: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_column_set_max_width'{$endif};
procedure gtk_tree_view_column_set_min_width(tree_column: PGtkTreeViewColumn; min_width: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_column_set_min_width'{$endif};
procedure gtk_tree_view_column_set_reorderable(tree_column: PGtkTreeViewColumn; reorderable: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_column_set_reorderable'{$endif};
procedure gtk_tree_view_column_set_resizable(tree_column: PGtkTreeViewColumn; resizable: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_column_set_resizable'{$endif};
procedure gtk_tree_view_column_set_sizing(tree_column: PGtkTreeViewColumn; type_: TGtkTreeViewColumnSizing); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_column_set_sizing'{$endif};
procedure gtk_tree_view_column_set_sort_column_id(tree_column: PGtkTreeViewColumn; sort_column_id: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_column_set_sort_column_id'{$endif};
procedure gtk_tree_view_column_set_sort_indicator(tree_column: PGtkTreeViewColumn; setting: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_column_set_sort_indicator'{$endif};
procedure gtk_tree_view_column_set_sort_order(tree_column: PGtkTreeViewColumn; order: TGtkSortType); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_column_set_sort_order'{$endif};
procedure gtk_tree_view_column_set_spacing(tree_column: PGtkTreeViewColumn; spacing: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_column_set_spacing'{$endif};
procedure gtk_tree_view_column_set_title(tree_column: PGtkTreeViewColumn; title: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_column_set_title'{$endif};
procedure gtk_tree_view_column_set_visible(tree_column: PGtkTreeViewColumn; visible: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_column_set_visible'{$endif};
procedure gtk_tree_view_column_set_widget(tree_column: PGtkTreeViewColumn; widget: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_column_set_widget'{$endif};
procedure gtk_tree_view_columns_autosize(tree_view: PGtkTreeView); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_columns_autosize'{$endif};
procedure gtk_tree_view_convert_bin_window_to_tree_coords(tree_view: PGtkTreeView; bx: gint; by: gint; tx: Pgint; ty: Pgint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_convert_bin_window_to_tree_coords'{$endif};
procedure gtk_tree_view_convert_bin_window_to_widget_coords(tree_view: PGtkTreeView; bx: gint; by: gint; wx: Pgint; wy: Pgint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_convert_bin_window_to_widget_coords'{$endif};
procedure gtk_tree_view_convert_tree_to_bin_window_coords(tree_view: PGtkTreeView; tx: gint; ty: gint; bx: Pgint; by: Pgint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_convert_tree_to_bin_window_coords'{$endif};
procedure gtk_tree_view_convert_tree_to_widget_coords(tree_view: PGtkTreeView; tx: gint; ty: gint; wx: Pgint; wy: Pgint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_convert_tree_to_widget_coords'{$endif};
procedure gtk_tree_view_convert_widget_to_bin_window_coords(tree_view: PGtkTreeView; wx: gint; wy: gint; bx: Pgint; by: Pgint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_convert_widget_to_bin_window_coords'{$endif};
procedure gtk_tree_view_convert_widget_to_tree_coords(tree_view: PGtkTreeView; wx: gint; wy: gint; tx: Pgint; ty: Pgint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_convert_widget_to_tree_coords'{$endif};
procedure gtk_tree_view_enable_model_drag_dest(tree_view: PGtkTreeView; formats: PGdkContentFormats; actions: TGdkDragAction); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_enable_model_drag_dest'{$endif};
procedure gtk_tree_view_enable_model_drag_source(tree_view: PGtkTreeView; start_button_mask: TGdkModifierType; formats: PGdkContentFormats; actions: TGdkDragAction); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_enable_model_drag_source'{$endif};
procedure gtk_tree_view_expand_all(tree_view: PGtkTreeView); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_expand_all'{$endif};
procedure gtk_tree_view_expand_to_path(tree_view: PGtkTreeView; path: PGtkTreePath); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_expand_to_path'{$endif};
procedure gtk_tree_view_get_background_area(tree_view: PGtkTreeView; path: PGtkTreePath; column: PGtkTreeViewColumn; rect: PGdkRectangle); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_get_background_area'{$endif};
procedure gtk_tree_view_get_cell_area(tree_view: PGtkTreeView; path: PGtkTreePath; column: PGtkTreeViewColumn; rect: PGdkRectangle); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_get_cell_area'{$endif};
procedure gtk_tree_view_get_cursor(tree_view: PGtkTreeView; path: PPGtkTreePath; focus_column: PPGtkTreeViewColumn); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_get_cursor'{$endif};
procedure gtk_tree_view_get_drag_dest_row(tree_view: PGtkTreeView; path: PPGtkTreePath; pos: PGtkTreeViewDropPosition); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_get_drag_dest_row'{$endif};
procedure gtk_tree_view_get_visible_rect(tree_view: PGtkTreeView; visible_rect: PGdkRectangle); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_get_visible_rect'{$endif};
procedure gtk_tree_view_map_expanded_rows(tree_view: PGtkTreeView; func: TGtkTreeViewMappingFunc; data: gpointer); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_map_expanded_rows'{$endif};
procedure gtk_tree_view_move_column_after(tree_view: PGtkTreeView; column: PGtkTreeViewColumn; base_column: PGtkTreeViewColumn); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_move_column_after'{$endif};
procedure gtk_tree_view_row_activated(tree_view: PGtkTreeView; path: PGtkTreePath; column: PGtkTreeViewColumn); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_row_activated'{$endif};
procedure gtk_tree_view_scroll_to_cell(tree_view: PGtkTreeView; path: PGtkTreePath; column: PGtkTreeViewColumn; use_align: gboolean; row_align: gfloat; col_align: gfloat); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_scroll_to_cell'{$endif};
procedure gtk_tree_view_scroll_to_point(tree_view: PGtkTreeView; tree_x: gint; tree_y: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_scroll_to_point'{$endif};
procedure gtk_tree_view_set_activate_on_single_click(tree_view: PGtkTreeView; single: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_set_activate_on_single_click'{$endif};
procedure gtk_tree_view_set_column_drag_function(tree_view: PGtkTreeView; func: TGtkTreeViewColumnDropFunc; user_data: gpointer; destroy_: TGDestroyNotify); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_set_column_drag_function'{$endif};
procedure gtk_tree_view_set_cursor(tree_view: PGtkTreeView; path: PGtkTreePath; focus_column: PGtkTreeViewColumn; start_editing: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_set_cursor'{$endif};
procedure gtk_tree_view_set_cursor_on_cell(tree_view: PGtkTreeView; path: PGtkTreePath; focus_column: PGtkTreeViewColumn; focus_cell: PGtkCellRenderer; start_editing: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_set_cursor_on_cell'{$endif};
procedure gtk_tree_view_set_drag_dest_row(tree_view: PGtkTreeView; path: PGtkTreePath; pos: TGtkTreeViewDropPosition); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_set_drag_dest_row'{$endif};
procedure gtk_tree_view_set_enable_search(tree_view: PGtkTreeView; enable_search: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_set_enable_search'{$endif};
procedure gtk_tree_view_set_enable_tree_lines(tree_view: PGtkTreeView; enabled: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_set_enable_tree_lines'{$endif};
procedure gtk_tree_view_set_expander_column(tree_view: PGtkTreeView; column: PGtkTreeViewColumn); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_set_expander_column'{$endif};
procedure gtk_tree_view_set_fixed_height_mode(tree_view: PGtkTreeView; enable: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_set_fixed_height_mode'{$endif};
procedure gtk_tree_view_set_grid_lines(tree_view: PGtkTreeView; grid_lines: TGtkTreeViewGridLines); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_set_grid_lines'{$endif};
procedure gtk_tree_view_set_headers_clickable(tree_view: PGtkTreeView; setting: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_set_headers_clickable'{$endif};
procedure gtk_tree_view_set_headers_visible(tree_view: PGtkTreeView; headers_visible: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_set_headers_visible'{$endif};
procedure gtk_tree_view_set_hover_expand(tree_view: PGtkTreeView; expand: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_set_hover_expand'{$endif};
procedure gtk_tree_view_set_hover_selection(tree_view: PGtkTreeView; hover: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_set_hover_selection'{$endif};
procedure gtk_tree_view_set_level_indentation(tree_view: PGtkTreeView; indentation: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_set_level_indentation'{$endif};
procedure gtk_tree_view_set_model(tree_view: PGtkTreeView; model: PGtkTreeModel); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_set_model'{$endif};
procedure gtk_tree_view_set_reorderable(tree_view: PGtkTreeView; reorderable: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_set_reorderable'{$endif};
procedure gtk_tree_view_set_row_separator_func(tree_view: PGtkTreeView; func: TGtkTreeViewRowSeparatorFunc; data: gpointer; destroy_: TGDestroyNotify); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_set_row_separator_func'{$endif};
procedure gtk_tree_view_set_rubber_banding(tree_view: PGtkTreeView; enable: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_set_rubber_banding'{$endif};
procedure gtk_tree_view_set_search_column(tree_view: PGtkTreeView; column: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_set_search_column'{$endif};
procedure gtk_tree_view_set_search_entry(tree_view: PGtkTreeView; entry: PGtkEditable); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_set_search_entry'{$endif};
procedure gtk_tree_view_set_search_equal_func(tree_view: PGtkTreeView; search_equal_func: TGtkTreeViewSearchEqualFunc; search_user_data: gpointer; search_destroy: TGDestroyNotify); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_set_search_equal_func'{$endif};
procedure gtk_tree_view_set_show_expanders(tree_view: PGtkTreeView; enabled: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_set_show_expanders'{$endif};
procedure gtk_tree_view_set_tooltip_cell(tree_view: PGtkTreeView; tooltip: PGtkTooltip; path: PGtkTreePath; column: PGtkTreeViewColumn; cell: PGtkCellRenderer); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_set_tooltip_cell'{$endif};
procedure gtk_tree_view_set_tooltip_column(tree_view: PGtkTreeView; column: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_set_tooltip_column'{$endif};
procedure gtk_tree_view_set_tooltip_row(tree_view: PGtkTreeView; tooltip: PGtkTooltip; path: PGtkTreePath); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_set_tooltip_row'{$endif};
procedure gtk_tree_view_unset_rows_drag_dest(tree_view: PGtkTreeView); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_unset_rows_drag_dest'{$endif};
procedure gtk_tree_view_unset_rows_drag_source(tree_view: PGtkTreeView); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_tree_view_unset_rows_drag_source'{$endif};
procedure gtk_value_set_expression(value: PGValue; expression: PGtkExpression); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_value_set_expression'{$endif};
procedure gtk_value_take_expression(value: PGValue; expression: PGtkExpression); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_value_take_expression'{$endif};
procedure gtk_video_set_autoplay(self: PGtkVideo; autoplay: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_video_set_autoplay'{$endif};
procedure gtk_video_set_file(self: PGtkVideo; file_: PGFile); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_video_set_file'{$endif};
procedure gtk_video_set_filename(self: PGtkVideo; filename: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_video_set_filename'{$endif};
procedure gtk_video_set_loop(self: PGtkVideo; loop: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_video_set_loop'{$endif};
procedure gtk_video_set_media_stream(self: PGtkVideo; stream: PGtkMediaStream); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_video_set_media_stream'{$endif};
procedure gtk_video_set_resource(self: PGtkVideo; resource_path: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_video_set_resource'{$endif};
procedure gtk_viewport_set_child(viewport: PGtkViewport; child: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_viewport_set_child'{$endif};
procedure gtk_viewport_set_scroll_to_focus(viewport: PGtkViewport; scroll_to_focus: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_viewport_set_scroll_to_focus'{$endif};
procedure gtk_widget_action_set_enabled(widget: PGtkWidget; action_name: Pgchar; enabled: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_action_set_enabled'{$endif};
procedure gtk_widget_activate_default(widget: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_activate_default'{$endif};
procedure gtk_widget_add_controller(widget: PGtkWidget; controller: PGtkEventController); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_add_controller'{$endif};
procedure gtk_widget_add_css_class(widget: PGtkWidget; css_class: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_add_css_class'{$endif};
procedure gtk_widget_add_mnemonic_label(widget: PGtkWidget; label_: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_add_mnemonic_label'{$endif};
procedure gtk_widget_allocate(widget: PGtkWidget; width: gint; height: gint; baseline: gint; transform: PGskTransform); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_allocate'{$endif};
procedure gtk_widget_class_add_binding(widget_class: PGtkWidgetClass; keyval: guint; mods: TGdkModifierType; callback: TGtkShortcutFunc; format_string: Pgchar; args: array of const); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_class_add_binding'{$endif};
procedure gtk_widget_class_add_binding_action(widget_class: PGtkWidgetClass; keyval: guint; mods: TGdkModifierType; action_name: Pgchar; format_string: Pgchar; args: array of const); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_class_add_binding_action'{$endif};
procedure gtk_widget_class_add_binding_signal(widget_class: PGtkWidgetClass; keyval: guint; mods: TGdkModifierType; signal: Pgchar; format_string: Pgchar; args: array of const); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_class_add_binding_signal'{$endif};
procedure gtk_widget_class_add_shortcut(widget_class: PGtkWidgetClass; shortcut: PGtkShortcut); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_class_add_shortcut'{$endif};
procedure gtk_widget_class_bind_template_callback_full(widget_class: PGtkWidgetClass; callback_name: Pgchar; callback_symbol: TGCallback); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_class_bind_template_callback_full'{$endif};
procedure gtk_widget_class_bind_template_child_full(widget_class: PGtkWidgetClass; name: Pgchar; internal_child: gboolean; struct_offset: gssize); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_class_bind_template_child_full'{$endif};
procedure gtk_widget_class_install_action(widget_class: PGtkWidgetClass; action_name: Pgchar; parameter_type: Pgchar; activate: TGtkWidgetActionActivateFunc); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_class_install_action'{$endif};
procedure gtk_widget_class_install_property_action(widget_class: PGtkWidgetClass; action_name: Pgchar; property_name: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_class_install_property_action'{$endif};
procedure gtk_widget_class_set_accessible_role(widget_class: PGtkWidgetClass; accessible_role: TGtkAccessibleRole); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_class_set_accessible_role'{$endif};
procedure gtk_widget_class_set_activate_signal(widget_class: PGtkWidgetClass; signal_id: guint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_class_set_activate_signal'{$endif};
procedure gtk_widget_class_set_activate_signal_from_name(widget_class: PGtkWidgetClass; signal_name: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_class_set_activate_signal_from_name'{$endif};
procedure gtk_widget_class_set_css_name(widget_class: PGtkWidgetClass; name: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_class_set_css_name'{$endif};
procedure gtk_widget_class_set_layout_manager_type(widget_class: PGtkWidgetClass; type_: TGType); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_class_set_layout_manager_type'{$endif};
procedure gtk_widget_class_set_template(widget_class: PGtkWidgetClass; template_bytes: PGBytes); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_class_set_template'{$endif};
procedure gtk_widget_class_set_template_from_resource(widget_class: PGtkWidgetClass; resource_name: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_class_set_template_from_resource'{$endif};
procedure gtk_widget_class_set_template_scope(widget_class: PGtkWidgetClass; scope: PGtkBuilderScope); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_class_set_template_scope'{$endif};
procedure gtk_widget_error_bell(widget: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_error_bell'{$endif};
procedure gtk_widget_get_allocation(widget: PGtkWidget; allocation: PGtkAllocation); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_allocation'{$endif};
procedure gtk_widget_get_preferred_size(widget: PGtkWidget; minimum_size: PGtkRequisition; natural_size: PGtkRequisition); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_preferred_size'{$endif};
procedure gtk_widget_get_size_request(widget: PGtkWidget; width: Pgint; height: Pgint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_get_size_request'{$endif};
procedure gtk_widget_hide(widget: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_hide'{$endif};
procedure gtk_widget_init_template(widget: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_init_template'{$endif};
procedure gtk_widget_insert_action_group(widget: PGtkWidget; name: Pgchar; group: PGActionGroup); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_insert_action_group'{$endif};
procedure gtk_widget_insert_after(widget: PGtkWidget; parent: PGtkWidget; previous_sibling: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_insert_after'{$endif};
procedure gtk_widget_insert_before(widget: PGtkWidget; parent: PGtkWidget; next_sibling: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_insert_before'{$endif};
procedure gtk_widget_map(widget: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_map'{$endif};
procedure gtk_widget_measure(widget: PGtkWidget; orientation: TGtkOrientation; for_size: gint; minimum: Pgint; natural: Pgint; minimum_baseline: Pgint; natural_baseline: Pgint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_measure'{$endif};
procedure gtk_widget_paintable_set_widget(self: PGtkWidgetPaintable; widget: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_paintable_set_widget'{$endif};
procedure gtk_widget_queue_allocate(widget: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_queue_allocate'{$endif};
procedure gtk_widget_queue_draw(widget: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_queue_draw'{$endif};
procedure gtk_widget_queue_resize(widget: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_queue_resize'{$endif};
procedure gtk_widget_realize(widget: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_realize'{$endif};
procedure gtk_widget_remove_controller(widget: PGtkWidget; controller: PGtkEventController); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_remove_controller'{$endif};
procedure gtk_widget_remove_css_class(widget: PGtkWidget; css_class: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_remove_css_class'{$endif};
procedure gtk_widget_remove_mnemonic_label(widget: PGtkWidget; label_: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_remove_mnemonic_label'{$endif};
procedure gtk_widget_remove_tick_callback(widget: PGtkWidget; id: guint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_remove_tick_callback'{$endif};
procedure gtk_widget_set_can_focus(widget: PGtkWidget; can_focus: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_set_can_focus'{$endif};
procedure gtk_widget_set_can_target(widget: PGtkWidget; can_target: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_set_can_target'{$endif};
procedure gtk_widget_set_child_visible(widget: PGtkWidget; child_visible: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_set_child_visible'{$endif};
procedure gtk_widget_set_css_classes(widget: PGtkWidget; classes: PPgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_set_css_classes'{$endif};
procedure gtk_widget_set_cursor(widget: PGtkWidget; cursor: PGdkCursor); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_set_cursor'{$endif};
procedure gtk_widget_set_cursor_from_name(widget: PGtkWidget; name: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_set_cursor_from_name'{$endif};
procedure gtk_widget_set_default_direction(dir: TGtkTextDirection); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_set_default_direction'{$endif};
procedure gtk_widget_set_direction(widget: PGtkWidget; dir: TGtkTextDirection); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_set_direction'{$endif};
procedure gtk_widget_set_focus_child(widget: PGtkWidget; child: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_set_focus_child'{$endif};
procedure gtk_widget_set_focus_on_click(widget: PGtkWidget; focus_on_click: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_set_focus_on_click'{$endif};
procedure gtk_widget_set_focusable(widget: PGtkWidget; focusable: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_set_focusable'{$endif};
procedure gtk_widget_set_font_map(widget: PGtkWidget; font_map: PPangoFontMap); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_set_font_map'{$endif};
procedure gtk_widget_set_font_options(widget: PGtkWidget; options: Pcairo_font_options_t); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_set_font_options'{$endif};
procedure gtk_widget_set_halign(widget: PGtkWidget; align: TGtkAlign); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_set_halign'{$endif};
procedure gtk_widget_set_has_tooltip(widget: PGtkWidget; has_tooltip: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_set_has_tooltip'{$endif};
procedure gtk_widget_set_hexpand(widget: PGtkWidget; expand: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_set_hexpand'{$endif};
procedure gtk_widget_set_hexpand_set(widget: PGtkWidget; set_: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_set_hexpand_set'{$endif};
procedure gtk_widget_set_layout_manager(widget: PGtkWidget; layout_manager: PGtkLayoutManager); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_set_layout_manager'{$endif};
procedure gtk_widget_set_margin_bottom(widget: PGtkWidget; margin: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_set_margin_bottom'{$endif};
procedure gtk_widget_set_margin_end(widget: PGtkWidget; margin: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_set_margin_end'{$endif};
procedure gtk_widget_set_margin_start(widget: PGtkWidget; margin: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_set_margin_start'{$endif};
procedure gtk_widget_set_margin_top(widget: PGtkWidget; margin: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_set_margin_top'{$endif};
procedure gtk_widget_set_name(widget: PGtkWidget; name: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_set_name'{$endif};
procedure gtk_widget_set_opacity(widget: PGtkWidget; opacity: gdouble); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_set_opacity'{$endif};
procedure gtk_widget_set_overflow(widget: PGtkWidget; overflow: TGtkOverflow); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_set_overflow'{$endif};
procedure gtk_widget_set_parent(widget: PGtkWidget; parent: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_set_parent'{$endif};
procedure gtk_widget_set_receives_default(widget: PGtkWidget; receives_default: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_set_receives_default'{$endif};
procedure gtk_widget_set_sensitive(widget: PGtkWidget; sensitive: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_set_sensitive'{$endif};
procedure gtk_widget_set_size_request(widget: PGtkWidget; width: gint; height: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_set_size_request'{$endif};
procedure gtk_widget_set_state_flags(widget: PGtkWidget; flags: TGtkStateFlags; clear: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_set_state_flags'{$endif};
procedure gtk_widget_set_tooltip_markup(widget: PGtkWidget; markup: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_set_tooltip_markup'{$endif};
procedure gtk_widget_set_tooltip_text(widget: PGtkWidget; text: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_set_tooltip_text'{$endif};
procedure gtk_widget_set_valign(widget: PGtkWidget; align: TGtkAlign); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_set_valign'{$endif};
procedure gtk_widget_set_vexpand(widget: PGtkWidget; expand: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_set_vexpand'{$endif};
procedure gtk_widget_set_vexpand_set(widget: PGtkWidget; set_: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_set_vexpand_set'{$endif};
procedure gtk_widget_set_visible(widget: PGtkWidget; visible: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_set_visible'{$endif};
procedure gtk_widget_show(widget: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_show'{$endif};
procedure gtk_widget_size_allocate(widget: PGtkWidget; allocation: PGtkAllocation; baseline: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_size_allocate'{$endif};
procedure gtk_widget_snapshot_child(widget: PGtkWidget; child: PGtkWidget; snapshot: PGtkSnapshot); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_snapshot_child'{$endif};
procedure gtk_widget_trigger_tooltip_query(widget: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_trigger_tooltip_query'{$endif};
procedure gtk_widget_unmap(widget: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_unmap'{$endif};
procedure gtk_widget_unparent(widget: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_unparent'{$endif};
procedure gtk_widget_unrealize(widget: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_unrealize'{$endif};
procedure gtk_widget_unset_state_flags(widget: PGtkWidget; flags: TGtkStateFlags); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_widget_unset_state_flags'{$endif};
procedure gtk_window_close(window: PGtkWindow); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_close'{$endif};
procedure gtk_window_controls_set_decoration_layout(self: PGtkWindowControls; layout: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_controls_set_decoration_layout'{$endif};
procedure gtk_window_controls_set_side(self: PGtkWindowControls; side: TGtkPackType); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_controls_set_side'{$endif};
procedure gtk_window_destroy(window: PGtkWindow); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_destroy'{$endif};
procedure gtk_window_fullscreen(window: PGtkWindow); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_fullscreen'{$endif};
procedure gtk_window_fullscreen_on_monitor(window: PGtkWindow; monitor: PGdkMonitor); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_fullscreen_on_monitor'{$endif};
procedure gtk_window_get_default_size(window: PGtkWindow; width: Pgint; height: Pgint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_get_default_size'{$endif};
procedure gtk_window_group_add_window(window_group: PGtkWindowGroup; window: PGtkWindow); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_group_add_window'{$endif};
procedure gtk_window_group_remove_window(window_group: PGtkWindowGroup; window: PGtkWindow); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_group_remove_window'{$endif};
procedure gtk_window_handle_set_child(self: PGtkWindowHandle; child: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_handle_set_child'{$endif};
procedure gtk_window_maximize(window: PGtkWindow); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_maximize'{$endif};
procedure gtk_window_minimize(window: PGtkWindow); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_minimize'{$endif};
procedure gtk_window_present(window: PGtkWindow); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_present'{$endif};
procedure gtk_window_present_with_time(window: PGtkWindow; timestamp: guint32); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_present_with_time'{$endif};
procedure gtk_window_set_application(window: PGtkWindow; application: PGtkApplication); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_set_application'{$endif};
procedure gtk_window_set_auto_startup_notification(setting: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_set_auto_startup_notification'{$endif};
procedure gtk_window_set_child(window: PGtkWindow; child: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_set_child'{$endif};
procedure gtk_window_set_decorated(window: PGtkWindow; setting: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_set_decorated'{$endif};
procedure gtk_window_set_default_icon_name(name: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_set_default_icon_name'{$endif};
procedure gtk_window_set_default_size(window: PGtkWindow; width: gint; height: gint); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_set_default_size'{$endif};
procedure gtk_window_set_default_widget(window: PGtkWindow; default_widget: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_set_default_widget'{$endif};
procedure gtk_window_set_deletable(window: PGtkWindow; setting: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_set_deletable'{$endif};
procedure gtk_window_set_destroy_with_parent(window: PGtkWindow; setting: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_set_destroy_with_parent'{$endif};
procedure gtk_window_set_display(window: PGtkWindow; display: PGdkDisplay); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_set_display'{$endif};
procedure gtk_window_set_focus(window: PGtkWindow; focus: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_set_focus'{$endif};
procedure gtk_window_set_focus_visible(window: PGtkWindow; setting: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_set_focus_visible'{$endif};
procedure gtk_window_set_handle_menubar_accel(window: PGtkWindow; handle_menubar_accel: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_set_handle_menubar_accel'{$endif};
procedure gtk_window_set_hide_on_close(window: PGtkWindow; setting: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_set_hide_on_close'{$endif};
procedure gtk_window_set_icon_name(window: PGtkWindow; name: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_set_icon_name'{$endif};
procedure gtk_window_set_interactive_debugging(enable: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_set_interactive_debugging'{$endif};
procedure gtk_window_set_mnemonics_visible(window: PGtkWindow; setting: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_set_mnemonics_visible'{$endif};
procedure gtk_window_set_modal(window: PGtkWindow; modal: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_set_modal'{$endif};
procedure gtk_window_set_resizable(window: PGtkWindow; resizable: gboolean); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_set_resizable'{$endif};
procedure gtk_window_set_startup_id(window: PGtkWindow; startup_id: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_set_startup_id'{$endif};
procedure gtk_window_set_title(window: PGtkWindow; title: Pgchar); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_set_title'{$endif};
procedure gtk_window_set_titlebar(window: PGtkWindow; titlebar: PGtkWidget); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_set_titlebar'{$endif};
procedure gtk_window_set_transient_for(window: PGtkWindow; parent: PGtkWindow); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_set_transient_for'{$endif};
procedure gtk_window_unfullscreen(window: PGtkWindow); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_unfullscreen'{$endif};
procedure gtk_window_unmaximize(window: PGtkWindow); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_unmaximize'{$endif};
procedure gtk_window_unminimize(window: PGtkWindow); cdecl; external {$ifdef Mswindows}Gtk4_library  name 'gtk_window_unminimize'{$endif};
implementation
function TGtkATContext.create(accessible_role: TGtkAccessibleRole; accessible: PGtkAccessible; display: PGdkDisplay): PGtkATContext; cdecl;
begin
  Result := Gtk4.gtk_at_context_create(accessible_role, accessible, display);
end;

function TGtkATContext.get_accessible: PGtkAccessible; cdecl;
begin
  Result := Gtk4.gtk_at_context_get_accessible(@self);
end;

function TGtkATContext.get_accessible_role: TGtkAccessibleRole; cdecl;
begin
  Result := Gtk4.gtk_at_context_get_accessible_role(@self);
end;

function TGtkAccessible.get_accessible_role: TGtkAccessibleRole; cdecl;
begin
  Result := Gtk4.gtk_accessible_get_accessible_role(@self);
end;

procedure TGtkAccessible.reset_property(property_: TGtkAccessibleProperty); cdecl;
begin
  Gtk4.gtk_accessible_reset_property(@self, property_);
end;

procedure TGtkAccessible.reset_relation(relation: TGtkAccessibleRelation); cdecl;
begin
  Gtk4.gtk_accessible_reset_relation(@self, relation);
end;

procedure TGtkAccessible.reset_state(state: TGtkAccessibleState); cdecl;
begin
  Gtk4.gtk_accessible_reset_state(@self, state);
end;

procedure TGtkAccessible.update_property_value(n_properties: gint; properties: PGtkAccessibleProperty; values: PGValue); cdecl;
begin
  Gtk4.gtk_accessible_update_property_value(@self, n_properties, properties, values);
end;

procedure TGtkAccessible.update_relation_value(n_relations: gint; relations: PGtkAccessibleRelation; values: PGValue); cdecl;
begin
  Gtk4.gtk_accessible_update_relation_value(@self, n_relations, relations, values);
end;

procedure TGtkAccessible.update_state_value(n_states: gint; states: PGtkAccessibleState; values: PGValue); cdecl;
begin
  Gtk4.gtk_accessible_update_state_value(@self, n_states, states, values);
end;

function TGtkBuildable.get_buildable_id: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_buildable_get_buildable_id(@self);
end;

function TGtkNative.get_for_surface(surface: PGdkSurface): PGtkNative; cdecl;
begin
  Result := Gtk4.gtk_native_get_for_surface(surface);
end;

function TGtkNative.get_renderer: PGskRenderer; cdecl;
begin
  Result := Gtk4.gtk_native_get_renderer(@self);
end;

function TGtkNative.get_surface: PGdkSurface; cdecl;
begin
  Result := Gtk4.gtk_native_get_surface(@self);
end;

procedure TGtkNative.get_surface_transform(x: Pgdouble; y: Pgdouble); cdecl;
begin
  Gtk4.gtk_native_get_surface_transform(@self, x, y);
end;

procedure TGtkNative.realize; cdecl;
begin
  Gtk4.gtk_native_realize(@self);
end;

procedure TGtkNative.unrealize; cdecl;
begin
  Gtk4.gtk_native_unrealize(@self);
end;

function TGtkRoot.get_display: PGdkDisplay; cdecl;
begin
  Result := Gtk4.gtk_root_get_display(@self);
end;

function TGtkRoot.get_focus: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_root_get_focus(@self);
end;

procedure TGtkRoot.set_focus(focus: PGtkWidget); cdecl;
begin
  Gtk4.gtk_root_set_focus(@self, focus);
end;

function TGtkWidget.get_default_direction: TGtkTextDirection; cdecl;
begin
  Result := Gtk4.gtk_widget_get_default_direction();
end;

procedure TGtkWidget.set_default_direction(dir: TGtkTextDirection); cdecl;
begin
  Gtk4.gtk_widget_set_default_direction(dir);
end;

procedure TGtkWidget.action_set_enabled(action_name: Pgchar; enabled: gboolean); cdecl;
begin
  Gtk4.gtk_widget_action_set_enabled(@self, action_name, enabled);
end;

function TGtkWidget.activate: gboolean; cdecl;
begin
  Result := Gtk4.gtk_widget_activate(@self);
end;

function TGtkWidget.activate_action_variant(name: Pgchar; args: PGVariant): gboolean; cdecl;
begin
  Result := Gtk4.gtk_widget_activate_action_variant(@self, name, args);
end;

procedure TGtkWidget.activate_default; cdecl;
begin
  Gtk4.gtk_widget_activate_default(@self);
end;

procedure TGtkWidget.add_controller(controller: PGtkEventController); cdecl;
begin
  Gtk4.gtk_widget_add_controller(@self, controller);
end;

procedure TGtkWidget.add_css_class(css_class: Pgchar); cdecl;
begin
  Gtk4.gtk_widget_add_css_class(@self, css_class);
end;

procedure TGtkWidget.add_mnemonic_label(label_: PGtkWidget); cdecl;
begin
  Gtk4.gtk_widget_add_mnemonic_label(@self, label_);
end;

function TGtkWidget.add_tick_callback(callback: TGtkTickCallback; user_data: gpointer; notify: TGDestroyNotify): guint; cdecl;
begin
  Result := Gtk4.gtk_widget_add_tick_callback(@self, callback, user_data, notify);
end;

procedure TGtkWidget.allocate(width: gint; height: gint; baseline: gint; transform: PGskTransform); cdecl;
begin
  Gtk4.gtk_widget_allocate(@self, width, height, baseline, transform);
end;

function TGtkWidget.child_focus(direction: TGtkDirectionType): gboolean; cdecl;
begin
  Result := Gtk4.gtk_widget_child_focus(@self, direction);
end;

function TGtkWidget.compute_bounds(target: PGtkWidget; out_bounds: Pgraphene_rect_t): gboolean; cdecl;
begin
  Result := Gtk4.gtk_widget_compute_bounds(@self, target, out_bounds);
end;

function TGtkWidget.compute_expand(orientation: TGtkOrientation): gboolean; cdecl;
begin
  Result := Gtk4.gtk_widget_compute_expand(@self, orientation);
end;

function TGtkWidget.compute_point(target: PGtkWidget; point: Pgraphene_point_t; out_point: Pgraphene_point_t): gboolean; cdecl;
begin
  Result := Gtk4.gtk_widget_compute_point(@self, target, point, out_point);
end;

function TGtkWidget.compute_transform(target: PGtkWidget; out_transform: Pgraphene_matrix_t): gboolean; cdecl;
begin
  Result := Gtk4.gtk_widget_compute_transform(@self, target, out_transform);
end;

function TGtkWidget.contains(x: gdouble; y: gdouble): gboolean; cdecl;
begin
  Result := Gtk4.gtk_widget_contains(@self, x, y);
end;

function TGtkWidget.create_pango_context: PPangoContext; cdecl;
begin
  Result := Gtk4.gtk_widget_create_pango_context(@self);
end;

function TGtkWidget.create_pango_layout(text: Pgchar): PPangoLayout; cdecl;
begin
  Result := Gtk4.gtk_widget_create_pango_layout(@self, text);
end;

function TGtkWidget.drag_check_threshold(start_x: gint; start_y: gint; current_x: gint; current_y: gint): gboolean; cdecl;
begin
  Result := Gtk4.gtk_drag_check_threshold(@self, start_x, start_y, current_x, current_y);
end;

procedure TGtkWidget.error_bell; cdecl;
begin
  Gtk4.gtk_widget_error_bell(@self);
end;

function TGtkWidget.get_allocated_baseline: gint; cdecl;
begin
  Result := Gtk4.gtk_widget_get_allocated_baseline(@self);
end;

function TGtkWidget.get_allocated_height: gint; cdecl;
begin
  Result := Gtk4.gtk_widget_get_allocated_height(@self);
end;

function TGtkWidget.get_allocated_width: gint; cdecl;
begin
  Result := Gtk4.gtk_widget_get_allocated_width(@self);
end;

procedure TGtkWidget.get_allocation(allocation: PGtkAllocation); cdecl;
begin
  Gtk4.gtk_widget_get_allocation(@self, allocation);
end;

function TGtkWidget.get_ancestor(widget_type: TGType): PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_widget_get_ancestor(@self, widget_type);
end;

function TGtkWidget.get_can_focus: gboolean; cdecl;
begin
  Result := Gtk4.gtk_widget_get_can_focus(@self);
end;

function TGtkWidget.get_can_target: gboolean; cdecl;
begin
  Result := Gtk4.gtk_widget_get_can_target(@self);
end;

function TGtkWidget.get_child_visible: gboolean; cdecl;
begin
  Result := Gtk4.gtk_widget_get_child_visible(@self);
end;

function TGtkWidget.get_clipboard: PGdkClipboard; cdecl;
begin
  Result := Gtk4.gtk_widget_get_clipboard(@self);
end;

function TGtkWidget.get_css_classes: PPgchar; cdecl;
begin
  Result := Gtk4.gtk_widget_get_css_classes(@self);
end;

function TGtkWidget.get_css_name: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_widget_get_css_name(@self);
end;

function TGtkWidget.get_cursor: PGdkCursor; cdecl;
begin
  Result := Gtk4.gtk_widget_get_cursor(@self);
end;

function TGtkWidget.get_direction: TGtkTextDirection; cdecl;
begin
  Result := Gtk4.gtk_widget_get_direction(@self);
end;

function TGtkWidget.get_display: PGdkDisplay; cdecl;
begin
  Result := Gtk4.gtk_widget_get_display(@self);
end;

function TGtkWidget.get_first_child: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_widget_get_first_child(@self);
end;

function TGtkWidget.get_focus_child: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_widget_get_focus_child(@self);
end;

function TGtkWidget.get_focus_on_click: gboolean; cdecl;
begin
  Result := Gtk4.gtk_widget_get_focus_on_click(@self);
end;

function TGtkWidget.get_focusable: gboolean; cdecl;
begin
  Result := Gtk4.gtk_widget_get_focusable(@self);
end;

function TGtkWidget.get_font_map: PPangoFontMap; cdecl;
begin
  Result := Gtk4.gtk_widget_get_font_map(@self);
end;

function TGtkWidget.get_font_options: Pcairo_font_options_t; cdecl;
begin
  Result := Gtk4.gtk_widget_get_font_options(@self);
end;

function TGtkWidget.get_frame_clock: PGdkFrameClock; cdecl;
begin
  Result := Gtk4.gtk_widget_get_frame_clock(@self);
end;

function TGtkWidget.get_halign: TGtkAlign; cdecl;
begin
  Result := Gtk4.gtk_widget_get_halign(@self);
end;

function TGtkWidget.get_has_tooltip: gboolean; cdecl;
begin
  Result := Gtk4.gtk_widget_get_has_tooltip(@self);
end;

function TGtkWidget.get_height: gint; cdecl;
begin
  Result := Gtk4.gtk_widget_get_height(@self);
end;

function TGtkWidget.get_hexpand: gboolean; cdecl;
begin
  Result := Gtk4.gtk_widget_get_hexpand(@self);
end;

function TGtkWidget.get_hexpand_set: gboolean; cdecl;
begin
  Result := Gtk4.gtk_widget_get_hexpand_set(@self);
end;

function TGtkWidget.get_last_child: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_widget_get_last_child(@self);
end;

function TGtkWidget.get_layout_manager: PGtkLayoutManager; cdecl;
begin
  Result := Gtk4.gtk_widget_get_layout_manager(@self);
end;

function TGtkWidget.get_mapped: gboolean; cdecl;
begin
  Result := Gtk4.gtk_widget_get_mapped(@self);
end;

function TGtkWidget.get_margin_bottom: gint; cdecl;
begin
  Result := Gtk4.gtk_widget_get_margin_bottom(@self);
end;

function TGtkWidget.get_margin_end: gint; cdecl;
begin
  Result := Gtk4.gtk_widget_get_margin_end(@self);
end;

function TGtkWidget.get_margin_start: gint; cdecl;
begin
  Result := Gtk4.gtk_widget_get_margin_start(@self);
end;

function TGtkWidget.get_margin_top: gint; cdecl;
begin
  Result := Gtk4.gtk_widget_get_margin_top(@self);
end;

function TGtkWidget.get_name: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_widget_get_name(@self);
end;

function TGtkWidget.get_native: PGtkNative; cdecl;
begin
  Result := Gtk4.gtk_widget_get_native(@self);
end;

function TGtkWidget.get_next_sibling: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_widget_get_next_sibling(@self);
end;

function TGtkWidget.get_opacity: gdouble; cdecl;
begin
  Result := Gtk4.gtk_widget_get_opacity(@self);
end;

function TGtkWidget.get_overflow: TGtkOverflow; cdecl;
begin
  Result := Gtk4.gtk_widget_get_overflow(@self);
end;

function TGtkWidget.get_pango_context: PPangoContext; cdecl;
begin
  Result := Gtk4.gtk_widget_get_pango_context(@self);
end;

function TGtkWidget.get_parent: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_widget_get_parent(@self);
end;

procedure TGtkWidget.get_preferred_size(minimum_size: PGtkRequisition; natural_size: PGtkRequisition); cdecl;
begin
  Gtk4.gtk_widget_get_preferred_size(@self, minimum_size, natural_size);
end;

function TGtkWidget.get_prev_sibling: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_widget_get_prev_sibling(@self);
end;

function TGtkWidget.get_primary_clipboard: PGdkClipboard; cdecl;
begin
  Result := Gtk4.gtk_widget_get_primary_clipboard(@self);
end;

function TGtkWidget.get_realized: gboolean; cdecl;
begin
  Result := Gtk4.gtk_widget_get_realized(@self);
end;

function TGtkWidget.get_receives_default: gboolean; cdecl;
begin
  Result := Gtk4.gtk_widget_get_receives_default(@self);
end;

function TGtkWidget.get_request_mode: TGtkSizeRequestMode; cdecl;
begin
  Result := Gtk4.gtk_widget_get_request_mode(@self);
end;

function TGtkWidget.get_root: PGtkRoot; cdecl;
begin
  Result := Gtk4.gtk_widget_get_root(@self);
end;

function TGtkWidget.get_scale_factor: gint; cdecl;
begin
  Result := Gtk4.gtk_widget_get_scale_factor(@self);
end;

function TGtkWidget.get_sensitive: gboolean; cdecl;
begin
  Result := Gtk4.gtk_widget_get_sensitive(@self);
end;

function TGtkWidget.get_settings: PGtkSettings; cdecl;
begin
  Result := Gtk4.gtk_widget_get_settings(@self);
end;

function TGtkWidget.get_size(orientation: TGtkOrientation): gint; cdecl;
begin
  Result := Gtk4.gtk_widget_get_size(@self, orientation);
end;

procedure TGtkWidget.get_size_request(width: Pgint; height: Pgint); cdecl;
begin
  Gtk4.gtk_widget_get_size_request(@self, width, height);
end;

function TGtkWidget.get_state_flags: TGtkStateFlags; cdecl;
begin
  Result := Gtk4.gtk_widget_get_state_flags(@self);
end;

function TGtkWidget.get_style_context: PGtkStyleContext; cdecl;
begin
  Result := Gtk4.gtk_widget_get_style_context(@self);
end;

function TGtkWidget.get_template_child(widget_type: TGType; name: Pgchar): PGObject; cdecl;
begin
  Result := Gtk4.gtk_widget_get_template_child(@self, widget_type, name);
end;

function TGtkWidget.get_tooltip_markup: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_widget_get_tooltip_markup(@self);
end;

function TGtkWidget.get_tooltip_text: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_widget_get_tooltip_text(@self);
end;

function TGtkWidget.get_valign: TGtkAlign; cdecl;
begin
  Result := Gtk4.gtk_widget_get_valign(@self);
end;

function TGtkWidget.get_vexpand: gboolean; cdecl;
begin
  Result := Gtk4.gtk_widget_get_vexpand(@self);
end;

function TGtkWidget.get_vexpand_set: gboolean; cdecl;
begin
  Result := Gtk4.gtk_widget_get_vexpand_set(@self);
end;

function TGtkWidget.get_visible: gboolean; cdecl;
begin
  Result := Gtk4.gtk_widget_get_visible(@self);
end;

function TGtkWidget.get_width: gint; cdecl;
begin
  Result := Gtk4.gtk_widget_get_width(@self);
end;

function TGtkWidget.grab_focus: gboolean; cdecl;
begin
  Result := Gtk4.gtk_widget_grab_focus(@self);
end;

function TGtkWidget.has_css_class(css_class: Pgchar): gboolean; cdecl;
begin
  Result := Gtk4.gtk_widget_has_css_class(@self, css_class);
end;

function TGtkWidget.has_default: gboolean; cdecl;
begin
  Result := Gtk4.gtk_widget_has_default(@self);
end;

function TGtkWidget.has_focus: gboolean; cdecl;
begin
  Result := Gtk4.gtk_widget_has_focus(@self);
end;

function TGtkWidget.has_visible_focus: gboolean; cdecl;
begin
  Result := Gtk4.gtk_widget_has_visible_focus(@self);
end;

procedure TGtkWidget.hide; cdecl;
begin
  Gtk4.gtk_widget_hide(@self);
end;

function TGtkWidget.in_destruction: gboolean; cdecl;
begin
  Result := Gtk4.gtk_widget_in_destruction(@self);
end;

procedure TGtkWidget.init_template; cdecl;
begin
  Gtk4.gtk_widget_init_template(@self);
end;

procedure TGtkWidget.insert_action_group(name: Pgchar; group: PGActionGroup); cdecl;
begin
  Gtk4.gtk_widget_insert_action_group(@self, name, group);
end;

procedure TGtkWidget.insert_after(parent: PGtkWidget; previous_sibling: PGtkWidget); cdecl;
begin
  Gtk4.gtk_widget_insert_after(@self, parent, previous_sibling);
end;

procedure TGtkWidget.insert_before(parent: PGtkWidget; next_sibling: PGtkWidget); cdecl;
begin
  Gtk4.gtk_widget_insert_before(@self, parent, next_sibling);
end;

function TGtkWidget.is_ancestor(ancestor: PGtkWidget): gboolean; cdecl;
begin
  Result := Gtk4.gtk_widget_is_ancestor(@self, ancestor);
end;

function TGtkWidget.is_drawable: gboolean; cdecl;
begin
  Result := Gtk4.gtk_widget_is_drawable(@self);
end;

function TGtkWidget.is_focus: gboolean; cdecl;
begin
  Result := Gtk4.gtk_widget_is_focus(@self);
end;

function TGtkWidget.is_sensitive: gboolean; cdecl;
begin
  Result := Gtk4.gtk_widget_is_sensitive(@self);
end;

function TGtkWidget.is_visible: gboolean; cdecl;
begin
  Result := Gtk4.gtk_widget_is_visible(@self);
end;

function TGtkWidget.keynav_failed(direction: TGtkDirectionType): gboolean; cdecl;
begin
  Result := Gtk4.gtk_widget_keynav_failed(@self, direction);
end;

function TGtkWidget.list_mnemonic_labels: PGList; cdecl;
begin
  Result := Gtk4.gtk_widget_list_mnemonic_labels(@self);
end;

procedure TGtkWidget.map; cdecl;
begin
  Gtk4.gtk_widget_map(@self);
end;

procedure TGtkWidget.measure(orientation: TGtkOrientation; for_size: gint; minimum: Pgint; natural: Pgint; minimum_baseline: Pgint; natural_baseline: Pgint); cdecl;
begin
  Gtk4.gtk_widget_measure(@self, orientation, for_size, minimum, natural, minimum_baseline, natural_baseline);
end;

function TGtkWidget.mnemonic_activate(group_cycling: gboolean): gboolean; cdecl;
begin
  Result := Gtk4.gtk_widget_mnemonic_activate(@self, group_cycling);
end;

function TGtkWidget.observe_children: PGListModel; cdecl;
begin
  Result := Gtk4.gtk_widget_observe_children(@self);
end;

function TGtkWidget.observe_controllers: PGListModel; cdecl;
begin
  Result := Gtk4.gtk_widget_observe_controllers(@self);
end;

function TGtkWidget.pick(x: gdouble; y: gdouble; flags: TGtkPickFlags): PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_widget_pick(@self, x, y, flags);
end;

procedure TGtkWidget.queue_allocate; cdecl;
begin
  Gtk4.gtk_widget_queue_allocate(@self);
end;

procedure TGtkWidget.queue_draw; cdecl;
begin
  Gtk4.gtk_widget_queue_draw(@self);
end;

procedure TGtkWidget.queue_resize; cdecl;
begin
  Gtk4.gtk_widget_queue_resize(@self);
end;

procedure TGtkWidget.realize; cdecl;
begin
  Gtk4.gtk_widget_realize(@self);
end;

procedure TGtkWidget.remove_controller(controller: PGtkEventController); cdecl;
begin
  Gtk4.gtk_widget_remove_controller(@self, controller);
end;

procedure TGtkWidget.remove_css_class(css_class: Pgchar); cdecl;
begin
  Gtk4.gtk_widget_remove_css_class(@self, css_class);
end;

procedure TGtkWidget.remove_mnemonic_label(label_: PGtkWidget); cdecl;
begin
  Gtk4.gtk_widget_remove_mnemonic_label(@self, label_);
end;

procedure TGtkWidget.remove_tick_callback(id: guint); cdecl;
begin
  Gtk4.gtk_widget_remove_tick_callback(@self, id);
end;

procedure TGtkWidget.set_can_focus(can_focus: gboolean); cdecl;
begin
  Gtk4.gtk_widget_set_can_focus(@self, can_focus);
end;

procedure TGtkWidget.set_can_target(can_target: gboolean); cdecl;
begin
  Gtk4.gtk_widget_set_can_target(@self, can_target);
end;

procedure TGtkWidget.set_child_visible(child_visible: gboolean); cdecl;
begin
  Gtk4.gtk_widget_set_child_visible(@self, child_visible);
end;

procedure TGtkWidget.set_css_classes(classes: PPgchar); cdecl;
begin
  Gtk4.gtk_widget_set_css_classes(@self, classes);
end;

procedure TGtkWidget.set_cursor(cursor: PGdkCursor); cdecl;
begin
  Gtk4.gtk_widget_set_cursor(@self, cursor);
end;

procedure TGtkWidget.set_cursor_from_name(name: Pgchar); cdecl;
begin
  Gtk4.gtk_widget_set_cursor_from_name(@self, name);
end;

procedure TGtkWidget.set_direction(dir: TGtkTextDirection); cdecl;
begin
  Gtk4.gtk_widget_set_direction(@self, dir);
end;

procedure TGtkWidget.set_focus_child(child: PGtkWidget); cdecl;
begin
  Gtk4.gtk_widget_set_focus_child(@self, child);
end;

procedure TGtkWidget.set_focus_on_click(focus_on_click: gboolean); cdecl;
begin
  Gtk4.gtk_widget_set_focus_on_click(@self, focus_on_click);
end;

procedure TGtkWidget.set_focusable(focusable: gboolean); cdecl;
begin
  Gtk4.gtk_widget_set_focusable(@self, focusable);
end;

procedure TGtkWidget.set_font_map(font_map: PPangoFontMap); cdecl;
begin
  Gtk4.gtk_widget_set_font_map(@self, font_map);
end;

procedure TGtkWidget.set_font_options(options: Pcairo_font_options_t); cdecl;
begin
  Gtk4.gtk_widget_set_font_options(@self, options);
end;

procedure TGtkWidget.set_halign(align: TGtkAlign); cdecl;
begin
  Gtk4.gtk_widget_set_halign(@self, align);
end;

procedure TGtkWidget.set_has_tooltip(has_tooltip: gboolean); cdecl;
begin
  Gtk4.gtk_widget_set_has_tooltip(@self, has_tooltip);
end;

procedure TGtkWidget.set_hexpand(expand: gboolean); cdecl;
begin
  Gtk4.gtk_widget_set_hexpand(@self, expand);
end;

procedure TGtkWidget.set_hexpand_set(set_: gboolean); cdecl;
begin
  Gtk4.gtk_widget_set_hexpand_set(@self, set_);
end;

procedure TGtkWidget.set_layout_manager(layout_manager: PGtkLayoutManager); cdecl;
begin
  Gtk4.gtk_widget_set_layout_manager(@self, layout_manager);
end;

procedure TGtkWidget.set_margin_bottom(margin: gint); cdecl;
begin
  Gtk4.gtk_widget_set_margin_bottom(@self, margin);
end;

procedure TGtkWidget.set_margin_end(margin: gint); cdecl;
begin
  Gtk4.gtk_widget_set_margin_end(@self, margin);
end;

procedure TGtkWidget.set_margin_start(margin: gint); cdecl;
begin
  Gtk4.gtk_widget_set_margin_start(@self, margin);
end;

procedure TGtkWidget.set_margin_top(margin: gint); cdecl;
begin
  Gtk4.gtk_widget_set_margin_top(@self, margin);
end;

procedure TGtkWidget.set_name(name: Pgchar); cdecl;
begin
  Gtk4.gtk_widget_set_name(@self, name);
end;

procedure TGtkWidget.set_opacity(opacity: gdouble); cdecl;
begin
  Gtk4.gtk_widget_set_opacity(@self, opacity);
end;

procedure TGtkWidget.set_overflow(overflow: TGtkOverflow); cdecl;
begin
  Gtk4.gtk_widget_set_overflow(@self, overflow);
end;

procedure TGtkWidget.set_parent(parent: PGtkWidget); cdecl;
begin
  Gtk4.gtk_widget_set_parent(@self, parent);
end;

procedure TGtkWidget.set_receives_default(receives_default: gboolean); cdecl;
begin
  Gtk4.gtk_widget_set_receives_default(@self, receives_default);
end;

procedure TGtkWidget.set_sensitive(sensitive: gboolean); cdecl;
begin
  Gtk4.gtk_widget_set_sensitive(@self, sensitive);
end;

procedure TGtkWidget.set_size_request(width: gint; height: gint); cdecl;
begin
  Gtk4.gtk_widget_set_size_request(@self, width, height);
end;

procedure TGtkWidget.set_state_flags(flags: TGtkStateFlags; clear: gboolean); cdecl;
begin
  Gtk4.gtk_widget_set_state_flags(@self, flags, clear);
end;

procedure TGtkWidget.set_tooltip_markup(markup: Pgchar); cdecl;
begin
  Gtk4.gtk_widget_set_tooltip_markup(@self, markup);
end;

procedure TGtkWidget.set_tooltip_text(text: Pgchar); cdecl;
begin
  Gtk4.gtk_widget_set_tooltip_text(@self, text);
end;

procedure TGtkWidget.set_valign(align: TGtkAlign); cdecl;
begin
  Gtk4.gtk_widget_set_valign(@self, align);
end;

procedure TGtkWidget.set_vexpand(expand: gboolean); cdecl;
begin
  Gtk4.gtk_widget_set_vexpand(@self, expand);
end;

procedure TGtkWidget.set_vexpand_set(set_: gboolean); cdecl;
begin
  Gtk4.gtk_widget_set_vexpand_set(@self, set_);
end;

procedure TGtkWidget.set_visible(visible: gboolean); cdecl;
begin
  Gtk4.gtk_widget_set_visible(@self, visible);
end;

function TGtkWidget.should_layout: gboolean; cdecl;
begin
  Result := Gtk4.gtk_widget_should_layout(@self);
end;

procedure TGtkWidget.show; cdecl;
begin
  Gtk4.gtk_widget_show(@self);
end;

procedure TGtkWidget.size_allocate(allocation: PGtkAllocation; baseline: gint); cdecl;
begin
  Gtk4.gtk_widget_size_allocate(@self, allocation, baseline);
end;

procedure TGtkWidget.snapshot_child(child: PGtkWidget; snapshot: PGtkSnapshot); cdecl;
begin
  Gtk4.gtk_widget_snapshot_child(@self, child, snapshot);
end;

function TGtkWidget.translate_coordinates(dest_widget: PGtkWidget; src_x: gdouble; src_y: gdouble; dest_x: Pgdouble; dest_y: Pgdouble): gboolean; cdecl;
begin
  Result := Gtk4.gtk_widget_translate_coordinates(@self, dest_widget, src_x, src_y, dest_x, dest_y);
end;

procedure TGtkWidget.trigger_tooltip_query; cdecl;
begin
  Gtk4.gtk_widget_trigger_tooltip_query(@self);
end;

procedure TGtkWidget.unmap; cdecl;
begin
  Gtk4.gtk_widget_unmap(@self);
end;

procedure TGtkWidget.unparent; cdecl;
begin
  Gtk4.gtk_widget_unparent(@self);
end;

procedure TGtkWidget.unrealize; cdecl;
begin
  Gtk4.gtk_widget_unrealize(@self);
end;

procedure TGtkWidget.unset_state_flags(flags: TGtkStateFlags); cdecl;
begin
  Gtk4.gtk_widget_unset_state_flags(@self, flags);
end;

function TGtkAboutDialog.new: PGtkAboutDialog; cdecl;
begin
  Result := Gtk4.gtk_about_dialog_new();
end;

procedure TGtkAboutDialog.add_credit_section(section_name: Pgchar; people: PPgchar); cdecl;
begin
  Gtk4.gtk_about_dialog_add_credit_section(@self, section_name, people);
end;

function TGtkAboutDialog.get_artists: PPgchar; cdecl;
begin
  Result := Gtk4.gtk_about_dialog_get_artists(@self);
end;

function TGtkAboutDialog.get_authors: PPgchar; cdecl;
begin
  Result := Gtk4.gtk_about_dialog_get_authors(@self);
end;

function TGtkAboutDialog.get_comments: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_about_dialog_get_comments(@self);
end;

function TGtkAboutDialog.get_copyright: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_about_dialog_get_copyright(@self);
end;

function TGtkAboutDialog.get_documenters: PPgchar; cdecl;
begin
  Result := Gtk4.gtk_about_dialog_get_documenters(@self);
end;

function TGtkAboutDialog.get_license: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_about_dialog_get_license(@self);
end;

function TGtkAboutDialog.get_license_type: TGtkLicense; cdecl;
begin
  Result := Gtk4.gtk_about_dialog_get_license_type(@self);
end;

function TGtkAboutDialog.get_logo: PGdkPaintable; cdecl;
begin
  Result := Gtk4.gtk_about_dialog_get_logo(@self);
end;

function TGtkAboutDialog.get_logo_icon_name: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_about_dialog_get_logo_icon_name(@self);
end;

function TGtkAboutDialog.get_program_name: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_about_dialog_get_program_name(@self);
end;

function TGtkAboutDialog.get_system_information: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_about_dialog_get_system_information(@self);
end;

function TGtkAboutDialog.get_translator_credits: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_about_dialog_get_translator_credits(@self);
end;

function TGtkAboutDialog.get_version: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_about_dialog_get_version(@self);
end;

function TGtkAboutDialog.get_website: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_about_dialog_get_website(@self);
end;

function TGtkAboutDialog.get_website_label: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_about_dialog_get_website_label(@self);
end;

function TGtkAboutDialog.get_wrap_license: gboolean; cdecl;
begin
  Result := Gtk4.gtk_about_dialog_get_wrap_license(@self);
end;

procedure TGtkAboutDialog.set_artists(artists: PPgchar); cdecl;
begin
  Gtk4.gtk_about_dialog_set_artists(@self, artists);
end;

procedure TGtkAboutDialog.set_authors(authors: PPgchar); cdecl;
begin
  Gtk4.gtk_about_dialog_set_authors(@self, authors);
end;

procedure TGtkAboutDialog.set_comments(comments: Pgchar); cdecl;
begin
  Gtk4.gtk_about_dialog_set_comments(@self, comments);
end;

procedure TGtkAboutDialog.set_copyright(copyright: Pgchar); cdecl;
begin
  Gtk4.gtk_about_dialog_set_copyright(@self, copyright);
end;

procedure TGtkAboutDialog.set_documenters(documenters: PPgchar); cdecl;
begin
  Gtk4.gtk_about_dialog_set_documenters(@self, documenters);
end;

procedure TGtkAboutDialog.set_license(license: Pgchar); cdecl;
begin
  Gtk4.gtk_about_dialog_set_license(@self, license);
end;

procedure TGtkAboutDialog.set_license_type(license_type: TGtkLicense); cdecl;
begin
  Gtk4.gtk_about_dialog_set_license_type(@self, license_type);
end;

procedure TGtkAboutDialog.set_logo(logo: PGdkPaintable); cdecl;
begin
  Gtk4.gtk_about_dialog_set_logo(@self, logo);
end;

procedure TGtkAboutDialog.set_logo_icon_name(icon_name: Pgchar); cdecl;
begin
  Gtk4.gtk_about_dialog_set_logo_icon_name(@self, icon_name);
end;

procedure TGtkAboutDialog.set_program_name(name: Pgchar); cdecl;
begin
  Gtk4.gtk_about_dialog_set_program_name(@self, name);
end;

procedure TGtkAboutDialog.set_system_information(system_information: Pgchar); cdecl;
begin
  Gtk4.gtk_about_dialog_set_system_information(@self, system_information);
end;

procedure TGtkAboutDialog.set_translator_credits(translator_credits: Pgchar); cdecl;
begin
  Gtk4.gtk_about_dialog_set_translator_credits(@self, translator_credits);
end;

procedure TGtkAboutDialog.set_version(version: Pgchar); cdecl;
begin
  Gtk4.gtk_about_dialog_set_version(@self, version);
end;

procedure TGtkAboutDialog.set_website(website: Pgchar); cdecl;
begin
  Gtk4.gtk_about_dialog_set_website(@self, website);
end;

procedure TGtkAboutDialog.set_website_label(website_label: Pgchar); cdecl;
begin
  Gtk4.gtk_about_dialog_set_website_label(@self, website_label);
end;

procedure TGtkAboutDialog.set_wrap_license(wrap_license: gboolean); cdecl;
begin
  Gtk4.gtk_about_dialog_set_wrap_license(@self, wrap_license);
end;

function TGtkActionBar.new: PGtkActionBar; cdecl;
begin
  Result := Gtk4.gtk_action_bar_new();
end;

function TGtkActionBar.get_center_widget: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_action_bar_get_center_widget(@self);
end;

function TGtkActionBar.get_revealed: gboolean; cdecl;
begin
  Result := Gtk4.gtk_action_bar_get_revealed(@self);
end;

procedure TGtkActionBar.pack_end(child: PGtkWidget); cdecl;
begin
  Gtk4.gtk_action_bar_pack_end(@self, child);
end;

procedure TGtkActionBar.pack_start(child: PGtkWidget); cdecl;
begin
  Gtk4.gtk_action_bar_pack_start(@self, child);
end;

procedure TGtkActionBar.remove(child: PGtkWidget); cdecl;
begin
  Gtk4.gtk_action_bar_remove(@self, child);
end;

procedure TGtkActionBar.set_center_widget(center_widget: PGtkWidget); cdecl;
begin
  Gtk4.gtk_action_bar_set_center_widget(@self, center_widget);
end;

procedure TGtkActionBar.set_revealed(revealed: gboolean); cdecl;
begin
  Gtk4.gtk_action_bar_set_revealed(@self, revealed);
end;

function TGtkActionable.get_action_name: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_actionable_get_action_name(@self);
end;

function TGtkActionable.get_action_target_value: PGVariant; cdecl;
begin
  Result := Gtk4.gtk_actionable_get_action_target_value(@self);
end;

procedure TGtkActionable.set_action_name(action_name: Pgchar); cdecl;
begin
  Gtk4.gtk_actionable_set_action_name(@self, action_name);
end;

procedure TGtkActionable.set_action_target_value(target_value: PGVariant); cdecl;
begin
  Gtk4.gtk_actionable_set_action_target_value(@self, target_value);
end;

procedure TGtkActionable.set_detailed_action_name(detailed_action_name: Pgchar); cdecl;
begin
  Gtk4.gtk_actionable_set_detailed_action_name(@self, detailed_action_name);
end;

function TGtkActivateAction.get: PGtkActivateAction; cdecl;
begin
  Result := Gtk4.gtk_activate_action_get();
end;

function TGtkAdjustment.new(value: gdouble; lower: gdouble; upper: gdouble; step_increment: gdouble; page_increment: gdouble; page_size: gdouble): PGtkAdjustment; cdecl;
begin
  Result := Gtk4.gtk_adjustment_new(value, lower, upper, step_increment, page_increment, page_size);
end;

procedure TGtkAdjustment.clamp_page(lower: gdouble; upper: gdouble); cdecl;
begin
  Gtk4.gtk_adjustment_clamp_page(@self, lower, upper);
end;

procedure TGtkAdjustment.configure(value: gdouble; lower: gdouble; upper: gdouble; step_increment: gdouble; page_increment: gdouble; page_size: gdouble); cdecl;
begin
  Gtk4.gtk_adjustment_configure(@self, value, lower, upper, step_increment, page_increment, page_size);
end;

function TGtkAdjustment.get_lower: gdouble; cdecl;
begin
  Result := Gtk4.gtk_adjustment_get_lower(@self);
end;

function TGtkAdjustment.get_minimum_increment: gdouble; cdecl;
begin
  Result := Gtk4.gtk_adjustment_get_minimum_increment(@self);
end;

function TGtkAdjustment.get_page_increment: gdouble; cdecl;
begin
  Result := Gtk4.gtk_adjustment_get_page_increment(@self);
end;

function TGtkAdjustment.get_page_size: gdouble; cdecl;
begin
  Result := Gtk4.gtk_adjustment_get_page_size(@self);
end;

function TGtkAdjustment.get_step_increment: gdouble; cdecl;
begin
  Result := Gtk4.gtk_adjustment_get_step_increment(@self);
end;

function TGtkAdjustment.get_upper: gdouble; cdecl;
begin
  Result := Gtk4.gtk_adjustment_get_upper(@self);
end;

function TGtkAdjustment.get_value: gdouble; cdecl;
begin
  Result := Gtk4.gtk_adjustment_get_value(@self);
end;

procedure TGtkAdjustment.set_lower(lower: gdouble); cdecl;
begin
  Gtk4.gtk_adjustment_set_lower(@self, lower);
end;

procedure TGtkAdjustment.set_page_increment(page_increment: gdouble); cdecl;
begin
  Gtk4.gtk_adjustment_set_page_increment(@self, page_increment);
end;

procedure TGtkAdjustment.set_page_size(page_size: gdouble); cdecl;
begin
  Gtk4.gtk_adjustment_set_page_size(@self, page_size);
end;

procedure TGtkAdjustment.set_step_increment(step_increment: gdouble); cdecl;
begin
  Gtk4.gtk_adjustment_set_step_increment(@self, step_increment);
end;

procedure TGtkAdjustment.set_upper(upper: gdouble); cdecl;
begin
  Gtk4.gtk_adjustment_set_upper(@self, upper);
end;

procedure TGtkAdjustment.set_value(value: gdouble); cdecl;
begin
  Gtk4.gtk_adjustment_set_value(@self, value);
end;

function TGtkShortcutTrigger.parse_string(string_: Pgchar): PGtkShortcutTrigger; cdecl;
begin
  Result := Gtk4.gtk_shortcut_trigger_parse_string(string_);
end;

function TGtkShortcutTrigger.compare(trigger2: PGtkShortcutTrigger): gint; cdecl;
begin
  Result := Gtk4.gtk_shortcut_trigger_compare(@self, trigger2);
end;

function TGtkShortcutTrigger.equal(trigger2: PGtkShortcutTrigger): gboolean; cdecl;
begin
  Result := Gtk4.gtk_shortcut_trigger_equal(@self, trigger2);
end;

function TGtkShortcutTrigger.hash: guint; cdecl;
begin
  Result := Gtk4.gtk_shortcut_trigger_hash(@self);
end;

procedure TGtkShortcutTrigger.print(string_: PGString); cdecl;
begin
  Gtk4.gtk_shortcut_trigger_print(@self, string_);
end;

function TGtkShortcutTrigger.print_label(display: PGdkDisplay; string_: PGString): gboolean; cdecl;
begin
  Result := Gtk4.gtk_shortcut_trigger_print_label(@self, display, string_);
end;

function TGtkShortcutTrigger.to_label(display: PGdkDisplay): Pgchar; cdecl;
begin
  Result := Gtk4.gtk_shortcut_trigger_to_label(@self, display);
end;

function TGtkShortcutTrigger.to_string: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_shortcut_trigger_to_string(@self);
end;

function TGtkShortcutTrigger.trigger(event: PGdkEvent; enable_mnemonics: gboolean): TGdkKeyMatch; cdecl;
begin
  Result := Gtk4.gtk_shortcut_trigger_trigger(@self, event, enable_mnemonics);
end;

function TGtkAlternativeTrigger.new(first: PGtkShortcutTrigger; second: PGtkShortcutTrigger): PGtkAlternativeTrigger; cdecl;
begin
  Result := Gtk4.gtk_alternative_trigger_new(first, second);
end;

function TGtkAlternativeTrigger.get_first: PGtkShortcutTrigger; cdecl;
begin
  Result := Gtk4.gtk_alternative_trigger_get_first(@self);
end;

function TGtkAlternativeTrigger.get_second: PGtkShortcutTrigger; cdecl;
begin
  Result := Gtk4.gtk_alternative_trigger_get_second(@self);
end;

function TGtkAnyFilter.new: PGtkAnyFilter; cdecl;
begin
  Result := Gtk4.gtk_any_filter_new();
end;

function TGtkAppChooser.get_app_info: PGAppInfo; cdecl;
begin
  Result := Gtk4.gtk_app_chooser_get_app_info(@self);
end;

function TGtkAppChooser.get_content_type: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_app_chooser_get_content_type(@self);
end;

procedure TGtkAppChooser.refresh; cdecl;
begin
  Gtk4.gtk_app_chooser_refresh(@self);
end;

function TGtkAppChooserButton.new(content_type: Pgchar): PGtkAppChooserButton; cdecl;
begin
  Result := Gtk4.gtk_app_chooser_button_new(content_type);
end;

procedure TGtkAppChooserButton.append_custom_item(name: Pgchar; label_: Pgchar; icon: PGIcon); cdecl;
begin
  Gtk4.gtk_app_chooser_button_append_custom_item(@self, name, label_, icon);
end;

procedure TGtkAppChooserButton.append_separator; cdecl;
begin
  Gtk4.gtk_app_chooser_button_append_separator(@self);
end;

function TGtkAppChooserButton.get_heading: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_app_chooser_button_get_heading(@self);
end;

function TGtkAppChooserButton.get_modal: gboolean; cdecl;
begin
  Result := Gtk4.gtk_app_chooser_button_get_modal(@self);
end;

function TGtkAppChooserButton.get_show_default_item: gboolean; cdecl;
begin
  Result := Gtk4.gtk_app_chooser_button_get_show_default_item(@self);
end;

function TGtkAppChooserButton.get_show_dialog_item: gboolean; cdecl;
begin
  Result := Gtk4.gtk_app_chooser_button_get_show_dialog_item(@self);
end;

procedure TGtkAppChooserButton.set_active_custom_item(name: Pgchar); cdecl;
begin
  Gtk4.gtk_app_chooser_button_set_active_custom_item(@self, name);
end;

procedure TGtkAppChooserButton.set_heading(heading: Pgchar); cdecl;
begin
  Gtk4.gtk_app_chooser_button_set_heading(@self, heading);
end;

procedure TGtkAppChooserButton.set_modal(modal: gboolean); cdecl;
begin
  Gtk4.gtk_app_chooser_button_set_modal(@self, modal);
end;

procedure TGtkAppChooserButton.set_show_default_item(setting: gboolean); cdecl;
begin
  Gtk4.gtk_app_chooser_button_set_show_default_item(@self, setting);
end;

procedure TGtkAppChooserButton.set_show_dialog_item(setting: gboolean); cdecl;
begin
  Gtk4.gtk_app_chooser_button_set_show_dialog_item(@self, setting);
end;

function TGtkWindow.new: PGtkWindow; cdecl;
begin
  Result := Gtk4.gtk_window_new();
end;

function TGtkWindow.get_default_icon_name: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_window_get_default_icon_name();
end;

function TGtkWindow.get_toplevels: PGListModel; cdecl;
begin
  Result := Gtk4.gtk_window_get_toplevels();
end;

function TGtkWindow.list_toplevels: PGList; cdecl;
begin
  Result := Gtk4.gtk_window_list_toplevels();
end;

procedure TGtkWindow.set_auto_startup_notification(setting: gboolean); cdecl;
begin
  Gtk4.gtk_window_set_auto_startup_notification(setting);
end;

procedure TGtkWindow.set_default_icon_name(name: Pgchar); cdecl;
begin
  Gtk4.gtk_window_set_default_icon_name(name);
end;

procedure TGtkWindow.set_interactive_debugging(enable: gboolean); cdecl;
begin
  Gtk4.gtk_window_set_interactive_debugging(enable);
end;

procedure TGtkWindow.close; cdecl;
begin
  Gtk4.gtk_window_close(@self);
end;

procedure TGtkWindow.destroy_; cdecl;
begin
  Gtk4.gtk_window_destroy(@self);
end;

procedure TGtkWindow.fullscreen; cdecl;
begin
  Gtk4.gtk_window_fullscreen(@self);
end;

procedure TGtkWindow.fullscreen_on_monitor(monitor: PGdkMonitor); cdecl;
begin
  Gtk4.gtk_window_fullscreen_on_monitor(@self, monitor);
end;

function TGtkWindow.get_application: PGtkApplication; cdecl;
begin
  Result := Gtk4.gtk_window_get_application(@self);
end;

function TGtkWindow.get_child: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_window_get_child(@self);
end;

function TGtkWindow.get_decorated: gboolean; cdecl;
begin
  Result := Gtk4.gtk_window_get_decorated(@self);
end;

procedure TGtkWindow.get_default_size(width: Pgint; height: Pgint); cdecl;
begin
  Gtk4.gtk_window_get_default_size(@self, width, height);
end;

function TGtkWindow.get_default_widget: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_window_get_default_widget(@self);
end;

function TGtkWindow.get_deletable: gboolean; cdecl;
begin
  Result := Gtk4.gtk_window_get_deletable(@self);
end;

function TGtkWindow.get_destroy_with_parent: gboolean; cdecl;
begin
  Result := Gtk4.gtk_window_get_destroy_with_parent(@self);
end;

function TGtkWindow.get_focus: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_window_get_focus(@self);
end;

function TGtkWindow.get_focus_visible: gboolean; cdecl;
begin
  Result := Gtk4.gtk_window_get_focus_visible(@self);
end;

function TGtkWindow.get_group: PGtkWindowGroup; cdecl;
begin
  Result := Gtk4.gtk_window_get_group(@self);
end;

function TGtkWindow.get_handle_menubar_accel: gboolean; cdecl;
begin
  Result := Gtk4.gtk_window_get_handle_menubar_accel(@self);
end;

function TGtkWindow.get_hide_on_close: gboolean; cdecl;
begin
  Result := Gtk4.gtk_window_get_hide_on_close(@self);
end;

function TGtkWindow.get_icon_name: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_window_get_icon_name(@self);
end;

function TGtkWindow.get_mnemonics_visible: gboolean; cdecl;
begin
  Result := Gtk4.gtk_window_get_mnemonics_visible(@self);
end;

function TGtkWindow.get_modal: gboolean; cdecl;
begin
  Result := Gtk4.gtk_window_get_modal(@self);
end;

function TGtkWindow.get_resizable: gboolean; cdecl;
begin
  Result := Gtk4.gtk_window_get_resizable(@self);
end;

function TGtkWindow.get_title: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_window_get_title(@self);
end;

function TGtkWindow.get_titlebar: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_window_get_titlebar(@self);
end;

function TGtkWindow.get_transient_for: PGtkWindow; cdecl;
begin
  Result := Gtk4.gtk_window_get_transient_for(@self);
end;

function TGtkWindow.has_group: gboolean; cdecl;
begin
  Result := Gtk4.gtk_window_has_group(@self);
end;

function TGtkWindow.is_active: gboolean; cdecl;
begin
  Result := Gtk4.gtk_window_is_active(@self);
end;

function TGtkWindow.is_fullscreen: gboolean; cdecl;
begin
  Result := Gtk4.gtk_window_is_fullscreen(@self);
end;

function TGtkWindow.is_maximized: gboolean; cdecl;
begin
  Result := Gtk4.gtk_window_is_maximized(@self);
end;

procedure TGtkWindow.maximize; cdecl;
begin
  Gtk4.gtk_window_maximize(@self);
end;

procedure TGtkWindow.minimize; cdecl;
begin
  Gtk4.gtk_window_minimize(@self);
end;

procedure TGtkWindow.present; cdecl;
begin
  Gtk4.gtk_window_present(@self);
end;

procedure TGtkWindow.present_with_time(timestamp: guint32); cdecl;
begin
  Gtk4.gtk_window_present_with_time(@self, timestamp);
end;

procedure TGtkWindow.set_application(application: PGtkApplication); cdecl;
begin
  Gtk4.gtk_window_set_application(@self, application);
end;

procedure TGtkWindow.set_child(child: PGtkWidget); cdecl;
begin
  Gtk4.gtk_window_set_child(@self, child);
end;

procedure TGtkWindow.set_decorated(setting: gboolean); cdecl;
begin
  Gtk4.gtk_window_set_decorated(@self, setting);
end;

procedure TGtkWindow.set_default_size(width: gint; height: gint); cdecl;
begin
  Gtk4.gtk_window_set_default_size(@self, width, height);
end;

procedure TGtkWindow.set_default_widget(default_widget: PGtkWidget); cdecl;
begin
  Gtk4.gtk_window_set_default_widget(@self, default_widget);
end;

procedure TGtkWindow.set_deletable(setting: gboolean); cdecl;
begin
  Gtk4.gtk_window_set_deletable(@self, setting);
end;

procedure TGtkWindow.set_destroy_with_parent(setting: gboolean); cdecl;
begin
  Gtk4.gtk_window_set_destroy_with_parent(@self, setting);
end;

procedure TGtkWindow.set_display(display: PGdkDisplay); cdecl;
begin
  Gtk4.gtk_window_set_display(@self, display);
end;

procedure TGtkWindow.set_focus(focus: PGtkWidget); cdecl;
begin
  Gtk4.gtk_window_set_focus(@self, focus);
end;

procedure TGtkWindow.set_focus_visible(setting: gboolean); cdecl;
begin
  Gtk4.gtk_window_set_focus_visible(@self, setting);
end;

procedure TGtkWindow.set_handle_menubar_accel(handle_menubar_accel: gboolean); cdecl;
begin
  Gtk4.gtk_window_set_handle_menubar_accel(@self, handle_menubar_accel);
end;

procedure TGtkWindow.set_hide_on_close(setting: gboolean); cdecl;
begin
  Gtk4.gtk_window_set_hide_on_close(@self, setting);
end;

procedure TGtkWindow.set_icon_name(name: Pgchar); cdecl;
begin
  Gtk4.gtk_window_set_icon_name(@self, name);
end;

procedure TGtkWindow.set_mnemonics_visible(setting: gboolean); cdecl;
begin
  Gtk4.gtk_window_set_mnemonics_visible(@self, setting);
end;

procedure TGtkWindow.set_modal(modal: gboolean); cdecl;
begin
  Gtk4.gtk_window_set_modal(@self, modal);
end;

procedure TGtkWindow.set_resizable(resizable: gboolean); cdecl;
begin
  Gtk4.gtk_window_set_resizable(@self, resizable);
end;

procedure TGtkWindow.set_startup_id(startup_id: Pgchar); cdecl;
begin
  Gtk4.gtk_window_set_startup_id(@self, startup_id);
end;

procedure TGtkWindow.set_title(title: Pgchar); cdecl;
begin
  Gtk4.gtk_window_set_title(@self, title);
end;

procedure TGtkWindow.set_titlebar(titlebar: PGtkWidget); cdecl;
begin
  Gtk4.gtk_window_set_titlebar(@self, titlebar);
end;

procedure TGtkWindow.set_transient_for(parent: PGtkWindow); cdecl;
begin
  Gtk4.gtk_window_set_transient_for(@self, parent);
end;

procedure TGtkWindow.unfullscreen; cdecl;
begin
  Gtk4.gtk_window_unfullscreen(@self);
end;

procedure TGtkWindow.unmaximize; cdecl;
begin
  Gtk4.gtk_window_unmaximize(@self);
end;

procedure TGtkWindow.unminimize; cdecl;
begin
  Gtk4.gtk_window_unminimize(@self);
end;

function TGtkAppChooserDialog.new(parent: PGtkWindow; flags: TGtkDialogFlags; file_: PGFile): PGtkAppChooserDialog; cdecl;
begin
  Result := Gtk4.gtk_app_chooser_dialog_new(parent, flags, file_);
end;

function TGtkAppChooserDialog.new_for_content_type(parent: PGtkWindow; flags: TGtkDialogFlags; content_type: Pgchar): PGtkAppChooserDialog; cdecl;
begin
  Result := Gtk4.gtk_app_chooser_dialog_new_for_content_type(parent, flags, content_type);
end;

function TGtkAppChooserDialog.get_heading: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_app_chooser_dialog_get_heading(@self);
end;

function TGtkAppChooserDialog.get_widget: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_app_chooser_dialog_get_widget(@self);
end;

procedure TGtkAppChooserDialog.set_heading(heading: Pgchar); cdecl;
begin
  Gtk4.gtk_app_chooser_dialog_set_heading(@self, heading);
end;

function TGtkAppChooserWidget.new(content_type: Pgchar): PGtkAppChooserWidget; cdecl;
begin
  Result := Gtk4.gtk_app_chooser_widget_new(content_type);
end;

function TGtkAppChooserWidget.get_default_text: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_app_chooser_widget_get_default_text(@self);
end;

function TGtkAppChooserWidget.get_show_all: gboolean; cdecl;
begin
  Result := Gtk4.gtk_app_chooser_widget_get_show_all(@self);
end;

function TGtkAppChooserWidget.get_show_default: gboolean; cdecl;
begin
  Result := Gtk4.gtk_app_chooser_widget_get_show_default(@self);
end;

function TGtkAppChooserWidget.get_show_fallback: gboolean; cdecl;
begin
  Result := Gtk4.gtk_app_chooser_widget_get_show_fallback(@self);
end;

function TGtkAppChooserWidget.get_show_other: gboolean; cdecl;
begin
  Result := Gtk4.gtk_app_chooser_widget_get_show_other(@self);
end;

function TGtkAppChooserWidget.get_show_recommended: gboolean; cdecl;
begin
  Result := Gtk4.gtk_app_chooser_widget_get_show_recommended(@self);
end;

procedure TGtkAppChooserWidget.set_default_text(text: Pgchar); cdecl;
begin
  Gtk4.gtk_app_chooser_widget_set_default_text(@self, text);
end;

procedure TGtkAppChooserWidget.set_show_all(setting: gboolean); cdecl;
begin
  Gtk4.gtk_app_chooser_widget_set_show_all(@self, setting);
end;

procedure TGtkAppChooserWidget.set_show_default(setting: gboolean); cdecl;
begin
  Gtk4.gtk_app_chooser_widget_set_show_default(@self, setting);
end;

procedure TGtkAppChooserWidget.set_show_fallback(setting: gboolean); cdecl;
begin
  Gtk4.gtk_app_chooser_widget_set_show_fallback(@self, setting);
end;

procedure TGtkAppChooserWidget.set_show_other(setting: gboolean); cdecl;
begin
  Gtk4.gtk_app_chooser_widget_set_show_other(@self, setting);
end;

procedure TGtkAppChooserWidget.set_show_recommended(setting: gboolean); cdecl;
begin
  Gtk4.gtk_app_chooser_widget_set_show_recommended(@self, setting);
end;

function TGtkApplication.new(application_id: Pgchar; flags: TGApplicationFlags): PGtkApplication; cdecl;
begin
  Result := Gtk4.gtk_application_new(application_id, flags);
end;

procedure TGtkApplication.add_window(window: PGtkWindow); cdecl;
begin
  Gtk4.gtk_application_add_window(@self, window);
end;

function TGtkApplication.get_accels_for_action(detailed_action_name: Pgchar): PPgchar; cdecl;
begin
  Result := Gtk4.gtk_application_get_accels_for_action(@self, detailed_action_name);
end;

function TGtkApplication.get_actions_for_accel(accel: Pgchar): PPgchar; cdecl;
begin
  Result := Gtk4.gtk_application_get_actions_for_accel(@self, accel);
end;

function TGtkApplication.get_active_window: PGtkWindow; cdecl;
begin
  Result := Gtk4.gtk_application_get_active_window(@self);
end;

function TGtkApplication.get_menu_by_id(id: Pgchar): PGMenu; cdecl;
begin
  Result := Gtk4.gtk_application_get_menu_by_id(@self, id);
end;

function TGtkApplication.get_menubar: PGMenuModel; cdecl;
begin
  Result := Gtk4.gtk_application_get_menubar(@self);
end;

function TGtkApplication.get_window_by_id(id: guint): PGtkWindow; cdecl;
begin
  Result := Gtk4.gtk_application_get_window_by_id(@self, id);
end;

function TGtkApplication.get_windows: PGList; cdecl;
begin
  Result := Gtk4.gtk_application_get_windows(@self);
end;

function TGtkApplication.inhibit(window: PGtkWindow; flags: TGtkApplicationInhibitFlags; reason: Pgchar): guint; cdecl;
begin
  Result := Gtk4.gtk_application_inhibit(@self, window, flags, reason);
end;

function TGtkApplication.list_action_descriptions: PPgchar; cdecl;
begin
  Result := Gtk4.gtk_application_list_action_descriptions(@self);
end;

procedure TGtkApplication.remove_window(window: PGtkWindow); cdecl;
begin
  Gtk4.gtk_application_remove_window(@self, window);
end;

procedure TGtkApplication.set_accels_for_action(detailed_action_name: Pgchar; accels: PPgchar); cdecl;
begin
  Gtk4.gtk_application_set_accels_for_action(@self, detailed_action_name, accels);
end;

procedure TGtkApplication.set_menubar(menubar: PGMenuModel); cdecl;
begin
  Gtk4.gtk_application_set_menubar(@self, menubar);
end;

procedure TGtkApplication.uninhibit(cookie: guint); cdecl;
begin
  Gtk4.gtk_application_uninhibit(@self, cookie);
end;

function TGtkApplicationWindow.new(application: PGtkApplication): PGtkApplicationWindow; cdecl;
begin
  Result := Gtk4.gtk_application_window_new(application);
end;

function TGtkApplicationWindow.get_help_overlay: PGtkShortcutsWindow; cdecl;
begin
  Result := Gtk4.gtk_application_window_get_help_overlay(@self);
end;

function TGtkApplicationWindow.get_id: guint; cdecl;
begin
  Result := Gtk4.gtk_application_window_get_id(@self);
end;

function TGtkApplicationWindow.get_show_menubar: gboolean; cdecl;
begin
  Result := Gtk4.gtk_application_window_get_show_menubar(@self);
end;

procedure TGtkApplicationWindow.set_help_overlay(help_overlay: PGtkShortcutsWindow); cdecl;
begin
  Gtk4.gtk_application_window_set_help_overlay(@self, help_overlay);
end;

procedure TGtkApplicationWindow.set_show_menubar(show_menubar: gboolean); cdecl;
begin
  Gtk4.gtk_application_window_set_show_menubar(@self, show_menubar);
end;

procedure TGtkWidgetClass.add_shortcut(shortcut: PGtkShortcut); cdecl;
begin
  Gtk4.gtk_widget_class_add_shortcut(@self, shortcut);
end;

procedure TGtkWidgetClass.bind_template_callback_full(callback_name: Pgchar; callback_symbol: TGCallback); cdecl;
begin
  Gtk4.gtk_widget_class_bind_template_callback_full(@self, callback_name, callback_symbol);
end;

procedure TGtkWidgetClass.bind_template_child_full(name: Pgchar; internal_child: gboolean; struct_offset: gssize); cdecl;
begin
  Gtk4.gtk_widget_class_bind_template_child_full(@self, name, internal_child, struct_offset);
end;

function TGtkWidgetClass.get_accessible_role: TGtkAccessibleRole; cdecl;
begin
  Result := Gtk4.gtk_widget_class_get_accessible_role(@self);
end;

function TGtkWidgetClass.get_activate_signal: guint; cdecl;
begin
  Result := Gtk4.gtk_widget_class_get_activate_signal(@self);
end;

function TGtkWidgetClass.get_css_name: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_widget_class_get_css_name(@self);
end;

function TGtkWidgetClass.get_layout_manager_type: TGType; cdecl;
begin
  Result := Gtk4.gtk_widget_class_get_layout_manager_type(@self);
end;

procedure TGtkWidgetClass.install_action(action_name: Pgchar; parameter_type: Pgchar; activate: TGtkWidgetActionActivateFunc); cdecl;
begin
  Gtk4.gtk_widget_class_install_action(@self, action_name, parameter_type, activate);
end;

procedure TGtkWidgetClass.install_property_action(action_name: Pgchar; property_name: Pgchar); cdecl;
begin
  Gtk4.gtk_widget_class_install_property_action(@self, action_name, property_name);
end;

function TGtkWidgetClass.query_action(index_: guint; owner: PGType; action_name: PPgchar; parameter_type: PPGVariantType; property_name: PPgchar): gboolean; cdecl;
begin
  Result := Gtk4.gtk_widget_class_query_action(@self, index_, owner, action_name, parameter_type, property_name);
end;

procedure TGtkWidgetClass.set_accessible_role(accessible_role: TGtkAccessibleRole); cdecl;
begin
  Gtk4.gtk_widget_class_set_accessible_role(@self, accessible_role);
end;

procedure TGtkWidgetClass.set_activate_signal(signal_id: guint); cdecl;
begin
  Gtk4.gtk_widget_class_set_activate_signal(@self, signal_id);
end;

procedure TGtkWidgetClass.set_activate_signal_from_name(signal_name: Pgchar); cdecl;
begin
  Gtk4.gtk_widget_class_set_activate_signal_from_name(@self, signal_name);
end;

procedure TGtkWidgetClass.set_css_name(name: Pgchar); cdecl;
begin
  Gtk4.gtk_widget_class_set_css_name(@self, name);
end;

procedure TGtkWidgetClass.set_layout_manager_type(type_: TGType); cdecl;
begin
  Gtk4.gtk_widget_class_set_layout_manager_type(@self, type_);
end;

procedure TGtkWidgetClass.set_template(template_bytes: PGBytes); cdecl;
begin
  Gtk4.gtk_widget_class_set_template(@self, template_bytes);
end;

procedure TGtkWidgetClass.set_template_from_resource(resource_name: Pgchar); cdecl;
begin
  Gtk4.gtk_widget_class_set_template_from_resource(@self, resource_name);
end;

procedure TGtkWidgetClass.set_template_scope(scope: PGtkBuilderScope); cdecl;
begin
  Gtk4.gtk_widget_class_set_template_scope(@self, scope);
end;

function TGtkAspectFrame.new(xalign: gfloat; yalign: gfloat; ratio: gfloat; obey_child: gboolean): PGtkAspectFrame; cdecl;
begin
  Result := Gtk4.gtk_aspect_frame_new(xalign, yalign, ratio, obey_child);
end;

function TGtkAspectFrame.get_child: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_aspect_frame_get_child(@self);
end;

function TGtkAspectFrame.get_obey_child: gboolean; cdecl;
begin
  Result := Gtk4.gtk_aspect_frame_get_obey_child(@self);
end;

function TGtkAspectFrame.get_ratio: gfloat; cdecl;
begin
  Result := Gtk4.gtk_aspect_frame_get_ratio(@self);
end;

function TGtkAspectFrame.get_xalign: gfloat; cdecl;
begin
  Result := Gtk4.gtk_aspect_frame_get_xalign(@self);
end;

function TGtkAspectFrame.get_yalign: gfloat; cdecl;
begin
  Result := Gtk4.gtk_aspect_frame_get_yalign(@self);
end;

procedure TGtkAspectFrame.set_child(child: PGtkWidget); cdecl;
begin
  Gtk4.gtk_aspect_frame_set_child(@self, child);
end;

procedure TGtkAspectFrame.set_obey_child(obey_child: gboolean); cdecl;
begin
  Gtk4.gtk_aspect_frame_set_obey_child(@self, obey_child);
end;

procedure TGtkAspectFrame.set_ratio(ratio: gfloat); cdecl;
begin
  Gtk4.gtk_aspect_frame_set_ratio(@self, ratio);
end;

procedure TGtkAspectFrame.set_xalign(xalign: gfloat); cdecl;
begin
  Gtk4.gtk_aspect_frame_set_xalign(@self, xalign);
end;

procedure TGtkAspectFrame.set_yalign(yalign: gfloat); cdecl;
begin
  Gtk4.gtk_aspect_frame_set_yalign(@self, yalign);
end;

function TGtkAssistant.new: PGtkAssistant; cdecl;
begin
  Result := Gtk4.gtk_assistant_new();
end;

procedure TGtkAssistant.add_action_widget(child: PGtkWidget); cdecl;
begin
  Gtk4.gtk_assistant_add_action_widget(@self, child);
end;

function TGtkAssistant.append_page(page: PGtkWidget): gint; cdecl;
begin
  Result := Gtk4.gtk_assistant_append_page(@self, page);
end;

procedure TGtkAssistant.commit; cdecl;
begin
  Gtk4.gtk_assistant_commit(@self);
end;

function TGtkAssistant.get_current_page: gint; cdecl;
begin
  Result := Gtk4.gtk_assistant_get_current_page(@self);
end;

function TGtkAssistant.get_n_pages: gint; cdecl;
begin
  Result := Gtk4.gtk_assistant_get_n_pages(@self);
end;

function TGtkAssistant.get_nth_page(page_num: gint): PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_assistant_get_nth_page(@self, page_num);
end;

function TGtkAssistant.get_page(child: PGtkWidget): PGtkAssistantPage; cdecl;
begin
  Result := Gtk4.gtk_assistant_get_page(@self, child);
end;

function TGtkAssistant.get_page_complete(page: PGtkWidget): gboolean; cdecl;
begin
  Result := Gtk4.gtk_assistant_get_page_complete(@self, page);
end;

function TGtkAssistant.get_page_title(page: PGtkWidget): Pgchar; cdecl;
begin
  Result := Gtk4.gtk_assistant_get_page_title(@self, page);
end;

function TGtkAssistant.get_page_type(page: PGtkWidget): TGtkAssistantPageType; cdecl;
begin
  Result := Gtk4.gtk_assistant_get_page_type(@self, page);
end;

function TGtkAssistant.get_pages: PGListModel; cdecl;
begin
  Result := Gtk4.gtk_assistant_get_pages(@self);
end;

function TGtkAssistant.insert_page(page: PGtkWidget; position: gint): gint; cdecl;
begin
  Result := Gtk4.gtk_assistant_insert_page(@self, page, position);
end;

procedure TGtkAssistant.next_page; cdecl;
begin
  Gtk4.gtk_assistant_next_page(@self);
end;

function TGtkAssistant.prepend_page(page: PGtkWidget): gint; cdecl;
begin
  Result := Gtk4.gtk_assistant_prepend_page(@self, page);
end;

procedure TGtkAssistant.previous_page; cdecl;
begin
  Gtk4.gtk_assistant_previous_page(@self);
end;

procedure TGtkAssistant.remove_action_widget(child: PGtkWidget); cdecl;
begin
  Gtk4.gtk_assistant_remove_action_widget(@self, child);
end;

procedure TGtkAssistant.remove_page(page_num: gint); cdecl;
begin
  Gtk4.gtk_assistant_remove_page(@self, page_num);
end;

procedure TGtkAssistant.set_current_page(page_num: gint); cdecl;
begin
  Gtk4.gtk_assistant_set_current_page(@self, page_num);
end;

procedure TGtkAssistant.set_forward_page_func(page_func: TGtkAssistantPageFunc; data: gpointer; destroy_: TGDestroyNotify); cdecl;
begin
  Gtk4.gtk_assistant_set_forward_page_func(@self, page_func, data, destroy_);
end;

procedure TGtkAssistant.set_page_complete(page: PGtkWidget; complete: gboolean); cdecl;
begin
  Gtk4.gtk_assistant_set_page_complete(@self, page, complete);
end;

procedure TGtkAssistant.set_page_title(page: PGtkWidget; title: Pgchar); cdecl;
begin
  Gtk4.gtk_assistant_set_page_title(@self, page, title);
end;

procedure TGtkAssistant.set_page_type(page: PGtkWidget; type_: TGtkAssistantPageType); cdecl;
begin
  Gtk4.gtk_assistant_set_page_type(@self, page, type_);
end;

procedure TGtkAssistant.update_buttons_state; cdecl;
begin
  Gtk4.gtk_assistant_update_buttons_state(@self);
end;

function TGtkAssistantPage.get_child: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_assistant_page_get_child(@self);
end;

procedure TGtkLayoutManager.allocate(widget: PGtkWidget; width: gint; height: gint; baseline: gint); cdecl;
begin
  Gtk4.gtk_layout_manager_allocate(@self, widget, width, height, baseline);
end;

function TGtkLayoutManager.get_layout_child(child: PGtkWidget): PGtkLayoutChild; cdecl;
begin
  Result := Gtk4.gtk_layout_manager_get_layout_child(@self, child);
end;

function TGtkLayoutManager.get_request_mode: TGtkSizeRequestMode; cdecl;
begin
  Result := Gtk4.gtk_layout_manager_get_request_mode(@self);
end;

function TGtkLayoutManager.get_widget: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_layout_manager_get_widget(@self);
end;

procedure TGtkLayoutManager.layout_changed; cdecl;
begin
  Gtk4.gtk_layout_manager_layout_changed(@self);
end;

procedure TGtkLayoutManager.measure(widget: PGtkWidget; orientation: TGtkOrientation; for_size: gint; minimum: Pgint; natural: Pgint; minimum_baseline: Pgint; natural_baseline: Pgint); cdecl;
begin
  Gtk4.gtk_layout_manager_measure(@self, widget, orientation, for_size, minimum, natural, minimum_baseline, natural_baseline);
end;

function TGtkBinLayout.new: PGtkBinLayout; cdecl;
begin
  Result := Gtk4.gtk_bin_layout_new();
end;

function TGtkBitset.new_empty: PGtkBitset; cdecl;
begin
  Result := Gtk4.gtk_bitset_new_empty();
end;

function TGtkBitset.new_range(start: guint; n_items: guint): PGtkBitset; cdecl;
begin
  Result := Gtk4.gtk_bitset_new_range(start, n_items);
end;

function TGtkBitset.add(value: guint): gboolean; cdecl;
begin
  Result := Gtk4.gtk_bitset_add(@self, value);
end;

procedure TGtkBitset.add_range(start: guint; n_items: guint); cdecl;
begin
  Gtk4.gtk_bitset_add_range(@self, start, n_items);
end;

procedure TGtkBitset.add_range_closed(first: guint; last: guint); cdecl;
begin
  Gtk4.gtk_bitset_add_range_closed(@self, first, last);
end;

procedure TGtkBitset.add_rectangle(start: guint; width: guint; height: guint; stride: guint); cdecl;
begin
  Gtk4.gtk_bitset_add_rectangle(@self, start, width, height, stride);
end;

function TGtkBitset.contains(value: guint): gboolean; cdecl;
begin
  Result := Gtk4.gtk_bitset_contains(@self, value);
end;

function TGtkBitset.copy: PGtkBitset; cdecl;
begin
  Result := Gtk4.gtk_bitset_copy(@self);
end;

procedure TGtkBitset.difference(other: PGtkBitset); cdecl;
begin
  Gtk4.gtk_bitset_difference(@self, other);
end;

function TGtkBitset.equals(other: PGtkBitset): gboolean; cdecl;
begin
  Result := Gtk4.gtk_bitset_equals(@self, other);
end;

function TGtkBitset.get_maximum: guint; cdecl;
begin
  Result := Gtk4.gtk_bitset_get_maximum(@self);
end;

function TGtkBitset.get_minimum: guint; cdecl;
begin
  Result := Gtk4.gtk_bitset_get_minimum(@self);
end;

function TGtkBitset.get_nth(nth: guint): guint; cdecl;
begin
  Result := Gtk4.gtk_bitset_get_nth(@self, nth);
end;

function TGtkBitset.get_size: guint64; cdecl;
begin
  Result := Gtk4.gtk_bitset_get_size(@self);
end;

function TGtkBitset.get_size_in_range(first: guint; last: guint): guint64; cdecl;
begin
  Result := Gtk4.gtk_bitset_get_size_in_range(@self, first, last);
end;

procedure TGtkBitset.intersect(other: PGtkBitset); cdecl;
begin
  Gtk4.gtk_bitset_intersect(@self, other);
end;

function TGtkBitset.is_empty: gboolean; cdecl;
begin
  Result := Gtk4.gtk_bitset_is_empty(@self);
end;

function TGtkBitset.ref: PGtkBitset; cdecl;
begin
  Result := Gtk4.gtk_bitset_ref(@self);
end;

function TGtkBitset.remove(value: guint): gboolean; cdecl;
begin
  Result := Gtk4.gtk_bitset_remove(@self, value);
end;

procedure TGtkBitset.remove_all; cdecl;
begin
  Gtk4.gtk_bitset_remove_all(@self);
end;

procedure TGtkBitset.remove_range(start: guint; n_items: guint); cdecl;
begin
  Gtk4.gtk_bitset_remove_range(@self, start, n_items);
end;

procedure TGtkBitset.remove_range_closed(first: guint; last: guint); cdecl;
begin
  Gtk4.gtk_bitset_remove_range_closed(@self, first, last);
end;

procedure TGtkBitset.remove_rectangle(start: guint; width: guint; height: guint; stride: guint); cdecl;
begin
  Gtk4.gtk_bitset_remove_rectangle(@self, start, width, height, stride);
end;

procedure TGtkBitset.shift_left(amount: guint); cdecl;
begin
  Gtk4.gtk_bitset_shift_left(@self, amount);
end;

procedure TGtkBitset.shift_right(amount: guint); cdecl;
begin
  Gtk4.gtk_bitset_shift_right(@self, amount);
end;

procedure TGtkBitset.splice(position: guint; removed: guint; added: guint); cdecl;
begin
  Gtk4.gtk_bitset_splice(@self, position, removed, added);
end;

procedure TGtkBitset.subtract(other: PGtkBitset); cdecl;
begin
  Gtk4.gtk_bitset_subtract(@self, other);
end;

procedure TGtkBitset.union(other: PGtkBitset); cdecl;
begin
  Gtk4.gtk_bitset_union(@self, other);
end;

procedure TGtkBitset.unref; cdecl;
begin
  Gtk4.gtk_bitset_unref(@self);
end;

function TGtkBitsetIter.get_value: guint; cdecl;
begin
  Result := Gtk4.gtk_bitset_iter_get_value(@self);
end;

function TGtkBitsetIter.is_valid: gboolean; cdecl;
begin
  Result := Gtk4.gtk_bitset_iter_is_valid(@self);
end;

function TGtkBitsetIter.next(value: Pguint): gboolean; cdecl;
begin
  Result := Gtk4.gtk_bitset_iter_next(@self, value);
end;

function TGtkBitsetIter.previous(value: Pguint): gboolean; cdecl;
begin
  Result := Gtk4.gtk_bitset_iter_previous(@self, value);
end;

function TGtkBitsetIter.init_at(iter: PGtkBitsetIter; set_: PGtkBitset; target: guint; value: Pguint): gboolean; cdecl;
begin
  Result := Gtk4.gtk_bitset_iter_init_at(iter, set_, target, value);
end;

function TGtkBitsetIter.init_first(iter: PGtkBitsetIter; set_: PGtkBitset; value: Pguint): gboolean; cdecl;
begin
  Result := Gtk4.gtk_bitset_iter_init_first(iter, set_, value);
end;

function TGtkBitsetIter.init_last(iter: PGtkBitsetIter; set_: PGtkBitset; value: Pguint): gboolean; cdecl;
begin
  Result := Gtk4.gtk_bitset_iter_init_last(iter, set_, value);
end;

function TGtkBookmarkList.new(filename: Pgchar; attributes: Pgchar): PGtkBookmarkList; cdecl;
begin
  Result := Gtk4.gtk_bookmark_list_new(filename, attributes);
end;

function TGtkBookmarkList.get_attributes: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_bookmark_list_get_attributes(@self);
end;

function TGtkBookmarkList.get_filename: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_bookmark_list_get_filename(@self);
end;

function TGtkBookmarkList.get_io_priority: gint; cdecl;
begin
  Result := Gtk4.gtk_bookmark_list_get_io_priority(@self);
end;

function TGtkBookmarkList.is_loading: gboolean; cdecl;
begin
  Result := Gtk4.gtk_bookmark_list_is_loading(@self);
end;

procedure TGtkBookmarkList.set_attributes(attributes: Pgchar); cdecl;
begin
  Gtk4.gtk_bookmark_list_set_attributes(@self, attributes);
end;

procedure TGtkBookmarkList.set_io_priority(io_priority: gint); cdecl;
begin
  Gtk4.gtk_bookmark_list_set_io_priority(@self, io_priority);
end;

function TGtkBoolFilter.new(expression: PGtkExpression): PGtkBoolFilter; cdecl;
begin
  Result := Gtk4.gtk_bool_filter_new(expression);
end;

function TGtkBoolFilter.get_expression: PGtkExpression; cdecl;
begin
  Result := Gtk4.gtk_bool_filter_get_expression(@self);
end;

function TGtkBoolFilter.get_invert: gboolean; cdecl;
begin
  Result := Gtk4.gtk_bool_filter_get_invert(@self);
end;

procedure TGtkBoolFilter.set_expression(expression: PGtkExpression); cdecl;
begin
  Gtk4.gtk_bool_filter_set_expression(@self, expression);
end;

procedure TGtkBoolFilter.set_invert(invert: gboolean); cdecl;
begin
  Gtk4.gtk_bool_filter_set_invert(@self, invert);
end;

function TGtkExpression.bind(target: PGObject; property_: Pgchar; this_: PGObject): PGtkExpressionWatch; cdecl;
begin
  Result := Gtk4.gtk_expression_bind(@self, target, property_, this_);
end;

function TGtkExpression.evaluate(this_: PGObject; value: PGValue): gboolean; cdecl;
begin
  Result := Gtk4.gtk_expression_evaluate(@self, this_, value);
end;

function TGtkExpression.get_value_type: TGType; cdecl;
begin
  Result := Gtk4.gtk_expression_get_value_type(@self);
end;

function TGtkExpression.is_static: gboolean; cdecl;
begin
  Result := Gtk4.gtk_expression_is_static(@self);
end;

function TGtkExpression.ref: PGtkExpression; cdecl;
begin
  Result := Gtk4.gtk_expression_ref(@self);
end;

procedure TGtkExpression.unref; cdecl;
begin
  Gtk4.gtk_expression_unref(@self);
end;

function TGtkExpression.watch(this_: PGObject; notify: TGtkExpressionNotify; user_data: gpointer; user_destroy: TGDestroyNotify): PGtkExpressionWatch; cdecl;
begin
  Result := Gtk4.gtk_expression_watch(@self, this_, notify, user_data, user_destroy);
end;

function TGtkBorder.new: PGtkBorder; cdecl;
begin
  Result := Gtk4.gtk_border_new();
end;

function TGtkBorder.copy: PGtkBorder; cdecl;
begin
  Result := Gtk4.gtk_border_copy(@self);
end;

procedure TGtkBorder.free; cdecl;
begin
  Gtk4.gtk_border_free(@self);
end;

function TGtkOrientable.get_orientation: TGtkOrientation; cdecl;
begin
  Result := Gtk4.gtk_orientable_get_orientation(@self);
end;

procedure TGtkOrientable.set_orientation(orientation: TGtkOrientation); cdecl;
begin
  Gtk4.gtk_orientable_set_orientation(@self, orientation);
end;

function TGtkBox.new(orientation: TGtkOrientation; spacing: gint): PGtkBox; cdecl;
begin
  Result := Gtk4.gtk_box_new(orientation, spacing);
end;

procedure TGtkBox.append(child: PGtkWidget); cdecl;
begin
  Gtk4.gtk_box_append(@self, child);
end;

function TGtkBox.get_baseline_position: TGtkBaselinePosition; cdecl;
begin
  Result := Gtk4.gtk_box_get_baseline_position(@self);
end;

function TGtkBox.get_homogeneous: gboolean; cdecl;
begin
  Result := Gtk4.gtk_box_get_homogeneous(@self);
end;

function TGtkBox.get_spacing: gint; cdecl;
begin
  Result := Gtk4.gtk_box_get_spacing(@self);
end;

procedure TGtkBox.insert_child_after(child: PGtkWidget; sibling: PGtkWidget); cdecl;
begin
  Gtk4.gtk_box_insert_child_after(@self, child, sibling);
end;

procedure TGtkBox.prepend(child: PGtkWidget); cdecl;
begin
  Gtk4.gtk_box_prepend(@self, child);
end;

procedure TGtkBox.remove(child: PGtkWidget); cdecl;
begin
  Gtk4.gtk_box_remove(@self, child);
end;

procedure TGtkBox.reorder_child_after(child: PGtkWidget; sibling: PGtkWidget); cdecl;
begin
  Gtk4.gtk_box_reorder_child_after(@self, child, sibling);
end;

procedure TGtkBox.set_baseline_position(position: TGtkBaselinePosition); cdecl;
begin
  Gtk4.gtk_box_set_baseline_position(@self, position);
end;

procedure TGtkBox.set_homogeneous(homogeneous: gboolean); cdecl;
begin
  Gtk4.gtk_box_set_homogeneous(@self, homogeneous);
end;

procedure TGtkBox.set_spacing(spacing: gint); cdecl;
begin
  Gtk4.gtk_box_set_spacing(@self, spacing);
end;

function TGtkBoxLayout.new(orientation: TGtkOrientation): PGtkBoxLayout; cdecl;
begin
  Result := Gtk4.gtk_box_layout_new(orientation);
end;

function TGtkBoxLayout.get_baseline_position: TGtkBaselinePosition; cdecl;
begin
  Result := Gtk4.gtk_box_layout_get_baseline_position(@self);
end;

function TGtkBoxLayout.get_homogeneous: gboolean; cdecl;
begin
  Result := Gtk4.gtk_box_layout_get_homogeneous(@self);
end;

function TGtkBoxLayout.get_spacing: guint; cdecl;
begin
  Result := Gtk4.gtk_box_layout_get_spacing(@self);
end;

procedure TGtkBoxLayout.set_baseline_position(position: TGtkBaselinePosition); cdecl;
begin
  Gtk4.gtk_box_layout_set_baseline_position(@self, position);
end;

procedure TGtkBoxLayout.set_homogeneous(homogeneous: gboolean); cdecl;
begin
  Gtk4.gtk_box_layout_set_homogeneous(@self, homogeneous);
end;

procedure TGtkBoxLayout.set_spacing(spacing: guint); cdecl;
begin
  Gtk4.gtk_box_layout_set_spacing(@self, spacing);
end;

function TGtkBuilder.new: PGtkBuilder; cdecl;
begin
  Result := Gtk4.gtk_builder_new();
end;

function TGtkBuilder.new_from_file(filename: Pgchar): PGtkBuilder; cdecl;
begin
  Result := Gtk4.gtk_builder_new_from_file(filename);
end;

function TGtkBuilder.new_from_resource(resource_path: Pgchar): PGtkBuilder; cdecl;
begin
  Result := Gtk4.gtk_builder_new_from_resource(resource_path);
end;

function TGtkBuilder.new_from_string(string_: Pgchar; length: gssize): PGtkBuilder; cdecl;
begin
  Result := Gtk4.gtk_builder_new_from_string(string_, length);
end;

function TGtkBuilder.add_from_file(filename: Pgchar; error: PPGError): gboolean; cdecl;
begin
  Result := Gtk4.gtk_builder_add_from_file(@self, filename, error);
end;

function TGtkBuilder.add_from_resource(resource_path: Pgchar; error: PPGError): gboolean; cdecl;
begin
  Result := Gtk4.gtk_builder_add_from_resource(@self, resource_path, error);
end;

function TGtkBuilder.add_from_string(buffer: Pgchar; length: gssize; error: PPGError): gboolean; cdecl;
begin
  Result := Gtk4.gtk_builder_add_from_string(@self, buffer, length, error);
end;

function TGtkBuilder.add_objects_from_file(filename: Pgchar; object_ids: PPgchar; error: PPGError): gboolean; cdecl;
begin
  Result := Gtk4.gtk_builder_add_objects_from_file(@self, filename, object_ids, error);
end;

function TGtkBuilder.add_objects_from_resource(resource_path: Pgchar; object_ids: PPgchar; error: PPGError): gboolean; cdecl;
begin
  Result := Gtk4.gtk_builder_add_objects_from_resource(@self, resource_path, object_ids, error);
end;

function TGtkBuilder.add_objects_from_string(buffer: Pgchar; length: gssize; object_ids: PPgchar; error: PPGError): gboolean; cdecl;
begin
  Result := Gtk4.gtk_builder_add_objects_from_string(@self, buffer, length, object_ids, error);
end;

function TGtkBuilder.create_closure(function_name: Pgchar; flags: TGtkBuilderClosureFlags; object_: PGObject; error: PPGError): PGClosure; cdecl;
begin
  Result := Gtk4.gtk_builder_create_closure(@self, function_name, flags, object_, error);
end;

procedure TGtkBuilder.expose_object(name: Pgchar; object_: PGObject); cdecl;
begin
  Gtk4.gtk_builder_expose_object(@self, name, object_);
end;

function TGtkBuilder.extend_with_template(object_: PGObject; template_type: TGType; buffer: Pgchar; length: gssize; error: PPGError): gboolean; cdecl;
begin
  Result := Gtk4.gtk_builder_extend_with_template(@self, object_, template_type, buffer, length, error);
end;

function TGtkBuilder.get_current_object: PGObject; cdecl;
begin
  Result := Gtk4.gtk_builder_get_current_object(@self);
end;

function TGtkBuilder.get_object(name: Pgchar): PGObject; cdecl;
begin
  Result := Gtk4.gtk_builder_get_object(@self, name);
end;

function TGtkBuilder.get_objects: PGSList; cdecl;
begin
  Result := Gtk4.gtk_builder_get_objects(@self);
end;

function TGtkBuilder.get_scope: PGtkBuilderScope; cdecl;
begin
  Result := Gtk4.gtk_builder_get_scope(@self);
end;

function TGtkBuilder.get_translation_domain: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_builder_get_translation_domain(@self);
end;

function TGtkBuilder.get_type_from_name(type_name: Pgchar): TGType; cdecl;
begin
  Result := Gtk4.gtk_builder_get_type_from_name(@self, type_name);
end;

procedure TGtkBuilder.set_current_object(current_object: PGObject); cdecl;
begin
  Gtk4.gtk_builder_set_current_object(@self, current_object);
end;

procedure TGtkBuilder.set_scope(scope: PGtkBuilderScope); cdecl;
begin
  Gtk4.gtk_builder_set_scope(@self, scope);
end;

procedure TGtkBuilder.set_translation_domain(domain: Pgchar); cdecl;
begin
  Gtk4.gtk_builder_set_translation_domain(@self, domain);
end;

function TGtkBuilder.value_from_string(pspec: PGParamSpec; string_: Pgchar; value: PGValue; error: PPGError): gboolean; cdecl;
begin
  Result := Gtk4.gtk_builder_value_from_string(@self, pspec, string_, value, error);
end;

function TGtkBuilder.value_from_string_type(type_: TGType; string_: Pgchar; value: PGValue; error: PPGError): gboolean; cdecl;
begin
  Result := Gtk4.gtk_builder_value_from_string_type(@self, type_, string_, value, error);
end;

function TGtkBuildableParseContext.get_element: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_buildable_parse_context_get_element(@self);
end;

function TGtkBuildableParseContext.get_element_stack: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_buildable_parse_context_get_element_stack(@self);
end;

procedure TGtkBuildableParseContext.get_position(line_number: Pgint; char_number: Pgint); cdecl;
begin
  Gtk4.gtk_buildable_parse_context_get_position(@self, line_number, char_number);
end;

function TGtkBuildableParseContext.pop: gpointer; cdecl;
begin
  Result := Gtk4.gtk_buildable_parse_context_pop(@self);
end;

procedure TGtkBuildableParseContext.push(parser: PGtkBuildableParser; user_data: gpointer); cdecl;
begin
  Gtk4.gtk_buildable_parse_context_push(@self, parser, user_data);
end;

function TGtkBuilderCScope.new: PGtkBuilderCScope; cdecl;
begin
  Result := Gtk4.gtk_builder_cscope_new();
end;

procedure TGtkBuilderCScope.add_callback_symbol(callback_name: Pgchar; callback_symbol: TGCallback); cdecl;
begin
  Gtk4.gtk_builder_cscope_add_callback_symbol(@self, callback_name, callback_symbol);
end;

function TGtkBuilderCScope.lookup_callback_symbol(callback_name: Pgchar): TGCallback; cdecl;
begin
  Result := Gtk4.gtk_builder_cscope_lookup_callback_symbol(@self, callback_name);
end;

function TGtkBuilderListItemFactory.new_from_bytes(scope: PGtkBuilderScope; bytes: PGBytes): PGtkBuilderListItemFactory; cdecl;
begin
  Result := Gtk4.gtk_builder_list_item_factory_new_from_bytes(scope, bytes);
end;

function TGtkBuilderListItemFactory.new_from_resource(scope: PGtkBuilderScope; resource_path: Pgchar): PGtkBuilderListItemFactory; cdecl;
begin
  Result := Gtk4.gtk_builder_list_item_factory_new_from_resource(scope, resource_path);
end;

function TGtkBuilderListItemFactory.get_bytes: PGBytes; cdecl;
begin
  Result := Gtk4.gtk_builder_list_item_factory_get_bytes(@self);
end;

function TGtkBuilderListItemFactory.get_resource: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_builder_list_item_factory_get_resource(@self);
end;

function TGtkBuilderListItemFactory.get_scope: PGtkBuilderScope; cdecl;
begin
  Result := Gtk4.gtk_builder_list_item_factory_get_scope(@self);
end;

function TGtkButton.new: PGtkButton; cdecl;
begin
  Result := Gtk4.gtk_button_new();
end;

function TGtkButton.new_from_icon_name(icon_name: Pgchar): PGtkButton; cdecl;
begin
  Result := Gtk4.gtk_button_new_from_icon_name(icon_name);
end;

function TGtkButton.new_with_label(label_: Pgchar): PGtkButton; cdecl;
begin
  Result := Gtk4.gtk_button_new_with_label(label_);
end;

function TGtkButton.new_with_mnemonic(label_: Pgchar): PGtkButton; cdecl;
begin
  Result := Gtk4.gtk_button_new_with_mnemonic(label_);
end;

function TGtkButton.get_child: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_button_get_child(@self);
end;

function TGtkButton.get_has_frame: gboolean; cdecl;
begin
  Result := Gtk4.gtk_button_get_has_frame(@self);
end;

function TGtkButton.get_icon_name: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_button_get_icon_name(@self);
end;

function TGtkButton.get_label: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_button_get_label(@self);
end;

function TGtkButton.get_use_underline: gboolean; cdecl;
begin
  Result := Gtk4.gtk_button_get_use_underline(@self);
end;

procedure TGtkButton.set_child(child: PGtkWidget); cdecl;
begin
  Gtk4.gtk_button_set_child(@self, child);
end;

procedure TGtkButton.set_has_frame(has_frame: gboolean); cdecl;
begin
  Gtk4.gtk_button_set_has_frame(@self, has_frame);
end;

procedure TGtkButton.set_icon_name(icon_name: Pgchar); cdecl;
begin
  Gtk4.gtk_button_set_icon_name(@self, icon_name);
end;

procedure TGtkButton.set_label(label_: Pgchar); cdecl;
begin
  Gtk4.gtk_button_set_label(@self, label_);
end;

procedure TGtkButton.set_use_underline(use_underline: gboolean); cdecl;
begin
  Gtk4.gtk_button_set_use_underline(@self, use_underline);
end;

function TGtkCClosureExpression.new(value_type: TGType; marshal: TGClosureMarshal; n_params: guint; params: PPGtkExpression; callback_func: TGCallback; user_data: gpointer; user_destroy: TGClosureNotify): PGtkCClosureExpression; cdecl;
begin
  Result := Gtk4.gtk_cclosure_expression_new(value_type, marshal, n_params, params, callback_func, user_data, user_destroy);
end;

function TGtkCalendar.new: PGtkCalendar; cdecl;
begin
  Result := Gtk4.gtk_calendar_new();
end;

procedure TGtkCalendar.clear_marks; cdecl;
begin
  Gtk4.gtk_calendar_clear_marks(@self);
end;

function TGtkCalendar.get_date: PGDateTime; cdecl;
begin
  Result := Gtk4.gtk_calendar_get_date(@self);
end;

function TGtkCalendar.get_day_is_marked(day: guint): gboolean; cdecl;
begin
  Result := Gtk4.gtk_calendar_get_day_is_marked(@self, day);
end;

function TGtkCalendar.get_show_day_names: gboolean; cdecl;
begin
  Result := Gtk4.gtk_calendar_get_show_day_names(@self);
end;

function TGtkCalendar.get_show_heading: gboolean; cdecl;
begin
  Result := Gtk4.gtk_calendar_get_show_heading(@self);
end;

function TGtkCalendar.get_show_week_numbers: gboolean; cdecl;
begin
  Result := Gtk4.gtk_calendar_get_show_week_numbers(@self);
end;

procedure TGtkCalendar.mark_day(day: guint); cdecl;
begin
  Gtk4.gtk_calendar_mark_day(@self, day);
end;

procedure TGtkCalendar.select_day(date: PGDateTime); cdecl;
begin
  Gtk4.gtk_calendar_select_day(@self, date);
end;

procedure TGtkCalendar.set_show_day_names(value: gboolean); cdecl;
begin
  Gtk4.gtk_calendar_set_show_day_names(@self, value);
end;

procedure TGtkCalendar.set_show_heading(value: gboolean); cdecl;
begin
  Gtk4.gtk_calendar_set_show_heading(@self, value);
end;

procedure TGtkCalendar.set_show_week_numbers(value: gboolean); cdecl;
begin
  Gtk4.gtk_calendar_set_show_week_numbers(@self, value);
end;

procedure TGtkCalendar.unmark_day(day: guint); cdecl;
begin
  Gtk4.gtk_calendar_unmark_day(@self, day);
end;

function TGtkCallbackAction.new(callback: TGtkShortcutFunc; data: gpointer; destroy_: TGDestroyNotify): PGtkCallbackAction; cdecl;
begin
  Result := Gtk4.gtk_callback_action_new(callback, data, destroy_);
end;

function TGtkCellRenderer.activate(event: PGdkEvent; widget: PGtkWidget; path: Pgchar; background_area: PGdkRectangle; cell_area: PGdkRectangle; flags: TGtkCellRendererState): gboolean; cdecl;
begin
  Result := Gtk4.gtk_cell_renderer_activate(@self, event, widget, path, background_area, cell_area, flags);
end;

procedure TGtkCellRenderer.get_aligned_area(widget: PGtkWidget; flags: TGtkCellRendererState; cell_area: PGdkRectangle; aligned_area: PGdkRectangle); cdecl;
begin
  Gtk4.gtk_cell_renderer_get_aligned_area(@self, widget, flags, cell_area, aligned_area);
end;

procedure TGtkCellRenderer.get_alignment(xalign: Pgfloat; yalign: Pgfloat); cdecl;
begin
  Gtk4.gtk_cell_renderer_get_alignment(@self, xalign, yalign);
end;

procedure TGtkCellRenderer.get_fixed_size(width: Pgint; height: Pgint); cdecl;
begin
  Gtk4.gtk_cell_renderer_get_fixed_size(@self, width, height);
end;

function TGtkCellRenderer.get_is_expanded: gboolean; cdecl;
begin
  Result := Gtk4.gtk_cell_renderer_get_is_expanded(@self);
end;

function TGtkCellRenderer.get_is_expander: gboolean; cdecl;
begin
  Result := Gtk4.gtk_cell_renderer_get_is_expander(@self);
end;

procedure TGtkCellRenderer.get_padding(xpad: Pgint; ypad: Pgint); cdecl;
begin
  Gtk4.gtk_cell_renderer_get_padding(@self, xpad, ypad);
end;

procedure TGtkCellRenderer.get_preferred_height(widget: PGtkWidget; minimum_size: Pgint; natural_size: Pgint); cdecl;
begin
  Gtk4.gtk_cell_renderer_get_preferred_height(@self, widget, minimum_size, natural_size);
end;

procedure TGtkCellRenderer.get_preferred_height_for_width(widget: PGtkWidget; width: gint; minimum_height: Pgint; natural_height: Pgint); cdecl;
begin
  Gtk4.gtk_cell_renderer_get_preferred_height_for_width(@self, widget, width, minimum_height, natural_height);
end;

procedure TGtkCellRenderer.get_preferred_size(widget: PGtkWidget; minimum_size: PGtkRequisition; natural_size: PGtkRequisition); cdecl;
begin
  Gtk4.gtk_cell_renderer_get_preferred_size(@self, widget, minimum_size, natural_size);
end;

procedure TGtkCellRenderer.get_preferred_width(widget: PGtkWidget; minimum_size: Pgint; natural_size: Pgint); cdecl;
begin
  Gtk4.gtk_cell_renderer_get_preferred_width(@self, widget, minimum_size, natural_size);
end;

procedure TGtkCellRenderer.get_preferred_width_for_height(widget: PGtkWidget; height: gint; minimum_width: Pgint; natural_width: Pgint); cdecl;
begin
  Gtk4.gtk_cell_renderer_get_preferred_width_for_height(@self, widget, height, minimum_width, natural_width);
end;

function TGtkCellRenderer.get_request_mode: TGtkSizeRequestMode; cdecl;
begin
  Result := Gtk4.gtk_cell_renderer_get_request_mode(@self);
end;

function TGtkCellRenderer.get_sensitive: gboolean; cdecl;
begin
  Result := Gtk4.gtk_cell_renderer_get_sensitive(@self);
end;

function TGtkCellRenderer.get_state(widget: PGtkWidget; cell_state: TGtkCellRendererState): TGtkStateFlags; cdecl;
begin
  Result := Gtk4.gtk_cell_renderer_get_state(@self, widget, cell_state);
end;

function TGtkCellRenderer.get_visible: gboolean; cdecl;
begin
  Result := Gtk4.gtk_cell_renderer_get_visible(@self);
end;

function TGtkCellRenderer.is_activatable: gboolean; cdecl;
begin
  Result := Gtk4.gtk_cell_renderer_is_activatable(@self);
end;

procedure TGtkCellRenderer.set_alignment(xalign: gfloat; yalign: gfloat); cdecl;
begin
  Gtk4.gtk_cell_renderer_set_alignment(@self, xalign, yalign);
end;

procedure TGtkCellRenderer.set_fixed_size(width: gint; height: gint); cdecl;
begin
  Gtk4.gtk_cell_renderer_set_fixed_size(@self, width, height);
end;

procedure TGtkCellRenderer.set_is_expanded(is_expanded: gboolean); cdecl;
begin
  Gtk4.gtk_cell_renderer_set_is_expanded(@self, is_expanded);
end;

procedure TGtkCellRenderer.set_is_expander(is_expander: gboolean); cdecl;
begin
  Gtk4.gtk_cell_renderer_set_is_expander(@self, is_expander);
end;

procedure TGtkCellRenderer.set_padding(xpad: gint; ypad: gint); cdecl;
begin
  Gtk4.gtk_cell_renderer_set_padding(@self, xpad, ypad);
end;

procedure TGtkCellRenderer.set_sensitive(sensitive: gboolean); cdecl;
begin
  Gtk4.gtk_cell_renderer_set_sensitive(@self, sensitive);
end;

procedure TGtkCellRenderer.set_visible(visible: gboolean); cdecl;
begin
  Gtk4.gtk_cell_renderer_set_visible(@self, visible);
end;

procedure TGtkCellRenderer.snapshot(snapshot: PGtkSnapshot; widget: PGtkWidget; background_area: PGdkRectangle; cell_area: PGdkRectangle; flags: TGtkCellRendererState); cdecl;
begin
  Gtk4.gtk_cell_renderer_snapshot(@self, snapshot, widget, background_area, cell_area, flags);
end;

function TGtkCellRenderer.start_editing(event: PGdkEvent; widget: PGtkWidget; path: Pgchar; background_area: PGdkRectangle; cell_area: PGdkRectangle; flags: TGtkCellRendererState): PGtkCellEditable; cdecl;
begin
  Result := Gtk4.gtk_cell_renderer_start_editing(@self, event, widget, path, background_area, cell_area, flags);
end;

procedure TGtkCellRenderer.stop_editing(canceled: gboolean); cdecl;
begin
  Gtk4.gtk_cell_renderer_stop_editing(@self, canceled);
end;

procedure TGtkCellLayout.add_attribute(cell: PGtkCellRenderer; attribute: Pgchar; column: gint); cdecl;
begin
  Gtk4.gtk_cell_layout_add_attribute(@self, cell, attribute, column);
end;

procedure TGtkCellLayout.clear; cdecl;
begin
  Gtk4.gtk_cell_layout_clear(@self);
end;

procedure TGtkCellLayout.clear_attributes(cell: PGtkCellRenderer); cdecl;
begin
  Gtk4.gtk_cell_layout_clear_attributes(@self, cell);
end;

function TGtkCellLayout.get_area: PGtkCellArea; cdecl;
begin
  Result := Gtk4.gtk_cell_layout_get_area(@self);
end;

function TGtkCellLayout.get_cells: PGList; cdecl;
begin
  Result := Gtk4.gtk_cell_layout_get_cells(@self);
end;

procedure TGtkCellLayout.pack_end(cell: PGtkCellRenderer; expand: gboolean); cdecl;
begin
  Gtk4.gtk_cell_layout_pack_end(@self, cell, expand);
end;

procedure TGtkCellLayout.pack_start(cell: PGtkCellRenderer; expand: gboolean); cdecl;
begin
  Gtk4.gtk_cell_layout_pack_start(@self, cell, expand);
end;

procedure TGtkCellLayout.reorder(cell: PGtkCellRenderer; position: gint); cdecl;
begin
  Gtk4.gtk_cell_layout_reorder(@self, cell, position);
end;

procedure TGtkCellLayout.set_cell_data_func(cell: PGtkCellRenderer; func: TGtkCellLayoutDataFunc; func_data: gpointer; destroy_: TGDestroyNotify); cdecl;
begin
  Gtk4.gtk_cell_layout_set_cell_data_func(@self, cell, func, func_data, destroy_);
end;

function TGtkCellArea.activate(context: PGtkCellAreaContext; widget: PGtkWidget; cell_area: PGdkRectangle; flags: TGtkCellRendererState; edit_only: gboolean): gboolean; cdecl;
begin
  Result := Gtk4.gtk_cell_area_activate(@self, context, widget, cell_area, flags, edit_only);
end;

function TGtkCellArea.activate_cell(widget: PGtkWidget; renderer: PGtkCellRenderer; event: PGdkEvent; cell_area: PGdkRectangle; flags: TGtkCellRendererState): gboolean; cdecl;
begin
  Result := Gtk4.gtk_cell_area_activate_cell(@self, widget, renderer, event, cell_area, flags);
end;

procedure TGtkCellArea.add(renderer: PGtkCellRenderer); cdecl;
begin
  Gtk4.gtk_cell_area_add(@self, renderer);
end;

procedure TGtkCellArea.add_focus_sibling(renderer: PGtkCellRenderer; sibling: PGtkCellRenderer); cdecl;
begin
  Gtk4.gtk_cell_area_add_focus_sibling(@self, renderer, sibling);
end;

procedure TGtkCellArea.apply_attributes(tree_model: PGtkTreeModel; iter: PGtkTreeIter; is_expander: gboolean; is_expanded: gboolean); cdecl;
begin
  Gtk4.gtk_cell_area_apply_attributes(@self, tree_model, iter, is_expander, is_expanded);
end;

procedure TGtkCellArea.attribute_connect(renderer: PGtkCellRenderer; attribute: Pgchar; column: gint); cdecl;
begin
  Gtk4.gtk_cell_area_attribute_connect(@self, renderer, attribute, column);
end;

procedure TGtkCellArea.attribute_disconnect(renderer: PGtkCellRenderer; attribute: Pgchar); cdecl;
begin
  Gtk4.gtk_cell_area_attribute_disconnect(@self, renderer, attribute);
end;

function TGtkCellArea.attribute_get_column(renderer: PGtkCellRenderer; attribute: Pgchar): gint; cdecl;
begin
  Result := Gtk4.gtk_cell_area_attribute_get_column(@self, renderer, attribute);
end;

procedure TGtkCellArea.cell_get_property(renderer: PGtkCellRenderer; property_name: Pgchar; value: PGValue); cdecl;
begin
  Gtk4.gtk_cell_area_cell_get_property(@self, renderer, property_name, value);
end;

procedure TGtkCellArea.cell_set_property(renderer: PGtkCellRenderer; property_name: Pgchar; value: PGValue); cdecl;
begin
  Gtk4.gtk_cell_area_cell_set_property(@self, renderer, property_name, value);
end;

function TGtkCellArea.copy_context(context: PGtkCellAreaContext): PGtkCellAreaContext; cdecl;
begin
  Result := Gtk4.gtk_cell_area_copy_context(@self, context);
end;

function TGtkCellArea.create_context: PGtkCellAreaContext; cdecl;
begin
  Result := Gtk4.gtk_cell_area_create_context(@self);
end;

function TGtkCellArea.event(context: PGtkCellAreaContext; widget: PGtkWidget; event: PGdkEvent; cell_area: PGdkRectangle; flags: TGtkCellRendererState): gint; cdecl;
begin
  Result := Gtk4.gtk_cell_area_event(@self, context, widget, event, cell_area, flags);
end;

function TGtkCellArea.focus(direction: TGtkDirectionType): gboolean; cdecl;
begin
  Result := Gtk4.gtk_cell_area_focus(@self, direction);
end;

procedure TGtkCellArea.foreach(callback: TGtkCellCallback; callback_data: gpointer); cdecl;
begin
  Gtk4.gtk_cell_area_foreach(@self, callback, callback_data);
end;

procedure TGtkCellArea.foreach_alloc(context: PGtkCellAreaContext; widget: PGtkWidget; cell_area: PGdkRectangle; background_area: PGdkRectangle; callback: TGtkCellAllocCallback; callback_data: gpointer); cdecl;
begin
  Gtk4.gtk_cell_area_foreach_alloc(@self, context, widget, cell_area, background_area, callback, callback_data);
end;

procedure TGtkCellArea.get_cell_allocation(context: PGtkCellAreaContext; widget: PGtkWidget; renderer: PGtkCellRenderer; cell_area: PGdkRectangle; allocation: PGdkRectangle); cdecl;
begin
  Gtk4.gtk_cell_area_get_cell_allocation(@self, context, widget, renderer, cell_area, allocation);
end;

function TGtkCellArea.get_cell_at_position(context: PGtkCellAreaContext; widget: PGtkWidget; cell_area: PGdkRectangle; x: gint; y: gint; alloc_area: PGdkRectangle): PGtkCellRenderer; cdecl;
begin
  Result := Gtk4.gtk_cell_area_get_cell_at_position(@self, context, widget, cell_area, x, y, alloc_area);
end;

function TGtkCellArea.get_current_path_string: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_cell_area_get_current_path_string(@self);
end;

function TGtkCellArea.get_edit_widget: PGtkCellEditable; cdecl;
begin
  Result := Gtk4.gtk_cell_area_get_edit_widget(@self);
end;

function TGtkCellArea.get_edited_cell: PGtkCellRenderer; cdecl;
begin
  Result := Gtk4.gtk_cell_area_get_edited_cell(@self);
end;

function TGtkCellArea.get_focus_cell: PGtkCellRenderer; cdecl;
begin
  Result := Gtk4.gtk_cell_area_get_focus_cell(@self);
end;

function TGtkCellArea.get_focus_from_sibling(renderer: PGtkCellRenderer): PGtkCellRenderer; cdecl;
begin
  Result := Gtk4.gtk_cell_area_get_focus_from_sibling(@self, renderer);
end;

function TGtkCellArea.get_focus_siblings(renderer: PGtkCellRenderer): PGList; cdecl;
begin
  Result := Gtk4.gtk_cell_area_get_focus_siblings(@self, renderer);
end;

procedure TGtkCellArea.get_preferred_height(context: PGtkCellAreaContext; widget: PGtkWidget; minimum_height: Pgint; natural_height: Pgint); cdecl;
begin
  Gtk4.gtk_cell_area_get_preferred_height(@self, context, widget, minimum_height, natural_height);
end;

procedure TGtkCellArea.get_preferred_height_for_width(context: PGtkCellAreaContext; widget: PGtkWidget; width: gint; minimum_height: Pgint; natural_height: Pgint); cdecl;
begin
  Gtk4.gtk_cell_area_get_preferred_height_for_width(@self, context, widget, width, minimum_height, natural_height);
end;

procedure TGtkCellArea.get_preferred_width(context: PGtkCellAreaContext; widget: PGtkWidget; minimum_width: Pgint; natural_width: Pgint); cdecl;
begin
  Gtk4.gtk_cell_area_get_preferred_width(@self, context, widget, minimum_width, natural_width);
end;

procedure TGtkCellArea.get_preferred_width_for_height(context: PGtkCellAreaContext; widget: PGtkWidget; height: gint; minimum_width: Pgint; natural_width: Pgint); cdecl;
begin
  Gtk4.gtk_cell_area_get_preferred_width_for_height(@self, context, widget, height, minimum_width, natural_width);
end;

function TGtkCellArea.get_request_mode: TGtkSizeRequestMode; cdecl;
begin
  Result := Gtk4.gtk_cell_area_get_request_mode(@self);
end;

function TGtkCellArea.has_renderer(renderer: PGtkCellRenderer): gboolean; cdecl;
begin
  Result := Gtk4.gtk_cell_area_has_renderer(@self, renderer);
end;

procedure TGtkCellArea.inner_cell_area(widget: PGtkWidget; cell_area: PGdkRectangle; inner_area: PGdkRectangle); cdecl;
begin
  Gtk4.gtk_cell_area_inner_cell_area(@self, widget, cell_area, inner_area);
end;

function TGtkCellArea.is_activatable: gboolean; cdecl;
begin
  Result := Gtk4.gtk_cell_area_is_activatable(@self);
end;

function TGtkCellArea.is_focus_sibling(renderer: PGtkCellRenderer; sibling: PGtkCellRenderer): gboolean; cdecl;
begin
  Result := Gtk4.gtk_cell_area_is_focus_sibling(@self, renderer, sibling);
end;

procedure TGtkCellArea.remove(renderer: PGtkCellRenderer); cdecl;
begin
  Gtk4.gtk_cell_area_remove(@self, renderer);
end;

procedure TGtkCellArea.remove_focus_sibling(renderer: PGtkCellRenderer; sibling: PGtkCellRenderer); cdecl;
begin
  Gtk4.gtk_cell_area_remove_focus_sibling(@self, renderer, sibling);
end;

procedure TGtkCellArea.request_renderer(renderer: PGtkCellRenderer; orientation: TGtkOrientation; widget: PGtkWidget; for_size: gint; minimum_size: Pgint; natural_size: Pgint); cdecl;
begin
  Gtk4.gtk_cell_area_request_renderer(@self, renderer, orientation, widget, for_size, minimum_size, natural_size);
end;

procedure TGtkCellArea.set_focus_cell(renderer: PGtkCellRenderer); cdecl;
begin
  Gtk4.gtk_cell_area_set_focus_cell(@self, renderer);
end;

procedure TGtkCellArea.snapshot(context: PGtkCellAreaContext; widget: PGtkWidget; snapshot: PGtkSnapshot; background_area: PGdkRectangle; cell_area: PGdkRectangle; flags: TGtkCellRendererState; paint_focus: gboolean); cdecl;
begin
  Gtk4.gtk_cell_area_snapshot(@self, context, widget, snapshot, background_area, cell_area, flags, paint_focus);
end;

procedure TGtkCellArea.stop_editing(canceled: gboolean); cdecl;
begin
  Gtk4.gtk_cell_area_stop_editing(@self, canceled);
end;

procedure TGtkCellAreaContext.allocate(width: gint; height: gint); cdecl;
begin
  Gtk4.gtk_cell_area_context_allocate(@self, width, height);
end;

procedure TGtkCellAreaContext.get_allocation(width: Pgint; height: Pgint); cdecl;
begin
  Gtk4.gtk_cell_area_context_get_allocation(@self, width, height);
end;

function TGtkCellAreaContext.get_area: PGtkCellArea; cdecl;
begin
  Result := Gtk4.gtk_cell_area_context_get_area(@self);
end;

procedure TGtkCellAreaContext.get_preferred_height(minimum_height: Pgint; natural_height: Pgint); cdecl;
begin
  Gtk4.gtk_cell_area_context_get_preferred_height(@self, minimum_height, natural_height);
end;

procedure TGtkCellAreaContext.get_preferred_height_for_width(width: gint; minimum_height: Pgint; natural_height: Pgint); cdecl;
begin
  Gtk4.gtk_cell_area_context_get_preferred_height_for_width(@self, width, minimum_height, natural_height);
end;

procedure TGtkCellAreaContext.get_preferred_width(minimum_width: Pgint; natural_width: Pgint); cdecl;
begin
  Gtk4.gtk_cell_area_context_get_preferred_width(@self, minimum_width, natural_width);
end;

procedure TGtkCellAreaContext.get_preferred_width_for_height(height: gint; minimum_width: Pgint; natural_width: Pgint); cdecl;
begin
  Gtk4.gtk_cell_area_context_get_preferred_width_for_height(@self, height, minimum_width, natural_width);
end;

procedure TGtkCellAreaContext.push_preferred_height(minimum_height: gint; natural_height: gint); cdecl;
begin
  Gtk4.gtk_cell_area_context_push_preferred_height(@self, minimum_height, natural_height);
end;

procedure TGtkCellAreaContext.push_preferred_width(minimum_width: gint; natural_width: gint); cdecl;
begin
  Gtk4.gtk_cell_area_context_push_preferred_width(@self, minimum_width, natural_width);
end;

procedure TGtkCellAreaContext.reset; cdecl;
begin
  Gtk4.gtk_cell_area_context_reset(@self);
end;

function TGtkTreeModel.filter_new(root: PGtkTreePath): PGtkTreeModel; cdecl;
begin
  Result := Gtk4.gtk_tree_model_filter_new(@self, root);
end;

procedure TGtkTreeModel.foreach(func: TGtkTreeModelForeachFunc; user_data: gpointer); cdecl;
begin
  Gtk4.gtk_tree_model_foreach(@self, func, user_data);
end;

function TGtkTreeModel.get_column_type(index_: gint): TGType; cdecl;
begin
  Result := Gtk4.gtk_tree_model_get_column_type(@self, index_);
end;

function TGtkTreeModel.get_flags: TGtkTreeModelFlags; cdecl;
begin
  Result := Gtk4.gtk_tree_model_get_flags(@self);
end;

function TGtkTreeModel.get_iter(iter: PGtkTreeIter; path: PGtkTreePath): gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_model_get_iter(@self, iter, path);
end;

function TGtkTreeModel.get_iter_first(iter: PGtkTreeIter): gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_model_get_iter_first(@self, iter);
end;

function TGtkTreeModel.get_iter_from_string(iter: PGtkTreeIter; path_string: Pgchar): gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_model_get_iter_from_string(@self, iter, path_string);
end;

function TGtkTreeModel.get_n_columns: gint; cdecl;
begin
  Result := Gtk4.gtk_tree_model_get_n_columns(@self);
end;

function TGtkTreeModel.get_path(iter: PGtkTreeIter): PGtkTreePath; cdecl;
begin
  Result := Gtk4.gtk_tree_model_get_path(@self, iter);
end;

function TGtkTreeModel.get_string_from_iter(iter: PGtkTreeIter): Pgchar; cdecl;
begin
  Result := Gtk4.gtk_tree_model_get_string_from_iter(@self, iter);
end;

procedure TGtkTreeModel.get_value(iter: PGtkTreeIter; column: gint; value: PGValue); cdecl;
begin
  Gtk4.gtk_tree_model_get_value(@self, iter, column, value);
end;

function TGtkTreeModel.iter_children(iter: PGtkTreeIter; parent: PGtkTreeIter): gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_model_iter_children(@self, iter, parent);
end;

function TGtkTreeModel.iter_has_child(iter: PGtkTreeIter): gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_model_iter_has_child(@self, iter);
end;

function TGtkTreeModel.iter_n_children(iter: PGtkTreeIter): gint; cdecl;
begin
  Result := Gtk4.gtk_tree_model_iter_n_children(@self, iter);
end;

function TGtkTreeModel.iter_next(iter: PGtkTreeIter): gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_model_iter_next(@self, iter);
end;

function TGtkTreeModel.iter_nth_child(iter: PGtkTreeIter; parent: PGtkTreeIter; n: gint): gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_model_iter_nth_child(@self, iter, parent, n);
end;

function TGtkTreeModel.iter_parent(iter: PGtkTreeIter; child: PGtkTreeIter): gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_model_iter_parent(@self, iter, child);
end;

function TGtkTreeModel.iter_previous(iter: PGtkTreeIter): gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_model_iter_previous(@self, iter);
end;

procedure TGtkTreeModel.ref_node(iter: PGtkTreeIter); cdecl;
begin
  Gtk4.gtk_tree_model_ref_node(@self, iter);
end;

procedure TGtkTreeModel.row_changed(path: PGtkTreePath; iter: PGtkTreeIter); cdecl;
begin
  Gtk4.gtk_tree_model_row_changed(@self, path, iter);
end;

procedure TGtkTreeModel.row_deleted(path: PGtkTreePath); cdecl;
begin
  Gtk4.gtk_tree_model_row_deleted(@self, path);
end;

procedure TGtkTreeModel.row_has_child_toggled(path: PGtkTreePath; iter: PGtkTreeIter); cdecl;
begin
  Gtk4.gtk_tree_model_row_has_child_toggled(@self, path, iter);
end;

procedure TGtkTreeModel.row_inserted(path: PGtkTreePath; iter: PGtkTreeIter); cdecl;
begin
  Gtk4.gtk_tree_model_row_inserted(@self, path, iter);
end;

procedure TGtkTreeModel.rows_reordered(path: PGtkTreePath; iter: PGtkTreeIter; new_order: Pgint); cdecl;
begin
  Gtk4.gtk_tree_model_rows_reordered(@self, path, iter, new_order);
end;

procedure TGtkTreeModel.rows_reordered_with_length(path: PGtkTreePath; iter: PGtkTreeIter; new_order: Pgint; length: gint); cdecl;
begin
  Gtk4.gtk_tree_model_rows_reordered_with_length(@self, path, iter, new_order, length);
end;

procedure TGtkTreeModel.unref_node(iter: PGtkTreeIter); cdecl;
begin
  Gtk4.gtk_tree_model_unref_node(@self, iter);
end;

function TGtkTreePath.new: PGtkTreePath; cdecl;
begin
  Result := Gtk4.gtk_tree_path_new();
end;

function TGtkTreePath.new_first: PGtkTreePath; cdecl;
begin
  Result := Gtk4.gtk_tree_path_new_first();
end;

function TGtkTreePath.new_from_indicesv(indices: Pgint; length: gsize): PGtkTreePath; cdecl;
begin
  Result := Gtk4.gtk_tree_path_new_from_indicesv(indices, length);
end;

function TGtkTreePath.new_from_string(path: Pgchar): PGtkTreePath; cdecl;
begin
  Result := Gtk4.gtk_tree_path_new_from_string(path);
end;

procedure TGtkTreePath.append_index(index_: gint); cdecl;
begin
  Gtk4.gtk_tree_path_append_index(@self, index_);
end;

function TGtkTreePath.compare(b: PGtkTreePath): gint; cdecl;
begin
  Result := Gtk4.gtk_tree_path_compare(@self, b);
end;

function TGtkTreePath.copy: PGtkTreePath; cdecl;
begin
  Result := Gtk4.gtk_tree_path_copy(@self);
end;

procedure TGtkTreePath.down; cdecl;
begin
  Gtk4.gtk_tree_path_down(@self);
end;

procedure TGtkTreePath.free; cdecl;
begin
  Gtk4.gtk_tree_path_free(@self);
end;

function TGtkTreePath.get_depth: gint; cdecl;
begin
  Result := Gtk4.gtk_tree_path_get_depth(@self);
end;

function TGtkTreePath.get_indices: Pgint; cdecl;
begin
  Result := Gtk4.gtk_tree_path_get_indices(@self);
end;

function TGtkTreePath.get_indices_with_depth(depth: Pgint): Pgint; cdecl;
begin
  Result := Gtk4.gtk_tree_path_get_indices_with_depth(@self, depth);
end;

function TGtkTreePath.is_ancestor(descendant: PGtkTreePath): gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_path_is_ancestor(@self, descendant);
end;

function TGtkTreePath.is_descendant(ancestor: PGtkTreePath): gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_path_is_descendant(@self, ancestor);
end;

procedure TGtkTreePath.next; cdecl;
begin
  Gtk4.gtk_tree_path_next(@self);
end;

procedure TGtkTreePath.prepend_index(index_: gint); cdecl;
begin
  Gtk4.gtk_tree_path_prepend_index(@self, index_);
end;

function TGtkTreePath.prev: gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_path_prev(@self);
end;

function TGtkTreePath.to_string: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_tree_path_to_string(@self);
end;

function TGtkTreePath.up: gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_path_up(@self);
end;

function TGtkTreeIter.copy: PGtkTreeIter; cdecl;
begin
  Result := Gtk4.gtk_tree_iter_copy(@self);
end;

procedure TGtkTreeIter.free; cdecl;
begin
  Gtk4.gtk_tree_iter_free(@self);
end;

function TGtkSnapshot.new: PGtkSnapshot; cdecl;
begin
  Result := Gtk4.gtk_snapshot_new();
end;

procedure TGtkSnapshot.append_border(outline: PGskRoundedRect; border_width: Pgfloat; border_color: PGdkRGBA); cdecl;
begin
  Gtk4.gtk_snapshot_append_border(@self, outline, border_width, border_color);
end;

function TGtkSnapshot.append_cairo(bounds: Pgraphene_rect_t): Pcairo_t; cdecl;
begin
  Result := Gtk4.gtk_snapshot_append_cairo(@self, bounds);
end;

procedure TGtkSnapshot.append_color(color: PGdkRGBA; bounds: Pgraphene_rect_t); cdecl;
begin
  Gtk4.gtk_snapshot_append_color(@self, color, bounds);
end;

procedure TGtkSnapshot.append_conic_gradient(bounds: Pgraphene_rect_t; center: Pgraphene_point_t; rotation: gfloat; stops: PGskColorStop; n_stops: gsize); cdecl;
begin
  Gtk4.gtk_snapshot_append_conic_gradient(@self, bounds, center, rotation, stops, n_stops);
end;

procedure TGtkSnapshot.append_inset_shadow(outline: PGskRoundedRect; color: PGdkRGBA; dx: gfloat; dy: gfloat; spread: gfloat; blur_radius: gfloat); cdecl;
begin
  Gtk4.gtk_snapshot_append_inset_shadow(@self, outline, color, dx, dy, spread, blur_radius);
end;

procedure TGtkSnapshot.append_layout(layout: PPangoLayout; color: PGdkRGBA); cdecl;
begin
  Gtk4.gtk_snapshot_append_layout(@self, layout, color);
end;

procedure TGtkSnapshot.append_linear_gradient(bounds: Pgraphene_rect_t; start_point: Pgraphene_point_t; end_point: Pgraphene_point_t; stops: PGskColorStop; n_stops: gsize); cdecl;
begin
  Gtk4.gtk_snapshot_append_linear_gradient(@self, bounds, start_point, end_point, stops, n_stops);
end;

procedure TGtkSnapshot.append_node(node: PGskRenderNode); cdecl;
begin
  Gtk4.gtk_snapshot_append_node(@self, node);
end;

procedure TGtkSnapshot.append_outset_shadow(outline: PGskRoundedRect; color: PGdkRGBA; dx: gfloat; dy: gfloat; spread: gfloat; blur_radius: gfloat); cdecl;
begin
  Gtk4.gtk_snapshot_append_outset_shadow(@self, outline, color, dx, dy, spread, blur_radius);
end;

procedure TGtkSnapshot.append_radial_gradient(bounds: Pgraphene_rect_t; center: Pgraphene_point_t; hradius: gfloat; vradius: gfloat; start: gfloat; end_: gfloat; stops: PGskColorStop; n_stops: gsize); cdecl;
begin
  Gtk4.gtk_snapshot_append_radial_gradient(@self, bounds, center, hradius, vradius, start, end_, stops, n_stops);
end;

procedure TGtkSnapshot.append_repeating_linear_gradient(bounds: Pgraphene_rect_t; start_point: Pgraphene_point_t; end_point: Pgraphene_point_t; stops: PGskColorStop; n_stops: gsize); cdecl;
begin
  Gtk4.gtk_snapshot_append_repeating_linear_gradient(@self, bounds, start_point, end_point, stops, n_stops);
end;

procedure TGtkSnapshot.append_repeating_radial_gradient(bounds: Pgraphene_rect_t; center: Pgraphene_point_t; hradius: gfloat; vradius: gfloat; start: gfloat; end_: gfloat; stops: PGskColorStop; n_stops: gsize); cdecl;
begin
  Gtk4.gtk_snapshot_append_repeating_radial_gradient(@self, bounds, center, hradius, vradius, start, end_, stops, n_stops);
end;

procedure TGtkSnapshot.append_texture(texture: PGdkTexture; bounds: Pgraphene_rect_t); cdecl;
begin
  Gtk4.gtk_snapshot_append_texture(@self, texture, bounds);
end;

function TGtkSnapshot.free_to_node: PGskRenderNode; cdecl;
begin
  Result := Gtk4.gtk_snapshot_free_to_node(@self);
end;

function TGtkSnapshot.free_to_paintable(size: Pgraphene_size_t): PGdkPaintable; cdecl;
begin
  Result := Gtk4.gtk_snapshot_free_to_paintable(@self, size);
end;

procedure TGtkSnapshot.gl_shader_pop_texture; cdecl;
begin
  Gtk4.gtk_snapshot_gl_shader_pop_texture(@self);
end;

procedure TGtkSnapshot.perspective(depth: gfloat); cdecl;
begin
  Gtk4.gtk_snapshot_perspective(@self, depth);
end;

procedure TGtkSnapshot.pop; cdecl;
begin
  Gtk4.gtk_snapshot_pop(@self);
end;

procedure TGtkSnapshot.push_blend(blend_mode: TGskBlendMode); cdecl;
begin
  Gtk4.gtk_snapshot_push_blend(@self, blend_mode);
end;

procedure TGtkSnapshot.push_blur(radius: gdouble); cdecl;
begin
  Gtk4.gtk_snapshot_push_blur(@self, radius);
end;

procedure TGtkSnapshot.push_clip(bounds: Pgraphene_rect_t); cdecl;
begin
  Gtk4.gtk_snapshot_push_clip(@self, bounds);
end;

procedure TGtkSnapshot.push_color_matrix(color_matrix: Pgraphene_matrix_t; color_offset: Pgraphene_vec4_t); cdecl;
begin
  Gtk4.gtk_snapshot_push_color_matrix(@self, color_matrix, color_offset);
end;

procedure TGtkSnapshot.push_cross_fade(progress: gdouble); cdecl;
begin
  Gtk4.gtk_snapshot_push_cross_fade(@self, progress);
end;

procedure TGtkSnapshot.push_gl_shader(shader: PGskGLShader; bounds: Pgraphene_rect_t; take_args: PGBytes); cdecl;
begin
  Gtk4.gtk_snapshot_push_gl_shader(@self, shader, bounds, take_args);
end;

procedure TGtkSnapshot.push_opacity(opacity: gdouble); cdecl;
begin
  Gtk4.gtk_snapshot_push_opacity(@self, opacity);
end;

procedure TGtkSnapshot.push_repeat(bounds: Pgraphene_rect_t; child_bounds: Pgraphene_rect_t); cdecl;
begin
  Gtk4.gtk_snapshot_push_repeat(@self, bounds, child_bounds);
end;

procedure TGtkSnapshot.push_rounded_clip(bounds: PGskRoundedRect); cdecl;
begin
  Gtk4.gtk_snapshot_push_rounded_clip(@self, bounds);
end;

procedure TGtkSnapshot.push_shadow(shadow: PGskShadow; n_shadows: gsize); cdecl;
begin
  Gtk4.gtk_snapshot_push_shadow(@self, shadow, n_shadows);
end;

procedure TGtkSnapshot.render_background(context: PGtkStyleContext; x: gdouble; y: gdouble; width: gdouble; height: gdouble); cdecl;
begin
  Gtk4.gtk_snapshot_render_background(@self, context, x, y, width, height);
end;

procedure TGtkSnapshot.render_focus(context: PGtkStyleContext; x: gdouble; y: gdouble; width: gdouble; height: gdouble); cdecl;
begin
  Gtk4.gtk_snapshot_render_focus(@self, context, x, y, width, height);
end;

procedure TGtkSnapshot.render_frame(context: PGtkStyleContext; x: gdouble; y: gdouble; width: gdouble; height: gdouble); cdecl;
begin
  Gtk4.gtk_snapshot_render_frame(@self, context, x, y, width, height);
end;

procedure TGtkSnapshot.render_insertion_cursor(context: PGtkStyleContext; x: gdouble; y: gdouble; layout: PPangoLayout; index: gint; direction: TPangoDirection); cdecl;
begin
  Gtk4.gtk_snapshot_render_insertion_cursor(@self, context, x, y, layout, index, direction);
end;

procedure TGtkSnapshot.render_layout(context: PGtkStyleContext; x: gdouble; y: gdouble; layout: PPangoLayout); cdecl;
begin
  Gtk4.gtk_snapshot_render_layout(@self, context, x, y, layout);
end;

procedure TGtkSnapshot.restore; cdecl;
begin
  Gtk4.gtk_snapshot_restore(@self);
end;

procedure TGtkSnapshot.rotate(angle: gfloat); cdecl;
begin
  Gtk4.gtk_snapshot_rotate(@self, angle);
end;

procedure TGtkSnapshot.rotate_3d(angle: gfloat; axis: Pgraphene_vec3_t); cdecl;
begin
  Gtk4.gtk_snapshot_rotate_3d(@self, angle, axis);
end;

procedure TGtkSnapshot.save; cdecl;
begin
  Gtk4.gtk_snapshot_save(@self);
end;

procedure TGtkSnapshot.scale(factor_x: gfloat; factor_y: gfloat); cdecl;
begin
  Gtk4.gtk_snapshot_scale(@self, factor_x, factor_y);
end;

procedure TGtkSnapshot.scale_3d(factor_x: gfloat; factor_y: gfloat; factor_z: gfloat); cdecl;
begin
  Gtk4.gtk_snapshot_scale_3d(@self, factor_x, factor_y, factor_z);
end;

function TGtkSnapshot.to_node: PGskRenderNode; cdecl;
begin
  Result := Gtk4.gtk_snapshot_to_node(@self);
end;

function TGtkSnapshot.to_paintable(size: Pgraphene_size_t): PGdkPaintable; cdecl;
begin
  Result := Gtk4.gtk_snapshot_to_paintable(@self, size);
end;

procedure TGtkSnapshot.transform(transform: PGskTransform); cdecl;
begin
  Gtk4.gtk_snapshot_transform(@self, transform);
end;

procedure TGtkSnapshot.transform_matrix(matrix: Pgraphene_matrix_t); cdecl;
begin
  Gtk4.gtk_snapshot_transform_matrix(@self, matrix);
end;

procedure TGtkSnapshot.translate(point: Pgraphene_point_t); cdecl;
begin
  Gtk4.gtk_snapshot_translate(@self, point);
end;

procedure TGtkSnapshot.translate_3d(point: Pgraphene_point3d_t); cdecl;
begin
  Gtk4.gtk_snapshot_translate_3d(@self, point);
end;

procedure TGtkCellEditable.editing_done; cdecl;
begin
  Gtk4.gtk_cell_editable_editing_done(@self);
end;

procedure TGtkCellEditable.remove_widget; cdecl;
begin
  Gtk4.gtk_cell_editable_remove_widget(@self);
end;

procedure TGtkCellEditable.start_editing(event: PGdkEvent); cdecl;
begin
  Gtk4.gtk_cell_editable_start_editing(@self, event);
end;

function TGtkCellAreaBox.new: PGtkCellAreaBox; cdecl;
begin
  Result := Gtk4.gtk_cell_area_box_new();
end;

function TGtkCellAreaBox.get_spacing: gint; cdecl;
begin
  Result := Gtk4.gtk_cell_area_box_get_spacing(@self);
end;

procedure TGtkCellAreaBox.pack_end(renderer: PGtkCellRenderer; expand: gboolean; align: gboolean; fixed: gboolean); cdecl;
begin
  Gtk4.gtk_cell_area_box_pack_end(@self, renderer, expand, align, fixed);
end;

procedure TGtkCellAreaBox.pack_start(renderer: PGtkCellRenderer; expand: gboolean; align: gboolean; fixed: gboolean); cdecl;
begin
  Gtk4.gtk_cell_area_box_pack_start(@self, renderer, expand, align, fixed);
end;

procedure TGtkCellAreaBox.set_spacing(spacing: gint); cdecl;
begin
  Gtk4.gtk_cell_area_box_set_spacing(@self, spacing);
end;

function TGtkCellAreaClass.find_cell_property(property_name: Pgchar): PGParamSpec; cdecl;
begin
  Result := Gtk4.gtk_cell_area_class_find_cell_property(@self, property_name);
end;

procedure TGtkCellAreaClass.install_cell_property(property_id: guint; pspec: PGParamSpec); cdecl;
begin
  Gtk4.gtk_cell_area_class_install_cell_property(@self, property_id, pspec);
end;

function TGtkCellAreaClass.list_cell_properties(n_properties: Pguint): PPGParamSpec; cdecl;
begin
  Result := Gtk4.gtk_cell_area_class_list_cell_properties(@self, n_properties);
end;

function TGtkRequisition.new: PGtkRequisition; cdecl;
begin
  Result := Gtk4.gtk_requisition_new();
end;

function TGtkRequisition.copy: PGtkRequisition; cdecl;
begin
  Result := Gtk4.gtk_requisition_copy(@self);
end;

procedure TGtkRequisition.free; cdecl;
begin
  Gtk4.gtk_requisition_free(@self);
end;

function TGtkCellRendererAccel.new: PGtkCellRendererAccel; cdecl;
begin
  Result := Gtk4.gtk_cell_renderer_accel_new();
end;

function TGtkCellRendererCombo.new: PGtkCellRendererCombo; cdecl;
begin
  Result := Gtk4.gtk_cell_renderer_combo_new();
end;

function TGtkCellRendererPixbuf.new: PGtkCellRendererPixbuf; cdecl;
begin
  Result := Gtk4.gtk_cell_renderer_pixbuf_new();
end;

function TGtkCellRendererProgress.new: PGtkCellRendererProgress; cdecl;
begin
  Result := Gtk4.gtk_cell_renderer_progress_new();
end;

function TGtkCellRendererSpin.new: PGtkCellRendererSpin; cdecl;
begin
  Result := Gtk4.gtk_cell_renderer_spin_new();
end;

function TGtkCellRendererSpinner.new: PGtkCellRendererSpinner; cdecl;
begin
  Result := Gtk4.gtk_cell_renderer_spinner_new();
end;

function TGtkCellRendererText.new: PGtkCellRendererText; cdecl;
begin
  Result := Gtk4.gtk_cell_renderer_text_new();
end;

procedure TGtkCellRendererText.set_fixed_height_from_font(number_of_rows: gint); cdecl;
begin
  Gtk4.gtk_cell_renderer_text_set_fixed_height_from_font(@self, number_of_rows);
end;

function TGtkCellRendererToggle.new: PGtkCellRendererToggle; cdecl;
begin
  Result := Gtk4.gtk_cell_renderer_toggle_new();
end;

function TGtkCellRendererToggle.get_activatable: gboolean; cdecl;
begin
  Result := Gtk4.gtk_cell_renderer_toggle_get_activatable(@self);
end;

function TGtkCellRendererToggle.get_active: gboolean; cdecl;
begin
  Result := Gtk4.gtk_cell_renderer_toggle_get_active(@self);
end;

function TGtkCellRendererToggle.get_radio: gboolean; cdecl;
begin
  Result := Gtk4.gtk_cell_renderer_toggle_get_radio(@self);
end;

procedure TGtkCellRendererToggle.set_activatable(setting: gboolean); cdecl;
begin
  Gtk4.gtk_cell_renderer_toggle_set_activatable(@self, setting);
end;

procedure TGtkCellRendererToggle.set_active(setting: gboolean); cdecl;
begin
  Gtk4.gtk_cell_renderer_toggle_set_active(@self, setting);
end;

procedure TGtkCellRendererToggle.set_radio(radio: gboolean); cdecl;
begin
  Gtk4.gtk_cell_renderer_toggle_set_radio(@self, radio);
end;

function TGtkCellView.new: PGtkCellView; cdecl;
begin
  Result := Gtk4.gtk_cell_view_new();
end;

function TGtkCellView.new_with_context(area: PGtkCellArea; context: PGtkCellAreaContext): PGtkCellView; cdecl;
begin
  Result := Gtk4.gtk_cell_view_new_with_context(area, context);
end;

function TGtkCellView.new_with_markup(markup: Pgchar): PGtkCellView; cdecl;
begin
  Result := Gtk4.gtk_cell_view_new_with_markup(markup);
end;

function TGtkCellView.new_with_text(text: Pgchar): PGtkCellView; cdecl;
begin
  Result := Gtk4.gtk_cell_view_new_with_text(text);
end;

function TGtkCellView.new_with_texture(texture: PGdkTexture): PGtkCellView; cdecl;
begin
  Result := Gtk4.gtk_cell_view_new_with_texture(texture);
end;

function TGtkCellView.get_displayed_row: PGtkTreePath; cdecl;
begin
  Result := Gtk4.gtk_cell_view_get_displayed_row(@self);
end;

function TGtkCellView.get_draw_sensitive: gboolean; cdecl;
begin
  Result := Gtk4.gtk_cell_view_get_draw_sensitive(@self);
end;

function TGtkCellView.get_fit_model: gboolean; cdecl;
begin
  Result := Gtk4.gtk_cell_view_get_fit_model(@self);
end;

function TGtkCellView.get_model: PGtkTreeModel; cdecl;
begin
  Result := Gtk4.gtk_cell_view_get_model(@self);
end;

procedure TGtkCellView.set_displayed_row(path: PGtkTreePath); cdecl;
begin
  Gtk4.gtk_cell_view_set_displayed_row(@self, path);
end;

procedure TGtkCellView.set_draw_sensitive(draw_sensitive: gboolean); cdecl;
begin
  Gtk4.gtk_cell_view_set_draw_sensitive(@self, draw_sensitive);
end;

procedure TGtkCellView.set_fit_model(fit_model: gboolean); cdecl;
begin
  Gtk4.gtk_cell_view_set_fit_model(@self, fit_model);
end;

procedure TGtkCellView.set_model(model: PGtkTreeModel); cdecl;
begin
  Gtk4.gtk_cell_view_set_model(@self, model);
end;

function TGtkCenterBox.new: PGtkCenterBox; cdecl;
begin
  Result := Gtk4.gtk_center_box_new();
end;

function TGtkCenterBox.get_baseline_position: TGtkBaselinePosition; cdecl;
begin
  Result := Gtk4.gtk_center_box_get_baseline_position(@self);
end;

function TGtkCenterBox.get_center_widget: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_center_box_get_center_widget(@self);
end;

function TGtkCenterBox.get_end_widget: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_center_box_get_end_widget(@self);
end;

function TGtkCenterBox.get_start_widget: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_center_box_get_start_widget(@self);
end;

procedure TGtkCenterBox.set_baseline_position(position: TGtkBaselinePosition); cdecl;
begin
  Gtk4.gtk_center_box_set_baseline_position(@self, position);
end;

procedure TGtkCenterBox.set_center_widget(child: PGtkWidget); cdecl;
begin
  Gtk4.gtk_center_box_set_center_widget(@self, child);
end;

procedure TGtkCenterBox.set_end_widget(child: PGtkWidget); cdecl;
begin
  Gtk4.gtk_center_box_set_end_widget(@self, child);
end;

procedure TGtkCenterBox.set_start_widget(child: PGtkWidget); cdecl;
begin
  Gtk4.gtk_center_box_set_start_widget(@self, child);
end;

function TGtkCenterLayout.new: PGtkCenterLayout; cdecl;
begin
  Result := Gtk4.gtk_center_layout_new();
end;

function TGtkCenterLayout.get_baseline_position: TGtkBaselinePosition; cdecl;
begin
  Result := Gtk4.gtk_center_layout_get_baseline_position(@self);
end;

function TGtkCenterLayout.get_center_widget: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_center_layout_get_center_widget(@self);
end;

function TGtkCenterLayout.get_end_widget: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_center_layout_get_end_widget(@self);
end;

function TGtkCenterLayout.get_orientation: TGtkOrientation; cdecl;
begin
  Result := Gtk4.gtk_center_layout_get_orientation(@self);
end;

function TGtkCenterLayout.get_start_widget: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_center_layout_get_start_widget(@self);
end;

procedure TGtkCenterLayout.set_baseline_position(baseline_position: TGtkBaselinePosition); cdecl;
begin
  Gtk4.gtk_center_layout_set_baseline_position(@self, baseline_position);
end;

procedure TGtkCenterLayout.set_center_widget(widget: PGtkWidget); cdecl;
begin
  Gtk4.gtk_center_layout_set_center_widget(@self, widget);
end;

procedure TGtkCenterLayout.set_end_widget(widget: PGtkWidget); cdecl;
begin
  Gtk4.gtk_center_layout_set_end_widget(@self, widget);
end;

procedure TGtkCenterLayout.set_orientation(orientation: TGtkOrientation); cdecl;
begin
  Gtk4.gtk_center_layout_set_orientation(@self, orientation);
end;

procedure TGtkCenterLayout.set_start_widget(widget: PGtkWidget); cdecl;
begin
  Gtk4.gtk_center_layout_set_start_widget(@self, widget);
end;

function TGtkCheckButton.new: PGtkCheckButton; cdecl;
begin
  Result := Gtk4.gtk_check_button_new();
end;

function TGtkCheckButton.new_with_label(label_: Pgchar): PGtkCheckButton; cdecl;
begin
  Result := Gtk4.gtk_check_button_new_with_label(label_);
end;

function TGtkCheckButton.new_with_mnemonic(label_: Pgchar): PGtkCheckButton; cdecl;
begin
  Result := Gtk4.gtk_check_button_new_with_mnemonic(label_);
end;

function TGtkCheckButton.get_active: gboolean; cdecl;
begin
  Result := Gtk4.gtk_check_button_get_active(@self);
end;

function TGtkCheckButton.get_inconsistent: gboolean; cdecl;
begin
  Result := Gtk4.gtk_check_button_get_inconsistent(@self);
end;

function TGtkCheckButton.get_label: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_check_button_get_label(@self);
end;

function TGtkCheckButton.get_use_underline: gboolean; cdecl;
begin
  Result := Gtk4.gtk_check_button_get_use_underline(@self);
end;

procedure TGtkCheckButton.set_active(setting: gboolean); cdecl;
begin
  Gtk4.gtk_check_button_set_active(@self, setting);
end;

procedure TGtkCheckButton.set_group(group: PGtkCheckButton); cdecl;
begin
  Gtk4.gtk_check_button_set_group(@self, group);
end;

procedure TGtkCheckButton.set_inconsistent(inconsistent: gboolean); cdecl;
begin
  Gtk4.gtk_check_button_set_inconsistent(@self, inconsistent);
end;

procedure TGtkCheckButton.set_label(label_: Pgchar); cdecl;
begin
  Gtk4.gtk_check_button_set_label(@self, label_);
end;

procedure TGtkCheckButton.set_use_underline(setting: gboolean); cdecl;
begin
  Gtk4.gtk_check_button_set_use_underline(@self, setting);
end;

function TGtkClosureExpression.new(value_type: TGType; closure: PGClosure; n_params: guint; params: PPGtkExpression): PGtkClosureExpression; cdecl;
begin
  Result := Gtk4.gtk_closure_expression_new(value_type, closure, n_params, params);
end;

procedure TGtkColorChooser.add_palette(orientation: TGtkOrientation; colors_per_line: gint; n_colors: gint; colors: PGdkRGBA); cdecl;
begin
  Gtk4.gtk_color_chooser_add_palette(@self, orientation, colors_per_line, n_colors, colors);
end;

procedure TGtkColorChooser.get_rgba(color: PGdkRGBA); cdecl;
begin
  Gtk4.gtk_color_chooser_get_rgba(@self, color);
end;

function TGtkColorChooser.get_use_alpha: gboolean; cdecl;
begin
  Result := Gtk4.gtk_color_chooser_get_use_alpha(@self);
end;

procedure TGtkColorChooser.set_rgba(color: PGdkRGBA); cdecl;
begin
  Gtk4.gtk_color_chooser_set_rgba(@self, color);
end;

procedure TGtkColorChooser.set_use_alpha(use_alpha: gboolean); cdecl;
begin
  Gtk4.gtk_color_chooser_set_use_alpha(@self, use_alpha);
end;

function TGtkColorButton.new: PGtkColorButton; cdecl;
begin
  Result := Gtk4.gtk_color_button_new();
end;

function TGtkColorButton.new_with_rgba(rgba: PGdkRGBA): PGtkColorButton; cdecl;
begin
  Result := Gtk4.gtk_color_button_new_with_rgba(rgba);
end;

function TGtkColorButton.get_modal: gboolean; cdecl;
begin
  Result := Gtk4.gtk_color_button_get_modal(@self);
end;

function TGtkColorButton.get_title: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_color_button_get_title(@self);
end;

procedure TGtkColorButton.set_modal(modal: gboolean); cdecl;
begin
  Gtk4.gtk_color_button_set_modal(@self, modal);
end;

procedure TGtkColorButton.set_title(title: Pgchar); cdecl;
begin
  Gtk4.gtk_color_button_set_title(@self, title);
end;

function TGtkColorChooserDialog.new(title: Pgchar; parent: PGtkWindow): PGtkColorChooserDialog; cdecl;
begin
  Result := Gtk4.gtk_color_chooser_dialog_new(title, parent);
end;

function TGtkColorChooserWidget.new: PGtkColorChooserWidget; cdecl;
begin
  Result := Gtk4.gtk_color_chooser_widget_new();
end;

function TGtkScrollable.get_border(border: PGtkBorder): gboolean; cdecl;
begin
  Result := Gtk4.gtk_scrollable_get_border(@self, border);
end;

function TGtkScrollable.get_hadjustment: PGtkAdjustment; cdecl;
begin
  Result := Gtk4.gtk_scrollable_get_hadjustment(@self);
end;

function TGtkScrollable.get_hscroll_policy: TGtkScrollablePolicy; cdecl;
begin
  Result := Gtk4.gtk_scrollable_get_hscroll_policy(@self);
end;

function TGtkScrollable.get_vadjustment: PGtkAdjustment; cdecl;
begin
  Result := Gtk4.gtk_scrollable_get_vadjustment(@self);
end;

function TGtkScrollable.get_vscroll_policy: TGtkScrollablePolicy; cdecl;
begin
  Result := Gtk4.gtk_scrollable_get_vscroll_policy(@self);
end;

procedure TGtkScrollable.set_hadjustment(hadjustment: PGtkAdjustment); cdecl;
begin
  Gtk4.gtk_scrollable_set_hadjustment(@self, hadjustment);
end;

procedure TGtkScrollable.set_hscroll_policy(policy: TGtkScrollablePolicy); cdecl;
begin
  Gtk4.gtk_scrollable_set_hscroll_policy(@self, policy);
end;

procedure TGtkScrollable.set_vadjustment(vadjustment: PGtkAdjustment); cdecl;
begin
  Gtk4.gtk_scrollable_set_vadjustment(@self, vadjustment);
end;

procedure TGtkScrollable.set_vscroll_policy(policy: TGtkScrollablePolicy); cdecl;
begin
  Gtk4.gtk_scrollable_set_vscroll_policy(@self, policy);
end;

function TGtkSelectionModel.get_selection: PGtkBitset; cdecl;
begin
  Result := Gtk4.gtk_selection_model_get_selection(@self);
end;

function TGtkSelectionModel.get_selection_in_range(position: guint; n_items: guint): PGtkBitset; cdecl;
begin
  Result := Gtk4.gtk_selection_model_get_selection_in_range(@self, position, n_items);
end;

function TGtkSelectionModel.is_selected(position: guint): gboolean; cdecl;
begin
  Result := Gtk4.gtk_selection_model_is_selected(@self, position);
end;

function TGtkSelectionModel.select_all: gboolean; cdecl;
begin
  Result := Gtk4.gtk_selection_model_select_all(@self);
end;

function TGtkSelectionModel.select_item(position: guint; unselect_rest: gboolean): gboolean; cdecl;
begin
  Result := Gtk4.gtk_selection_model_select_item(@self, position, unselect_rest);
end;

function TGtkSelectionModel.select_range(position: guint; n_items: guint; unselect_rest: gboolean): gboolean; cdecl;
begin
  Result := Gtk4.gtk_selection_model_select_range(@self, position, n_items, unselect_rest);
end;

procedure TGtkSelectionModel.selection_changed(position: guint; n_items: guint); cdecl;
begin
  Gtk4.gtk_selection_model_selection_changed(@self, position, n_items);
end;

function TGtkSelectionModel.set_selection(selected: PGtkBitset; mask: PGtkBitset): gboolean; cdecl;
begin
  Result := Gtk4.gtk_selection_model_set_selection(@self, selected, mask);
end;

function TGtkSelectionModel.unselect_all: gboolean; cdecl;
begin
  Result := Gtk4.gtk_selection_model_unselect_all(@self);
end;

function TGtkSelectionModel.unselect_item(position: guint): gboolean; cdecl;
begin
  Result := Gtk4.gtk_selection_model_unselect_item(@self, position);
end;

function TGtkSelectionModel.unselect_range(position: guint; n_items: guint): gboolean; cdecl;
begin
  Result := Gtk4.gtk_selection_model_unselect_range(@self, position, n_items);
end;

function TGtkColumnView.new(model: PGtkSelectionModel): PGtkColumnView; cdecl;
begin
  Result := Gtk4.gtk_column_view_new(model);
end;

procedure TGtkColumnView.append_column(column: PGtkColumnViewColumn); cdecl;
begin
  Gtk4.gtk_column_view_append_column(@self, column);
end;

function TGtkColumnView.get_columns: PGListModel; cdecl;
begin
  Result := Gtk4.gtk_column_view_get_columns(@self);
end;

function TGtkColumnView.get_enable_rubberband: gboolean; cdecl;
begin
  Result := Gtk4.gtk_column_view_get_enable_rubberband(@self);
end;

function TGtkColumnView.get_model: PGtkSelectionModel; cdecl;
begin
  Result := Gtk4.gtk_column_view_get_model(@self);
end;

function TGtkColumnView.get_reorderable: gboolean; cdecl;
begin
  Result := Gtk4.gtk_column_view_get_reorderable(@self);
end;

function TGtkColumnView.get_show_column_separators: gboolean; cdecl;
begin
  Result := Gtk4.gtk_column_view_get_show_column_separators(@self);
end;

function TGtkColumnView.get_show_row_separators: gboolean; cdecl;
begin
  Result := Gtk4.gtk_column_view_get_show_row_separators(@self);
end;

function TGtkColumnView.get_single_click_activate: gboolean; cdecl;
begin
  Result := Gtk4.gtk_column_view_get_single_click_activate(@self);
end;

function TGtkColumnView.get_sorter: PGtkSorter; cdecl;
begin
  Result := Gtk4.gtk_column_view_get_sorter(@self);
end;

procedure TGtkColumnView.insert_column(position: guint; column: PGtkColumnViewColumn); cdecl;
begin
  Gtk4.gtk_column_view_insert_column(@self, position, column);
end;

procedure TGtkColumnView.remove_column(column: PGtkColumnViewColumn); cdecl;
begin
  Gtk4.gtk_column_view_remove_column(@self, column);
end;

procedure TGtkColumnView.set_enable_rubberband(enable_rubberband: gboolean); cdecl;
begin
  Gtk4.gtk_column_view_set_enable_rubberband(@self, enable_rubberband);
end;

procedure TGtkColumnView.set_model(model: PGtkSelectionModel); cdecl;
begin
  Gtk4.gtk_column_view_set_model(@self, model);
end;

procedure TGtkColumnView.set_reorderable(reorderable: gboolean); cdecl;
begin
  Gtk4.gtk_column_view_set_reorderable(@self, reorderable);
end;

procedure TGtkColumnView.set_show_column_separators(show_column_separators: gboolean); cdecl;
begin
  Gtk4.gtk_column_view_set_show_column_separators(@self, show_column_separators);
end;

procedure TGtkColumnView.set_show_row_separators(show_row_separators: gboolean); cdecl;
begin
  Gtk4.gtk_column_view_set_show_row_separators(@self, show_row_separators);
end;

procedure TGtkColumnView.set_single_click_activate(single_click_activate: gboolean); cdecl;
begin
  Gtk4.gtk_column_view_set_single_click_activate(@self, single_click_activate);
end;

procedure TGtkColumnView.sort_by_column(column: PGtkColumnViewColumn; direction: TGtkSortType); cdecl;
begin
  Gtk4.gtk_column_view_sort_by_column(@self, column, direction);
end;

function TGtkColumnViewColumn.new(title: Pgchar; factory: PGtkListItemFactory): PGtkColumnViewColumn; cdecl;
begin
  Result := Gtk4.gtk_column_view_column_new(title, factory);
end;

function TGtkColumnViewColumn.get_column_view: PGtkColumnView; cdecl;
begin
  Result := Gtk4.gtk_column_view_column_get_column_view(@self);
end;

function TGtkColumnViewColumn.get_expand: gboolean; cdecl;
begin
  Result := Gtk4.gtk_column_view_column_get_expand(@self);
end;

function TGtkColumnViewColumn.get_factory: PGtkListItemFactory; cdecl;
begin
  Result := Gtk4.gtk_column_view_column_get_factory(@self);
end;

function TGtkColumnViewColumn.get_fixed_width: gint; cdecl;
begin
  Result := Gtk4.gtk_column_view_column_get_fixed_width(@self);
end;

function TGtkColumnViewColumn.get_header_menu: PGMenuModel; cdecl;
begin
  Result := Gtk4.gtk_column_view_column_get_header_menu(@self);
end;

function TGtkColumnViewColumn.get_resizable: gboolean; cdecl;
begin
  Result := Gtk4.gtk_column_view_column_get_resizable(@self);
end;

function TGtkColumnViewColumn.get_sorter: PGtkSorter; cdecl;
begin
  Result := Gtk4.gtk_column_view_column_get_sorter(@self);
end;

function TGtkColumnViewColumn.get_title: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_column_view_column_get_title(@self);
end;

function TGtkColumnViewColumn.get_visible: gboolean; cdecl;
begin
  Result := Gtk4.gtk_column_view_column_get_visible(@self);
end;

procedure TGtkColumnViewColumn.set_expand(expand: gboolean); cdecl;
begin
  Gtk4.gtk_column_view_column_set_expand(@self, expand);
end;

procedure TGtkColumnViewColumn.set_factory(factory: PGtkListItemFactory); cdecl;
begin
  Gtk4.gtk_column_view_column_set_factory(@self, factory);
end;

procedure TGtkColumnViewColumn.set_fixed_width(fixed_width: gint); cdecl;
begin
  Gtk4.gtk_column_view_column_set_fixed_width(@self, fixed_width);
end;

procedure TGtkColumnViewColumn.set_header_menu(menu: PGMenuModel); cdecl;
begin
  Gtk4.gtk_column_view_column_set_header_menu(@self, menu);
end;

procedure TGtkColumnViewColumn.set_resizable(resizable: gboolean); cdecl;
begin
  Gtk4.gtk_column_view_column_set_resizable(@self, resizable);
end;

procedure TGtkColumnViewColumn.set_sorter(sorter: PGtkSorter); cdecl;
begin
  Gtk4.gtk_column_view_column_set_sorter(@self, sorter);
end;

procedure TGtkColumnViewColumn.set_title(title: Pgchar); cdecl;
begin
  Gtk4.gtk_column_view_column_set_title(@self, title);
end;

procedure TGtkColumnViewColumn.set_visible(visible: gboolean); cdecl;
begin
  Gtk4.gtk_column_view_column_set_visible(@self, visible);
end;

procedure TGtkSorter.changed(change: TGtkSorterChange); cdecl;
begin
  Gtk4.gtk_sorter_changed(@self, change);
end;

function TGtkSorter.compare(item1: PGObject; item2: PGObject): TGtkOrdering; cdecl;
begin
  Result := Gtk4.gtk_sorter_compare(@self, item1, item2);
end;

function TGtkSorter.get_order: TGtkSorterOrder; cdecl;
begin
  Result := Gtk4.gtk_sorter_get_order(@self);
end;

function TGtkComboBox.new: PGtkComboBox; cdecl;
begin
  Result := Gtk4.gtk_combo_box_new();
end;

function TGtkComboBox.new_with_entry: PGtkComboBox; cdecl;
begin
  Result := Gtk4.gtk_combo_box_new_with_entry();
end;

function TGtkComboBox.new_with_model(model: PGtkTreeModel): PGtkComboBox; cdecl;
begin
  Result := Gtk4.gtk_combo_box_new_with_model(model);
end;

function TGtkComboBox.new_with_model_and_entry(model: PGtkTreeModel): PGtkComboBox; cdecl;
begin
  Result := Gtk4.gtk_combo_box_new_with_model_and_entry(model);
end;

function TGtkComboBox.get_active: gint; cdecl;
begin
  Result := Gtk4.gtk_combo_box_get_active(@self);
end;

function TGtkComboBox.get_active_id: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_combo_box_get_active_id(@self);
end;

function TGtkComboBox.get_active_iter(iter: PGtkTreeIter): gboolean; cdecl;
begin
  Result := Gtk4.gtk_combo_box_get_active_iter(@self, iter);
end;

function TGtkComboBox.get_button_sensitivity: TGtkSensitivityType; cdecl;
begin
  Result := Gtk4.gtk_combo_box_get_button_sensitivity(@self);
end;

function TGtkComboBox.get_child: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_combo_box_get_child(@self);
end;

function TGtkComboBox.get_entry_text_column: gint; cdecl;
begin
  Result := Gtk4.gtk_combo_box_get_entry_text_column(@self);
end;

function TGtkComboBox.get_has_entry: gboolean; cdecl;
begin
  Result := Gtk4.gtk_combo_box_get_has_entry(@self);
end;

function TGtkComboBox.get_id_column: gint; cdecl;
begin
  Result := Gtk4.gtk_combo_box_get_id_column(@self);
end;

function TGtkComboBox.get_model: PGtkTreeModel; cdecl;
begin
  Result := Gtk4.gtk_combo_box_get_model(@self);
end;

function TGtkComboBox.get_popup_fixed_width: gboolean; cdecl;
begin
  Result := Gtk4.gtk_combo_box_get_popup_fixed_width(@self);
end;

function TGtkComboBox.get_row_separator_func: TGtkTreeViewRowSeparatorFunc; cdecl;
begin
  Result := Gtk4.gtk_combo_box_get_row_separator_func(@self);
end;

procedure TGtkComboBox.popdown; cdecl;
begin
  Gtk4.gtk_combo_box_popdown(@self);
end;

procedure TGtkComboBox.popup; cdecl;
begin
  Gtk4.gtk_combo_box_popup(@self);
end;

procedure TGtkComboBox.popup_for_device(device: PGdkDevice); cdecl;
begin
  Gtk4.gtk_combo_box_popup_for_device(@self, device);
end;

procedure TGtkComboBox.set_active(index_: gint); cdecl;
begin
  Gtk4.gtk_combo_box_set_active(@self, index_);
end;

function TGtkComboBox.set_active_id(active_id: Pgchar): gboolean; cdecl;
begin
  Result := Gtk4.gtk_combo_box_set_active_id(@self, active_id);
end;

procedure TGtkComboBox.set_active_iter(iter: PGtkTreeIter); cdecl;
begin
  Gtk4.gtk_combo_box_set_active_iter(@self, iter);
end;

procedure TGtkComboBox.set_button_sensitivity(sensitivity: TGtkSensitivityType); cdecl;
begin
  Gtk4.gtk_combo_box_set_button_sensitivity(@self, sensitivity);
end;

procedure TGtkComboBox.set_child(child: PGtkWidget); cdecl;
begin
  Gtk4.gtk_combo_box_set_child(@self, child);
end;

procedure TGtkComboBox.set_entry_text_column(text_column: gint); cdecl;
begin
  Gtk4.gtk_combo_box_set_entry_text_column(@self, text_column);
end;

procedure TGtkComboBox.set_id_column(id_column: gint); cdecl;
begin
  Gtk4.gtk_combo_box_set_id_column(@self, id_column);
end;

procedure TGtkComboBox.set_model(model: PGtkTreeModel); cdecl;
begin
  Gtk4.gtk_combo_box_set_model(@self, model);
end;

procedure TGtkComboBox.set_popup_fixed_width(fixed: gboolean); cdecl;
begin
  Gtk4.gtk_combo_box_set_popup_fixed_width(@self, fixed);
end;

procedure TGtkComboBox.set_row_separator_func(func: TGtkTreeViewRowSeparatorFunc; data: gpointer; destroy_: TGDestroyNotify); cdecl;
begin
  Gtk4.gtk_combo_box_set_row_separator_func(@self, func, data, destroy_);
end;

function TGtkComboBoxText.new: PGtkComboBoxText; cdecl;
begin
  Result := Gtk4.gtk_combo_box_text_new();
end;

function TGtkComboBoxText.new_with_entry: PGtkComboBoxText; cdecl;
begin
  Result := Gtk4.gtk_combo_box_text_new_with_entry();
end;

procedure TGtkComboBoxText.append(id: Pgchar; text: Pgchar); cdecl;
begin
  Gtk4.gtk_combo_box_text_append(@self, id, text);
end;

procedure TGtkComboBoxText.append_text(text: Pgchar); cdecl;
begin
  Gtk4.gtk_combo_box_text_append_text(@self, text);
end;

function TGtkComboBoxText.get_active_text: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_combo_box_text_get_active_text(@self);
end;

procedure TGtkComboBoxText.insert(position: gint; id: Pgchar; text: Pgchar); cdecl;
begin
  Gtk4.gtk_combo_box_text_insert(@self, position, id, text);
end;

procedure TGtkComboBoxText.insert_text(position: gint; text: Pgchar); cdecl;
begin
  Gtk4.gtk_combo_box_text_insert_text(@self, position, text);
end;

procedure TGtkComboBoxText.prepend(id: Pgchar; text: Pgchar); cdecl;
begin
  Gtk4.gtk_combo_box_text_prepend(@self, id, text);
end;

procedure TGtkComboBoxText.prepend_text(text: Pgchar); cdecl;
begin
  Gtk4.gtk_combo_box_text_prepend_text(@self, text);
end;

procedure TGtkComboBoxText.remove(position: gint); cdecl;
begin
  Gtk4.gtk_combo_box_text_remove(@self, position);
end;

procedure TGtkComboBoxText.remove_all; cdecl;
begin
  Gtk4.gtk_combo_box_text_remove_all(@self);
end;

function TGtkConstantExpression.new_for_value(value: PGValue): PGtkConstantExpression; cdecl;
begin
  Result := Gtk4.gtk_constant_expression_new_for_value(value);
end;

function TGtkConstantExpression.get_value: PGValue; cdecl;
begin
  Result := Gtk4.gtk_constant_expression_get_value(@self);
end;

function TGtkConstraint.new(target: PGtkConstraintTarget; target_attribute: TGtkConstraintAttribute; relation: TGtkConstraintRelation; source: PGtkConstraintTarget; source_attribute: TGtkConstraintAttribute; multiplier: gdouble; constant: gdouble; strength: gint): PGtkConstraint; cdecl;
begin
  Result := Gtk4.gtk_constraint_new(target, target_attribute, relation, source, source_attribute, multiplier, constant, strength);
end;

function TGtkConstraint.new_constant(target: PGtkConstraintTarget; target_attribute: TGtkConstraintAttribute; relation: TGtkConstraintRelation; constant: gdouble; strength: gint): PGtkConstraint; cdecl;
begin
  Result := Gtk4.gtk_constraint_new_constant(target, target_attribute, relation, constant, strength);
end;

function TGtkConstraint.get_constant: gdouble; cdecl;
begin
  Result := Gtk4.gtk_constraint_get_constant(@self);
end;

function TGtkConstraint.get_multiplier: gdouble; cdecl;
begin
  Result := Gtk4.gtk_constraint_get_multiplier(@self);
end;

function TGtkConstraint.get_relation: TGtkConstraintRelation; cdecl;
begin
  Result := Gtk4.gtk_constraint_get_relation(@self);
end;

function TGtkConstraint.get_source: PGtkConstraintTarget; cdecl;
begin
  Result := Gtk4.gtk_constraint_get_source(@self);
end;

function TGtkConstraint.get_source_attribute: TGtkConstraintAttribute; cdecl;
begin
  Result := Gtk4.gtk_constraint_get_source_attribute(@self);
end;

function TGtkConstraint.get_strength: gint; cdecl;
begin
  Result := Gtk4.gtk_constraint_get_strength(@self);
end;

function TGtkConstraint.get_target: PGtkConstraintTarget; cdecl;
begin
  Result := Gtk4.gtk_constraint_get_target(@self);
end;

function TGtkConstraint.get_target_attribute: TGtkConstraintAttribute; cdecl;
begin
  Result := Gtk4.gtk_constraint_get_target_attribute(@self);
end;

function TGtkConstraint.is_attached: gboolean; cdecl;
begin
  Result := Gtk4.gtk_constraint_is_attached(@self);
end;

function TGtkConstraint.is_constant: gboolean; cdecl;
begin
  Result := Gtk4.gtk_constraint_is_constant(@self);
end;

function TGtkConstraint.is_required: gboolean; cdecl;
begin
  Result := Gtk4.gtk_constraint_is_required(@self);
end;

function TGtkConstraintGuide.new: PGtkConstraintGuide; cdecl;
begin
  Result := Gtk4.gtk_constraint_guide_new();
end;

procedure TGtkConstraintGuide.get_max_size(width: Pgint; height: Pgint); cdecl;
begin
  Gtk4.gtk_constraint_guide_get_max_size(@self, width, height);
end;

procedure TGtkConstraintGuide.get_min_size(width: Pgint; height: Pgint); cdecl;
begin
  Gtk4.gtk_constraint_guide_get_min_size(@self, width, height);
end;

function TGtkConstraintGuide.get_name: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_constraint_guide_get_name(@self);
end;

procedure TGtkConstraintGuide.get_nat_size(width: Pgint; height: Pgint); cdecl;
begin
  Gtk4.gtk_constraint_guide_get_nat_size(@self, width, height);
end;

function TGtkConstraintGuide.get_strength: TGtkConstraintStrength; cdecl;
begin
  Result := Gtk4.gtk_constraint_guide_get_strength(@self);
end;

procedure TGtkConstraintGuide.set_max_size(width: gint; height: gint); cdecl;
begin
  Gtk4.gtk_constraint_guide_set_max_size(@self, width, height);
end;

procedure TGtkConstraintGuide.set_min_size(width: gint; height: gint); cdecl;
begin
  Gtk4.gtk_constraint_guide_set_min_size(@self, width, height);
end;

procedure TGtkConstraintGuide.set_name(name: Pgchar); cdecl;
begin
  Gtk4.gtk_constraint_guide_set_name(@self, name);
end;

procedure TGtkConstraintGuide.set_nat_size(width: gint; height: gint); cdecl;
begin
  Gtk4.gtk_constraint_guide_set_nat_size(@self, width, height);
end;

procedure TGtkConstraintGuide.set_strength(strength: TGtkConstraintStrength); cdecl;
begin
  Gtk4.gtk_constraint_guide_set_strength(@self, strength);
end;

function TGtkConstraintLayout.new: PGtkConstraintLayout; cdecl;
begin
  Result := Gtk4.gtk_constraint_layout_new();
end;

procedure TGtkConstraintLayout.add_constraint(constraint: PGtkConstraint); cdecl;
begin
  Gtk4.gtk_constraint_layout_add_constraint(@self, constraint);
end;

function TGtkConstraintLayout.add_constraints_from_descriptionv(lines: PPgchar; n_lines: gsize; hspacing: gint; vspacing: gint; views: PGHashTable; error: PPGError): PGList; cdecl;
begin
  Result := Gtk4.gtk_constraint_layout_add_constraints_from_descriptionv(@self, lines, n_lines, hspacing, vspacing, views, error);
end;

procedure TGtkConstraintLayout.add_guide(guide: PGtkConstraintGuide); cdecl;
begin
  Gtk4.gtk_constraint_layout_add_guide(@self, guide);
end;

function TGtkConstraintLayout.observe_constraints: PGListModel; cdecl;
begin
  Result := Gtk4.gtk_constraint_layout_observe_constraints(@self);
end;

function TGtkConstraintLayout.observe_guides: PGListModel; cdecl;
begin
  Result := Gtk4.gtk_constraint_layout_observe_guides(@self);
end;

procedure TGtkConstraintLayout.remove_all_constraints; cdecl;
begin
  Gtk4.gtk_constraint_layout_remove_all_constraints(@self);
end;

procedure TGtkConstraintLayout.remove_constraint(constraint: PGtkConstraint); cdecl;
begin
  Gtk4.gtk_constraint_layout_remove_constraint(@self, constraint);
end;

procedure TGtkConstraintLayout.remove_guide(guide: PGtkConstraintGuide); cdecl;
begin
  Gtk4.gtk_constraint_layout_remove_guide(@self, guide);
end;

function TGtkCssProvider.new: PGtkCssProvider; cdecl;
begin
  Result := Gtk4.gtk_css_provider_new();
end;

procedure TGtkCssProvider.load_from_data(data: Pgchar; length: gssize); cdecl;
begin
  Gtk4.gtk_css_provider_load_from_data(@self, data, length);
end;

procedure TGtkCssProvider.load_from_file(file_: PGFile); cdecl;
begin
  Gtk4.gtk_css_provider_load_from_file(@self, file_);
end;

procedure TGtkCssProvider.load_from_path(path: Pgchar); cdecl;
begin
  Gtk4.gtk_css_provider_load_from_path(@self, path);
end;

procedure TGtkCssProvider.load_from_resource(resource_path: Pgchar); cdecl;
begin
  Gtk4.gtk_css_provider_load_from_resource(@self, resource_path);
end;

procedure TGtkCssProvider.load_named(name: Pgchar; variant: Pgchar); cdecl;
begin
  Gtk4.gtk_css_provider_load_named(@self, name, variant);
end;

function TGtkCssProvider.to_string: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_css_provider_to_string(@self);
end;

function TGtkCssSection.new(file_: PGFile; start: PGtkCssLocation; end_: PGtkCssLocation): PGtkCssSection; cdecl;
begin
  Result := Gtk4.gtk_css_section_new(file_, start, end_);
end;

function TGtkCssSection.get_end_location: PGtkCssLocation; cdecl;
begin
  Result := Gtk4.gtk_css_section_get_end_location(@self);
end;

function TGtkCssSection.get_file: PGFile; cdecl;
begin
  Result := Gtk4.gtk_css_section_get_file(@self);
end;

function TGtkCssSection.get_parent: PGtkCssSection; cdecl;
begin
  Result := Gtk4.gtk_css_section_get_parent(@self);
end;

function TGtkCssSection.get_start_location: PGtkCssLocation; cdecl;
begin
  Result := Gtk4.gtk_css_section_get_start_location(@self);
end;

procedure TGtkCssSection.print(string_: PGString); cdecl;
begin
  Gtk4.gtk_css_section_print(@self, string_);
end;

function TGtkCssSection.ref: PGtkCssSection; cdecl;
begin
  Result := Gtk4.gtk_css_section_ref(@self);
end;

function TGtkCssSection.to_string: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_css_section_to_string(@self);
end;

procedure TGtkCssSection.unref; cdecl;
begin
  Gtk4.gtk_css_section_unref(@self);
end;

function TGtkCustomFilter.new(match_func: TGtkCustomFilterFunc; user_data: gpointer; user_destroy: TGDestroyNotify): PGtkCustomFilter; cdecl;
begin
  Result := Gtk4.gtk_custom_filter_new(match_func, user_data, user_destroy);
end;

procedure TGtkCustomFilter.set_filter_func(match_func: TGtkCustomFilterFunc; user_data: gpointer; user_destroy: TGDestroyNotify); cdecl;
begin
  Gtk4.gtk_custom_filter_set_filter_func(@self, match_func, user_data, user_destroy);
end;

function TGtkCustomLayout.new(request_mode: TGtkCustomRequestModeFunc; measure: TGtkCustomMeasureFunc; allocate: TGtkCustomAllocateFunc): PGtkCustomLayout; cdecl;
begin
  Result := Gtk4.gtk_custom_layout_new(request_mode, measure, allocate);
end;

function TGtkCustomSorter.new(sort_func: TGCompareDataFunc; user_data: gpointer; user_destroy: TGDestroyNotify): PGtkCustomSorter; cdecl;
begin
  Result := Gtk4.gtk_custom_sorter_new(sort_func, user_data, user_destroy);
end;

procedure TGtkCustomSorter.set_sort_func(sort_func: TGCompareDataFunc; user_data: gpointer; user_destroy: TGDestroyNotify); cdecl;
begin
  Gtk4.gtk_custom_sorter_set_sort_func(@self, sort_func, user_data, user_destroy);
end;

function TGtkDialog.new: PGtkDialog; cdecl;
begin
  Result := Gtk4.gtk_dialog_new();
end;

procedure TGtkDialog.add_action_widget(child: PGtkWidget; response_id: gint); cdecl;
begin
  Gtk4.gtk_dialog_add_action_widget(@self, child, response_id);
end;

function TGtkDialog.add_button(button_text: Pgchar; response_id: gint): PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_dialog_add_button(@self, button_text, response_id);
end;

function TGtkDialog.get_content_area: PGtkBox; cdecl;
begin
  Result := Gtk4.gtk_dialog_get_content_area(@self);
end;

function TGtkDialog.get_header_bar: PGtkHeaderBar; cdecl;
begin
  Result := Gtk4.gtk_dialog_get_header_bar(@self);
end;

function TGtkDialog.get_response_for_widget(widget: PGtkWidget): gint; cdecl;
begin
  Result := Gtk4.gtk_dialog_get_response_for_widget(@self, widget);
end;

function TGtkDialog.get_widget_for_response(response_id: gint): PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_dialog_get_widget_for_response(@self, response_id);
end;

procedure TGtkDialog.response(response_id: gint); cdecl;
begin
  Gtk4.gtk_dialog_response(@self, response_id);
end;

procedure TGtkDialog.set_default_response(response_id: gint); cdecl;
begin
  Gtk4.gtk_dialog_set_default_response(@self, response_id);
end;

procedure TGtkDialog.set_response_sensitive(response_id: gint; setting: gboolean); cdecl;
begin
  Gtk4.gtk_dialog_set_response_sensitive(@self, response_id, setting);
end;

function TGtkHeaderBar.new: PGtkHeaderBar; cdecl;
begin
  Result := Gtk4.gtk_header_bar_new();
end;

function TGtkHeaderBar.get_decoration_layout: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_header_bar_get_decoration_layout(@self);
end;

function TGtkHeaderBar.get_show_title_buttons: gboolean; cdecl;
begin
  Result := Gtk4.gtk_header_bar_get_show_title_buttons(@self);
end;

function TGtkHeaderBar.get_title_widget: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_header_bar_get_title_widget(@self);
end;

procedure TGtkHeaderBar.pack_end(child: PGtkWidget); cdecl;
begin
  Gtk4.gtk_header_bar_pack_end(@self, child);
end;

procedure TGtkHeaderBar.pack_start(child: PGtkWidget); cdecl;
begin
  Gtk4.gtk_header_bar_pack_start(@self, child);
end;

procedure TGtkHeaderBar.remove(child: PGtkWidget); cdecl;
begin
  Gtk4.gtk_header_bar_remove(@self, child);
end;

procedure TGtkHeaderBar.set_decoration_layout(layout: Pgchar); cdecl;
begin
  Gtk4.gtk_header_bar_set_decoration_layout(@self, layout);
end;

procedure TGtkHeaderBar.set_show_title_buttons(setting: gboolean); cdecl;
begin
  Gtk4.gtk_header_bar_set_show_title_buttons(@self, setting);
end;

procedure TGtkHeaderBar.set_title_widget(title_widget: PGtkWidget); cdecl;
begin
  Gtk4.gtk_header_bar_set_title_widget(@self, title_widget);
end;

function TGtkDirectoryList.new(attributes: Pgchar; file_: PGFile): PGtkDirectoryList; cdecl;
begin
  Result := Gtk4.gtk_directory_list_new(attributes, file_);
end;

function TGtkDirectoryList.get_attributes: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_directory_list_get_attributes(@self);
end;

function TGtkDirectoryList.get_error: PGError; cdecl;
begin
  Result := Gtk4.gtk_directory_list_get_error(@self);
end;

function TGtkDirectoryList.get_file: PGFile; cdecl;
begin
  Result := Gtk4.gtk_directory_list_get_file(@self);
end;

function TGtkDirectoryList.get_io_priority: gint; cdecl;
begin
  Result := Gtk4.gtk_directory_list_get_io_priority(@self);
end;

function TGtkDirectoryList.get_monitored: gboolean; cdecl;
begin
  Result := Gtk4.gtk_directory_list_get_monitored(@self);
end;

function TGtkDirectoryList.is_loading: gboolean; cdecl;
begin
  Result := Gtk4.gtk_directory_list_is_loading(@self);
end;

procedure TGtkDirectoryList.set_attributes(attributes: Pgchar); cdecl;
begin
  Gtk4.gtk_directory_list_set_attributes(@self, attributes);
end;

procedure TGtkDirectoryList.set_file(file_: PGFile); cdecl;
begin
  Gtk4.gtk_directory_list_set_file(@self, file_);
end;

procedure TGtkDirectoryList.set_io_priority(io_priority: gint); cdecl;
begin
  Gtk4.gtk_directory_list_set_io_priority(@self, io_priority);
end;

procedure TGtkDirectoryList.set_monitored(monitored: gboolean); cdecl;
begin
  Gtk4.gtk_directory_list_set_monitored(@self, monitored);
end;

function TGtkDragIcon.create_widget_for_value(value: PGValue): PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_drag_icon_create_widget_for_value(value);
end;

function TGtkDragIcon.get_for_drag(drag: PGdkDrag): PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_drag_icon_get_for_drag(drag);
end;

procedure TGtkDragIcon.set_from_paintable(drag: PGdkDrag; paintable: PGdkPaintable; hot_x: gint; hot_y: gint); cdecl;
begin
  Gtk4.gtk_drag_icon_set_from_paintable(drag, paintable, hot_x, hot_y);
end;

function TGtkDragIcon.get_child: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_drag_icon_get_child(@self);
end;

procedure TGtkDragIcon.set_child(child: PGtkWidget); cdecl;
begin
  Gtk4.gtk_drag_icon_set_child(@self, child);
end;

function TGtkDragSource.new: PGtkDragSource; cdecl;
begin
  Result := Gtk4.gtk_drag_source_new();
end;

procedure TGtkDragSource.drag_cancel; cdecl;
begin
  Gtk4.gtk_drag_source_drag_cancel(@self);
end;

function TGtkDragSource.get_actions: TGdkDragAction; cdecl;
begin
  Result := Gtk4.gtk_drag_source_get_actions(@self);
end;

function TGtkDragSource.get_content: PGdkContentProvider; cdecl;
begin
  Result := Gtk4.gtk_drag_source_get_content(@self);
end;

function TGtkDragSource.get_drag: PGdkDrag; cdecl;
begin
  Result := Gtk4.gtk_drag_source_get_drag(@self);
end;

procedure TGtkDragSource.set_actions(actions: TGdkDragAction); cdecl;
begin
  Gtk4.gtk_drag_source_set_actions(@self, actions);
end;

procedure TGtkDragSource.set_content(content: PGdkContentProvider); cdecl;
begin
  Gtk4.gtk_drag_source_set_content(@self, content);
end;

procedure TGtkDragSource.set_icon(paintable: PGdkPaintable; hot_x: gint; hot_y: gint); cdecl;
begin
  Gtk4.gtk_drag_source_set_icon(@self, paintable, hot_x, hot_y);
end;

function TGtkDrawingArea.new: PGtkDrawingArea; cdecl;
begin
  Result := Gtk4.gtk_drawing_area_new();
end;

function TGtkDrawingArea.get_content_height: gint; cdecl;
begin
  Result := Gtk4.gtk_drawing_area_get_content_height(@self);
end;

function TGtkDrawingArea.get_content_width: gint; cdecl;
begin
  Result := Gtk4.gtk_drawing_area_get_content_width(@self);
end;

procedure TGtkDrawingArea.set_content_height(height: gint); cdecl;
begin
  Gtk4.gtk_drawing_area_set_content_height(@self, height);
end;

procedure TGtkDrawingArea.set_content_width(width: gint); cdecl;
begin
  Gtk4.gtk_drawing_area_set_content_width(@self, width);
end;

procedure TGtkDrawingArea.set_draw_func(draw_func: TGtkDrawingAreaDrawFunc; user_data: gpointer; destroy_: TGDestroyNotify); cdecl;
begin
  Gtk4.gtk_drawing_area_set_draw_func(@self, draw_func, user_data, destroy_);
end;

function TGtkEventController.get_current_event: PGdkEvent; cdecl;
begin
  Result := Gtk4.gtk_event_controller_get_current_event(@self);
end;

function TGtkEventController.get_current_event_device: PGdkDevice; cdecl;
begin
  Result := Gtk4.gtk_event_controller_get_current_event_device(@self);
end;

function TGtkEventController.get_current_event_state: TGdkModifierType; cdecl;
begin
  Result := Gtk4.gtk_event_controller_get_current_event_state(@self);
end;

function TGtkEventController.get_current_event_time: guint32; cdecl;
begin
  Result := Gtk4.gtk_event_controller_get_current_event_time(@self);
end;

function TGtkEventController.get_name: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_event_controller_get_name(@self);
end;

function TGtkEventController.get_propagation_limit: TGtkPropagationLimit; cdecl;
begin
  Result := Gtk4.gtk_event_controller_get_propagation_limit(@self);
end;

function TGtkEventController.get_propagation_phase: TGtkPropagationPhase; cdecl;
begin
  Result := Gtk4.gtk_event_controller_get_propagation_phase(@self);
end;

function TGtkEventController.get_widget: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_event_controller_get_widget(@self);
end;

procedure TGtkEventController.reset; cdecl;
begin
  Gtk4.gtk_event_controller_reset(@self);
end;

procedure TGtkEventController.set_name(name: Pgchar); cdecl;
begin
  Gtk4.gtk_event_controller_set_name(@self, name);
end;

procedure TGtkEventController.set_propagation_limit(limit: TGtkPropagationLimit); cdecl;
begin
  Gtk4.gtk_event_controller_set_propagation_limit(@self, limit);
end;

procedure TGtkEventController.set_propagation_phase(phase: TGtkPropagationPhase); cdecl;
begin
  Gtk4.gtk_event_controller_set_propagation_phase(@self, phase);
end;

function TGtkDropControllerMotion.new: PGtkDropControllerMotion; cdecl;
begin
  Result := Gtk4.gtk_drop_controller_motion_new();
end;

function TGtkDropControllerMotion.contains_pointer: gboolean; cdecl;
begin
  Result := Gtk4.gtk_drop_controller_motion_contains_pointer(@self);
end;

function TGtkDropControllerMotion.get_drop: PGdkDrop; cdecl;
begin
  Result := Gtk4.gtk_drop_controller_motion_get_drop(@self);
end;

function TGtkDropControllerMotion.is_pointer: gboolean; cdecl;
begin
  Result := Gtk4.gtk_drop_controller_motion_is_pointer(@self);
end;

function TGtkDropDown.new(model: PGListModel; expression: PGtkExpression): PGtkDropDown; cdecl;
begin
  Result := Gtk4.gtk_drop_down_new(model, expression);
end;

function TGtkDropDown.new_from_strings(strings: PPgchar): PGtkDropDown; cdecl;
begin
  Result := Gtk4.gtk_drop_down_new_from_strings(strings);
end;

function TGtkDropDown.get_enable_search: gboolean; cdecl;
begin
  Result := Gtk4.gtk_drop_down_get_enable_search(@self);
end;

function TGtkDropDown.get_expression: PGtkExpression; cdecl;
begin
  Result := Gtk4.gtk_drop_down_get_expression(@self);
end;

function TGtkDropDown.get_factory: PGtkListItemFactory; cdecl;
begin
  Result := Gtk4.gtk_drop_down_get_factory(@self);
end;

function TGtkDropDown.get_list_factory: PGtkListItemFactory; cdecl;
begin
  Result := Gtk4.gtk_drop_down_get_list_factory(@self);
end;

function TGtkDropDown.get_model: PGListModel; cdecl;
begin
  Result := Gtk4.gtk_drop_down_get_model(@self);
end;

function TGtkDropDown.get_selected: guint; cdecl;
begin
  Result := Gtk4.gtk_drop_down_get_selected(@self);
end;

function TGtkDropDown.get_selected_item: PGObject; cdecl;
begin
  Result := Gtk4.gtk_drop_down_get_selected_item(@self);
end;

function TGtkDropDown.get_show_arrow: gboolean; cdecl;
begin
  Result := Gtk4.gtk_drop_down_get_show_arrow(@self);
end;

procedure TGtkDropDown.set_enable_search(enable_search: gboolean); cdecl;
begin
  Gtk4.gtk_drop_down_set_enable_search(@self, enable_search);
end;

procedure TGtkDropDown.set_expression(expression: PGtkExpression); cdecl;
begin
  Gtk4.gtk_drop_down_set_expression(@self, expression);
end;

procedure TGtkDropDown.set_factory(factory: PGtkListItemFactory); cdecl;
begin
  Gtk4.gtk_drop_down_set_factory(@self, factory);
end;

procedure TGtkDropDown.set_list_factory(factory: PGtkListItemFactory); cdecl;
begin
  Gtk4.gtk_drop_down_set_list_factory(@self, factory);
end;

procedure TGtkDropDown.set_model(model: PGListModel); cdecl;
begin
  Gtk4.gtk_drop_down_set_model(@self, model);
end;

procedure TGtkDropDown.set_selected(position: guint); cdecl;
begin
  Gtk4.gtk_drop_down_set_selected(@self, position);
end;

procedure TGtkDropDown.set_show_arrow(show_arrow: gboolean); cdecl;
begin
  Gtk4.gtk_drop_down_set_show_arrow(@self, show_arrow);
end;

function TGtkDropTarget.new(type_: TGType; actions: TGdkDragAction): PGtkDropTarget; cdecl;
begin
  Result := Gtk4.gtk_drop_target_new(type_, actions);
end;

function TGtkDropTarget.get_actions: TGdkDragAction; cdecl;
begin
  Result := Gtk4.gtk_drop_target_get_actions(@self);
end;

function TGtkDropTarget.get_current_drop: PGdkDrop; cdecl;
begin
  Result := Gtk4.gtk_drop_target_get_current_drop(@self);
end;

function TGtkDropTarget.get_formats: PGdkContentFormats; cdecl;
begin
  Result := Gtk4.gtk_drop_target_get_formats(@self);
end;

function TGtkDropTarget.get_gtypes(n_types: Pgsize): PGType; cdecl;
begin
  Result := Gtk4.gtk_drop_target_get_gtypes(@self, n_types);
end;

function TGtkDropTarget.get_preload: gboolean; cdecl;
begin
  Result := Gtk4.gtk_drop_target_get_preload(@self);
end;

function TGtkDropTarget.get_value: PGValue; cdecl;
begin
  Result := Gtk4.gtk_drop_target_get_value(@self);
end;

procedure TGtkDropTarget.reject; cdecl;
begin
  Gtk4.gtk_drop_target_reject(@self);
end;

procedure TGtkDropTarget.set_actions(actions: TGdkDragAction); cdecl;
begin
  Gtk4.gtk_drop_target_set_actions(@self, actions);
end;

procedure TGtkDropTarget.set_gtypes(types: PGType; n_types: gsize); cdecl;
begin
  Gtk4.gtk_drop_target_set_gtypes(@self, types, n_types);
end;

procedure TGtkDropTarget.set_preload(preload: gboolean); cdecl;
begin
  Gtk4.gtk_drop_target_set_preload(@self, preload);
end;

function TGtkDropTargetAsync.new(formats: PGdkContentFormats; actions: TGdkDragAction): PGtkDropTargetAsync; cdecl;
begin
  Result := Gtk4.gtk_drop_target_async_new(formats, actions);
end;

function TGtkDropTargetAsync.get_actions: TGdkDragAction; cdecl;
begin
  Result := Gtk4.gtk_drop_target_async_get_actions(@self);
end;

function TGtkDropTargetAsync.get_formats: PGdkContentFormats; cdecl;
begin
  Result := Gtk4.gtk_drop_target_async_get_formats(@self);
end;

procedure TGtkDropTargetAsync.reject_drop(drop: PGdkDrop); cdecl;
begin
  Gtk4.gtk_drop_target_async_reject_drop(@self, drop);
end;

procedure TGtkDropTargetAsync.set_actions(actions: TGdkDragAction); cdecl;
begin
  Gtk4.gtk_drop_target_async_set_actions(@self, actions);
end;

procedure TGtkDropTargetAsync.set_formats(formats: PGdkContentFormats); cdecl;
begin
  Gtk4.gtk_drop_target_async_set_formats(@self, formats);
end;

function TGtkEditable.delegate_get_property(object_: PGObject; prop_id: guint; value: PGValue; pspec: PGParamSpec): gboolean; cdecl;
begin
  Result := Gtk4.gtk_editable_delegate_get_property(object_, prop_id, value, pspec);
end;

function TGtkEditable.delegate_set_property(object_: PGObject; prop_id: guint; value: PGValue; pspec: PGParamSpec): gboolean; cdecl;
begin
  Result := Gtk4.gtk_editable_delegate_set_property(object_, prop_id, value, pspec);
end;

function TGtkEditable.install_properties(object_class: PGObjectClass; first_prop: guint): guint; cdecl;
begin
  Result := Gtk4.gtk_editable_install_properties(object_class, first_prop);
end;

procedure TGtkEditable.delete_selection; cdecl;
begin
  Gtk4.gtk_editable_delete_selection(@self);
end;

procedure TGtkEditable.delete_text(start_pos: gint; end_pos: gint); cdecl;
begin
  Gtk4.gtk_editable_delete_text(@self, start_pos, end_pos);
end;

procedure TGtkEditable.finish_delegate; cdecl;
begin
  Gtk4.gtk_editable_finish_delegate(@self);
end;

function TGtkEditable.get_alignment: gfloat; cdecl;
begin
  Result := Gtk4.gtk_editable_get_alignment(@self);
end;

function TGtkEditable.get_chars(start_pos: gint; end_pos: gint): Pgchar; cdecl;
begin
  Result := Gtk4.gtk_editable_get_chars(@self, start_pos, end_pos);
end;

function TGtkEditable.get_delegate: PGtkEditable; cdecl;
begin
  Result := Gtk4.gtk_editable_get_delegate(@self);
end;

function TGtkEditable.get_editable: gboolean; cdecl;
begin
  Result := Gtk4.gtk_editable_get_editable(@self);
end;

function TGtkEditable.get_enable_undo: gboolean; cdecl;
begin
  Result := Gtk4.gtk_editable_get_enable_undo(@self);
end;

function TGtkEditable.get_max_width_chars: gint; cdecl;
begin
  Result := Gtk4.gtk_editable_get_max_width_chars(@self);
end;

function TGtkEditable.get_position: gint; cdecl;
begin
  Result := Gtk4.gtk_editable_get_position(@self);
end;

function TGtkEditable.get_selection_bounds(start_pos: Pgint; end_pos: Pgint): gboolean; cdecl;
begin
  Result := Gtk4.gtk_editable_get_selection_bounds(@self, start_pos, end_pos);
end;

function TGtkEditable.get_text: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_editable_get_text(@self);
end;

function TGtkEditable.get_width_chars: gint; cdecl;
begin
  Result := Gtk4.gtk_editable_get_width_chars(@self);
end;

procedure TGtkEditable.init_delegate; cdecl;
begin
  Gtk4.gtk_editable_init_delegate(@self);
end;

procedure TGtkEditable.insert_text(text: Pgchar; length: gint; position: Pgint); cdecl;
begin
  Gtk4.gtk_editable_insert_text(@self, text, length, position);
end;

procedure TGtkEditable.select_region(start_pos: gint; end_pos: gint); cdecl;
begin
  Gtk4.gtk_editable_select_region(@self, start_pos, end_pos);
end;

procedure TGtkEditable.set_alignment(xalign: gfloat); cdecl;
begin
  Gtk4.gtk_editable_set_alignment(@self, xalign);
end;

procedure TGtkEditable.set_editable(is_editable: gboolean); cdecl;
begin
  Gtk4.gtk_editable_set_editable(@self, is_editable);
end;

procedure TGtkEditable.set_enable_undo(enable_undo: gboolean); cdecl;
begin
  Gtk4.gtk_editable_set_enable_undo(@self, enable_undo);
end;

procedure TGtkEditable.set_max_width_chars(n_chars: gint); cdecl;
begin
  Gtk4.gtk_editable_set_max_width_chars(@self, n_chars);
end;

procedure TGtkEditable.set_position(position: gint); cdecl;
begin
  Gtk4.gtk_editable_set_position(@self, position);
end;

procedure TGtkEditable.set_text(text: Pgchar); cdecl;
begin
  Gtk4.gtk_editable_set_text(@self, text);
end;

procedure TGtkEditable.set_width_chars(n_chars: gint); cdecl;
begin
  Gtk4.gtk_editable_set_width_chars(@self, n_chars);
end;

function TGtkEditableLabel.new(str: Pgchar): PGtkEditableLabel; cdecl;
begin
  Result := Gtk4.gtk_editable_label_new(str);
end;

function TGtkEditableLabel.get_editing: gboolean; cdecl;
begin
  Result := Gtk4.gtk_editable_label_get_editing(@self);
end;

procedure TGtkEditableLabel.start_editing; cdecl;
begin
  Gtk4.gtk_editable_label_start_editing(@self);
end;

procedure TGtkEditableLabel.stop_editing(commit: gboolean); cdecl;
begin
  Gtk4.gtk_editable_label_stop_editing(@self, commit);
end;

function TGtkEmojiChooser.new: PGtkEmojiChooser; cdecl;
begin
  Result := Gtk4.gtk_emoji_chooser_new();
end;

function TGtkEntryBuffer.new(initial_chars: Pgchar; n_initial_chars: gint): PGtkEntryBuffer; cdecl;
begin
  Result := Gtk4.gtk_entry_buffer_new(initial_chars, n_initial_chars);
end;

function TGtkEntryBuffer.delete_text(position: guint; n_chars: gint): guint; cdecl;
begin
  Result := Gtk4.gtk_entry_buffer_delete_text(@self, position, n_chars);
end;

procedure TGtkEntryBuffer.emit_deleted_text(position: guint; n_chars: guint); cdecl;
begin
  Gtk4.gtk_entry_buffer_emit_deleted_text(@self, position, n_chars);
end;

procedure TGtkEntryBuffer.emit_inserted_text(position: guint; chars: Pgchar; n_chars: guint); cdecl;
begin
  Gtk4.gtk_entry_buffer_emit_inserted_text(@self, position, chars, n_chars);
end;

function TGtkEntryBuffer.get_bytes: gsize; cdecl;
begin
  Result := Gtk4.gtk_entry_buffer_get_bytes(@self);
end;

function TGtkEntryBuffer.get_length: guint; cdecl;
begin
  Result := Gtk4.gtk_entry_buffer_get_length(@self);
end;

function TGtkEntryBuffer.get_max_length: gint; cdecl;
begin
  Result := Gtk4.gtk_entry_buffer_get_max_length(@self);
end;

function TGtkEntryBuffer.get_text: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_entry_buffer_get_text(@self);
end;

function TGtkEntryBuffer.insert_text(position: guint; chars: Pgchar; n_chars: gint): guint; cdecl;
begin
  Result := Gtk4.gtk_entry_buffer_insert_text(@self, position, chars, n_chars);
end;

procedure TGtkEntryBuffer.set_max_length(max_length: gint); cdecl;
begin
  Gtk4.gtk_entry_buffer_set_max_length(@self, max_length);
end;

procedure TGtkEntryBuffer.set_text(chars: Pgchar; n_chars: gint); cdecl;
begin
  Gtk4.gtk_entry_buffer_set_text(@self, chars, n_chars);
end;

function TGtkEntry.new: PGtkEntry; cdecl;
begin
  Result := Gtk4.gtk_entry_new();
end;

function TGtkEntry.new_with_buffer(buffer: PGtkEntryBuffer): PGtkEntry; cdecl;
begin
  Result := Gtk4.gtk_entry_new_with_buffer(buffer);
end;

function TGtkEntry.get_activates_default: gboolean; cdecl;
begin
  Result := Gtk4.gtk_entry_get_activates_default(@self);
end;

function TGtkEntry.get_alignment: gfloat; cdecl;
begin
  Result := Gtk4.gtk_entry_get_alignment(@self);
end;

function TGtkEntry.get_attributes: PPangoAttrList; cdecl;
begin
  Result := Gtk4.gtk_entry_get_attributes(@self);
end;

function TGtkEntry.get_buffer: PGtkEntryBuffer; cdecl;
begin
  Result := Gtk4.gtk_entry_get_buffer(@self);
end;

function TGtkEntry.get_completion: PGtkEntryCompletion; cdecl;
begin
  Result := Gtk4.gtk_entry_get_completion(@self);
end;

function TGtkEntry.get_current_icon_drag_source: gint; cdecl;
begin
  Result := Gtk4.gtk_entry_get_current_icon_drag_source(@self);
end;

function TGtkEntry.get_extra_menu: PGMenuModel; cdecl;
begin
  Result := Gtk4.gtk_entry_get_extra_menu(@self);
end;

function TGtkEntry.get_has_frame: gboolean; cdecl;
begin
  Result := Gtk4.gtk_entry_get_has_frame(@self);
end;

function TGtkEntry.get_icon_activatable(icon_pos: TGtkEntryIconPosition): gboolean; cdecl;
begin
  Result := Gtk4.gtk_entry_get_icon_activatable(@self, icon_pos);
end;

procedure TGtkEntry.get_icon_area(icon_pos: TGtkEntryIconPosition; icon_area: PGdkRectangle); cdecl;
begin
  Gtk4.gtk_entry_get_icon_area(@self, icon_pos, icon_area);
end;

function TGtkEntry.get_icon_at_pos(x: gint; y: gint): gint; cdecl;
begin
  Result := Gtk4.gtk_entry_get_icon_at_pos(@self, x, y);
end;

function TGtkEntry.get_icon_gicon(icon_pos: TGtkEntryIconPosition): PGIcon; cdecl;
begin
  Result := Gtk4.gtk_entry_get_icon_gicon(@self, icon_pos);
end;

function TGtkEntry.get_icon_name(icon_pos: TGtkEntryIconPosition): Pgchar; cdecl;
begin
  Result := Gtk4.gtk_entry_get_icon_name(@self, icon_pos);
end;

function TGtkEntry.get_icon_paintable(icon_pos: TGtkEntryIconPosition): PGdkPaintable; cdecl;
begin
  Result := Gtk4.gtk_entry_get_icon_paintable(@self, icon_pos);
end;

function TGtkEntry.get_icon_sensitive(icon_pos: TGtkEntryIconPosition): gboolean; cdecl;
begin
  Result := Gtk4.gtk_entry_get_icon_sensitive(@self, icon_pos);
end;

function TGtkEntry.get_icon_storage_type(icon_pos: TGtkEntryIconPosition): TGtkImageType; cdecl;
begin
  Result := Gtk4.gtk_entry_get_icon_storage_type(@self, icon_pos);
end;

function TGtkEntry.get_icon_tooltip_markup(icon_pos: TGtkEntryIconPosition): Pgchar; cdecl;
begin
  Result := Gtk4.gtk_entry_get_icon_tooltip_markup(@self, icon_pos);
end;

function TGtkEntry.get_icon_tooltip_text(icon_pos: TGtkEntryIconPosition): Pgchar; cdecl;
begin
  Result := Gtk4.gtk_entry_get_icon_tooltip_text(@self, icon_pos);
end;

function TGtkEntry.get_input_hints: TGtkInputHints; cdecl;
begin
  Result := Gtk4.gtk_entry_get_input_hints(@self);
end;

function TGtkEntry.get_input_purpose: TGtkInputPurpose; cdecl;
begin
  Result := Gtk4.gtk_entry_get_input_purpose(@self);
end;

function TGtkEntry.get_invisible_char: gunichar; cdecl;
begin
  Result := Gtk4.gtk_entry_get_invisible_char(@self);
end;

function TGtkEntry.get_max_length: gint; cdecl;
begin
  Result := Gtk4.gtk_entry_get_max_length(@self);
end;

function TGtkEntry.get_overwrite_mode: gboolean; cdecl;
begin
  Result := Gtk4.gtk_entry_get_overwrite_mode(@self);
end;

function TGtkEntry.get_placeholder_text: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_entry_get_placeholder_text(@self);
end;

function TGtkEntry.get_progress_fraction: gdouble; cdecl;
begin
  Result := Gtk4.gtk_entry_get_progress_fraction(@self);
end;

function TGtkEntry.get_progress_pulse_step: gdouble; cdecl;
begin
  Result := Gtk4.gtk_entry_get_progress_pulse_step(@self);
end;

function TGtkEntry.get_tabs: PPangoTabArray; cdecl;
begin
  Result := Gtk4.gtk_entry_get_tabs(@self);
end;

function TGtkEntry.get_text_length: guint16; cdecl;
begin
  Result := Gtk4.gtk_entry_get_text_length(@self);
end;

function TGtkEntry.get_visibility: gboolean; cdecl;
begin
  Result := Gtk4.gtk_entry_get_visibility(@self);
end;

function TGtkEntry.grab_focus_without_selecting: gboolean; cdecl;
begin
  Result := Gtk4.gtk_entry_grab_focus_without_selecting(@self);
end;

procedure TGtkEntry.progress_pulse; cdecl;
begin
  Gtk4.gtk_entry_progress_pulse(@self);
end;

procedure TGtkEntry.reset_im_context; cdecl;
begin
  Gtk4.gtk_entry_reset_im_context(@self);
end;

procedure TGtkEntry.set_activates_default(setting: gboolean); cdecl;
begin
  Gtk4.gtk_entry_set_activates_default(@self, setting);
end;

procedure TGtkEntry.set_alignment(xalign: gfloat); cdecl;
begin
  Gtk4.gtk_entry_set_alignment(@self, xalign);
end;

procedure TGtkEntry.set_attributes(attrs: PPangoAttrList); cdecl;
begin
  Gtk4.gtk_entry_set_attributes(@self, attrs);
end;

procedure TGtkEntry.set_buffer(buffer: PGtkEntryBuffer); cdecl;
begin
  Gtk4.gtk_entry_set_buffer(@self, buffer);
end;

procedure TGtkEntry.set_completion(completion: PGtkEntryCompletion); cdecl;
begin
  Gtk4.gtk_entry_set_completion(@self, completion);
end;

procedure TGtkEntry.set_extra_menu(model: PGMenuModel); cdecl;
begin
  Gtk4.gtk_entry_set_extra_menu(@self, model);
end;

procedure TGtkEntry.set_has_frame(setting: gboolean); cdecl;
begin
  Gtk4.gtk_entry_set_has_frame(@self, setting);
end;

procedure TGtkEntry.set_icon_activatable(icon_pos: TGtkEntryIconPosition; activatable: gboolean); cdecl;
begin
  Gtk4.gtk_entry_set_icon_activatable(@self, icon_pos, activatable);
end;

procedure TGtkEntry.set_icon_drag_source(icon_pos: TGtkEntryIconPosition; provider: PGdkContentProvider; actions: TGdkDragAction); cdecl;
begin
  Gtk4.gtk_entry_set_icon_drag_source(@self, icon_pos, provider, actions);
end;

procedure TGtkEntry.set_icon_from_gicon(icon_pos: TGtkEntryIconPosition; icon: PGIcon); cdecl;
begin
  Gtk4.gtk_entry_set_icon_from_gicon(@self, icon_pos, icon);
end;

procedure TGtkEntry.set_icon_from_icon_name(icon_pos: TGtkEntryIconPosition; icon_name: Pgchar); cdecl;
begin
  Gtk4.gtk_entry_set_icon_from_icon_name(@self, icon_pos, icon_name);
end;

procedure TGtkEntry.set_icon_from_paintable(icon_pos: TGtkEntryIconPosition; paintable: PGdkPaintable); cdecl;
begin
  Gtk4.gtk_entry_set_icon_from_paintable(@self, icon_pos, paintable);
end;

procedure TGtkEntry.set_icon_sensitive(icon_pos: TGtkEntryIconPosition; sensitive: gboolean); cdecl;
begin
  Gtk4.gtk_entry_set_icon_sensitive(@self, icon_pos, sensitive);
end;

procedure TGtkEntry.set_icon_tooltip_markup(icon_pos: TGtkEntryIconPosition; tooltip: Pgchar); cdecl;
begin
  Gtk4.gtk_entry_set_icon_tooltip_markup(@self, icon_pos, tooltip);
end;

procedure TGtkEntry.set_icon_tooltip_text(icon_pos: TGtkEntryIconPosition; tooltip: Pgchar); cdecl;
begin
  Gtk4.gtk_entry_set_icon_tooltip_text(@self, icon_pos, tooltip);
end;

procedure TGtkEntry.set_input_hints(hints: TGtkInputHints); cdecl;
begin
  Gtk4.gtk_entry_set_input_hints(@self, hints);
end;

procedure TGtkEntry.set_input_purpose(purpose: TGtkInputPurpose); cdecl;
begin
  Gtk4.gtk_entry_set_input_purpose(@self, purpose);
end;

procedure TGtkEntry.set_invisible_char(ch: gunichar); cdecl;
begin
  Gtk4.gtk_entry_set_invisible_char(@self, ch);
end;

procedure TGtkEntry.set_max_length(max: gint); cdecl;
begin
  Gtk4.gtk_entry_set_max_length(@self, max);
end;

procedure TGtkEntry.set_overwrite_mode(overwrite: gboolean); cdecl;
begin
  Gtk4.gtk_entry_set_overwrite_mode(@self, overwrite);
end;

procedure TGtkEntry.set_placeholder_text(text: Pgchar); cdecl;
begin
  Gtk4.gtk_entry_set_placeholder_text(@self, text);
end;

procedure TGtkEntry.set_progress_fraction(fraction: gdouble); cdecl;
begin
  Gtk4.gtk_entry_set_progress_fraction(@self, fraction);
end;

procedure TGtkEntry.set_progress_pulse_step(fraction: gdouble); cdecl;
begin
  Gtk4.gtk_entry_set_progress_pulse_step(@self, fraction);
end;

procedure TGtkEntry.set_tabs(tabs: PPangoTabArray); cdecl;
begin
  Gtk4.gtk_entry_set_tabs(@self, tabs);
end;

procedure TGtkEntry.set_visibility(visible: gboolean); cdecl;
begin
  Gtk4.gtk_entry_set_visibility(@self, visible);
end;

procedure TGtkEntry.unset_invisible_char; cdecl;
begin
  Gtk4.gtk_entry_unset_invisible_char(@self);
end;

function TGtkEntryCompletion.new: PGtkEntryCompletion; cdecl;
begin
  Result := Gtk4.gtk_entry_completion_new();
end;

function TGtkEntryCompletion.new_with_area(area: PGtkCellArea): PGtkEntryCompletion; cdecl;
begin
  Result := Gtk4.gtk_entry_completion_new_with_area(area);
end;

procedure TGtkEntryCompletion.complete; cdecl;
begin
  Gtk4.gtk_entry_completion_complete(@self);
end;

function TGtkEntryCompletion.compute_prefix(key: Pgchar): Pgchar; cdecl;
begin
  Result := Gtk4.gtk_entry_completion_compute_prefix(@self, key);
end;

function TGtkEntryCompletion.get_completion_prefix: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_entry_completion_get_completion_prefix(@self);
end;

function TGtkEntryCompletion.get_entry: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_entry_completion_get_entry(@self);
end;

function TGtkEntryCompletion.get_inline_completion: gboolean; cdecl;
begin
  Result := Gtk4.gtk_entry_completion_get_inline_completion(@self);
end;

function TGtkEntryCompletion.get_inline_selection: gboolean; cdecl;
begin
  Result := Gtk4.gtk_entry_completion_get_inline_selection(@self);
end;

function TGtkEntryCompletion.get_minimum_key_length: gint; cdecl;
begin
  Result := Gtk4.gtk_entry_completion_get_minimum_key_length(@self);
end;

function TGtkEntryCompletion.get_model: PGtkTreeModel; cdecl;
begin
  Result := Gtk4.gtk_entry_completion_get_model(@self);
end;

function TGtkEntryCompletion.get_popup_completion: gboolean; cdecl;
begin
  Result := Gtk4.gtk_entry_completion_get_popup_completion(@self);
end;

function TGtkEntryCompletion.get_popup_set_width: gboolean; cdecl;
begin
  Result := Gtk4.gtk_entry_completion_get_popup_set_width(@self);
end;

function TGtkEntryCompletion.get_popup_single_match: gboolean; cdecl;
begin
  Result := Gtk4.gtk_entry_completion_get_popup_single_match(@self);
end;

function TGtkEntryCompletion.get_text_column: gint; cdecl;
begin
  Result := Gtk4.gtk_entry_completion_get_text_column(@self);
end;

procedure TGtkEntryCompletion.insert_prefix; cdecl;
begin
  Gtk4.gtk_entry_completion_insert_prefix(@self);
end;

procedure TGtkEntryCompletion.set_inline_completion(inline_completion: gboolean); cdecl;
begin
  Gtk4.gtk_entry_completion_set_inline_completion(@self, inline_completion);
end;

procedure TGtkEntryCompletion.set_inline_selection(inline_selection: gboolean); cdecl;
begin
  Gtk4.gtk_entry_completion_set_inline_selection(@self, inline_selection);
end;

procedure TGtkEntryCompletion.set_match_func(func: TGtkEntryCompletionMatchFunc; func_data: gpointer; func_notify: TGDestroyNotify); cdecl;
begin
  Gtk4.gtk_entry_completion_set_match_func(@self, func, func_data, func_notify);
end;

procedure TGtkEntryCompletion.set_minimum_key_length(length: gint); cdecl;
begin
  Gtk4.gtk_entry_completion_set_minimum_key_length(@self, length);
end;

procedure TGtkEntryCompletion.set_model(model: PGtkTreeModel); cdecl;
begin
  Gtk4.gtk_entry_completion_set_model(@self, model);
end;

procedure TGtkEntryCompletion.set_popup_completion(popup_completion: gboolean); cdecl;
begin
  Gtk4.gtk_entry_completion_set_popup_completion(@self, popup_completion);
end;

procedure TGtkEntryCompletion.set_popup_set_width(popup_set_width: gboolean); cdecl;
begin
  Gtk4.gtk_entry_completion_set_popup_set_width(@self, popup_set_width);
end;

procedure TGtkEntryCompletion.set_popup_single_match(popup_single_match: gboolean); cdecl;
begin
  Gtk4.gtk_entry_completion_set_popup_single_match(@self, popup_single_match);
end;

procedure TGtkEntryCompletion.set_text_column(column: gint); cdecl;
begin
  Gtk4.gtk_entry_completion_set_text_column(@self, column);
end;

function TGtkEventControllerFocus.new: PGtkEventControllerFocus; cdecl;
begin
  Result := Gtk4.gtk_event_controller_focus_new();
end;

function TGtkEventControllerFocus.contains_focus: gboolean; cdecl;
begin
  Result := Gtk4.gtk_event_controller_focus_contains_focus(@self);
end;

function TGtkEventControllerFocus.is_focus: gboolean; cdecl;
begin
  Result := Gtk4.gtk_event_controller_focus_is_focus(@self);
end;

function TGtkEventControllerKey.new: PGtkEventControllerKey; cdecl;
begin
  Result := Gtk4.gtk_event_controller_key_new();
end;

function TGtkEventControllerKey.forward(widget: PGtkWidget): gboolean; cdecl;
begin
  Result := Gtk4.gtk_event_controller_key_forward(@self, widget);
end;

function TGtkEventControllerKey.get_group: guint; cdecl;
begin
  Result := Gtk4.gtk_event_controller_key_get_group(@self);
end;

function TGtkEventControllerKey.get_im_context: PGtkIMContext; cdecl;
begin
  Result := Gtk4.gtk_event_controller_key_get_im_context(@self);
end;

procedure TGtkEventControllerKey.set_im_context(im_context: PGtkIMContext); cdecl;
begin
  Gtk4.gtk_event_controller_key_set_im_context(@self, im_context);
end;

function TGtkIMContext.delete_surrounding(offset: gint; n_chars: gint): gboolean; cdecl;
begin
  Result := Gtk4.gtk_im_context_delete_surrounding(@self, offset, n_chars);
end;

function TGtkIMContext.filter_key(press: gboolean; surface: PGdkSurface; device: PGdkDevice; time: guint32; keycode: guint; state: TGdkModifierType; group: gint): gboolean; cdecl;
begin
  Result := Gtk4.gtk_im_context_filter_key(@self, press, surface, device, time, keycode, state, group);
end;

function TGtkIMContext.filter_keypress(event: PGdkEvent): gboolean; cdecl;
begin
  Result := Gtk4.gtk_im_context_filter_keypress(@self, event);
end;

procedure TGtkIMContext.focus_in; cdecl;
begin
  Gtk4.gtk_im_context_focus_in(@self);
end;

procedure TGtkIMContext.focus_out; cdecl;
begin
  Gtk4.gtk_im_context_focus_out(@self);
end;

procedure TGtkIMContext.get_preedit_string(str: PPgchar; attrs: PPPangoAttrList; cursor_pos: Pgint); cdecl;
begin
  Gtk4.gtk_im_context_get_preedit_string(@self, str, attrs, cursor_pos);
end;

function TGtkIMContext.get_surrounding_with_selection(text: PPgchar; cursor_index: Pgint; anchor_index: Pgint): gboolean; cdecl;
begin
  Result := Gtk4.gtk_im_context_get_surrounding_with_selection(@self, text, cursor_index, anchor_index);
end;

procedure TGtkIMContext.reset; cdecl;
begin
  Gtk4.gtk_im_context_reset(@self);
end;

procedure TGtkIMContext.set_client_widget(widget: PGtkWidget); cdecl;
begin
  Gtk4.gtk_im_context_set_client_widget(@self, widget);
end;

procedure TGtkIMContext.set_cursor_location(area: PGdkRectangle); cdecl;
begin
  Gtk4.gtk_im_context_set_cursor_location(@self, area);
end;

procedure TGtkIMContext.set_surrounding_with_selection(text: Pgchar; len: gint; cursor_index: gint; anchor_index: gint); cdecl;
begin
  Gtk4.gtk_im_context_set_surrounding_with_selection(@self, text, len, cursor_index, anchor_index);
end;

procedure TGtkIMContext.set_use_preedit(use_preedit: gboolean); cdecl;
begin
  Gtk4.gtk_im_context_set_use_preedit(@self, use_preedit);
end;

function TGtkEventControllerLegacy.new: PGtkEventControllerLegacy; cdecl;
begin
  Result := Gtk4.gtk_event_controller_legacy_new();
end;

function TGtkEventControllerMotion.new: PGtkEventControllerMotion; cdecl;
begin
  Result := Gtk4.gtk_event_controller_motion_new();
end;

function TGtkEventControllerMotion.contains_pointer: gboolean; cdecl;
begin
  Result := Gtk4.gtk_event_controller_motion_contains_pointer(@self);
end;

function TGtkEventControllerMotion.is_pointer: gboolean; cdecl;
begin
  Result := Gtk4.gtk_event_controller_motion_is_pointer(@self);
end;

function TGtkEventControllerScroll.new(flags: TGtkEventControllerScrollFlags): PGtkEventControllerScroll; cdecl;
begin
  Result := Gtk4.gtk_event_controller_scroll_new(flags);
end;

function TGtkEventControllerScroll.get_flags: TGtkEventControllerScrollFlags; cdecl;
begin
  Result := Gtk4.gtk_event_controller_scroll_get_flags(@self);
end;

procedure TGtkEventControllerScroll.set_flags(flags: TGtkEventControllerScrollFlags); cdecl;
begin
  Gtk4.gtk_event_controller_scroll_set_flags(@self, flags);
end;

function TGtkEveryFilter.new: PGtkEveryFilter; cdecl;
begin
  Result := Gtk4.gtk_every_filter_new();
end;

function TGtkExpander.new(label_: Pgchar): PGtkExpander; cdecl;
begin
  Result := Gtk4.gtk_expander_new(label_);
end;

function TGtkExpander.new_with_mnemonic(label_: Pgchar): PGtkExpander; cdecl;
begin
  Result := Gtk4.gtk_expander_new_with_mnemonic(label_);
end;

function TGtkExpander.get_child: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_expander_get_child(@self);
end;

function TGtkExpander.get_expanded: gboolean; cdecl;
begin
  Result := Gtk4.gtk_expander_get_expanded(@self);
end;

function TGtkExpander.get_label: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_expander_get_label(@self);
end;

function TGtkExpander.get_label_widget: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_expander_get_label_widget(@self);
end;

function TGtkExpander.get_resize_toplevel: gboolean; cdecl;
begin
  Result := Gtk4.gtk_expander_get_resize_toplevel(@self);
end;

function TGtkExpander.get_use_markup: gboolean; cdecl;
begin
  Result := Gtk4.gtk_expander_get_use_markup(@self);
end;

function TGtkExpander.get_use_underline: gboolean; cdecl;
begin
  Result := Gtk4.gtk_expander_get_use_underline(@self);
end;

procedure TGtkExpander.set_child(child: PGtkWidget); cdecl;
begin
  Gtk4.gtk_expander_set_child(@self, child);
end;

procedure TGtkExpander.set_expanded(expanded: gboolean); cdecl;
begin
  Gtk4.gtk_expander_set_expanded(@self, expanded);
end;

procedure TGtkExpander.set_label(label_: Pgchar); cdecl;
begin
  Gtk4.gtk_expander_set_label(@self, label_);
end;

procedure TGtkExpander.set_label_widget(label_widget: PGtkWidget); cdecl;
begin
  Gtk4.gtk_expander_set_label_widget(@self, label_widget);
end;

procedure TGtkExpander.set_resize_toplevel(resize_toplevel: gboolean); cdecl;
begin
  Gtk4.gtk_expander_set_resize_toplevel(@self, resize_toplevel);
end;

procedure TGtkExpander.set_use_markup(use_markup: gboolean); cdecl;
begin
  Gtk4.gtk_expander_set_use_markup(@self, use_markup);
end;

procedure TGtkExpander.set_use_underline(use_underline: gboolean); cdecl;
begin
  Gtk4.gtk_expander_set_use_underline(@self, use_underline);
end;

function TGtkExpressionWatch.evaluate(value: PGValue): gboolean; cdecl;
begin
  Result := Gtk4.gtk_expression_watch_evaluate(@self, value);
end;

function TGtkExpressionWatch.ref: PGtkExpressionWatch; cdecl;
begin
  Result := Gtk4.gtk_expression_watch_ref(@self);
end;

procedure TGtkExpressionWatch.unref; cdecl;
begin
  Gtk4.gtk_expression_watch_unref(@self);
end;

procedure TGtkExpressionWatch.unwatch; cdecl;
begin
  Gtk4.gtk_expression_watch_unwatch(@self);
end;

procedure TGtkFileChooser.add_choice(id: Pgchar; label_: Pgchar; options: PPgchar; option_labels: PPgchar); cdecl;
begin
  Gtk4.gtk_file_chooser_add_choice(@self, id, label_, options, option_labels);
end;

procedure TGtkFileChooser.add_filter(filter: PGtkFileFilter); cdecl;
begin
  Gtk4.gtk_file_chooser_add_filter(@self, filter);
end;

function TGtkFileChooser.add_shortcut_folder(folder: PGFile; error: PPGError): gboolean; cdecl;
begin
  Result := Gtk4.gtk_file_chooser_add_shortcut_folder(@self, folder, error);
end;

function TGtkFileChooser.get_action: TGtkFileChooserAction; cdecl;
begin
  Result := Gtk4.gtk_file_chooser_get_action(@self);
end;

function TGtkFileChooser.get_choice(id: Pgchar): Pgchar; cdecl;
begin
  Result := Gtk4.gtk_file_chooser_get_choice(@self, id);
end;

function TGtkFileChooser.get_create_folders: gboolean; cdecl;
begin
  Result := Gtk4.gtk_file_chooser_get_create_folders(@self);
end;

function TGtkFileChooser.get_current_folder: PGFile; cdecl;
begin
  Result := Gtk4.gtk_file_chooser_get_current_folder(@self);
end;

function TGtkFileChooser.get_current_name: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_file_chooser_get_current_name(@self);
end;

function TGtkFileChooser.get_file: PGFile; cdecl;
begin
  Result := Gtk4.gtk_file_chooser_get_file(@self);
end;

function TGtkFileChooser.get_files: PGListModel; cdecl;
begin
  Result := Gtk4.gtk_file_chooser_get_files(@self);
end;

function TGtkFileChooser.get_filter: PGtkFileFilter; cdecl;
begin
  Result := Gtk4.gtk_file_chooser_get_filter(@self);
end;

function TGtkFileChooser.get_filters: PGListModel; cdecl;
begin
  Result := Gtk4.gtk_file_chooser_get_filters(@self);
end;

function TGtkFileChooser.get_select_multiple: gboolean; cdecl;
begin
  Result := Gtk4.gtk_file_chooser_get_select_multiple(@self);
end;

function TGtkFileChooser.get_shortcut_folders: PGListModel; cdecl;
begin
  Result := Gtk4.gtk_file_chooser_get_shortcut_folders(@self);
end;

procedure TGtkFileChooser.remove_choice(id: Pgchar); cdecl;
begin
  Gtk4.gtk_file_chooser_remove_choice(@self, id);
end;

procedure TGtkFileChooser.remove_filter(filter: PGtkFileFilter); cdecl;
begin
  Gtk4.gtk_file_chooser_remove_filter(@self, filter);
end;

function TGtkFileChooser.remove_shortcut_folder(folder: PGFile; error: PPGError): gboolean; cdecl;
begin
  Result := Gtk4.gtk_file_chooser_remove_shortcut_folder(@self, folder, error);
end;

procedure TGtkFileChooser.set_action(action: TGtkFileChooserAction); cdecl;
begin
  Gtk4.gtk_file_chooser_set_action(@self, action);
end;

procedure TGtkFileChooser.set_choice(id: Pgchar; option: Pgchar); cdecl;
begin
  Gtk4.gtk_file_chooser_set_choice(@self, id, option);
end;

procedure TGtkFileChooser.set_create_folders(create_folders: gboolean); cdecl;
begin
  Gtk4.gtk_file_chooser_set_create_folders(@self, create_folders);
end;

function TGtkFileChooser.set_current_folder(file_: PGFile; error: PPGError): gboolean; cdecl;
begin
  Result := Gtk4.gtk_file_chooser_set_current_folder(@self, file_, error);
end;

procedure TGtkFileChooser.set_current_name(name: Pgchar); cdecl;
begin
  Gtk4.gtk_file_chooser_set_current_name(@self, name);
end;

function TGtkFileChooser.set_file(file_: PGFile; error: PPGError): gboolean; cdecl;
begin
  Result := Gtk4.gtk_file_chooser_set_file(@self, file_, error);
end;

procedure TGtkFileChooser.set_filter(filter: PGtkFileFilter); cdecl;
begin
  Gtk4.gtk_file_chooser_set_filter(@self, filter);
end;

procedure TGtkFileChooser.set_select_multiple(select_multiple: gboolean); cdecl;
begin
  Gtk4.gtk_file_chooser_set_select_multiple(@self, select_multiple);
end;

function TGtkFileFilter.new: PGtkFileFilter; cdecl;
begin
  Result := Gtk4.gtk_file_filter_new();
end;

function TGtkFileFilter.new_from_gvariant(variant: PGVariant): PGtkFileFilter; cdecl;
begin
  Result := Gtk4.gtk_file_filter_new_from_gvariant(variant);
end;

procedure TGtkFileFilter.add_mime_type(mime_type: Pgchar); cdecl;
begin
  Gtk4.gtk_file_filter_add_mime_type(@self, mime_type);
end;

procedure TGtkFileFilter.add_pattern(pattern: Pgchar); cdecl;
begin
  Gtk4.gtk_file_filter_add_pattern(@self, pattern);
end;

procedure TGtkFileFilter.add_pixbuf_formats; cdecl;
begin
  Gtk4.gtk_file_filter_add_pixbuf_formats(@self);
end;

procedure TGtkFileFilter.add_suffix(suffix: Pgchar); cdecl;
begin
  Gtk4.gtk_file_filter_add_suffix(@self, suffix);
end;

function TGtkFileFilter.get_attributes: PPgchar; cdecl;
begin
  Result := Gtk4.gtk_file_filter_get_attributes(@self);
end;

function TGtkFileFilter.get_name: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_file_filter_get_name(@self);
end;

procedure TGtkFileFilter.set_name(name: Pgchar); cdecl;
begin
  Gtk4.gtk_file_filter_set_name(@self, name);
end;

function TGtkFileFilter.to_gvariant: PGVariant; cdecl;
begin
  Result := Gtk4.gtk_file_filter_to_gvariant(@self);
end;

function TGtkFileChooserNative.new(title: Pgchar; parent: PGtkWindow; action: TGtkFileChooserAction; accept_label: Pgchar; cancel_label: Pgchar): PGtkFileChooserNative; cdecl;
begin
  Result := Gtk4.gtk_file_chooser_native_new(title, parent, action, accept_label, cancel_label);
end;

function TGtkFileChooserNative.get_accept_label: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_file_chooser_native_get_accept_label(@self);
end;

function TGtkFileChooserNative.get_cancel_label: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_file_chooser_native_get_cancel_label(@self);
end;

procedure TGtkFileChooserNative.set_accept_label(accept_label: Pgchar); cdecl;
begin
  Gtk4.gtk_file_chooser_native_set_accept_label(@self, accept_label);
end;

procedure TGtkFileChooserNative.set_cancel_label(cancel_label: Pgchar); cdecl;
begin
  Gtk4.gtk_file_chooser_native_set_cancel_label(@self, cancel_label);
end;

function TGtkFileChooserWidget.new(action: TGtkFileChooserAction): PGtkFileChooserWidget; cdecl;
begin
  Result := Gtk4.gtk_file_chooser_widget_new(action);
end;

procedure TGtkFilter.changed(change: TGtkFilterChange); cdecl;
begin
  Gtk4.gtk_filter_changed(@self, change);
end;

function TGtkFilter.get_strictness: TGtkFilterMatch; cdecl;
begin
  Result := Gtk4.gtk_filter_get_strictness(@self);
end;

function TGtkFilter.match(item: PGObject): gboolean; cdecl;
begin
  Result := Gtk4.gtk_filter_match(@self, item);
end;

function TGtkFilterListModel.new(model: PGListModel; filter: PGtkFilter): PGtkFilterListModel; cdecl;
begin
  Result := Gtk4.gtk_filter_list_model_new(model, filter);
end;

function TGtkFilterListModel.get_filter: PGtkFilter; cdecl;
begin
  Result := Gtk4.gtk_filter_list_model_get_filter(@self);
end;

function TGtkFilterListModel.get_incremental: gboolean; cdecl;
begin
  Result := Gtk4.gtk_filter_list_model_get_incremental(@self);
end;

function TGtkFilterListModel.get_model: PGListModel; cdecl;
begin
  Result := Gtk4.gtk_filter_list_model_get_model(@self);
end;

function TGtkFilterListModel.get_pending: guint; cdecl;
begin
  Result := Gtk4.gtk_filter_list_model_get_pending(@self);
end;

procedure TGtkFilterListModel.set_filter(filter: PGtkFilter); cdecl;
begin
  Gtk4.gtk_filter_list_model_set_filter(@self, filter);
end;

procedure TGtkFilterListModel.set_incremental(incremental: gboolean); cdecl;
begin
  Gtk4.gtk_filter_list_model_set_incremental(@self, incremental);
end;

procedure TGtkFilterListModel.set_model(model: PGListModel); cdecl;
begin
  Gtk4.gtk_filter_list_model_set_model(@self, model);
end;

function TGtkFixed.new: PGtkFixed; cdecl;
begin
  Result := Gtk4.gtk_fixed_new();
end;

procedure TGtkFixed.get_child_position(widget: PGtkWidget; x: Pgdouble; y: Pgdouble); cdecl;
begin
  Gtk4.gtk_fixed_get_child_position(@self, widget, x, y);
end;

function TGtkFixed.get_child_transform(widget: PGtkWidget): PGskTransform; cdecl;
begin
  Result := Gtk4.gtk_fixed_get_child_transform(@self, widget);
end;

procedure TGtkFixed.move(widget: PGtkWidget; x: gdouble; y: gdouble); cdecl;
begin
  Gtk4.gtk_fixed_move(@self, widget, x, y);
end;

procedure TGtkFixed.put(widget: PGtkWidget; x: gdouble; y: gdouble); cdecl;
begin
  Gtk4.gtk_fixed_put(@self, widget, x, y);
end;

procedure TGtkFixed.remove(widget: PGtkWidget); cdecl;
begin
  Gtk4.gtk_fixed_remove(@self, widget);
end;

procedure TGtkFixed.set_child_transform(widget: PGtkWidget; transform: PGskTransform); cdecl;
begin
  Gtk4.gtk_fixed_set_child_transform(@self, widget, transform);
end;

function TGtkFixedLayout.new: PGtkFixedLayout; cdecl;
begin
  Result := Gtk4.gtk_fixed_layout_new();
end;

function TGtkFixedLayoutChild.get_transform: PGskTransform; cdecl;
begin
  Result := Gtk4.gtk_fixed_layout_child_get_transform(@self);
end;

procedure TGtkFixedLayoutChild.set_transform(transform: PGskTransform); cdecl;
begin
  Gtk4.gtk_fixed_layout_child_set_transform(@self, transform);
end;

function TGtkFlattenListModel.new(model: PGListModel): PGtkFlattenListModel; cdecl;
begin
  Result := Gtk4.gtk_flatten_list_model_new(model);
end;

function TGtkFlattenListModel.get_model: PGListModel; cdecl;
begin
  Result := Gtk4.gtk_flatten_list_model_get_model(@self);
end;

function TGtkFlattenListModel.get_model_for_item(position: guint): PGListModel; cdecl;
begin
  Result := Gtk4.gtk_flatten_list_model_get_model_for_item(@self, position);
end;

procedure TGtkFlattenListModel.set_model(model: PGListModel); cdecl;
begin
  Gtk4.gtk_flatten_list_model_set_model(@self, model);
end;

function TGtkFlowBox.new: PGtkFlowBox; cdecl;
begin
  Result := Gtk4.gtk_flow_box_new();
end;

procedure TGtkFlowBox.append(child: PGtkWidget); cdecl;
begin
  Gtk4.gtk_flow_box_append(@self, child);
end;

procedure TGtkFlowBox.bind_model(model: PGListModel; create_widget_func: TGtkFlowBoxCreateWidgetFunc; user_data: gpointer; user_data_free_func: TGDestroyNotify); cdecl;
begin
  Gtk4.gtk_flow_box_bind_model(@self, model, create_widget_func, user_data, user_data_free_func);
end;

function TGtkFlowBox.get_activate_on_single_click: gboolean; cdecl;
begin
  Result := Gtk4.gtk_flow_box_get_activate_on_single_click(@self);
end;

function TGtkFlowBox.get_child_at_index(idx: gint): PGtkFlowBoxChild; cdecl;
begin
  Result := Gtk4.gtk_flow_box_get_child_at_index(@self, idx);
end;

function TGtkFlowBox.get_child_at_pos(x: gint; y: gint): PGtkFlowBoxChild; cdecl;
begin
  Result := Gtk4.gtk_flow_box_get_child_at_pos(@self, x, y);
end;

function TGtkFlowBox.get_column_spacing: guint; cdecl;
begin
  Result := Gtk4.gtk_flow_box_get_column_spacing(@self);
end;

function TGtkFlowBox.get_homogeneous: gboolean; cdecl;
begin
  Result := Gtk4.gtk_flow_box_get_homogeneous(@self);
end;

function TGtkFlowBox.get_max_children_per_line: guint; cdecl;
begin
  Result := Gtk4.gtk_flow_box_get_max_children_per_line(@self);
end;

function TGtkFlowBox.get_min_children_per_line: guint; cdecl;
begin
  Result := Gtk4.gtk_flow_box_get_min_children_per_line(@self);
end;

function TGtkFlowBox.get_row_spacing: guint; cdecl;
begin
  Result := Gtk4.gtk_flow_box_get_row_spacing(@self);
end;

function TGtkFlowBox.get_selected_children: PGList; cdecl;
begin
  Result := Gtk4.gtk_flow_box_get_selected_children(@self);
end;

function TGtkFlowBox.get_selection_mode: TGtkSelectionMode; cdecl;
begin
  Result := Gtk4.gtk_flow_box_get_selection_mode(@self);
end;

procedure TGtkFlowBox.insert(widget: PGtkWidget; position: gint); cdecl;
begin
  Gtk4.gtk_flow_box_insert(@self, widget, position);
end;

procedure TGtkFlowBox.invalidate_filter; cdecl;
begin
  Gtk4.gtk_flow_box_invalidate_filter(@self);
end;

procedure TGtkFlowBox.invalidate_sort; cdecl;
begin
  Gtk4.gtk_flow_box_invalidate_sort(@self);
end;

procedure TGtkFlowBox.prepend(child: PGtkWidget); cdecl;
begin
  Gtk4.gtk_flow_box_prepend(@self, child);
end;

procedure TGtkFlowBox.remove(widget: PGtkWidget); cdecl;
begin
  Gtk4.gtk_flow_box_remove(@self, widget);
end;

procedure TGtkFlowBox.select_all; cdecl;
begin
  Gtk4.gtk_flow_box_select_all(@self);
end;

procedure TGtkFlowBox.select_child(child: PGtkFlowBoxChild); cdecl;
begin
  Gtk4.gtk_flow_box_select_child(@self, child);
end;

procedure TGtkFlowBox.selected_foreach(func: TGtkFlowBoxForeachFunc; data: gpointer); cdecl;
begin
  Gtk4.gtk_flow_box_selected_foreach(@self, func, data);
end;

procedure TGtkFlowBox.set_activate_on_single_click(single: gboolean); cdecl;
begin
  Gtk4.gtk_flow_box_set_activate_on_single_click(@self, single);
end;

procedure TGtkFlowBox.set_column_spacing(spacing: guint); cdecl;
begin
  Gtk4.gtk_flow_box_set_column_spacing(@self, spacing);
end;

procedure TGtkFlowBox.set_filter_func(filter_func: TGtkFlowBoxFilterFunc; user_data: gpointer; destroy_: TGDestroyNotify); cdecl;
begin
  Gtk4.gtk_flow_box_set_filter_func(@self, filter_func, user_data, destroy_);
end;

procedure TGtkFlowBox.set_hadjustment(adjustment: PGtkAdjustment); cdecl;
begin
  Gtk4.gtk_flow_box_set_hadjustment(@self, adjustment);
end;

procedure TGtkFlowBox.set_homogeneous(homogeneous: gboolean); cdecl;
begin
  Gtk4.gtk_flow_box_set_homogeneous(@self, homogeneous);
end;

procedure TGtkFlowBox.set_max_children_per_line(n_children: guint); cdecl;
begin
  Gtk4.gtk_flow_box_set_max_children_per_line(@self, n_children);
end;

procedure TGtkFlowBox.set_min_children_per_line(n_children: guint); cdecl;
begin
  Gtk4.gtk_flow_box_set_min_children_per_line(@self, n_children);
end;

procedure TGtkFlowBox.set_row_spacing(spacing: guint); cdecl;
begin
  Gtk4.gtk_flow_box_set_row_spacing(@self, spacing);
end;

procedure TGtkFlowBox.set_selection_mode(mode: TGtkSelectionMode); cdecl;
begin
  Gtk4.gtk_flow_box_set_selection_mode(@self, mode);
end;

procedure TGtkFlowBox.set_sort_func(sort_func: TGtkFlowBoxSortFunc; user_data: gpointer; destroy_: TGDestroyNotify); cdecl;
begin
  Gtk4.gtk_flow_box_set_sort_func(@self, sort_func, user_data, destroy_);
end;

procedure TGtkFlowBox.set_vadjustment(adjustment: PGtkAdjustment); cdecl;
begin
  Gtk4.gtk_flow_box_set_vadjustment(@self, adjustment);
end;

procedure TGtkFlowBox.unselect_all; cdecl;
begin
  Gtk4.gtk_flow_box_unselect_all(@self);
end;

procedure TGtkFlowBox.unselect_child(child: PGtkFlowBoxChild); cdecl;
begin
  Gtk4.gtk_flow_box_unselect_child(@self, child);
end;

function TGtkFlowBoxChild.new: PGtkFlowBoxChild; cdecl;
begin
  Result := Gtk4.gtk_flow_box_child_new();
end;

procedure TGtkFlowBoxChild.changed; cdecl;
begin
  Gtk4.gtk_flow_box_child_changed(@self);
end;

function TGtkFlowBoxChild.get_child: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_flow_box_child_get_child(@self);
end;

function TGtkFlowBoxChild.get_index: gint; cdecl;
begin
  Result := Gtk4.gtk_flow_box_child_get_index(@self);
end;

function TGtkFlowBoxChild.is_selected: gboolean; cdecl;
begin
  Result := Gtk4.gtk_flow_box_child_is_selected(@self);
end;

procedure TGtkFlowBoxChild.set_child(child: PGtkWidget); cdecl;
begin
  Gtk4.gtk_flow_box_child_set_child(@self, child);
end;

function TGtkFontChooser.get_font: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_font_chooser_get_font(@self);
end;

function TGtkFontChooser.get_font_desc: PPangoFontDescription; cdecl;
begin
  Result := Gtk4.gtk_font_chooser_get_font_desc(@self);
end;

function TGtkFontChooser.get_font_face: PPangoFontFace; cdecl;
begin
  Result := Gtk4.gtk_font_chooser_get_font_face(@self);
end;

function TGtkFontChooser.get_font_family: PPangoFontFamily; cdecl;
begin
  Result := Gtk4.gtk_font_chooser_get_font_family(@self);
end;

function TGtkFontChooser.get_font_features: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_font_chooser_get_font_features(@self);
end;

function TGtkFontChooser.get_font_map: PPangoFontMap; cdecl;
begin
  Result := Gtk4.gtk_font_chooser_get_font_map(@self);
end;

function TGtkFontChooser.get_font_size: gint; cdecl;
begin
  Result := Gtk4.gtk_font_chooser_get_font_size(@self);
end;

function TGtkFontChooser.get_language: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_font_chooser_get_language(@self);
end;

function TGtkFontChooser.get_level: TGtkFontChooserLevel; cdecl;
begin
  Result := Gtk4.gtk_font_chooser_get_level(@self);
end;

function TGtkFontChooser.get_preview_text: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_font_chooser_get_preview_text(@self);
end;

function TGtkFontChooser.get_show_preview_entry: gboolean; cdecl;
begin
  Result := Gtk4.gtk_font_chooser_get_show_preview_entry(@self);
end;

procedure TGtkFontChooser.set_filter_func(filter: TGtkFontFilterFunc; user_data: gpointer; destroy_: TGDestroyNotify); cdecl;
begin
  Gtk4.gtk_font_chooser_set_filter_func(@self, filter, user_data, destroy_);
end;

procedure TGtkFontChooser.set_font(fontname: Pgchar); cdecl;
begin
  Gtk4.gtk_font_chooser_set_font(@self, fontname);
end;

procedure TGtkFontChooser.set_font_desc(font_desc: PPangoFontDescription); cdecl;
begin
  Gtk4.gtk_font_chooser_set_font_desc(@self, font_desc);
end;

procedure TGtkFontChooser.set_font_map(fontmap: PPangoFontMap); cdecl;
begin
  Gtk4.gtk_font_chooser_set_font_map(@self, fontmap);
end;

procedure TGtkFontChooser.set_language(language: Pgchar); cdecl;
begin
  Gtk4.gtk_font_chooser_set_language(@self, language);
end;

procedure TGtkFontChooser.set_level(level: TGtkFontChooserLevel); cdecl;
begin
  Gtk4.gtk_font_chooser_set_level(@self, level);
end;

procedure TGtkFontChooser.set_preview_text(text: Pgchar); cdecl;
begin
  Gtk4.gtk_font_chooser_set_preview_text(@self, text);
end;

procedure TGtkFontChooser.set_show_preview_entry(show_preview_entry: gboolean); cdecl;
begin
  Gtk4.gtk_font_chooser_set_show_preview_entry(@self, show_preview_entry);
end;

function TGtkFontButton.new: PGtkFontButton; cdecl;
begin
  Result := Gtk4.gtk_font_button_new();
end;

function TGtkFontButton.new_with_font(fontname: Pgchar): PGtkFontButton; cdecl;
begin
  Result := Gtk4.gtk_font_button_new_with_font(fontname);
end;

function TGtkFontButton.get_modal: gboolean; cdecl;
begin
  Result := Gtk4.gtk_font_button_get_modal(@self);
end;

function TGtkFontButton.get_title: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_font_button_get_title(@self);
end;

function TGtkFontButton.get_use_font: gboolean; cdecl;
begin
  Result := Gtk4.gtk_font_button_get_use_font(@self);
end;

function TGtkFontButton.get_use_size: gboolean; cdecl;
begin
  Result := Gtk4.gtk_font_button_get_use_size(@self);
end;

procedure TGtkFontButton.set_modal(modal: gboolean); cdecl;
begin
  Gtk4.gtk_font_button_set_modal(@self, modal);
end;

procedure TGtkFontButton.set_title(title: Pgchar); cdecl;
begin
  Gtk4.gtk_font_button_set_title(@self, title);
end;

procedure TGtkFontButton.set_use_font(use_font: gboolean); cdecl;
begin
  Gtk4.gtk_font_button_set_use_font(@self, use_font);
end;

procedure TGtkFontButton.set_use_size(use_size: gboolean); cdecl;
begin
  Gtk4.gtk_font_button_set_use_size(@self, use_size);
end;

function TGtkFontChooserDialog.new(title: Pgchar; parent: PGtkWindow): PGtkFontChooserDialog; cdecl;
begin
  Result := Gtk4.gtk_font_chooser_dialog_new(title, parent);
end;

function TGtkFontChooserWidget.new: PGtkFontChooserWidget; cdecl;
begin
  Result := Gtk4.gtk_font_chooser_widget_new();
end;

function TGtkFrame.new(label_: Pgchar): PGtkFrame; cdecl;
begin
  Result := Gtk4.gtk_frame_new(label_);
end;

function TGtkFrame.get_child: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_frame_get_child(@self);
end;

function TGtkFrame.get_label: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_frame_get_label(@self);
end;

function TGtkFrame.get_label_align: gfloat; cdecl;
begin
  Result := Gtk4.gtk_frame_get_label_align(@self);
end;

function TGtkFrame.get_label_widget: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_frame_get_label_widget(@self);
end;

procedure TGtkFrame.set_child(child: PGtkWidget); cdecl;
begin
  Gtk4.gtk_frame_set_child(@self, child);
end;

procedure TGtkFrame.set_label(label_: Pgchar); cdecl;
begin
  Gtk4.gtk_frame_set_label(@self, label_);
end;

procedure TGtkFrame.set_label_align(xalign: gfloat); cdecl;
begin
  Gtk4.gtk_frame_set_label_align(@self, xalign);
end;

procedure TGtkFrame.set_label_widget(label_widget: PGtkWidget); cdecl;
begin
  Gtk4.gtk_frame_set_label_widget(@self, label_widget);
end;

function TGtkGLArea.new: PGtkGLArea; cdecl;
begin
  Result := Gtk4.gtk_gl_area_new();
end;

procedure TGtkGLArea.attach_buffers; cdecl;
begin
  Gtk4.gtk_gl_area_attach_buffers(@self);
end;

function TGtkGLArea.get_auto_render: gboolean; cdecl;
begin
  Result := Gtk4.gtk_gl_area_get_auto_render(@self);
end;

function TGtkGLArea.get_context: PGdkGLContext; cdecl;
begin
  Result := Gtk4.gtk_gl_area_get_context(@self);
end;

function TGtkGLArea.get_error: PGError; cdecl;
begin
  Result := Gtk4.gtk_gl_area_get_error(@self);
end;

function TGtkGLArea.get_has_depth_buffer: gboolean; cdecl;
begin
  Result := Gtk4.gtk_gl_area_get_has_depth_buffer(@self);
end;

function TGtkGLArea.get_has_stencil_buffer: gboolean; cdecl;
begin
  Result := Gtk4.gtk_gl_area_get_has_stencil_buffer(@self);
end;

procedure TGtkGLArea.get_required_version(major: Pgint; minor: Pgint); cdecl;
begin
  Gtk4.gtk_gl_area_get_required_version(@self, major, minor);
end;

function TGtkGLArea.get_use_es: gboolean; cdecl;
begin
  Result := Gtk4.gtk_gl_area_get_use_es(@self);
end;

procedure TGtkGLArea.make_current; cdecl;
begin
  Gtk4.gtk_gl_area_make_current(@self);
end;

procedure TGtkGLArea.queue_render; cdecl;
begin
  Gtk4.gtk_gl_area_queue_render(@self);
end;

procedure TGtkGLArea.set_auto_render(auto_render: gboolean); cdecl;
begin
  Gtk4.gtk_gl_area_set_auto_render(@self, auto_render);
end;

procedure TGtkGLArea.set_error(error: PGError); cdecl;
begin
  Gtk4.gtk_gl_area_set_error(@self, error);
end;

procedure TGtkGLArea.set_has_depth_buffer(has_depth_buffer: gboolean); cdecl;
begin
  Gtk4.gtk_gl_area_set_has_depth_buffer(@self, has_depth_buffer);
end;

procedure TGtkGLArea.set_has_stencil_buffer(has_stencil_buffer: gboolean); cdecl;
begin
  Gtk4.gtk_gl_area_set_has_stencil_buffer(@self, has_stencil_buffer);
end;

procedure TGtkGLArea.set_required_version(major: gint; minor: gint); cdecl;
begin
  Gtk4.gtk_gl_area_set_required_version(@self, major, minor);
end;

procedure TGtkGLArea.set_use_es(use_es: gboolean); cdecl;
begin
  Gtk4.gtk_gl_area_set_use_es(@self, use_es);
end;

function TGtkGesture.get_bounding_box(rect: PGdkRectangle): gboolean; cdecl;
begin
  Result := Gtk4.gtk_gesture_get_bounding_box(@self, rect);
end;

function TGtkGesture.get_bounding_box_center(x: Pgdouble; y: Pgdouble): gboolean; cdecl;
begin
  Result := Gtk4.gtk_gesture_get_bounding_box_center(@self, x, y);
end;

function TGtkGesture.get_device: PGdkDevice; cdecl;
begin
  Result := Gtk4.gtk_gesture_get_device(@self);
end;

function TGtkGesture.get_group: PGList; cdecl;
begin
  Result := Gtk4.gtk_gesture_get_group(@self);
end;

function TGtkGesture.get_last_event(sequence: PGdkEventSequence): PGdkEvent; cdecl;
begin
  Result := Gtk4.gtk_gesture_get_last_event(@self, sequence);
end;

function TGtkGesture.get_last_updated_sequence: PGdkEventSequence; cdecl;
begin
  Result := Gtk4.gtk_gesture_get_last_updated_sequence(@self);
end;

function TGtkGesture.get_point(sequence: PGdkEventSequence; x: Pgdouble; y: Pgdouble): gboolean; cdecl;
begin
  Result := Gtk4.gtk_gesture_get_point(@self, sequence, x, y);
end;

function TGtkGesture.get_sequence_state(sequence: PGdkEventSequence): TGtkEventSequenceState; cdecl;
begin
  Result := Gtk4.gtk_gesture_get_sequence_state(@self, sequence);
end;

function TGtkGesture.get_sequences: PGList; cdecl;
begin
  Result := Gtk4.gtk_gesture_get_sequences(@self);
end;

procedure TGtkGesture.group(gesture: PGtkGesture); cdecl;
begin
  Gtk4.gtk_gesture_group(@self, gesture);
end;

function TGtkGesture.handles_sequence(sequence: PGdkEventSequence): gboolean; cdecl;
begin
  Result := Gtk4.gtk_gesture_handles_sequence(@self, sequence);
end;

function TGtkGesture.is_active: gboolean; cdecl;
begin
  Result := Gtk4.gtk_gesture_is_active(@self);
end;

function TGtkGesture.is_grouped_with(other: PGtkGesture): gboolean; cdecl;
begin
  Result := Gtk4.gtk_gesture_is_grouped_with(@self, other);
end;

function TGtkGesture.is_recognized: gboolean; cdecl;
begin
  Result := Gtk4.gtk_gesture_is_recognized(@self);
end;

function TGtkGesture.set_sequence_state(sequence: PGdkEventSequence; state: TGtkEventSequenceState): gboolean; cdecl;
begin
  Result := Gtk4.gtk_gesture_set_sequence_state(@self, sequence, state);
end;

function TGtkGesture.set_state(state: TGtkEventSequenceState): gboolean; cdecl;
begin
  Result := Gtk4.gtk_gesture_set_state(@self, state);
end;

procedure TGtkGesture.ungroup; cdecl;
begin
  Gtk4.gtk_gesture_ungroup(@self);
end;

function TGtkGestureClick.new: PGtkGestureClick; cdecl;
begin
  Result := Gtk4.gtk_gesture_click_new();
end;

function TGtkGestureDrag.new: PGtkGestureDrag; cdecl;
begin
  Result := Gtk4.gtk_gesture_drag_new();
end;

function TGtkGestureDrag.get_offset(x: Pgdouble; y: Pgdouble): gboolean; cdecl;
begin
  Result := Gtk4.gtk_gesture_drag_get_offset(@self, x, y);
end;

function TGtkGestureDrag.get_start_point(x: Pgdouble; y: Pgdouble): gboolean; cdecl;
begin
  Result := Gtk4.gtk_gesture_drag_get_start_point(@self, x, y);
end;

function TGtkGestureLongPress.new: PGtkGestureLongPress; cdecl;
begin
  Result := Gtk4.gtk_gesture_long_press_new();
end;

function TGtkGestureLongPress.get_delay_factor: gdouble; cdecl;
begin
  Result := Gtk4.gtk_gesture_long_press_get_delay_factor(@self);
end;

procedure TGtkGestureLongPress.set_delay_factor(delay_factor: gdouble); cdecl;
begin
  Gtk4.gtk_gesture_long_press_set_delay_factor(@self, delay_factor);
end;

function TGtkGesturePan.new(orientation: TGtkOrientation): PGtkGesturePan; cdecl;
begin
  Result := Gtk4.gtk_gesture_pan_new(orientation);
end;

function TGtkGesturePan.get_orientation: TGtkOrientation; cdecl;
begin
  Result := Gtk4.gtk_gesture_pan_get_orientation(@self);
end;

procedure TGtkGesturePan.set_orientation(orientation: TGtkOrientation); cdecl;
begin
  Gtk4.gtk_gesture_pan_set_orientation(@self, orientation);
end;

function TGtkGestureRotate.new: PGtkGestureRotate; cdecl;
begin
  Result := Gtk4.gtk_gesture_rotate_new();
end;

function TGtkGestureRotate.get_angle_delta: gdouble; cdecl;
begin
  Result := Gtk4.gtk_gesture_rotate_get_angle_delta(@self);
end;

function TGtkGestureSingle.get_button: guint; cdecl;
begin
  Result := Gtk4.gtk_gesture_single_get_button(@self);
end;

function TGtkGestureSingle.get_current_button: guint; cdecl;
begin
  Result := Gtk4.gtk_gesture_single_get_current_button(@self);
end;

function TGtkGestureSingle.get_current_sequence: PGdkEventSequence; cdecl;
begin
  Result := Gtk4.gtk_gesture_single_get_current_sequence(@self);
end;

function TGtkGestureSingle.get_exclusive: gboolean; cdecl;
begin
  Result := Gtk4.gtk_gesture_single_get_exclusive(@self);
end;

function TGtkGestureSingle.get_touch_only: gboolean; cdecl;
begin
  Result := Gtk4.gtk_gesture_single_get_touch_only(@self);
end;

procedure TGtkGestureSingle.set_button(button: guint); cdecl;
begin
  Gtk4.gtk_gesture_single_set_button(@self, button);
end;

procedure TGtkGestureSingle.set_exclusive(exclusive: gboolean); cdecl;
begin
  Gtk4.gtk_gesture_single_set_exclusive(@self, exclusive);
end;

procedure TGtkGestureSingle.set_touch_only(touch_only: gboolean); cdecl;
begin
  Gtk4.gtk_gesture_single_set_touch_only(@self, touch_only);
end;

function TGtkGestureStylus.new: PGtkGestureStylus; cdecl;
begin
  Result := Gtk4.gtk_gesture_stylus_new();
end;

function TGtkGestureStylus.get_axes(axes: PGdkAxisUse; values: PPgdouble): gboolean; cdecl;
begin
  Result := Gtk4.gtk_gesture_stylus_get_axes(@self, axes, values);
end;

function TGtkGestureStylus.get_axis(axis: TGdkAxisUse; value: Pgdouble): gboolean; cdecl;
begin
  Result := Gtk4.gtk_gesture_stylus_get_axis(@self, axis, value);
end;

function TGtkGestureStylus.get_backlog(backlog: PPGdkTimeCoord; n_elems: Pguint): gboolean; cdecl;
begin
  Result := Gtk4.gtk_gesture_stylus_get_backlog(@self, backlog, n_elems);
end;

function TGtkGestureStylus.get_device_tool: PGdkDeviceTool; cdecl;
begin
  Result := Gtk4.gtk_gesture_stylus_get_device_tool(@self);
end;

function TGtkGestureSwipe.new: PGtkGestureSwipe; cdecl;
begin
  Result := Gtk4.gtk_gesture_swipe_new();
end;

function TGtkGestureSwipe.get_velocity(velocity_x: Pgdouble; velocity_y: Pgdouble): gboolean; cdecl;
begin
  Result := Gtk4.gtk_gesture_swipe_get_velocity(@self, velocity_x, velocity_y);
end;

function TGtkGestureZoom.new: PGtkGestureZoom; cdecl;
begin
  Result := Gtk4.gtk_gesture_zoom_new();
end;

function TGtkGestureZoom.get_scale_delta: gdouble; cdecl;
begin
  Result := Gtk4.gtk_gesture_zoom_get_scale_delta(@self);
end;

function TGtkGrid.new: PGtkGrid; cdecl;
begin
  Result := Gtk4.gtk_grid_new();
end;

procedure TGtkGrid.attach(child: PGtkWidget; column: gint; row: gint; width: gint; height: gint); cdecl;
begin
  Gtk4.gtk_grid_attach(@self, child, column, row, width, height);
end;

procedure TGtkGrid.attach_next_to(child: PGtkWidget; sibling: PGtkWidget; side: TGtkPositionType; width: gint; height: gint); cdecl;
begin
  Gtk4.gtk_grid_attach_next_to(@self, child, sibling, side, width, height);
end;

function TGtkGrid.get_baseline_row: gint; cdecl;
begin
  Result := Gtk4.gtk_grid_get_baseline_row(@self);
end;

function TGtkGrid.get_child_at(column: gint; row: gint): PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_grid_get_child_at(@self, column, row);
end;

function TGtkGrid.get_column_homogeneous: gboolean; cdecl;
begin
  Result := Gtk4.gtk_grid_get_column_homogeneous(@self);
end;

function TGtkGrid.get_column_spacing: guint; cdecl;
begin
  Result := Gtk4.gtk_grid_get_column_spacing(@self);
end;

function TGtkGrid.get_row_baseline_position(row: gint): TGtkBaselinePosition; cdecl;
begin
  Result := Gtk4.gtk_grid_get_row_baseline_position(@self, row);
end;

function TGtkGrid.get_row_homogeneous: gboolean; cdecl;
begin
  Result := Gtk4.gtk_grid_get_row_homogeneous(@self);
end;

function TGtkGrid.get_row_spacing: guint; cdecl;
begin
  Result := Gtk4.gtk_grid_get_row_spacing(@self);
end;

procedure TGtkGrid.insert_column(position: gint); cdecl;
begin
  Gtk4.gtk_grid_insert_column(@self, position);
end;

procedure TGtkGrid.insert_next_to(sibling: PGtkWidget; side: TGtkPositionType); cdecl;
begin
  Gtk4.gtk_grid_insert_next_to(@self, sibling, side);
end;

procedure TGtkGrid.insert_row(position: gint); cdecl;
begin
  Gtk4.gtk_grid_insert_row(@self, position);
end;

procedure TGtkGrid.query_child(child: PGtkWidget; column: Pgint; row: Pgint; width: Pgint; height: Pgint); cdecl;
begin
  Gtk4.gtk_grid_query_child(@self, child, column, row, width, height);
end;

procedure TGtkGrid.remove(child: PGtkWidget); cdecl;
begin
  Gtk4.gtk_grid_remove(@self, child);
end;

procedure TGtkGrid.remove_column(position: gint); cdecl;
begin
  Gtk4.gtk_grid_remove_column(@self, position);
end;

procedure TGtkGrid.remove_row(position: gint); cdecl;
begin
  Gtk4.gtk_grid_remove_row(@self, position);
end;

procedure TGtkGrid.set_baseline_row(row: gint); cdecl;
begin
  Gtk4.gtk_grid_set_baseline_row(@self, row);
end;

procedure TGtkGrid.set_column_homogeneous(homogeneous: gboolean); cdecl;
begin
  Gtk4.gtk_grid_set_column_homogeneous(@self, homogeneous);
end;

procedure TGtkGrid.set_column_spacing(spacing: guint); cdecl;
begin
  Gtk4.gtk_grid_set_column_spacing(@self, spacing);
end;

procedure TGtkGrid.set_row_baseline_position(row: gint; pos: TGtkBaselinePosition); cdecl;
begin
  Gtk4.gtk_grid_set_row_baseline_position(@self, row, pos);
end;

procedure TGtkGrid.set_row_homogeneous(homogeneous: gboolean); cdecl;
begin
  Gtk4.gtk_grid_set_row_homogeneous(@self, homogeneous);
end;

procedure TGtkGrid.set_row_spacing(spacing: guint); cdecl;
begin
  Gtk4.gtk_grid_set_row_spacing(@self, spacing);
end;

function TGtkGridLayout.new: PGtkGridLayout; cdecl;
begin
  Result := Gtk4.gtk_grid_layout_new();
end;

function TGtkGridLayout.get_baseline_row: gint; cdecl;
begin
  Result := Gtk4.gtk_grid_layout_get_baseline_row(@self);
end;

function TGtkGridLayout.get_column_homogeneous: gboolean; cdecl;
begin
  Result := Gtk4.gtk_grid_layout_get_column_homogeneous(@self);
end;

function TGtkGridLayout.get_column_spacing: guint; cdecl;
begin
  Result := Gtk4.gtk_grid_layout_get_column_spacing(@self);
end;

function TGtkGridLayout.get_row_baseline_position(row: gint): TGtkBaselinePosition; cdecl;
begin
  Result := Gtk4.gtk_grid_layout_get_row_baseline_position(@self, row);
end;

function TGtkGridLayout.get_row_homogeneous: gboolean; cdecl;
begin
  Result := Gtk4.gtk_grid_layout_get_row_homogeneous(@self);
end;

function TGtkGridLayout.get_row_spacing: guint; cdecl;
begin
  Result := Gtk4.gtk_grid_layout_get_row_spacing(@self);
end;

procedure TGtkGridLayout.set_baseline_row(row: gint); cdecl;
begin
  Gtk4.gtk_grid_layout_set_baseline_row(@self, row);
end;

procedure TGtkGridLayout.set_column_homogeneous(homogeneous: gboolean); cdecl;
begin
  Gtk4.gtk_grid_layout_set_column_homogeneous(@self, homogeneous);
end;

procedure TGtkGridLayout.set_column_spacing(spacing: guint); cdecl;
begin
  Gtk4.gtk_grid_layout_set_column_spacing(@self, spacing);
end;

procedure TGtkGridLayout.set_row_baseline_position(row: gint; pos: TGtkBaselinePosition); cdecl;
begin
  Gtk4.gtk_grid_layout_set_row_baseline_position(@self, row, pos);
end;

procedure TGtkGridLayout.set_row_homogeneous(homogeneous: gboolean); cdecl;
begin
  Gtk4.gtk_grid_layout_set_row_homogeneous(@self, homogeneous);
end;

procedure TGtkGridLayout.set_row_spacing(spacing: guint); cdecl;
begin
  Gtk4.gtk_grid_layout_set_row_spacing(@self, spacing);
end;

function TGtkGridLayoutChild.get_column: gint; cdecl;
begin
  Result := Gtk4.gtk_grid_layout_child_get_column(@self);
end;

function TGtkGridLayoutChild.get_column_span: gint; cdecl;
begin
  Result := Gtk4.gtk_grid_layout_child_get_column_span(@self);
end;

function TGtkGridLayoutChild.get_row: gint; cdecl;
begin
  Result := Gtk4.gtk_grid_layout_child_get_row(@self);
end;

function TGtkGridLayoutChild.get_row_span: gint; cdecl;
begin
  Result := Gtk4.gtk_grid_layout_child_get_row_span(@self);
end;

procedure TGtkGridLayoutChild.set_column(column: gint); cdecl;
begin
  Gtk4.gtk_grid_layout_child_set_column(@self, column);
end;

procedure TGtkGridLayoutChild.set_column_span(span: gint); cdecl;
begin
  Gtk4.gtk_grid_layout_child_set_column_span(@self, span);
end;

procedure TGtkGridLayoutChild.set_row(row: gint); cdecl;
begin
  Gtk4.gtk_grid_layout_child_set_row(@self, row);
end;

procedure TGtkGridLayoutChild.set_row_span(span: gint); cdecl;
begin
  Gtk4.gtk_grid_layout_child_set_row_span(@self, span);
end;

function TGtkGridView.new(model: PGtkSelectionModel; factory: PGtkListItemFactory): PGtkGridView; cdecl;
begin
  Result := Gtk4.gtk_grid_view_new(model, factory);
end;

function TGtkGridView.get_enable_rubberband: gboolean; cdecl;
begin
  Result := Gtk4.gtk_grid_view_get_enable_rubberband(@self);
end;

function TGtkGridView.get_factory: PGtkListItemFactory; cdecl;
begin
  Result := Gtk4.gtk_grid_view_get_factory(@self);
end;

function TGtkGridView.get_max_columns: guint; cdecl;
begin
  Result := Gtk4.gtk_grid_view_get_max_columns(@self);
end;

function TGtkGridView.get_min_columns: guint; cdecl;
begin
  Result := Gtk4.gtk_grid_view_get_min_columns(@self);
end;

function TGtkGridView.get_model: PGtkSelectionModel; cdecl;
begin
  Result := Gtk4.gtk_grid_view_get_model(@self);
end;

function TGtkGridView.get_single_click_activate: gboolean; cdecl;
begin
  Result := Gtk4.gtk_grid_view_get_single_click_activate(@self);
end;

procedure TGtkGridView.set_enable_rubberband(enable_rubberband: gboolean); cdecl;
begin
  Gtk4.gtk_grid_view_set_enable_rubberband(@self, enable_rubberband);
end;

procedure TGtkGridView.set_factory(factory: PGtkListItemFactory); cdecl;
begin
  Gtk4.gtk_grid_view_set_factory(@self, factory);
end;

procedure TGtkGridView.set_max_columns(max_columns: guint); cdecl;
begin
  Gtk4.gtk_grid_view_set_max_columns(@self, max_columns);
end;

procedure TGtkGridView.set_min_columns(min_columns: guint); cdecl;
begin
  Gtk4.gtk_grid_view_set_min_columns(@self, min_columns);
end;

procedure TGtkGridView.set_model(model: PGtkSelectionModel); cdecl;
begin
  Gtk4.gtk_grid_view_set_model(@self, model);
end;

procedure TGtkGridView.set_single_click_activate(single_click_activate: gboolean); cdecl;
begin
  Gtk4.gtk_grid_view_set_single_click_activate(@self, single_click_activate);
end;

function TGtkIMContextSimple.new: PGtkIMContextSimple; cdecl;
begin
  Result := Gtk4.gtk_im_context_simple_new();
end;

procedure TGtkIMContextSimple.add_compose_file(compose_file: Pgchar); cdecl;
begin
  Gtk4.gtk_im_context_simple_add_compose_file(@self, compose_file);
end;

function TGtkIMMulticontext.new: PGtkIMMulticontext; cdecl;
begin
  Result := Gtk4.gtk_im_multicontext_new();
end;

function TGtkIMMulticontext.get_context_id: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_im_multicontext_get_context_id(@self);
end;

procedure TGtkIMMulticontext.set_context_id(context_id: Pgchar); cdecl;
begin
  Gtk4.gtk_im_multicontext_set_context_id(@self, context_id);
end;

procedure TGtkSymbolicPaintable.snapshot_symbolic(snapshot: PGdkSnapshot; width: gdouble; height: gdouble; colors: PGdkRGBA; n_colors: gsize); cdecl;
begin
  Gtk4.gtk_symbolic_paintable_snapshot_symbolic(@self, snapshot, width, height, colors, n_colors);
end;

function TGtkIconPaintable.new_for_file(file_: PGFile; size: gint; scale: gint): PGtkIconPaintable; cdecl;
begin
  Result := Gtk4.gtk_icon_paintable_new_for_file(file_, size, scale);
end;

function TGtkIconPaintable.get_file: PGFile; cdecl;
begin
  Result := Gtk4.gtk_icon_paintable_get_file(@self);
end;

function TGtkIconPaintable.get_icon_name: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_icon_paintable_get_icon_name(@self);
end;

function TGtkIconPaintable.is_symbolic: gboolean; cdecl;
begin
  Result := Gtk4.gtk_icon_paintable_is_symbolic(@self);
end;

function TGtkIconTheme.new: PGtkIconTheme; cdecl;
begin
  Result := Gtk4.gtk_icon_theme_new();
end;

function TGtkIconTheme.get_for_display(display: PGdkDisplay): PGtkIconTheme; cdecl;
begin
  Result := Gtk4.gtk_icon_theme_get_for_display(display);
end;

procedure TGtkIconTheme.add_resource_path(path: Pgchar); cdecl;
begin
  Gtk4.gtk_icon_theme_add_resource_path(@self, path);
end;

procedure TGtkIconTheme.add_search_path(path: Pgchar); cdecl;
begin
  Gtk4.gtk_icon_theme_add_search_path(@self, path);
end;

function TGtkIconTheme.get_display: PGdkDisplay; cdecl;
begin
  Result := Gtk4.gtk_icon_theme_get_display(@self);
end;

function TGtkIconTheme.get_icon_names: PPgchar; cdecl;
begin
  Result := Gtk4.gtk_icon_theme_get_icon_names(@self);
end;

function TGtkIconTheme.get_icon_sizes(icon_name: Pgchar): Pgint; cdecl;
begin
  Result := Gtk4.gtk_icon_theme_get_icon_sizes(@self, icon_name);
end;

function TGtkIconTheme.get_resource_path: PPgchar; cdecl;
begin
  Result := Gtk4.gtk_icon_theme_get_resource_path(@self);
end;

function TGtkIconTheme.get_search_path: PPgchar; cdecl;
begin
  Result := Gtk4.gtk_icon_theme_get_search_path(@self);
end;

function TGtkIconTheme.get_theme_name: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_icon_theme_get_theme_name(@self);
end;

function TGtkIconTheme.has_gicon(gicon: PGIcon): gboolean; cdecl;
begin
  Result := Gtk4.gtk_icon_theme_has_gicon(@self, gicon);
end;

function TGtkIconTheme.has_icon(icon_name: Pgchar): gboolean; cdecl;
begin
  Result := Gtk4.gtk_icon_theme_has_icon(@self, icon_name);
end;

function TGtkIconTheme.lookup_by_gicon(icon: PGIcon; size: gint; scale: gint; direction: TGtkTextDirection; flags: TGtkIconLookupFlags): PGtkIconPaintable; cdecl;
begin
  Result := Gtk4.gtk_icon_theme_lookup_by_gicon(@self, icon, size, scale, direction, flags);
end;

function TGtkIconTheme.lookup_icon(icon_name: Pgchar; fallbacks: PPgchar; size: gint; scale: gint; direction: TGtkTextDirection; flags: TGtkIconLookupFlags): PGtkIconPaintable; cdecl;
begin
  Result := Gtk4.gtk_icon_theme_lookup_icon(@self, icon_name, fallbacks, size, scale, direction, flags);
end;

procedure TGtkIconTheme.set_resource_path(path: PPgchar); cdecl;
begin
  Gtk4.gtk_icon_theme_set_resource_path(@self, path);
end;

procedure TGtkIconTheme.set_search_path(path: PPchar); cdecl;
begin
  Gtk4.gtk_icon_theme_set_search_path(@self, path);
end;

procedure TGtkIconTheme.set_theme_name(theme_name: Pgchar); cdecl;
begin
  Gtk4.gtk_icon_theme_set_theme_name(@self, theme_name);
end;

function TGtkIconView.new: PGtkIconView; cdecl;
begin
  Result := Gtk4.gtk_icon_view_new();
end;

function TGtkIconView.new_with_area(area: PGtkCellArea): PGtkIconView; cdecl;
begin
  Result := Gtk4.gtk_icon_view_new_with_area(area);
end;

function TGtkIconView.new_with_model(model: PGtkTreeModel): PGtkIconView; cdecl;
begin
  Result := Gtk4.gtk_icon_view_new_with_model(model);
end;

function TGtkIconView.create_drag_icon(path: PGtkTreePath): PGdkPaintable; cdecl;
begin
  Result := Gtk4.gtk_icon_view_create_drag_icon(@self, path);
end;

procedure TGtkIconView.enable_model_drag_dest(formats: PGdkContentFormats; actions: TGdkDragAction); cdecl;
begin
  Gtk4.gtk_icon_view_enable_model_drag_dest(@self, formats, actions);
end;

procedure TGtkIconView.enable_model_drag_source(start_button_mask: TGdkModifierType; formats: PGdkContentFormats; actions: TGdkDragAction); cdecl;
begin
  Gtk4.gtk_icon_view_enable_model_drag_source(@self, start_button_mask, formats, actions);
end;

function TGtkIconView.get_activate_on_single_click: gboolean; cdecl;
begin
  Result := Gtk4.gtk_icon_view_get_activate_on_single_click(@self);
end;

function TGtkIconView.get_cell_rect(path: PGtkTreePath; cell: PGtkCellRenderer; rect: PGdkRectangle): gboolean; cdecl;
begin
  Result := Gtk4.gtk_icon_view_get_cell_rect(@self, path, cell, rect);
end;

function TGtkIconView.get_column_spacing: gint; cdecl;
begin
  Result := Gtk4.gtk_icon_view_get_column_spacing(@self);
end;

function TGtkIconView.get_columns: gint; cdecl;
begin
  Result := Gtk4.gtk_icon_view_get_columns(@self);
end;

function TGtkIconView.get_cursor(path: PPGtkTreePath; cell: PPGtkCellRenderer): gboolean; cdecl;
begin
  Result := Gtk4.gtk_icon_view_get_cursor(@self, path, cell);
end;

function TGtkIconView.get_dest_item_at_pos(drag_x: gint; drag_y: gint; path: PPGtkTreePath; pos: PGtkIconViewDropPosition): gboolean; cdecl;
begin
  Result := Gtk4.gtk_icon_view_get_dest_item_at_pos(@self, drag_x, drag_y, path, pos);
end;

procedure TGtkIconView.get_drag_dest_item(path: PPGtkTreePath; pos: PGtkIconViewDropPosition); cdecl;
begin
  Gtk4.gtk_icon_view_get_drag_dest_item(@self, path, pos);
end;

function TGtkIconView.get_item_at_pos(x: gint; y: gint; path: PPGtkTreePath; cell: PPGtkCellRenderer): gboolean; cdecl;
begin
  Result := Gtk4.gtk_icon_view_get_item_at_pos(@self, x, y, path, cell);
end;

function TGtkIconView.get_item_column(path: PGtkTreePath): gint; cdecl;
begin
  Result := Gtk4.gtk_icon_view_get_item_column(@self, path);
end;

function TGtkIconView.get_item_orientation: TGtkOrientation; cdecl;
begin
  Result := Gtk4.gtk_icon_view_get_item_orientation(@self);
end;

function TGtkIconView.get_item_padding: gint; cdecl;
begin
  Result := Gtk4.gtk_icon_view_get_item_padding(@self);
end;

function TGtkIconView.get_item_row(path: PGtkTreePath): gint; cdecl;
begin
  Result := Gtk4.gtk_icon_view_get_item_row(@self, path);
end;

function TGtkIconView.get_item_width: gint; cdecl;
begin
  Result := Gtk4.gtk_icon_view_get_item_width(@self);
end;

function TGtkIconView.get_margin: gint; cdecl;
begin
  Result := Gtk4.gtk_icon_view_get_margin(@self);
end;

function TGtkIconView.get_markup_column: gint; cdecl;
begin
  Result := Gtk4.gtk_icon_view_get_markup_column(@self);
end;

function TGtkIconView.get_model: PGtkTreeModel; cdecl;
begin
  Result := Gtk4.gtk_icon_view_get_model(@self);
end;

function TGtkIconView.get_path_at_pos(x: gint; y: gint): PGtkTreePath; cdecl;
begin
  Result := Gtk4.gtk_icon_view_get_path_at_pos(@self, x, y);
end;

function TGtkIconView.get_pixbuf_column: gint; cdecl;
begin
  Result := Gtk4.gtk_icon_view_get_pixbuf_column(@self);
end;

function TGtkIconView.get_reorderable: gboolean; cdecl;
begin
  Result := Gtk4.gtk_icon_view_get_reorderable(@self);
end;

function TGtkIconView.get_row_spacing: gint; cdecl;
begin
  Result := Gtk4.gtk_icon_view_get_row_spacing(@self);
end;

function TGtkIconView.get_selected_items: PGList; cdecl;
begin
  Result := Gtk4.gtk_icon_view_get_selected_items(@self);
end;

function TGtkIconView.get_selection_mode: TGtkSelectionMode; cdecl;
begin
  Result := Gtk4.gtk_icon_view_get_selection_mode(@self);
end;

function TGtkIconView.get_spacing: gint; cdecl;
begin
  Result := Gtk4.gtk_icon_view_get_spacing(@self);
end;

function TGtkIconView.get_text_column: gint; cdecl;
begin
  Result := Gtk4.gtk_icon_view_get_text_column(@self);
end;

function TGtkIconView.get_tooltip_column: gint; cdecl;
begin
  Result := Gtk4.gtk_icon_view_get_tooltip_column(@self);
end;

function TGtkIconView.get_tooltip_context(x: gint; y: gint; keyboard_tip: gboolean; model: PPGtkTreeModel; path: PPGtkTreePath; iter: PGtkTreeIter): gboolean; cdecl;
begin
  Result := Gtk4.gtk_icon_view_get_tooltip_context(@self, x, y, keyboard_tip, model, path, iter);
end;

function TGtkIconView.get_visible_range(start_path: PPGtkTreePath; end_path: PPGtkTreePath): gboolean; cdecl;
begin
  Result := Gtk4.gtk_icon_view_get_visible_range(@self, start_path, end_path);
end;

procedure TGtkIconView.item_activated(path: PGtkTreePath); cdecl;
begin
  Gtk4.gtk_icon_view_item_activated(@self, path);
end;

function TGtkIconView.path_is_selected(path: PGtkTreePath): gboolean; cdecl;
begin
  Result := Gtk4.gtk_icon_view_path_is_selected(@self, path);
end;

procedure TGtkIconView.scroll_to_path(path: PGtkTreePath; use_align: gboolean; row_align: gfloat; col_align: gfloat); cdecl;
begin
  Gtk4.gtk_icon_view_scroll_to_path(@self, path, use_align, row_align, col_align);
end;

procedure TGtkIconView.select_all; cdecl;
begin
  Gtk4.gtk_icon_view_select_all(@self);
end;

procedure TGtkIconView.select_path(path: PGtkTreePath); cdecl;
begin
  Gtk4.gtk_icon_view_select_path(@self, path);
end;

procedure TGtkIconView.selected_foreach(func: TGtkIconViewForeachFunc; data: gpointer); cdecl;
begin
  Gtk4.gtk_icon_view_selected_foreach(@self, func, data);
end;

procedure TGtkIconView.set_activate_on_single_click(single: gboolean); cdecl;
begin
  Gtk4.gtk_icon_view_set_activate_on_single_click(@self, single);
end;

procedure TGtkIconView.set_column_spacing(column_spacing: gint); cdecl;
begin
  Gtk4.gtk_icon_view_set_column_spacing(@self, column_spacing);
end;

procedure TGtkIconView.set_columns(columns: gint); cdecl;
begin
  Gtk4.gtk_icon_view_set_columns(@self, columns);
end;

procedure TGtkIconView.set_cursor(path: PGtkTreePath; cell: PGtkCellRenderer; start_editing: gboolean); cdecl;
begin
  Gtk4.gtk_icon_view_set_cursor(@self, path, cell, start_editing);
end;

procedure TGtkIconView.set_drag_dest_item(path: PGtkTreePath; pos: TGtkIconViewDropPosition); cdecl;
begin
  Gtk4.gtk_icon_view_set_drag_dest_item(@self, path, pos);
end;

procedure TGtkIconView.set_item_orientation(orientation: TGtkOrientation); cdecl;
begin
  Gtk4.gtk_icon_view_set_item_orientation(@self, orientation);
end;

procedure TGtkIconView.set_item_padding(item_padding: gint); cdecl;
begin
  Gtk4.gtk_icon_view_set_item_padding(@self, item_padding);
end;

procedure TGtkIconView.set_item_width(item_width: gint); cdecl;
begin
  Gtk4.gtk_icon_view_set_item_width(@self, item_width);
end;

procedure TGtkIconView.set_margin(margin: gint); cdecl;
begin
  Gtk4.gtk_icon_view_set_margin(@self, margin);
end;

procedure TGtkIconView.set_markup_column(column: gint); cdecl;
begin
  Gtk4.gtk_icon_view_set_markup_column(@self, column);
end;

procedure TGtkIconView.set_model(model: PGtkTreeModel); cdecl;
begin
  Gtk4.gtk_icon_view_set_model(@self, model);
end;

procedure TGtkIconView.set_pixbuf_column(column: gint); cdecl;
begin
  Gtk4.gtk_icon_view_set_pixbuf_column(@self, column);
end;

procedure TGtkIconView.set_reorderable(reorderable: gboolean); cdecl;
begin
  Gtk4.gtk_icon_view_set_reorderable(@self, reorderable);
end;

procedure TGtkIconView.set_row_spacing(row_spacing: gint); cdecl;
begin
  Gtk4.gtk_icon_view_set_row_spacing(@self, row_spacing);
end;

procedure TGtkIconView.set_selection_mode(mode: TGtkSelectionMode); cdecl;
begin
  Gtk4.gtk_icon_view_set_selection_mode(@self, mode);
end;

procedure TGtkIconView.set_spacing(spacing: gint); cdecl;
begin
  Gtk4.gtk_icon_view_set_spacing(@self, spacing);
end;

procedure TGtkIconView.set_text_column(column: gint); cdecl;
begin
  Gtk4.gtk_icon_view_set_text_column(@self, column);
end;

procedure TGtkIconView.set_tooltip_cell(tooltip: PGtkTooltip; path: PGtkTreePath; cell: PGtkCellRenderer); cdecl;
begin
  Gtk4.gtk_icon_view_set_tooltip_cell(@self, tooltip, path, cell);
end;

procedure TGtkIconView.set_tooltip_column(column: gint); cdecl;
begin
  Gtk4.gtk_icon_view_set_tooltip_column(@self, column);
end;

procedure TGtkIconView.set_tooltip_item(tooltip: PGtkTooltip; path: PGtkTreePath); cdecl;
begin
  Gtk4.gtk_icon_view_set_tooltip_item(@self, tooltip, path);
end;

procedure TGtkIconView.unselect_all; cdecl;
begin
  Gtk4.gtk_icon_view_unselect_all(@self);
end;

procedure TGtkIconView.unselect_path(path: PGtkTreePath); cdecl;
begin
  Gtk4.gtk_icon_view_unselect_path(@self, path);
end;

procedure TGtkIconView.unset_model_drag_dest; cdecl;
begin
  Gtk4.gtk_icon_view_unset_model_drag_dest(@self);
end;

procedure TGtkIconView.unset_model_drag_source; cdecl;
begin
  Gtk4.gtk_icon_view_unset_model_drag_source(@self);
end;

procedure TGtkTooltip.set_custom(custom_widget: PGtkWidget); cdecl;
begin
  Gtk4.gtk_tooltip_set_custom(@self, custom_widget);
end;

procedure TGtkTooltip.set_icon(paintable: PGdkPaintable); cdecl;
begin
  Gtk4.gtk_tooltip_set_icon(@self, paintable);
end;

procedure TGtkTooltip.set_icon_from_gicon(gicon: PGIcon); cdecl;
begin
  Gtk4.gtk_tooltip_set_icon_from_gicon(@self, gicon);
end;

procedure TGtkTooltip.set_icon_from_icon_name(icon_name: Pgchar); cdecl;
begin
  Gtk4.gtk_tooltip_set_icon_from_icon_name(@self, icon_name);
end;

procedure TGtkTooltip.set_markup(markup: Pgchar); cdecl;
begin
  Gtk4.gtk_tooltip_set_markup(@self, markup);
end;

procedure TGtkTooltip.set_text(text: Pgchar); cdecl;
begin
  Gtk4.gtk_tooltip_set_text(@self, text);
end;

procedure TGtkTooltip.set_tip_area(rect: PGdkRectangle); cdecl;
begin
  Gtk4.gtk_tooltip_set_tip_area(@self, rect);
end;

function TGtkImage.new: PGtkImage; cdecl;
begin
  Result := Gtk4.gtk_image_new();
end;

function TGtkImage.new_from_file(filename: Pgchar): PGtkImage; cdecl;
begin
  Result := Gtk4.gtk_image_new_from_file(filename);
end;

function TGtkImage.new_from_gicon(icon: PGIcon): PGtkImage; cdecl;
begin
  Result := Gtk4.gtk_image_new_from_gicon(icon);
end;

function TGtkImage.new_from_icon_name(icon_name: Pgchar): PGtkImage; cdecl;
begin
  Result := Gtk4.gtk_image_new_from_icon_name(icon_name);
end;

function TGtkImage.new_from_paintable(paintable: PGdkPaintable): PGtkImage; cdecl;
begin
  Result := Gtk4.gtk_image_new_from_paintable(paintable);
end;

function TGtkImage.new_from_pixbuf(pixbuf: PGdkPixbuf): PGtkImage; cdecl;
begin
  Result := Gtk4.gtk_image_new_from_pixbuf(pixbuf);
end;

function TGtkImage.new_from_resource(resource_path: Pgchar): PGtkImage; cdecl;
begin
  Result := Gtk4.gtk_image_new_from_resource(resource_path);
end;

procedure TGtkImage.clear; cdecl;
begin
  Gtk4.gtk_image_clear(@self);
end;

function TGtkImage.get_gicon: PGIcon; cdecl;
begin
  Result := Gtk4.gtk_image_get_gicon(@self);
end;

function TGtkImage.get_icon_name: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_image_get_icon_name(@self);
end;

function TGtkImage.get_icon_size: TGtkIconSize; cdecl;
begin
  Result := Gtk4.gtk_image_get_icon_size(@self);
end;

function TGtkImage.get_paintable: PGdkPaintable; cdecl;
begin
  Result := Gtk4.gtk_image_get_paintable(@self);
end;

function TGtkImage.get_pixel_size: gint; cdecl;
begin
  Result := Gtk4.gtk_image_get_pixel_size(@self);
end;

function TGtkImage.get_storage_type: TGtkImageType; cdecl;
begin
  Result := Gtk4.gtk_image_get_storage_type(@self);
end;

procedure TGtkImage.set_from_file(filename: Pgchar); cdecl;
begin
  Gtk4.gtk_image_set_from_file(@self, filename);
end;

procedure TGtkImage.set_from_gicon(icon: PGIcon); cdecl;
begin
  Gtk4.gtk_image_set_from_gicon(@self, icon);
end;

procedure TGtkImage.set_from_icon_name(icon_name: Pgchar); cdecl;
begin
  Gtk4.gtk_image_set_from_icon_name(@self, icon_name);
end;

procedure TGtkImage.set_from_paintable(paintable: PGdkPaintable); cdecl;
begin
  Gtk4.gtk_image_set_from_paintable(@self, paintable);
end;

procedure TGtkImage.set_from_pixbuf(pixbuf: PGdkPixbuf); cdecl;
begin
  Gtk4.gtk_image_set_from_pixbuf(@self, pixbuf);
end;

procedure TGtkImage.set_from_resource(resource_path: Pgchar); cdecl;
begin
  Gtk4.gtk_image_set_from_resource(@self, resource_path);
end;

procedure TGtkImage.set_icon_size(icon_size: TGtkIconSize); cdecl;
begin
  Gtk4.gtk_image_set_icon_size(@self, icon_size);
end;

procedure TGtkImage.set_pixel_size(pixel_size: gint); cdecl;
begin
  Gtk4.gtk_image_set_pixel_size(@self, pixel_size);
end;

function TGtkInfoBar.new: PGtkInfoBar; cdecl;
begin
  Result := Gtk4.gtk_info_bar_new();
end;

procedure TGtkInfoBar.add_action_widget(child: PGtkWidget; response_id: gint); cdecl;
begin
  Gtk4.gtk_info_bar_add_action_widget(@self, child, response_id);
end;

function TGtkInfoBar.add_button(button_text: Pgchar; response_id: gint): PGtkButton; cdecl;
begin
  Result := Gtk4.gtk_info_bar_add_button(@self, button_text, response_id);
end;

procedure TGtkInfoBar.add_child(widget: PGtkWidget); cdecl;
begin
  Gtk4.gtk_info_bar_add_child(@self, widget);
end;

function TGtkInfoBar.get_message_type: TGtkMessageType; cdecl;
begin
  Result := Gtk4.gtk_info_bar_get_message_type(@self);
end;

function TGtkInfoBar.get_revealed: gboolean; cdecl;
begin
  Result := Gtk4.gtk_info_bar_get_revealed(@self);
end;

function TGtkInfoBar.get_show_close_button: gboolean; cdecl;
begin
  Result := Gtk4.gtk_info_bar_get_show_close_button(@self);
end;

procedure TGtkInfoBar.remove_action_widget(widget: PGtkWidget); cdecl;
begin
  Gtk4.gtk_info_bar_remove_action_widget(@self, widget);
end;

procedure TGtkInfoBar.remove_child(widget: PGtkWidget); cdecl;
begin
  Gtk4.gtk_info_bar_remove_child(@self, widget);
end;

procedure TGtkInfoBar.response(response_id: gint); cdecl;
begin
  Gtk4.gtk_info_bar_response(@self, response_id);
end;

procedure TGtkInfoBar.set_default_response(response_id: gint); cdecl;
begin
  Gtk4.gtk_info_bar_set_default_response(@self, response_id);
end;

procedure TGtkInfoBar.set_message_type(message_type: TGtkMessageType); cdecl;
begin
  Gtk4.gtk_info_bar_set_message_type(@self, message_type);
end;

procedure TGtkInfoBar.set_response_sensitive(response_id: gint; setting: gboolean); cdecl;
begin
  Gtk4.gtk_info_bar_set_response_sensitive(@self, response_id, setting);
end;

procedure TGtkInfoBar.set_revealed(revealed: gboolean); cdecl;
begin
  Gtk4.gtk_info_bar_set_revealed(@self, revealed);
end;

procedure TGtkInfoBar.set_show_close_button(setting: gboolean); cdecl;
begin
  Gtk4.gtk_info_bar_set_show_close_button(@self, setting);
end;

function TGtkKeyvalTrigger.new(keyval: guint; modifiers: TGdkModifierType): PGtkKeyvalTrigger; cdecl;
begin
  Result := Gtk4.gtk_keyval_trigger_new(keyval, modifiers);
end;

function TGtkKeyvalTrigger.get_keyval: guint; cdecl;
begin
  Result := Gtk4.gtk_keyval_trigger_get_keyval(@self);
end;

function TGtkKeyvalTrigger.get_modifiers: TGdkModifierType; cdecl;
begin
  Result := Gtk4.gtk_keyval_trigger_get_modifiers(@self);
end;

function TGtkLabel.new(str: Pgchar): PGtkLabel; cdecl;
begin
  Result := Gtk4.gtk_label_new(str);
end;

function TGtkLabel.new_with_mnemonic(str: Pgchar): PGtkLabel; cdecl;
begin
  Result := Gtk4.gtk_label_new_with_mnemonic(str);
end;

function TGtkLabel.get_attributes: PPangoAttrList; cdecl;
begin
  Result := Gtk4.gtk_label_get_attributes(@self);
end;

function TGtkLabel.get_current_uri: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_label_get_current_uri(@self);
end;

function TGtkLabel.get_ellipsize: TPangoEllipsizeMode; cdecl;
begin
  Result := Gtk4.gtk_label_get_ellipsize(@self);
end;

function TGtkLabel.get_extra_menu: PGMenuModel; cdecl;
begin
  Result := Gtk4.gtk_label_get_extra_menu(@self);
end;

function TGtkLabel.get_justify: TGtkJustification; cdecl;
begin
  Result := Gtk4.gtk_label_get_justify(@self);
end;

function TGtkLabel.get_label: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_label_get_label(@self);
end;

function TGtkLabel.get_layout: PPangoLayout; cdecl;
begin
  Result := Gtk4.gtk_label_get_layout(@self);
end;

procedure TGtkLabel.get_layout_offsets(x: Pgint; y: Pgint); cdecl;
begin
  Gtk4.gtk_label_get_layout_offsets(@self, x, y);
end;

function TGtkLabel.get_lines: gint; cdecl;
begin
  Result := Gtk4.gtk_label_get_lines(@self);
end;

function TGtkLabel.get_max_width_chars: gint; cdecl;
begin
  Result := Gtk4.gtk_label_get_max_width_chars(@self);
end;

function TGtkLabel.get_mnemonic_keyval: guint; cdecl;
begin
  Result := Gtk4.gtk_label_get_mnemonic_keyval(@self);
end;

function TGtkLabel.get_mnemonic_widget: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_label_get_mnemonic_widget(@self);
end;

function TGtkLabel.get_natural_wrap_mode: TGtkNaturalWrapMode; cdecl;
begin
  Result := Gtk4.gtk_label_get_natural_wrap_mode(@self);
end;

function TGtkLabel.get_selectable: gboolean; cdecl;
begin
  Result := Gtk4.gtk_label_get_selectable(@self);
end;

function TGtkLabel.get_selection_bounds(start: Pgint; end_: Pgint): gboolean; cdecl;
begin
  Result := Gtk4.gtk_label_get_selection_bounds(@self, start, end_);
end;

function TGtkLabel.get_single_line_mode: gboolean; cdecl;
begin
  Result := Gtk4.gtk_label_get_single_line_mode(@self);
end;

function TGtkLabel.get_text: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_label_get_text(@self);
end;

function TGtkLabel.get_use_markup: gboolean; cdecl;
begin
  Result := Gtk4.gtk_label_get_use_markup(@self);
end;

function TGtkLabel.get_use_underline: gboolean; cdecl;
begin
  Result := Gtk4.gtk_label_get_use_underline(@self);
end;

function TGtkLabel.get_width_chars: gint; cdecl;
begin
  Result := Gtk4.gtk_label_get_width_chars(@self);
end;

function TGtkLabel.get_wrap: gboolean; cdecl;
begin
  Result := Gtk4.gtk_label_get_wrap(@self);
end;

function TGtkLabel.get_wrap_mode: TPangoWrapMode; cdecl;
begin
  Result := Gtk4.gtk_label_get_wrap_mode(@self);
end;

function TGtkLabel.get_xalign: gfloat; cdecl;
begin
  Result := Gtk4.gtk_label_get_xalign(@self);
end;

function TGtkLabel.get_yalign: gfloat; cdecl;
begin
  Result := Gtk4.gtk_label_get_yalign(@self);
end;

procedure TGtkLabel.select_region(start_offset: gint; end_offset: gint); cdecl;
begin
  Gtk4.gtk_label_select_region(@self, start_offset, end_offset);
end;

procedure TGtkLabel.set_attributes(attrs: PPangoAttrList); cdecl;
begin
  Gtk4.gtk_label_set_attributes(@self, attrs);
end;

procedure TGtkLabel.set_ellipsize(mode: TPangoEllipsizeMode); cdecl;
begin
  Gtk4.gtk_label_set_ellipsize(@self, mode);
end;

procedure TGtkLabel.set_extra_menu(model: PGMenuModel); cdecl;
begin
  Gtk4.gtk_label_set_extra_menu(@self, model);
end;

procedure TGtkLabel.set_justify(jtype: TGtkJustification); cdecl;
begin
  Gtk4.gtk_label_set_justify(@self, jtype);
end;

procedure TGtkLabel.set_label(str: Pgchar); cdecl;
begin
  Gtk4.gtk_label_set_label(@self, str);
end;

procedure TGtkLabel.set_lines(lines: gint); cdecl;
begin
  Gtk4.gtk_label_set_lines(@self, lines);
end;

procedure TGtkLabel.set_markup(str: Pgchar); cdecl;
begin
  Gtk4.gtk_label_set_markup(@self, str);
end;

procedure TGtkLabel.set_markup_with_mnemonic(str: Pgchar); cdecl;
begin
  Gtk4.gtk_label_set_markup_with_mnemonic(@self, str);
end;

procedure TGtkLabel.set_max_width_chars(n_chars: gint); cdecl;
begin
  Gtk4.gtk_label_set_max_width_chars(@self, n_chars);
end;

procedure TGtkLabel.set_mnemonic_widget(widget: PGtkWidget); cdecl;
begin
  Gtk4.gtk_label_set_mnemonic_widget(@self, widget);
end;

procedure TGtkLabel.set_natural_wrap_mode(wrap_mode: TGtkNaturalWrapMode); cdecl;
begin
  Gtk4.gtk_label_set_natural_wrap_mode(@self, wrap_mode);
end;

procedure TGtkLabel.set_selectable(setting: gboolean); cdecl;
begin
  Gtk4.gtk_label_set_selectable(@self, setting);
end;

procedure TGtkLabel.set_single_line_mode(single_line_mode: gboolean); cdecl;
begin
  Gtk4.gtk_label_set_single_line_mode(@self, single_line_mode);
end;

procedure TGtkLabel.set_text(str: Pgchar); cdecl;
begin
  Gtk4.gtk_label_set_text(@self, str);
end;

procedure TGtkLabel.set_text_with_mnemonic(str: Pgchar); cdecl;
begin
  Gtk4.gtk_label_set_text_with_mnemonic(@self, str);
end;

procedure TGtkLabel.set_use_markup(setting: gboolean); cdecl;
begin
  Gtk4.gtk_label_set_use_markup(@self, setting);
end;

procedure TGtkLabel.set_use_underline(setting: gboolean); cdecl;
begin
  Gtk4.gtk_label_set_use_underline(@self, setting);
end;

procedure TGtkLabel.set_width_chars(n_chars: gint); cdecl;
begin
  Gtk4.gtk_label_set_width_chars(@self, n_chars);
end;

procedure TGtkLabel.set_wrap(wrap: gboolean); cdecl;
begin
  Gtk4.gtk_label_set_wrap(@self, wrap);
end;

procedure TGtkLabel.set_wrap_mode(wrap_mode: TPangoWrapMode); cdecl;
begin
  Gtk4.gtk_label_set_wrap_mode(@self, wrap_mode);
end;

procedure TGtkLabel.set_xalign(xalign: gfloat); cdecl;
begin
  Gtk4.gtk_label_set_xalign(@self, xalign);
end;

procedure TGtkLabel.set_yalign(yalign: gfloat); cdecl;
begin
  Gtk4.gtk_label_set_yalign(@self, yalign);
end;

function TGtkLayoutChild.get_child_widget: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_layout_child_get_child_widget(@self);
end;

function TGtkLayoutChild.get_layout_manager: PGtkLayoutManager; cdecl;
begin
  Result := Gtk4.gtk_layout_child_get_layout_manager(@self);
end;

function TGtkLevelBar.new: PGtkLevelBar; cdecl;
begin
  Result := Gtk4.gtk_level_bar_new();
end;

function TGtkLevelBar.new_for_interval(min_value: gdouble; max_value: gdouble): PGtkLevelBar; cdecl;
begin
  Result := Gtk4.gtk_level_bar_new_for_interval(min_value, max_value);
end;

procedure TGtkLevelBar.add_offset_value(name: Pgchar; value: gdouble); cdecl;
begin
  Gtk4.gtk_level_bar_add_offset_value(@self, name, value);
end;

function TGtkLevelBar.get_inverted: gboolean; cdecl;
begin
  Result := Gtk4.gtk_level_bar_get_inverted(@self);
end;

function TGtkLevelBar.get_max_value: gdouble; cdecl;
begin
  Result := Gtk4.gtk_level_bar_get_max_value(@self);
end;

function TGtkLevelBar.get_min_value: gdouble; cdecl;
begin
  Result := Gtk4.gtk_level_bar_get_min_value(@self);
end;

function TGtkLevelBar.get_mode: TGtkLevelBarMode; cdecl;
begin
  Result := Gtk4.gtk_level_bar_get_mode(@self);
end;

function TGtkLevelBar.get_offset_value(name: Pgchar; value: Pgdouble): gboolean; cdecl;
begin
  Result := Gtk4.gtk_level_bar_get_offset_value(@self, name, value);
end;

function TGtkLevelBar.get_value: gdouble; cdecl;
begin
  Result := Gtk4.gtk_level_bar_get_value(@self);
end;

procedure TGtkLevelBar.remove_offset_value(name: Pgchar); cdecl;
begin
  Gtk4.gtk_level_bar_remove_offset_value(@self, name);
end;

procedure TGtkLevelBar.set_inverted(inverted: gboolean); cdecl;
begin
  Gtk4.gtk_level_bar_set_inverted(@self, inverted);
end;

procedure TGtkLevelBar.set_max_value(value: gdouble); cdecl;
begin
  Gtk4.gtk_level_bar_set_max_value(@self, value);
end;

procedure TGtkLevelBar.set_min_value(value: gdouble); cdecl;
begin
  Gtk4.gtk_level_bar_set_min_value(@self, value);
end;

procedure TGtkLevelBar.set_mode(mode: TGtkLevelBarMode); cdecl;
begin
  Gtk4.gtk_level_bar_set_mode(@self, mode);
end;

procedure TGtkLevelBar.set_value(value: gdouble); cdecl;
begin
  Gtk4.gtk_level_bar_set_value(@self, value);
end;

function TGtkLinkButton.new(uri: Pgchar): PGtkLinkButton; cdecl;
begin
  Result := Gtk4.gtk_link_button_new(uri);
end;

function TGtkLinkButton.new_with_label(uri: Pgchar; label_: Pgchar): PGtkLinkButton; cdecl;
begin
  Result := Gtk4.gtk_link_button_new_with_label(uri, label_);
end;

function TGtkLinkButton.get_uri: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_link_button_get_uri(@self);
end;

function TGtkLinkButton.get_visited: gboolean; cdecl;
begin
  Result := Gtk4.gtk_link_button_get_visited(@self);
end;

procedure TGtkLinkButton.set_uri(uri: Pgchar); cdecl;
begin
  Gtk4.gtk_link_button_set_uri(@self, uri);
end;

procedure TGtkLinkButton.set_visited(visited: gboolean); cdecl;
begin
  Gtk4.gtk_link_button_set_visited(@self, visited);
end;

function TGtkListBox.new: PGtkListBox; cdecl;
begin
  Result := Gtk4.gtk_list_box_new();
end;

procedure TGtkListBox.append(child: PGtkWidget); cdecl;
begin
  Gtk4.gtk_list_box_append(@self, child);
end;

procedure TGtkListBox.bind_model(model: PGListModel; create_widget_func: TGtkListBoxCreateWidgetFunc; user_data: gpointer; user_data_free_func: TGDestroyNotify); cdecl;
begin
  Gtk4.gtk_list_box_bind_model(@self, model, create_widget_func, user_data, user_data_free_func);
end;

procedure TGtkListBox.drag_highlight_row(row: PGtkListBoxRow); cdecl;
begin
  Gtk4.gtk_list_box_drag_highlight_row(@self, row);
end;

procedure TGtkListBox.drag_unhighlight_row; cdecl;
begin
  Gtk4.gtk_list_box_drag_unhighlight_row(@self);
end;

function TGtkListBox.get_activate_on_single_click: gboolean; cdecl;
begin
  Result := Gtk4.gtk_list_box_get_activate_on_single_click(@self);
end;

function TGtkListBox.get_adjustment: PGtkAdjustment; cdecl;
begin
  Result := Gtk4.gtk_list_box_get_adjustment(@self);
end;

function TGtkListBox.get_row_at_index(index_: gint): PGtkListBoxRow; cdecl;
begin
  Result := Gtk4.gtk_list_box_get_row_at_index(@self, index_);
end;

function TGtkListBox.get_row_at_y(y: gint): PGtkListBoxRow; cdecl;
begin
  Result := Gtk4.gtk_list_box_get_row_at_y(@self, y);
end;

function TGtkListBox.get_selected_row: PGtkListBoxRow; cdecl;
begin
  Result := Gtk4.gtk_list_box_get_selected_row(@self);
end;

function TGtkListBox.get_selected_rows: PGList; cdecl;
begin
  Result := Gtk4.gtk_list_box_get_selected_rows(@self);
end;

function TGtkListBox.get_selection_mode: TGtkSelectionMode; cdecl;
begin
  Result := Gtk4.gtk_list_box_get_selection_mode(@self);
end;

function TGtkListBox.get_show_separators: gboolean; cdecl;
begin
  Result := Gtk4.gtk_list_box_get_show_separators(@self);
end;

procedure TGtkListBox.insert(child: PGtkWidget; position: gint); cdecl;
begin
  Gtk4.gtk_list_box_insert(@self, child, position);
end;

procedure TGtkListBox.invalidate_filter; cdecl;
begin
  Gtk4.gtk_list_box_invalidate_filter(@self);
end;

procedure TGtkListBox.invalidate_headers; cdecl;
begin
  Gtk4.gtk_list_box_invalidate_headers(@self);
end;

procedure TGtkListBox.invalidate_sort; cdecl;
begin
  Gtk4.gtk_list_box_invalidate_sort(@self);
end;

procedure TGtkListBox.prepend(child: PGtkWidget); cdecl;
begin
  Gtk4.gtk_list_box_prepend(@self, child);
end;

procedure TGtkListBox.remove(child: PGtkWidget); cdecl;
begin
  Gtk4.gtk_list_box_remove(@self, child);
end;

procedure TGtkListBox.select_all; cdecl;
begin
  Gtk4.gtk_list_box_select_all(@self);
end;

procedure TGtkListBox.select_row(row: PGtkListBoxRow); cdecl;
begin
  Gtk4.gtk_list_box_select_row(@self, row);
end;

procedure TGtkListBox.selected_foreach(func: TGtkListBoxForeachFunc; data: gpointer); cdecl;
begin
  Gtk4.gtk_list_box_selected_foreach(@self, func, data);
end;

procedure TGtkListBox.set_activate_on_single_click(single: gboolean); cdecl;
begin
  Gtk4.gtk_list_box_set_activate_on_single_click(@self, single);
end;

procedure TGtkListBox.set_adjustment(adjustment: PGtkAdjustment); cdecl;
begin
  Gtk4.gtk_list_box_set_adjustment(@self, adjustment);
end;

procedure TGtkListBox.set_filter_func(filter_func: TGtkListBoxFilterFunc; user_data: gpointer; destroy_: TGDestroyNotify); cdecl;
begin
  Gtk4.gtk_list_box_set_filter_func(@self, filter_func, user_data, destroy_);
end;

procedure TGtkListBox.set_header_func(update_header: TGtkListBoxUpdateHeaderFunc; user_data: gpointer; destroy_: TGDestroyNotify); cdecl;
begin
  Gtk4.gtk_list_box_set_header_func(@self, update_header, user_data, destroy_);
end;

procedure TGtkListBox.set_placeholder(placeholder: PGtkWidget); cdecl;
begin
  Gtk4.gtk_list_box_set_placeholder(@self, placeholder);
end;

procedure TGtkListBox.set_selection_mode(mode: TGtkSelectionMode); cdecl;
begin
  Gtk4.gtk_list_box_set_selection_mode(@self, mode);
end;

procedure TGtkListBox.set_show_separators(show_separators: gboolean); cdecl;
begin
  Gtk4.gtk_list_box_set_show_separators(@self, show_separators);
end;

procedure TGtkListBox.set_sort_func(sort_func: TGtkListBoxSortFunc; user_data: gpointer; destroy_: TGDestroyNotify); cdecl;
begin
  Gtk4.gtk_list_box_set_sort_func(@self, sort_func, user_data, destroy_);
end;

procedure TGtkListBox.unselect_all; cdecl;
begin
  Gtk4.gtk_list_box_unselect_all(@self);
end;

procedure TGtkListBox.unselect_row(row: PGtkListBoxRow); cdecl;
begin
  Gtk4.gtk_list_box_unselect_row(@self, row);
end;

function TGtkListBoxRow.new: PGtkListBoxRow; cdecl;
begin
  Result := Gtk4.gtk_list_box_row_new();
end;

procedure TGtkListBoxRow.changed; cdecl;
begin
  Gtk4.gtk_list_box_row_changed(@self);
end;

function TGtkListBoxRow.get_activatable: gboolean; cdecl;
begin
  Result := Gtk4.gtk_list_box_row_get_activatable(@self);
end;

function TGtkListBoxRow.get_child: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_list_box_row_get_child(@self);
end;

function TGtkListBoxRow.get_header: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_list_box_row_get_header(@self);
end;

function TGtkListBoxRow.get_index: gint; cdecl;
begin
  Result := Gtk4.gtk_list_box_row_get_index(@self);
end;

function TGtkListBoxRow.get_selectable: gboolean; cdecl;
begin
  Result := Gtk4.gtk_list_box_row_get_selectable(@self);
end;

function TGtkListBoxRow.is_selected: gboolean; cdecl;
begin
  Result := Gtk4.gtk_list_box_row_is_selected(@self);
end;

procedure TGtkListBoxRow.set_activatable(activatable: gboolean); cdecl;
begin
  Gtk4.gtk_list_box_row_set_activatable(@self, activatable);
end;

procedure TGtkListBoxRow.set_child(child: PGtkWidget); cdecl;
begin
  Gtk4.gtk_list_box_row_set_child(@self, child);
end;

procedure TGtkListBoxRow.set_header(header: PGtkWidget); cdecl;
begin
  Gtk4.gtk_list_box_row_set_header(@self, header);
end;

procedure TGtkListBoxRow.set_selectable(selectable: gboolean); cdecl;
begin
  Gtk4.gtk_list_box_row_set_selectable(@self, selectable);
end;

function TGtkListItem.get_activatable: gboolean; cdecl;
begin
  Result := Gtk4.gtk_list_item_get_activatable(@self);
end;

function TGtkListItem.get_child: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_list_item_get_child(@self);
end;

function TGtkListItem.get_item: PGObject; cdecl;
begin
  Result := Gtk4.gtk_list_item_get_item(@self);
end;

function TGtkListItem.get_position: guint; cdecl;
begin
  Result := Gtk4.gtk_list_item_get_position(@self);
end;

function TGtkListItem.get_selectable: gboolean; cdecl;
begin
  Result := Gtk4.gtk_list_item_get_selectable(@self);
end;

function TGtkListItem.get_selected: gboolean; cdecl;
begin
  Result := Gtk4.gtk_list_item_get_selected(@self);
end;

procedure TGtkListItem.set_activatable(activatable: gboolean); cdecl;
begin
  Gtk4.gtk_list_item_set_activatable(@self, activatable);
end;

procedure TGtkListItem.set_child(child: PGtkWidget); cdecl;
begin
  Gtk4.gtk_list_item_set_child(@self, child);
end;

procedure TGtkListItem.set_selectable(selectable: gboolean); cdecl;
begin
  Gtk4.gtk_list_item_set_selectable(@self, selectable);
end;

function TGtkTreeDragDest.drag_data_received(dest: PGtkTreePath; value: PGValue): gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_drag_dest_drag_data_received(@self, dest, value);
end;

function TGtkTreeDragDest.row_drop_possible(dest_path: PGtkTreePath; value: PGValue): gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_drag_dest_row_drop_possible(@self, dest_path, value);
end;

function TGtkTreeDragSource.drag_data_delete(path: PGtkTreePath): gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_drag_source_drag_data_delete(@self, path);
end;

function TGtkTreeDragSource.drag_data_get(path: PGtkTreePath): PGdkContentProvider; cdecl;
begin
  Result := Gtk4.gtk_tree_drag_source_drag_data_get(@self, path);
end;

function TGtkTreeDragSource.row_draggable(path: PGtkTreePath): gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_drag_source_row_draggable(@self, path);
end;

function TGtkTreeSortable.get_sort_column_id(sort_column_id: Pgint; order: PGtkSortType): gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_sortable_get_sort_column_id(@self, sort_column_id, order);
end;

function TGtkTreeSortable.has_default_sort_func: gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_sortable_has_default_sort_func(@self);
end;

procedure TGtkTreeSortable.set_default_sort_func(sort_func: TGtkTreeIterCompareFunc; user_data: gpointer; destroy_: TGDestroyNotify); cdecl;
begin
  Gtk4.gtk_tree_sortable_set_default_sort_func(@self, sort_func, user_data, destroy_);
end;

procedure TGtkTreeSortable.set_sort_column_id(sort_column_id: gint; order: TGtkSortType); cdecl;
begin
  Gtk4.gtk_tree_sortable_set_sort_column_id(@self, sort_column_id, order);
end;

procedure TGtkTreeSortable.set_sort_func(sort_column_id: gint; sort_func: TGtkTreeIterCompareFunc; user_data: gpointer; destroy_: TGDestroyNotify); cdecl;
begin
  Gtk4.gtk_tree_sortable_set_sort_func(@self, sort_column_id, sort_func, user_data, destroy_);
end;

procedure TGtkTreeSortable.sort_column_changed; cdecl;
begin
  Gtk4.gtk_tree_sortable_sort_column_changed(@self);
end;

function TGtkListStore.newv(n_columns: gint; types: PGType): PGtkListStore; cdecl;
begin
  Result := Gtk4.gtk_list_store_newv(n_columns, types);
end;

procedure TGtkListStore.append(iter: PGtkTreeIter); cdecl;
begin
  Gtk4.gtk_list_store_append(@self, iter);
end;

procedure TGtkListStore.clear; cdecl;
begin
  Gtk4.gtk_list_store_clear(@self);
end;

procedure TGtkListStore.insert(iter: PGtkTreeIter; position: gint); cdecl;
begin
  Gtk4.gtk_list_store_insert(@self, iter, position);
end;

procedure TGtkListStore.insert_after(iter: PGtkTreeIter; sibling: PGtkTreeIter); cdecl;
begin
  Gtk4.gtk_list_store_insert_after(@self, iter, sibling);
end;

procedure TGtkListStore.insert_before(iter: PGtkTreeIter; sibling: PGtkTreeIter); cdecl;
begin
  Gtk4.gtk_list_store_insert_before(@self, iter, sibling);
end;

procedure TGtkListStore.insert_with_valuesv(iter: PGtkTreeIter; position: gint; columns: Pgint; values: PGValue; n_values: gint); cdecl;
begin
  Gtk4.gtk_list_store_insert_with_valuesv(@self, iter, position, columns, values, n_values);
end;

function TGtkListStore.iter_is_valid(iter: PGtkTreeIter): gboolean; cdecl;
begin
  Result := Gtk4.gtk_list_store_iter_is_valid(@self, iter);
end;

procedure TGtkListStore.move_after(iter: PGtkTreeIter; position: PGtkTreeIter); cdecl;
begin
  Gtk4.gtk_list_store_move_after(@self, iter, position);
end;

procedure TGtkListStore.move_before(iter: PGtkTreeIter; position: PGtkTreeIter); cdecl;
begin
  Gtk4.gtk_list_store_move_before(@self, iter, position);
end;

procedure TGtkListStore.prepend(iter: PGtkTreeIter); cdecl;
begin
  Gtk4.gtk_list_store_prepend(@self, iter);
end;

function TGtkListStore.remove(iter: PGtkTreeIter): gboolean; cdecl;
begin
  Result := Gtk4.gtk_list_store_remove(@self, iter);
end;

procedure TGtkListStore.reorder(new_order: Pgint); cdecl;
begin
  Gtk4.gtk_list_store_reorder(@self, new_order);
end;

procedure TGtkListStore.set_column_types(n_columns: gint; types: PGType); cdecl;
begin
  Gtk4.gtk_list_store_set_column_types(@self, n_columns, types);
end;

procedure TGtkListStore.set_value(iter: PGtkTreeIter; column: gint; value: PGValue); cdecl;
begin
  Gtk4.gtk_list_store_set_value(@self, iter, column, value);
end;

procedure TGtkListStore.set_valuesv(iter: PGtkTreeIter; columns: Pgint; values: PGValue; n_values: gint); cdecl;
begin
  Gtk4.gtk_list_store_set_valuesv(@self, iter, columns, values, n_values);
end;

procedure TGtkListStore.swap(a: PGtkTreeIter; b: PGtkTreeIter); cdecl;
begin
  Gtk4.gtk_list_store_swap(@self, a, b);
end;

function TGtkListView.new(model: PGtkSelectionModel; factory: PGtkListItemFactory): PGtkListView; cdecl;
begin
  Result := Gtk4.gtk_list_view_new(model, factory);
end;

function TGtkListView.get_enable_rubberband: gboolean; cdecl;
begin
  Result := Gtk4.gtk_list_view_get_enable_rubberband(@self);
end;

function TGtkListView.get_factory: PGtkListItemFactory; cdecl;
begin
  Result := Gtk4.gtk_list_view_get_factory(@self);
end;

function TGtkListView.get_model: PGtkSelectionModel; cdecl;
begin
  Result := Gtk4.gtk_list_view_get_model(@self);
end;

function TGtkListView.get_show_separators: gboolean; cdecl;
begin
  Result := Gtk4.gtk_list_view_get_show_separators(@self);
end;

function TGtkListView.get_single_click_activate: gboolean; cdecl;
begin
  Result := Gtk4.gtk_list_view_get_single_click_activate(@self);
end;

procedure TGtkListView.set_enable_rubberband(enable_rubberband: gboolean); cdecl;
begin
  Gtk4.gtk_list_view_set_enable_rubberband(@self, enable_rubberband);
end;

procedure TGtkListView.set_factory(factory: PGtkListItemFactory); cdecl;
begin
  Gtk4.gtk_list_view_set_factory(@self, factory);
end;

procedure TGtkListView.set_model(model: PGtkSelectionModel); cdecl;
begin
  Gtk4.gtk_list_view_set_model(@self, model);
end;

procedure TGtkListView.set_show_separators(show_separators: gboolean); cdecl;
begin
  Gtk4.gtk_list_view_set_show_separators(@self, show_separators);
end;

procedure TGtkListView.set_single_click_activate(single_click_activate: gboolean); cdecl;
begin
  Gtk4.gtk_list_view_set_single_click_activate(@self, single_click_activate);
end;

function TGtkLockButton.new(permission: PGPermission): PGtkLockButton; cdecl;
begin
  Result := Gtk4.gtk_lock_button_new(permission);
end;

function TGtkLockButton.get_permission: PGPermission; cdecl;
begin
  Result := Gtk4.gtk_lock_button_get_permission(@self);
end;

procedure TGtkLockButton.set_permission(permission: PGPermission); cdecl;
begin
  Gtk4.gtk_lock_button_set_permission(@self, permission);
end;

function TGtkMapListModel.new(model: PGListModel; map_func: TGtkMapListModelMapFunc; user_data: gpointer; user_destroy: TGDestroyNotify): PGtkMapListModel; cdecl;
begin
  Result := Gtk4.gtk_map_list_model_new(model, map_func, user_data, user_destroy);
end;

function TGtkMapListModel.get_model: PGListModel; cdecl;
begin
  Result := Gtk4.gtk_map_list_model_get_model(@self);
end;

function TGtkMapListModel.has_map: gboolean; cdecl;
begin
  Result := Gtk4.gtk_map_list_model_has_map(@self);
end;

procedure TGtkMapListModel.set_map_func(map_func: TGtkMapListModelMapFunc; user_data: gpointer; user_destroy: TGDestroyNotify); cdecl;
begin
  Gtk4.gtk_map_list_model_set_map_func(@self, map_func, user_data, user_destroy);
end;

procedure TGtkMapListModel.set_model(model: PGListModel); cdecl;
begin
  Gtk4.gtk_map_list_model_set_model(@self, model);
end;

procedure TGtkMediaStream.gerror(error: PGError); cdecl;
begin
  Gtk4.gtk_media_stream_gerror(@self, error);
end;

function TGtkMediaStream.get_duration: gint64; cdecl;
begin
  Result := Gtk4.gtk_media_stream_get_duration(@self);
end;

function TGtkMediaStream.get_ended: gboolean; cdecl;
begin
  Result := Gtk4.gtk_media_stream_get_ended(@self);
end;

function TGtkMediaStream.get_error: PGError; cdecl;
begin
  Result := Gtk4.gtk_media_stream_get_error(@self);
end;

function TGtkMediaStream.get_loop: gboolean; cdecl;
begin
  Result := Gtk4.gtk_media_stream_get_loop(@self);
end;

function TGtkMediaStream.get_muted: gboolean; cdecl;
begin
  Result := Gtk4.gtk_media_stream_get_muted(@self);
end;

function TGtkMediaStream.get_playing: gboolean; cdecl;
begin
  Result := Gtk4.gtk_media_stream_get_playing(@self);
end;

function TGtkMediaStream.get_timestamp: gint64; cdecl;
begin
  Result := Gtk4.gtk_media_stream_get_timestamp(@self);
end;

function TGtkMediaStream.get_volume: gdouble; cdecl;
begin
  Result := Gtk4.gtk_media_stream_get_volume(@self);
end;

function TGtkMediaStream.has_audio: gboolean; cdecl;
begin
  Result := Gtk4.gtk_media_stream_has_audio(@self);
end;

function TGtkMediaStream.has_video: gboolean; cdecl;
begin
  Result := Gtk4.gtk_media_stream_has_video(@self);
end;

function TGtkMediaStream.is_prepared: gboolean; cdecl;
begin
  Result := Gtk4.gtk_media_stream_is_prepared(@self);
end;

function TGtkMediaStream.is_seekable: gboolean; cdecl;
begin
  Result := Gtk4.gtk_media_stream_is_seekable(@self);
end;

function TGtkMediaStream.is_seeking: gboolean; cdecl;
begin
  Result := Gtk4.gtk_media_stream_is_seeking(@self);
end;

procedure TGtkMediaStream.pause; cdecl;
begin
  Gtk4.gtk_media_stream_pause(@self);
end;

procedure TGtkMediaStream.play; cdecl;
begin
  Gtk4.gtk_media_stream_play(@self);
end;

procedure TGtkMediaStream.realize(surface: PGdkSurface); cdecl;
begin
  Gtk4.gtk_media_stream_realize(@self, surface);
end;

procedure TGtkMediaStream.seek(timestamp: gint64); cdecl;
begin
  Gtk4.gtk_media_stream_seek(@self, timestamp);
end;

procedure TGtkMediaStream.seek_failed; cdecl;
begin
  Gtk4.gtk_media_stream_seek_failed(@self);
end;

procedure TGtkMediaStream.seek_success; cdecl;
begin
  Gtk4.gtk_media_stream_seek_success(@self);
end;

procedure TGtkMediaStream.set_loop(loop: gboolean); cdecl;
begin
  Gtk4.gtk_media_stream_set_loop(@self, loop);
end;

procedure TGtkMediaStream.set_muted(muted: gboolean); cdecl;
begin
  Gtk4.gtk_media_stream_set_muted(@self, muted);
end;

procedure TGtkMediaStream.set_playing(playing: gboolean); cdecl;
begin
  Gtk4.gtk_media_stream_set_playing(@self, playing);
end;

procedure TGtkMediaStream.set_volume(volume: gdouble); cdecl;
begin
  Gtk4.gtk_media_stream_set_volume(@self, volume);
end;

procedure TGtkMediaStream.stream_ended; cdecl;
begin
  Gtk4.gtk_media_stream_stream_ended(@self);
end;

procedure TGtkMediaStream.stream_prepared(has_audio: gboolean; has_video: gboolean; seekable: gboolean; duration: gint64); cdecl;
begin
  Gtk4.gtk_media_stream_stream_prepared(@self, has_audio, has_video, seekable, duration);
end;

procedure TGtkMediaStream.stream_unprepared; cdecl;
begin
  Gtk4.gtk_media_stream_stream_unprepared(@self);
end;

procedure TGtkMediaStream.unrealize(surface: PGdkSurface); cdecl;
begin
  Gtk4.gtk_media_stream_unrealize(@self, surface);
end;

procedure TGtkMediaStream.update(timestamp: gint64); cdecl;
begin
  Gtk4.gtk_media_stream_update(@self, timestamp);
end;

function TGtkMediaControls.new(stream: PGtkMediaStream): PGtkMediaControls; cdecl;
begin
  Result := Gtk4.gtk_media_controls_new(stream);
end;

function TGtkMediaControls.get_media_stream: PGtkMediaStream; cdecl;
begin
  Result := Gtk4.gtk_media_controls_get_media_stream(@self);
end;

procedure TGtkMediaControls.set_media_stream(stream: PGtkMediaStream); cdecl;
begin
  Gtk4.gtk_media_controls_set_media_stream(@self, stream);
end;

function TGtkMediaFile.new: PGtkMediaFile; cdecl;
begin
  Result := Gtk4.gtk_media_file_new();
end;

function TGtkMediaFile.new_for_file(file_: PGFile): PGtkMediaFile; cdecl;
begin
  Result := Gtk4.gtk_media_file_new_for_file(file_);
end;

function TGtkMediaFile.new_for_filename(filename: Pgchar): PGtkMediaFile; cdecl;
begin
  Result := Gtk4.gtk_media_file_new_for_filename(filename);
end;

function TGtkMediaFile.new_for_input_stream(stream: PGInputStream): PGtkMediaFile; cdecl;
begin
  Result := Gtk4.gtk_media_file_new_for_input_stream(stream);
end;

function TGtkMediaFile.new_for_resource(resource_path: Pgchar): PGtkMediaFile; cdecl;
begin
  Result := Gtk4.gtk_media_file_new_for_resource(resource_path);
end;

procedure TGtkMediaFile.clear; cdecl;
begin
  Gtk4.gtk_media_file_clear(@self);
end;

function TGtkMediaFile.get_file: PGFile; cdecl;
begin
  Result := Gtk4.gtk_media_file_get_file(@self);
end;

function TGtkMediaFile.get_input_stream: PGInputStream; cdecl;
begin
  Result := Gtk4.gtk_media_file_get_input_stream(@self);
end;

procedure TGtkMediaFile.set_file(file_: PGFile); cdecl;
begin
  Gtk4.gtk_media_file_set_file(@self, file_);
end;

procedure TGtkMediaFile.set_filename(filename: Pgchar); cdecl;
begin
  Gtk4.gtk_media_file_set_filename(@self, filename);
end;

procedure TGtkMediaFile.set_input_stream(stream: PGInputStream); cdecl;
begin
  Gtk4.gtk_media_file_set_input_stream(@self, stream);
end;

procedure TGtkMediaFile.set_resource(resource_path: Pgchar); cdecl;
begin
  Gtk4.gtk_media_file_set_resource(@self, resource_path);
end;

function TGtkMenuButton.new: PGtkMenuButton; cdecl;
begin
  Result := Gtk4.gtk_menu_button_new();
end;

function TGtkMenuButton.get_always_show_arrow: gboolean; cdecl;
begin
  Result := Gtk4.gtk_menu_button_get_always_show_arrow(@self);
end;

function TGtkMenuButton.get_child: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_menu_button_get_child(@self);
end;

function TGtkMenuButton.get_direction: TGtkArrowType; cdecl;
begin
  Result := Gtk4.gtk_menu_button_get_direction(@self);
end;

function TGtkMenuButton.get_has_frame: gboolean; cdecl;
begin
  Result := Gtk4.gtk_menu_button_get_has_frame(@self);
end;

function TGtkMenuButton.get_icon_name: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_menu_button_get_icon_name(@self);
end;

function TGtkMenuButton.get_label: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_menu_button_get_label(@self);
end;

function TGtkMenuButton.get_menu_model: PGMenuModel; cdecl;
begin
  Result := Gtk4.gtk_menu_button_get_menu_model(@self);
end;

function TGtkMenuButton.get_popover: PGtkPopover; cdecl;
begin
  Result := Gtk4.gtk_menu_button_get_popover(@self);
end;

function TGtkMenuButton.get_primary: gboolean; cdecl;
begin
  Result := Gtk4.gtk_menu_button_get_primary(@self);
end;

function TGtkMenuButton.get_use_underline: gboolean; cdecl;
begin
  Result := Gtk4.gtk_menu_button_get_use_underline(@self);
end;

procedure TGtkMenuButton.popdown; cdecl;
begin
  Gtk4.gtk_menu_button_popdown(@self);
end;

procedure TGtkMenuButton.popup; cdecl;
begin
  Gtk4.gtk_menu_button_popup(@self);
end;

procedure TGtkMenuButton.set_always_show_arrow(always_show_arrow: gboolean); cdecl;
begin
  Gtk4.gtk_menu_button_set_always_show_arrow(@self, always_show_arrow);
end;

procedure TGtkMenuButton.set_child(child: PGtkWidget); cdecl;
begin
  Gtk4.gtk_menu_button_set_child(@self, child);
end;

procedure TGtkMenuButton.set_create_popup_func(func: TGtkMenuButtonCreatePopupFunc; user_data: gpointer; destroy_notify: TGDestroyNotify); cdecl;
begin
  Gtk4.gtk_menu_button_set_create_popup_func(@self, func, user_data, destroy_notify);
end;

procedure TGtkMenuButton.set_direction(direction: TGtkArrowType); cdecl;
begin
  Gtk4.gtk_menu_button_set_direction(@self, direction);
end;

procedure TGtkMenuButton.set_has_frame(has_frame: gboolean); cdecl;
begin
  Gtk4.gtk_menu_button_set_has_frame(@self, has_frame);
end;

procedure TGtkMenuButton.set_icon_name(icon_name: Pgchar); cdecl;
begin
  Gtk4.gtk_menu_button_set_icon_name(@self, icon_name);
end;

procedure TGtkMenuButton.set_label(label_: Pgchar); cdecl;
begin
  Gtk4.gtk_menu_button_set_label(@self, label_);
end;

procedure TGtkMenuButton.set_menu_model(menu_model: PGMenuModel); cdecl;
begin
  Gtk4.gtk_menu_button_set_menu_model(@self, menu_model);
end;

procedure TGtkMenuButton.set_popover(popover: PGtkWidget); cdecl;
begin
  Gtk4.gtk_menu_button_set_popover(@self, popover);
end;

procedure TGtkMenuButton.set_primary(primary: gboolean); cdecl;
begin
  Gtk4.gtk_menu_button_set_primary(@self, primary);
end;

procedure TGtkMenuButton.set_use_underline(use_underline: gboolean); cdecl;
begin
  Gtk4.gtk_menu_button_set_use_underline(@self, use_underline);
end;

function TGtkPopover.new: PGtkPopover; cdecl;
begin
  Result := Gtk4.gtk_popover_new();
end;

function TGtkPopover.get_autohide: gboolean; cdecl;
begin
  Result := Gtk4.gtk_popover_get_autohide(@self);
end;

function TGtkPopover.get_cascade_popdown: gboolean; cdecl;
begin
  Result := Gtk4.gtk_popover_get_cascade_popdown(@self);
end;

function TGtkPopover.get_child: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_popover_get_child(@self);
end;

function TGtkPopover.get_has_arrow: gboolean; cdecl;
begin
  Result := Gtk4.gtk_popover_get_has_arrow(@self);
end;

function TGtkPopover.get_mnemonics_visible: gboolean; cdecl;
begin
  Result := Gtk4.gtk_popover_get_mnemonics_visible(@self);
end;

procedure TGtkPopover.get_offset(x_offset: Pgint; y_offset: Pgint); cdecl;
begin
  Gtk4.gtk_popover_get_offset(@self, x_offset, y_offset);
end;

function TGtkPopover.get_pointing_to(rect: PGdkRectangle): gboolean; cdecl;
begin
  Result := Gtk4.gtk_popover_get_pointing_to(@self, rect);
end;

function TGtkPopover.get_position: TGtkPositionType; cdecl;
begin
  Result := Gtk4.gtk_popover_get_position(@self);
end;

procedure TGtkPopover.popdown; cdecl;
begin
  Gtk4.gtk_popover_popdown(@self);
end;

procedure TGtkPopover.popup; cdecl;
begin
  Gtk4.gtk_popover_popup(@self);
end;

procedure TGtkPopover.present; cdecl;
begin
  Gtk4.gtk_popover_present(@self);
end;

procedure TGtkPopover.set_autohide(autohide: gboolean); cdecl;
begin
  Gtk4.gtk_popover_set_autohide(@self, autohide);
end;

procedure TGtkPopover.set_cascade_popdown(cascade_popdown: gboolean); cdecl;
begin
  Gtk4.gtk_popover_set_cascade_popdown(@self, cascade_popdown);
end;

procedure TGtkPopover.set_child(child: PGtkWidget); cdecl;
begin
  Gtk4.gtk_popover_set_child(@self, child);
end;

procedure TGtkPopover.set_default_widget(widget: PGtkWidget); cdecl;
begin
  Gtk4.gtk_popover_set_default_widget(@self, widget);
end;

procedure TGtkPopover.set_has_arrow(has_arrow: gboolean); cdecl;
begin
  Gtk4.gtk_popover_set_has_arrow(@self, has_arrow);
end;

procedure TGtkPopover.set_mnemonics_visible(mnemonics_visible: gboolean); cdecl;
begin
  Gtk4.gtk_popover_set_mnemonics_visible(@self, mnemonics_visible);
end;

procedure TGtkPopover.set_offset(x_offset: gint; y_offset: gint); cdecl;
begin
  Gtk4.gtk_popover_set_offset(@self, x_offset, y_offset);
end;

procedure TGtkPopover.set_pointing_to(rect: PGdkRectangle); cdecl;
begin
  Gtk4.gtk_popover_set_pointing_to(@self, rect);
end;

procedure TGtkPopover.set_position(position: TGtkPositionType); cdecl;
begin
  Gtk4.gtk_popover_set_position(@self, position);
end;

function TGtkMessageDialog.get_message_area: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_message_dialog_get_message_area(@self);
end;

procedure TGtkMessageDialog.set_markup(str: Pgchar); cdecl;
begin
  Gtk4.gtk_message_dialog_set_markup(@self, str);
end;

function TGtkMnemonicAction.get: PGtkMnemonicAction; cdecl;
begin
  Result := Gtk4.gtk_mnemonic_action_get();
end;

function TGtkMnemonicTrigger.new(keyval: guint): PGtkMnemonicTrigger; cdecl;
begin
  Result := Gtk4.gtk_mnemonic_trigger_new(keyval);
end;

function TGtkMnemonicTrigger.get_keyval: guint; cdecl;
begin
  Result := Gtk4.gtk_mnemonic_trigger_get_keyval(@self);
end;

function TGtkMountOperation.new(parent: PGtkWindow): PGtkMountOperation; cdecl;
begin
  Result := Gtk4.gtk_mount_operation_new(parent);
end;

function TGtkMountOperation.get_display: PGdkDisplay; cdecl;
begin
  Result := Gtk4.gtk_mount_operation_get_display(@self);
end;

function TGtkMountOperation.get_parent: PGtkWindow; cdecl;
begin
  Result := Gtk4.gtk_mount_operation_get_parent(@self);
end;

function TGtkMountOperation.is_showing: gboolean; cdecl;
begin
  Result := Gtk4.gtk_mount_operation_is_showing(@self);
end;

procedure TGtkMountOperation.set_display(display: PGdkDisplay); cdecl;
begin
  Gtk4.gtk_mount_operation_set_display(@self, display);
end;

procedure TGtkMountOperation.set_parent(parent: PGtkWindow); cdecl;
begin
  Gtk4.gtk_mount_operation_set_parent(@self, parent);
end;

procedure TGtkMultiFilter.append(filter: PGtkFilter); cdecl;
begin
  Gtk4.gtk_multi_filter_append(@self, filter);
end;

procedure TGtkMultiFilter.remove(position: guint); cdecl;
begin
  Gtk4.gtk_multi_filter_remove(@self, position);
end;

function TGtkMultiSelection.new(model: PGListModel): PGtkMultiSelection; cdecl;
begin
  Result := Gtk4.gtk_multi_selection_new(model);
end;

function TGtkMultiSelection.get_model: PGListModel; cdecl;
begin
  Result := Gtk4.gtk_multi_selection_get_model(@self);
end;

procedure TGtkMultiSelection.set_model(model: PGListModel); cdecl;
begin
  Gtk4.gtk_multi_selection_set_model(@self, model);
end;

function TGtkMultiSorter.new: PGtkMultiSorter; cdecl;
begin
  Result := Gtk4.gtk_multi_sorter_new();
end;

procedure TGtkMultiSorter.append(sorter: PGtkSorter); cdecl;
begin
  Gtk4.gtk_multi_sorter_append(@self, sorter);
end;

procedure TGtkMultiSorter.remove(position: guint); cdecl;
begin
  Gtk4.gtk_multi_sorter_remove(@self, position);
end;

function TGtkNamedAction.new(name: Pgchar): PGtkNamedAction; cdecl;
begin
  Result := Gtk4.gtk_named_action_new(name);
end;

function TGtkNamedAction.get_action_name: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_named_action_get_action_name(@self);
end;

procedure TGtkNativeDialog.destroy_; cdecl;
begin
  Gtk4.gtk_native_dialog_destroy(@self);
end;

function TGtkNativeDialog.get_modal: gboolean; cdecl;
begin
  Result := Gtk4.gtk_native_dialog_get_modal(@self);
end;

function TGtkNativeDialog.get_title: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_native_dialog_get_title(@self);
end;

function TGtkNativeDialog.get_transient_for: PGtkWindow; cdecl;
begin
  Result := Gtk4.gtk_native_dialog_get_transient_for(@self);
end;

function TGtkNativeDialog.get_visible: gboolean; cdecl;
begin
  Result := Gtk4.gtk_native_dialog_get_visible(@self);
end;

procedure TGtkNativeDialog.hide; cdecl;
begin
  Gtk4.gtk_native_dialog_hide(@self);
end;

procedure TGtkNativeDialog.set_modal(modal: gboolean); cdecl;
begin
  Gtk4.gtk_native_dialog_set_modal(@self, modal);
end;

procedure TGtkNativeDialog.set_title(title: Pgchar); cdecl;
begin
  Gtk4.gtk_native_dialog_set_title(@self, title);
end;

procedure TGtkNativeDialog.set_transient_for(parent: PGtkWindow); cdecl;
begin
  Gtk4.gtk_native_dialog_set_transient_for(@self, parent);
end;

procedure TGtkNativeDialog.show; cdecl;
begin
  Gtk4.gtk_native_dialog_show(@self);
end;

function TGtkNeverTrigger.get: PGtkNeverTrigger; cdecl;
begin
  Result := Gtk4.gtk_never_trigger_get();
end;

function TGtkNoSelection.new(model: PGListModel): PGtkNoSelection; cdecl;
begin
  Result := Gtk4.gtk_no_selection_new(model);
end;

function TGtkNoSelection.get_model: PGListModel; cdecl;
begin
  Result := Gtk4.gtk_no_selection_get_model(@self);
end;

procedure TGtkNoSelection.set_model(model: PGListModel); cdecl;
begin
  Gtk4.gtk_no_selection_set_model(@self, model);
end;

function TGtkNotebook.new: PGtkNotebook; cdecl;
begin
  Result := Gtk4.gtk_notebook_new();
end;

function TGtkNotebook.append_page(child: PGtkWidget; tab_label: PGtkWidget): gint; cdecl;
begin
  Result := Gtk4.gtk_notebook_append_page(@self, child, tab_label);
end;

function TGtkNotebook.append_page_menu(child: PGtkWidget; tab_label: PGtkWidget; menu_label: PGtkWidget): gint; cdecl;
begin
  Result := Gtk4.gtk_notebook_append_page_menu(@self, child, tab_label, menu_label);
end;

procedure TGtkNotebook.detach_tab(child: PGtkWidget); cdecl;
begin
  Gtk4.gtk_notebook_detach_tab(@self, child);
end;

function TGtkNotebook.get_action_widget(pack_type: TGtkPackType): PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_notebook_get_action_widget(@self, pack_type);
end;

function TGtkNotebook.get_current_page: gint; cdecl;
begin
  Result := Gtk4.gtk_notebook_get_current_page(@self);
end;

function TGtkNotebook.get_group_name: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_notebook_get_group_name(@self);
end;

function TGtkNotebook.get_menu_label(child: PGtkWidget): PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_notebook_get_menu_label(@self, child);
end;

function TGtkNotebook.get_menu_label_text(child: PGtkWidget): Pgchar; cdecl;
begin
  Result := Gtk4.gtk_notebook_get_menu_label_text(@self, child);
end;

function TGtkNotebook.get_n_pages: gint; cdecl;
begin
  Result := Gtk4.gtk_notebook_get_n_pages(@self);
end;

function TGtkNotebook.get_nth_page(page_num: gint): PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_notebook_get_nth_page(@self, page_num);
end;

function TGtkNotebook.get_page(child: PGtkWidget): PGtkNotebookPage; cdecl;
begin
  Result := Gtk4.gtk_notebook_get_page(@self, child);
end;

function TGtkNotebook.get_pages: PGListModel; cdecl;
begin
  Result := Gtk4.gtk_notebook_get_pages(@self);
end;

function TGtkNotebook.get_scrollable: gboolean; cdecl;
begin
  Result := Gtk4.gtk_notebook_get_scrollable(@self);
end;

function TGtkNotebook.get_show_border: gboolean; cdecl;
begin
  Result := Gtk4.gtk_notebook_get_show_border(@self);
end;

function TGtkNotebook.get_show_tabs: gboolean; cdecl;
begin
  Result := Gtk4.gtk_notebook_get_show_tabs(@self);
end;

function TGtkNotebook.get_tab_detachable(child: PGtkWidget): gboolean; cdecl;
begin
  Result := Gtk4.gtk_notebook_get_tab_detachable(@self, child);
end;

function TGtkNotebook.get_tab_label(child: PGtkWidget): PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_notebook_get_tab_label(@self, child);
end;

function TGtkNotebook.get_tab_label_text(child: PGtkWidget): Pgchar; cdecl;
begin
  Result := Gtk4.gtk_notebook_get_tab_label_text(@self, child);
end;

function TGtkNotebook.get_tab_pos: TGtkPositionType; cdecl;
begin
  Result := Gtk4.gtk_notebook_get_tab_pos(@self);
end;

function TGtkNotebook.get_tab_reorderable(child: PGtkWidget): gboolean; cdecl;
begin
  Result := Gtk4.gtk_notebook_get_tab_reorderable(@self, child);
end;

function TGtkNotebook.insert_page(child: PGtkWidget; tab_label: PGtkWidget; position: gint): gint; cdecl;
begin
  Result := Gtk4.gtk_notebook_insert_page(@self, child, tab_label, position);
end;

function TGtkNotebook.insert_page_menu(child: PGtkWidget; tab_label: PGtkWidget; menu_label: PGtkWidget; position: gint): gint; cdecl;
begin
  Result := Gtk4.gtk_notebook_insert_page_menu(@self, child, tab_label, menu_label, position);
end;

procedure TGtkNotebook.next_page; cdecl;
begin
  Gtk4.gtk_notebook_next_page(@self);
end;

function TGtkNotebook.page_num(child: PGtkWidget): gint; cdecl;
begin
  Result := Gtk4.gtk_notebook_page_num(@self, child);
end;

procedure TGtkNotebook.popup_disable; cdecl;
begin
  Gtk4.gtk_notebook_popup_disable(@self);
end;

procedure TGtkNotebook.popup_enable; cdecl;
begin
  Gtk4.gtk_notebook_popup_enable(@self);
end;

function TGtkNotebook.prepend_page(child: PGtkWidget; tab_label: PGtkWidget): gint; cdecl;
begin
  Result := Gtk4.gtk_notebook_prepend_page(@self, child, tab_label);
end;

function TGtkNotebook.prepend_page_menu(child: PGtkWidget; tab_label: PGtkWidget; menu_label: PGtkWidget): gint; cdecl;
begin
  Result := Gtk4.gtk_notebook_prepend_page_menu(@self, child, tab_label, menu_label);
end;

procedure TGtkNotebook.prev_page; cdecl;
begin
  Gtk4.gtk_notebook_prev_page(@self);
end;

procedure TGtkNotebook.remove_page(page_num: gint); cdecl;
begin
  Gtk4.gtk_notebook_remove_page(@self, page_num);
end;

procedure TGtkNotebook.reorder_child(child: PGtkWidget; position: gint); cdecl;
begin
  Gtk4.gtk_notebook_reorder_child(@self, child, position);
end;

procedure TGtkNotebook.set_action_widget(widget: PGtkWidget; pack_type: TGtkPackType); cdecl;
begin
  Gtk4.gtk_notebook_set_action_widget(@self, widget, pack_type);
end;

procedure TGtkNotebook.set_current_page(page_num: gint); cdecl;
begin
  Gtk4.gtk_notebook_set_current_page(@self, page_num);
end;

procedure TGtkNotebook.set_group_name(group_name: Pgchar); cdecl;
begin
  Gtk4.gtk_notebook_set_group_name(@self, group_name);
end;

procedure TGtkNotebook.set_menu_label(child: PGtkWidget; menu_label: PGtkWidget); cdecl;
begin
  Gtk4.gtk_notebook_set_menu_label(@self, child, menu_label);
end;

procedure TGtkNotebook.set_menu_label_text(child: PGtkWidget; menu_text: Pgchar); cdecl;
begin
  Gtk4.gtk_notebook_set_menu_label_text(@self, child, menu_text);
end;

procedure TGtkNotebook.set_scrollable(scrollable: gboolean); cdecl;
begin
  Gtk4.gtk_notebook_set_scrollable(@self, scrollable);
end;

procedure TGtkNotebook.set_show_border(show_border: gboolean); cdecl;
begin
  Gtk4.gtk_notebook_set_show_border(@self, show_border);
end;

procedure TGtkNotebook.set_show_tabs(show_tabs: gboolean); cdecl;
begin
  Gtk4.gtk_notebook_set_show_tabs(@self, show_tabs);
end;

procedure TGtkNotebook.set_tab_detachable(child: PGtkWidget; detachable: gboolean); cdecl;
begin
  Gtk4.gtk_notebook_set_tab_detachable(@self, child, detachable);
end;

procedure TGtkNotebook.set_tab_label(child: PGtkWidget; tab_label: PGtkWidget); cdecl;
begin
  Gtk4.gtk_notebook_set_tab_label(@self, child, tab_label);
end;

procedure TGtkNotebook.set_tab_label_text(child: PGtkWidget; tab_text: Pgchar); cdecl;
begin
  Gtk4.gtk_notebook_set_tab_label_text(@self, child, tab_text);
end;

procedure TGtkNotebook.set_tab_pos(pos: TGtkPositionType); cdecl;
begin
  Gtk4.gtk_notebook_set_tab_pos(@self, pos);
end;

procedure TGtkNotebook.set_tab_reorderable(child: PGtkWidget; reorderable: gboolean); cdecl;
begin
  Gtk4.gtk_notebook_set_tab_reorderable(@self, child, reorderable);
end;

function TGtkNotebookPage.get_child: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_notebook_page_get_child(@self);
end;

function TGtkNothingAction.get: PGtkNothingAction; cdecl;
begin
  Result := Gtk4.gtk_nothing_action_get();
end;

function TGtkNumericSorter.new(expression: PGtkExpression): PGtkNumericSorter; cdecl;
begin
  Result := Gtk4.gtk_numeric_sorter_new(expression);
end;

function TGtkNumericSorter.get_expression: PGtkExpression; cdecl;
begin
  Result := Gtk4.gtk_numeric_sorter_get_expression(@self);
end;

function TGtkNumericSorter.get_sort_order: TGtkSortType; cdecl;
begin
  Result := Gtk4.gtk_numeric_sorter_get_sort_order(@self);
end;

procedure TGtkNumericSorter.set_expression(expression: PGtkExpression); cdecl;
begin
  Gtk4.gtk_numeric_sorter_set_expression(@self, expression);
end;

procedure TGtkNumericSorter.set_sort_order(sort_order: TGtkSortType); cdecl;
begin
  Gtk4.gtk_numeric_sorter_set_sort_order(@self, sort_order);
end;

function TGtkObjectExpression.new(object_: PGObject): PGtkObjectExpression; cdecl;
begin
  Result := Gtk4.gtk_object_expression_new(object_);
end;

function TGtkObjectExpression.get_object: PGObject; cdecl;
begin
  Result := Gtk4.gtk_object_expression_get_object(@self);
end;

function TGtkOverlay.new: PGtkOverlay; cdecl;
begin
  Result := Gtk4.gtk_overlay_new();
end;

procedure TGtkOverlay.add_overlay(widget: PGtkWidget); cdecl;
begin
  Gtk4.gtk_overlay_add_overlay(@self, widget);
end;

function TGtkOverlay.get_child: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_overlay_get_child(@self);
end;

function TGtkOverlay.get_clip_overlay(widget: PGtkWidget): gboolean; cdecl;
begin
  Result := Gtk4.gtk_overlay_get_clip_overlay(@self, widget);
end;

function TGtkOverlay.get_measure_overlay(widget: PGtkWidget): gboolean; cdecl;
begin
  Result := Gtk4.gtk_overlay_get_measure_overlay(@self, widget);
end;

procedure TGtkOverlay.remove_overlay(widget: PGtkWidget); cdecl;
begin
  Gtk4.gtk_overlay_remove_overlay(@self, widget);
end;

procedure TGtkOverlay.set_child(child: PGtkWidget); cdecl;
begin
  Gtk4.gtk_overlay_set_child(@self, child);
end;

procedure TGtkOverlay.set_clip_overlay(widget: PGtkWidget; clip_overlay: gboolean); cdecl;
begin
  Gtk4.gtk_overlay_set_clip_overlay(@self, widget, clip_overlay);
end;

procedure TGtkOverlay.set_measure_overlay(widget: PGtkWidget; measure: gboolean); cdecl;
begin
  Gtk4.gtk_overlay_set_measure_overlay(@self, widget, measure);
end;

function TGtkOverlayLayout.new: PGtkOverlayLayout; cdecl;
begin
  Result := Gtk4.gtk_overlay_layout_new();
end;

function TGtkOverlayLayoutChild.get_clip_overlay: gboolean; cdecl;
begin
  Result := Gtk4.gtk_overlay_layout_child_get_clip_overlay(@self);
end;

function TGtkOverlayLayoutChild.get_measure: gboolean; cdecl;
begin
  Result := Gtk4.gtk_overlay_layout_child_get_measure(@self);
end;

procedure TGtkOverlayLayoutChild.set_clip_overlay(clip_overlay: gboolean); cdecl;
begin
  Gtk4.gtk_overlay_layout_child_set_clip_overlay(@self, clip_overlay);
end;

procedure TGtkOverlayLayoutChild.set_measure(measure: gboolean); cdecl;
begin
  Gtk4.gtk_overlay_layout_child_set_measure(@self, measure);
end;

function TGtkPadController.new(group: PGActionGroup; pad: PGdkDevice): PGtkPadController; cdecl;
begin
  Result := Gtk4.gtk_pad_controller_new(group, pad);
end;

procedure TGtkPadController.set_action(type_: TGtkPadActionType; index: gint; mode: gint; label_: Pgchar; action_name: Pgchar); cdecl;
begin
  Gtk4.gtk_pad_controller_set_action(@self, type_, index, mode, label_, action_name);
end;

procedure TGtkPadController.set_action_entries(entries: PGtkPadActionEntry; n_entries: gint); cdecl;
begin
  Gtk4.gtk_pad_controller_set_action_entries(@self, entries, n_entries);
end;

function TGtkPageSetup.new: PGtkPageSetup; cdecl;
begin
  Result := Gtk4.gtk_page_setup_new();
end;

function TGtkPageSetup.new_from_file(file_name: Pgchar; error: PPGError): PGtkPageSetup; cdecl;
begin
  Result := Gtk4.gtk_page_setup_new_from_file(file_name, error);
end;

function TGtkPageSetup.new_from_gvariant(variant: PGVariant): PGtkPageSetup; cdecl;
begin
  Result := Gtk4.gtk_page_setup_new_from_gvariant(variant);
end;

function TGtkPageSetup.new_from_key_file(key_file: PGKeyFile; group_name: Pgchar; error: PPGError): PGtkPageSetup; cdecl;
begin
  Result := Gtk4.gtk_page_setup_new_from_key_file(key_file, group_name, error);
end;

function TGtkPageSetup.copy: PGtkPageSetup; cdecl;
begin
  Result := Gtk4.gtk_page_setup_copy(@self);
end;

function TGtkPageSetup.get_bottom_margin(unit_: TGtkUnit): gdouble; cdecl;
begin
  Result := Gtk4.gtk_page_setup_get_bottom_margin(@self, unit_);
end;

function TGtkPageSetup.get_left_margin(unit_: TGtkUnit): gdouble; cdecl;
begin
  Result := Gtk4.gtk_page_setup_get_left_margin(@self, unit_);
end;

function TGtkPageSetup.get_orientation: TGtkPageOrientation; cdecl;
begin
  Result := Gtk4.gtk_page_setup_get_orientation(@self);
end;

function TGtkPageSetup.get_page_height(unit_: TGtkUnit): gdouble; cdecl;
begin
  Result := Gtk4.gtk_page_setup_get_page_height(@self, unit_);
end;

function TGtkPageSetup.get_page_width(unit_: TGtkUnit): gdouble; cdecl;
begin
  Result := Gtk4.gtk_page_setup_get_page_width(@self, unit_);
end;

function TGtkPageSetup.get_paper_height(unit_: TGtkUnit): gdouble; cdecl;
begin
  Result := Gtk4.gtk_page_setup_get_paper_height(@self, unit_);
end;

function TGtkPageSetup.get_paper_size: PGtkPaperSize; cdecl;
begin
  Result := Gtk4.gtk_page_setup_get_paper_size(@self);
end;

function TGtkPageSetup.get_paper_width(unit_: TGtkUnit): gdouble; cdecl;
begin
  Result := Gtk4.gtk_page_setup_get_paper_width(@self, unit_);
end;

function TGtkPageSetup.get_right_margin(unit_: TGtkUnit): gdouble; cdecl;
begin
  Result := Gtk4.gtk_page_setup_get_right_margin(@self, unit_);
end;

function TGtkPageSetup.get_top_margin(unit_: TGtkUnit): gdouble; cdecl;
begin
  Result := Gtk4.gtk_page_setup_get_top_margin(@self, unit_);
end;

function TGtkPageSetup.load_file(file_name: Pgchar; error: PPGError): gboolean; cdecl;
begin
  Result := Gtk4.gtk_page_setup_load_file(@self, file_name, error);
end;

function TGtkPageSetup.load_key_file(key_file: PGKeyFile; group_name: Pgchar; error: PPGError): gboolean; cdecl;
begin
  Result := Gtk4.gtk_page_setup_load_key_file(@self, key_file, group_name, error);
end;

procedure TGtkPageSetup.set_bottom_margin(margin: gdouble; unit_: TGtkUnit); cdecl;
begin
  Gtk4.gtk_page_setup_set_bottom_margin(@self, margin, unit_);
end;

procedure TGtkPageSetup.set_left_margin(margin: gdouble; unit_: TGtkUnit); cdecl;
begin
  Gtk4.gtk_page_setup_set_left_margin(@self, margin, unit_);
end;

procedure TGtkPageSetup.set_orientation(orientation: TGtkPageOrientation); cdecl;
begin
  Gtk4.gtk_page_setup_set_orientation(@self, orientation);
end;

procedure TGtkPageSetup.set_paper_size(size: PGtkPaperSize); cdecl;
begin
  Gtk4.gtk_page_setup_set_paper_size(@self, size);
end;

procedure TGtkPageSetup.set_paper_size_and_default_margins(size: PGtkPaperSize); cdecl;
begin
  Gtk4.gtk_page_setup_set_paper_size_and_default_margins(@self, size);
end;

procedure TGtkPageSetup.set_right_margin(margin: gdouble; unit_: TGtkUnit); cdecl;
begin
  Gtk4.gtk_page_setup_set_right_margin(@self, margin, unit_);
end;

procedure TGtkPageSetup.set_top_margin(margin: gdouble; unit_: TGtkUnit); cdecl;
begin
  Gtk4.gtk_page_setup_set_top_margin(@self, margin, unit_);
end;

function TGtkPageSetup.to_file(file_name: Pgchar; error: PPGError): gboolean; cdecl;
begin
  Result := Gtk4.gtk_page_setup_to_file(@self, file_name, error);
end;

function TGtkPageSetup.to_gvariant: PGVariant; cdecl;
begin
  Result := Gtk4.gtk_page_setup_to_gvariant(@self);
end;

procedure TGtkPageSetup.to_key_file(key_file: PGKeyFile; group_name: Pgchar); cdecl;
begin
  Gtk4.gtk_page_setup_to_key_file(@self, key_file, group_name);
end;

function TGtkPaperSize.new(name: Pgchar): PGtkPaperSize; cdecl;
begin
  Result := Gtk4.gtk_paper_size_new(name);
end;

function TGtkPaperSize.new_custom(name: Pgchar; display_name: Pgchar; width: gdouble; height: gdouble; unit_: TGtkUnit): PGtkPaperSize; cdecl;
begin
  Result := Gtk4.gtk_paper_size_new_custom(name, display_name, width, height, unit_);
end;

function TGtkPaperSize.new_from_gvariant(variant: PGVariant): PGtkPaperSize; cdecl;
begin
  Result := Gtk4.gtk_paper_size_new_from_gvariant(variant);
end;

function TGtkPaperSize.new_from_ipp(ipp_name: Pgchar; width: gdouble; height: gdouble): PGtkPaperSize; cdecl;
begin
  Result := Gtk4.gtk_paper_size_new_from_ipp(ipp_name, width, height);
end;

function TGtkPaperSize.new_from_key_file(key_file: PGKeyFile; group_name: Pgchar; error: PPGError): PGtkPaperSize; cdecl;
begin
  Result := Gtk4.gtk_paper_size_new_from_key_file(key_file, group_name, error);
end;

function TGtkPaperSize.new_from_ppd(ppd_name: Pgchar; ppd_display_name: Pgchar; width: gdouble; height: gdouble): PGtkPaperSize; cdecl;
begin
  Result := Gtk4.gtk_paper_size_new_from_ppd(ppd_name, ppd_display_name, width, height);
end;

function TGtkPaperSize.copy: PGtkPaperSize; cdecl;
begin
  Result := Gtk4.gtk_paper_size_copy(@self);
end;

procedure TGtkPaperSize.free; cdecl;
begin
  Gtk4.gtk_paper_size_free(@self);
end;

function TGtkPaperSize.get_default_bottom_margin(unit_: TGtkUnit): gdouble; cdecl;
begin
  Result := Gtk4.gtk_paper_size_get_default_bottom_margin(@self, unit_);
end;

function TGtkPaperSize.get_default_left_margin(unit_: TGtkUnit): gdouble; cdecl;
begin
  Result := Gtk4.gtk_paper_size_get_default_left_margin(@self, unit_);
end;

function TGtkPaperSize.get_default_right_margin(unit_: TGtkUnit): gdouble; cdecl;
begin
  Result := Gtk4.gtk_paper_size_get_default_right_margin(@self, unit_);
end;

function TGtkPaperSize.get_default_top_margin(unit_: TGtkUnit): gdouble; cdecl;
begin
  Result := Gtk4.gtk_paper_size_get_default_top_margin(@self, unit_);
end;

function TGtkPaperSize.get_display_name: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_paper_size_get_display_name(@self);
end;

function TGtkPaperSize.get_height(unit_: TGtkUnit): gdouble; cdecl;
begin
  Result := Gtk4.gtk_paper_size_get_height(@self, unit_);
end;

function TGtkPaperSize.get_name: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_paper_size_get_name(@self);
end;

function TGtkPaperSize.get_ppd_name: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_paper_size_get_ppd_name(@self);
end;

function TGtkPaperSize.get_width(unit_: TGtkUnit): gdouble; cdecl;
begin
  Result := Gtk4.gtk_paper_size_get_width(@self, unit_);
end;

function TGtkPaperSize.is_custom: gboolean; cdecl;
begin
  Result := Gtk4.gtk_paper_size_is_custom(@self);
end;

function TGtkPaperSize.is_equal(size2: PGtkPaperSize): gboolean; cdecl;
begin
  Result := Gtk4.gtk_paper_size_is_equal(@self, size2);
end;

function TGtkPaperSize.is_ipp: gboolean; cdecl;
begin
  Result := Gtk4.gtk_paper_size_is_ipp(@self);
end;

procedure TGtkPaperSize.set_size(width: gdouble; height: gdouble; unit_: TGtkUnit); cdecl;
begin
  Gtk4.gtk_paper_size_set_size(@self, width, height, unit_);
end;

function TGtkPaperSize.to_gvariant: PGVariant; cdecl;
begin
  Result := Gtk4.gtk_paper_size_to_gvariant(@self);
end;

procedure TGtkPaperSize.to_key_file(key_file: PGKeyFile; group_name: Pgchar); cdecl;
begin
  Gtk4.gtk_paper_size_to_key_file(@self, key_file, group_name);
end;

function TGtkPaperSize.get_default: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_paper_size_get_default();
end;

function TGtkPaperSize.get_paper_sizes(include_custom: gboolean): PGList; cdecl;
begin
  Result := Gtk4.gtk_paper_size_get_paper_sizes(include_custom);
end;

function TGtkPageSetupUnixDialog.new(title: Pgchar; parent: PGtkWindow): PGtkPageSetupUnixDialog; cdecl;
begin
  Result := Gtk4.gtk_page_setup_unix_dialog_new(title, parent);
end;

function TGtkPageSetupUnixDialog.get_page_setup: PGtkPageSetup; cdecl;
begin
  Result := Gtk4.gtk_page_setup_unix_dialog_get_page_setup(@self);
end;

function TGtkPageSetupUnixDialog.get_print_settings: PGtkPrintSettings; cdecl;
begin
  Result := Gtk4.gtk_page_setup_unix_dialog_get_print_settings(@self);
end;

procedure TGtkPageSetupUnixDialog.set_page_setup(page_setup: PGtkPageSetup); cdecl;
begin
  Gtk4.gtk_page_setup_unix_dialog_set_page_setup(@self, page_setup);
end;

procedure TGtkPageSetupUnixDialog.set_print_settings(print_settings: PGtkPrintSettings); cdecl;
begin
  Gtk4.gtk_page_setup_unix_dialog_set_print_settings(@self, print_settings);
end;

function TGtkPrintSettings.new: PGtkPrintSettings; cdecl;
begin
  Result := Gtk4.gtk_print_settings_new();
end;

function TGtkPrintSettings.new_from_file(file_name: Pgchar; error: PPGError): PGtkPrintSettings; cdecl;
begin
  Result := Gtk4.gtk_print_settings_new_from_file(file_name, error);
end;

function TGtkPrintSettings.new_from_gvariant(variant: PGVariant): PGtkPrintSettings; cdecl;
begin
  Result := Gtk4.gtk_print_settings_new_from_gvariant(variant);
end;

function TGtkPrintSettings.new_from_key_file(key_file: PGKeyFile; group_name: Pgchar; error: PPGError): PGtkPrintSettings; cdecl;
begin
  Result := Gtk4.gtk_print_settings_new_from_key_file(key_file, group_name, error);
end;

function TGtkPrintSettings.copy: PGtkPrintSettings; cdecl;
begin
  Result := Gtk4.gtk_print_settings_copy(@self);
end;

procedure TGtkPrintSettings.foreach(func: TGtkPrintSettingsFunc; user_data: gpointer); cdecl;
begin
  Gtk4.gtk_print_settings_foreach(@self, func, user_data);
end;

function TGtkPrintSettings.get(key: Pgchar): Pgchar; cdecl;
begin
  Result := Gtk4.gtk_print_settings_get(@self, key);
end;

function TGtkPrintSettings.get_bool(key: Pgchar): gboolean; cdecl;
begin
  Result := Gtk4.gtk_print_settings_get_bool(@self, key);
end;

function TGtkPrintSettings.get_collate: gboolean; cdecl;
begin
  Result := Gtk4.gtk_print_settings_get_collate(@self);
end;

function TGtkPrintSettings.get_default_source: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_print_settings_get_default_source(@self);
end;

function TGtkPrintSettings.get_dither: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_print_settings_get_dither(@self);
end;

function TGtkPrintSettings.get_double(key: Pgchar): gdouble; cdecl;
begin
  Result := Gtk4.gtk_print_settings_get_double(@self, key);
end;

function TGtkPrintSettings.get_double_with_default(key: Pgchar; def: gdouble): gdouble; cdecl;
begin
  Result := Gtk4.gtk_print_settings_get_double_with_default(@self, key, def);
end;

function TGtkPrintSettings.get_duplex: TGtkPrintDuplex; cdecl;
begin
  Result := Gtk4.gtk_print_settings_get_duplex(@self);
end;

function TGtkPrintSettings.get_finishings: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_print_settings_get_finishings(@self);
end;

function TGtkPrintSettings.get_int(key: Pgchar): gint; cdecl;
begin
  Result := Gtk4.gtk_print_settings_get_int(@self, key);
end;

function TGtkPrintSettings.get_int_with_default(key: Pgchar; def: gint): gint; cdecl;
begin
  Result := Gtk4.gtk_print_settings_get_int_with_default(@self, key, def);
end;

function TGtkPrintSettings.get_length(key: Pgchar; unit_: TGtkUnit): gdouble; cdecl;
begin
  Result := Gtk4.gtk_print_settings_get_length(@self, key, unit_);
end;

function TGtkPrintSettings.get_media_type: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_print_settings_get_media_type(@self);
end;

function TGtkPrintSettings.get_n_copies: gint; cdecl;
begin
  Result := Gtk4.gtk_print_settings_get_n_copies(@self);
end;

function TGtkPrintSettings.get_number_up: gint; cdecl;
begin
  Result := Gtk4.gtk_print_settings_get_number_up(@self);
end;

function TGtkPrintSettings.get_number_up_layout: TGtkNumberUpLayout; cdecl;
begin
  Result := Gtk4.gtk_print_settings_get_number_up_layout(@self);
end;

function TGtkPrintSettings.get_orientation: TGtkPageOrientation; cdecl;
begin
  Result := Gtk4.gtk_print_settings_get_orientation(@self);
end;

function TGtkPrintSettings.get_output_bin: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_print_settings_get_output_bin(@self);
end;

function TGtkPrintSettings.get_page_ranges(num_ranges: Pgint): PGtkPageRange; cdecl;
begin
  Result := Gtk4.gtk_print_settings_get_page_ranges(@self, num_ranges);
end;

function TGtkPrintSettings.get_page_set: TGtkPageSet; cdecl;
begin
  Result := Gtk4.gtk_print_settings_get_page_set(@self);
end;

function TGtkPrintSettings.get_paper_height(unit_: TGtkUnit): gdouble; cdecl;
begin
  Result := Gtk4.gtk_print_settings_get_paper_height(@self, unit_);
end;

function TGtkPrintSettings.get_paper_size: PGtkPaperSize; cdecl;
begin
  Result := Gtk4.gtk_print_settings_get_paper_size(@self);
end;

function TGtkPrintSettings.get_paper_width(unit_: TGtkUnit): gdouble; cdecl;
begin
  Result := Gtk4.gtk_print_settings_get_paper_width(@self, unit_);
end;

function TGtkPrintSettings.get_print_pages: TGtkPrintPages; cdecl;
begin
  Result := Gtk4.gtk_print_settings_get_print_pages(@self);
end;

function TGtkPrintSettings.get_printer: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_print_settings_get_printer(@self);
end;

function TGtkPrintSettings.get_printer_lpi: gdouble; cdecl;
begin
  Result := Gtk4.gtk_print_settings_get_printer_lpi(@self);
end;

function TGtkPrintSettings.get_quality: TGtkPrintQuality; cdecl;
begin
  Result := Gtk4.gtk_print_settings_get_quality(@self);
end;

function TGtkPrintSettings.get_resolution: gint; cdecl;
begin
  Result := Gtk4.gtk_print_settings_get_resolution(@self);
end;

function TGtkPrintSettings.get_resolution_x: gint; cdecl;
begin
  Result := Gtk4.gtk_print_settings_get_resolution_x(@self);
end;

function TGtkPrintSettings.get_resolution_y: gint; cdecl;
begin
  Result := Gtk4.gtk_print_settings_get_resolution_y(@self);
end;

function TGtkPrintSettings.get_reverse: gboolean; cdecl;
begin
  Result := Gtk4.gtk_print_settings_get_reverse(@self);
end;

function TGtkPrintSettings.get_scale: gdouble; cdecl;
begin
  Result := Gtk4.gtk_print_settings_get_scale(@self);
end;

function TGtkPrintSettings.get_use_color: gboolean; cdecl;
begin
  Result := Gtk4.gtk_print_settings_get_use_color(@self);
end;

function TGtkPrintSettings.has_key(key: Pgchar): gboolean; cdecl;
begin
  Result := Gtk4.gtk_print_settings_has_key(@self, key);
end;

function TGtkPrintSettings.load_file(file_name: Pgchar; error: PPGError): gboolean; cdecl;
begin
  Result := Gtk4.gtk_print_settings_load_file(@self, file_name, error);
end;

function TGtkPrintSettings.load_key_file(key_file: PGKeyFile; group_name: Pgchar; error: PPGError): gboolean; cdecl;
begin
  Result := Gtk4.gtk_print_settings_load_key_file(@self, key_file, group_name, error);
end;

procedure TGtkPrintSettings.set_(key: Pgchar; value: Pgchar); cdecl;
begin
  Gtk4.gtk_print_settings_set(@self, key, value);
end;

procedure TGtkPrintSettings.set_bool(key: Pgchar; value: gboolean); cdecl;
begin
  Gtk4.gtk_print_settings_set_bool(@self, key, value);
end;

procedure TGtkPrintSettings.set_collate(collate: gboolean); cdecl;
begin
  Gtk4.gtk_print_settings_set_collate(@self, collate);
end;

procedure TGtkPrintSettings.set_default_source(default_source: Pgchar); cdecl;
begin
  Gtk4.gtk_print_settings_set_default_source(@self, default_source);
end;

procedure TGtkPrintSettings.set_dither(dither: Pgchar); cdecl;
begin
  Gtk4.gtk_print_settings_set_dither(@self, dither);
end;

procedure TGtkPrintSettings.set_double(key: Pgchar; value: gdouble); cdecl;
begin
  Gtk4.gtk_print_settings_set_double(@self, key, value);
end;

procedure TGtkPrintSettings.set_duplex(duplex: TGtkPrintDuplex); cdecl;
begin
  Gtk4.gtk_print_settings_set_duplex(@self, duplex);
end;

procedure TGtkPrintSettings.set_finishings(finishings: Pgchar); cdecl;
begin
  Gtk4.gtk_print_settings_set_finishings(@self, finishings);
end;

procedure TGtkPrintSettings.set_int(key: Pgchar; value: gint); cdecl;
begin
  Gtk4.gtk_print_settings_set_int(@self, key, value);
end;

procedure TGtkPrintSettings.set_length(key: Pgchar; value: gdouble; unit_: TGtkUnit); cdecl;
begin
  Gtk4.gtk_print_settings_set_length(@self, key, value, unit_);
end;

procedure TGtkPrintSettings.set_media_type(media_type: Pgchar); cdecl;
begin
  Gtk4.gtk_print_settings_set_media_type(@self, media_type);
end;

procedure TGtkPrintSettings.set_n_copies(num_copies: gint); cdecl;
begin
  Gtk4.gtk_print_settings_set_n_copies(@self, num_copies);
end;

procedure TGtkPrintSettings.set_number_up(number_up: gint); cdecl;
begin
  Gtk4.gtk_print_settings_set_number_up(@self, number_up);
end;

procedure TGtkPrintSettings.set_number_up_layout(number_up_layout: TGtkNumberUpLayout); cdecl;
begin
  Gtk4.gtk_print_settings_set_number_up_layout(@self, number_up_layout);
end;

procedure TGtkPrintSettings.set_orientation(orientation: TGtkPageOrientation); cdecl;
begin
  Gtk4.gtk_print_settings_set_orientation(@self, orientation);
end;

procedure TGtkPrintSettings.set_output_bin(output_bin: Pgchar); cdecl;
begin
  Gtk4.gtk_print_settings_set_output_bin(@self, output_bin);
end;

procedure TGtkPrintSettings.set_page_ranges(page_ranges: PGtkPageRange; num_ranges: gint); cdecl;
begin
  Gtk4.gtk_print_settings_set_page_ranges(@self, page_ranges, num_ranges);
end;

procedure TGtkPrintSettings.set_page_set(page_set: TGtkPageSet); cdecl;
begin
  Gtk4.gtk_print_settings_set_page_set(@self, page_set);
end;

procedure TGtkPrintSettings.set_paper_height(height: gdouble; unit_: TGtkUnit); cdecl;
begin
  Gtk4.gtk_print_settings_set_paper_height(@self, height, unit_);
end;

procedure TGtkPrintSettings.set_paper_size(paper_size: PGtkPaperSize); cdecl;
begin
  Gtk4.gtk_print_settings_set_paper_size(@self, paper_size);
end;

procedure TGtkPrintSettings.set_paper_width(width: gdouble; unit_: TGtkUnit); cdecl;
begin
  Gtk4.gtk_print_settings_set_paper_width(@self, width, unit_);
end;

procedure TGtkPrintSettings.set_print_pages(pages: TGtkPrintPages); cdecl;
begin
  Gtk4.gtk_print_settings_set_print_pages(@self, pages);
end;

procedure TGtkPrintSettings.set_printer(printer: Pgchar); cdecl;
begin
  Gtk4.gtk_print_settings_set_printer(@self, printer);
end;

procedure TGtkPrintSettings.set_printer_lpi(lpi: gdouble); cdecl;
begin
  Gtk4.gtk_print_settings_set_printer_lpi(@self, lpi);
end;

procedure TGtkPrintSettings.set_quality(quality: TGtkPrintQuality); cdecl;
begin
  Gtk4.gtk_print_settings_set_quality(@self, quality);
end;

procedure TGtkPrintSettings.set_resolution(resolution: gint); cdecl;
begin
  Gtk4.gtk_print_settings_set_resolution(@self, resolution);
end;

procedure TGtkPrintSettings.set_resolution_xy(resolution_x: gint; resolution_y: gint); cdecl;
begin
  Gtk4.gtk_print_settings_set_resolution_xy(@self, resolution_x, resolution_y);
end;

procedure TGtkPrintSettings.set_reverse(reverse: gboolean); cdecl;
begin
  Gtk4.gtk_print_settings_set_reverse(@self, reverse);
end;

procedure TGtkPrintSettings.set_scale(scale: gdouble); cdecl;
begin
  Gtk4.gtk_print_settings_set_scale(@self, scale);
end;

procedure TGtkPrintSettings.set_use_color(use_color: gboolean); cdecl;
begin
  Gtk4.gtk_print_settings_set_use_color(@self, use_color);
end;

function TGtkPrintSettings.to_file(file_name: Pgchar; error: PPGError): gboolean; cdecl;
begin
  Result := Gtk4.gtk_print_settings_to_file(@self, file_name, error);
end;

function TGtkPrintSettings.to_gvariant: PGVariant; cdecl;
begin
  Result := Gtk4.gtk_print_settings_to_gvariant(@self);
end;

procedure TGtkPrintSettings.to_key_file(key_file: PGKeyFile; group_name: Pgchar); cdecl;
begin
  Gtk4.gtk_print_settings_to_key_file(@self, key_file, group_name);
end;

procedure TGtkPrintSettings.unset(key: Pgchar); cdecl;
begin
  Gtk4.gtk_print_settings_unset(@self, key);
end;

function TGtkPaned.new(orientation: TGtkOrientation): PGtkPaned; cdecl;
begin
  Result := Gtk4.gtk_paned_new(orientation);
end;

function TGtkPaned.get_end_child: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_paned_get_end_child(@self);
end;

function TGtkPaned.get_position: gint; cdecl;
begin
  Result := Gtk4.gtk_paned_get_position(@self);
end;

function TGtkPaned.get_resize_end_child: gboolean; cdecl;
begin
  Result := Gtk4.gtk_paned_get_resize_end_child(@self);
end;

function TGtkPaned.get_resize_start_child: gboolean; cdecl;
begin
  Result := Gtk4.gtk_paned_get_resize_start_child(@self);
end;

function TGtkPaned.get_shrink_end_child: gboolean; cdecl;
begin
  Result := Gtk4.gtk_paned_get_shrink_end_child(@self);
end;

function TGtkPaned.get_shrink_start_child: gboolean; cdecl;
begin
  Result := Gtk4.gtk_paned_get_shrink_start_child(@self);
end;

function TGtkPaned.get_start_child: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_paned_get_start_child(@self);
end;

function TGtkPaned.get_wide_handle: gboolean; cdecl;
begin
  Result := Gtk4.gtk_paned_get_wide_handle(@self);
end;

procedure TGtkPaned.set_end_child(child: PGtkWidget); cdecl;
begin
  Gtk4.gtk_paned_set_end_child(@self, child);
end;

procedure TGtkPaned.set_position(position: gint); cdecl;
begin
  Gtk4.gtk_paned_set_position(@self, position);
end;

procedure TGtkPaned.set_resize_end_child(resize: gboolean); cdecl;
begin
  Gtk4.gtk_paned_set_resize_end_child(@self, resize);
end;

procedure TGtkPaned.set_resize_start_child(resize: gboolean); cdecl;
begin
  Gtk4.gtk_paned_set_resize_start_child(@self, resize);
end;

procedure TGtkPaned.set_shrink_end_child(resize: gboolean); cdecl;
begin
  Gtk4.gtk_paned_set_shrink_end_child(@self, resize);
end;

procedure TGtkPaned.set_shrink_start_child(resize: gboolean); cdecl;
begin
  Gtk4.gtk_paned_set_shrink_start_child(@self, resize);
end;

procedure TGtkPaned.set_start_child(child: PGtkWidget); cdecl;
begin
  Gtk4.gtk_paned_set_start_child(@self, child);
end;

procedure TGtkPaned.set_wide_handle(wide: gboolean); cdecl;
begin
  Gtk4.gtk_paned_set_wide_handle(@self, wide);
end;

function TGtkPasswordEntry.new: PGtkPasswordEntry; cdecl;
begin
  Result := Gtk4.gtk_password_entry_new();
end;

function TGtkPasswordEntry.get_extra_menu: PGMenuModel; cdecl;
begin
  Result := Gtk4.gtk_password_entry_get_extra_menu(@self);
end;

function TGtkPasswordEntry.get_show_peek_icon: gboolean; cdecl;
begin
  Result := Gtk4.gtk_password_entry_get_show_peek_icon(@self);
end;

procedure TGtkPasswordEntry.set_extra_menu(model: PGMenuModel); cdecl;
begin
  Gtk4.gtk_password_entry_set_extra_menu(@self, model);
end;

procedure TGtkPasswordEntry.set_show_peek_icon(show_peek_icon: gboolean); cdecl;
begin
  Gtk4.gtk_password_entry_set_show_peek_icon(@self, show_peek_icon);
end;

function TGtkPasswordEntryBuffer.new: PGtkPasswordEntryBuffer; cdecl;
begin
  Result := Gtk4.gtk_password_entry_buffer_new();
end;

function TGtkPicture.new: PGtkPicture; cdecl;
begin
  Result := Gtk4.gtk_picture_new();
end;

function TGtkPicture.new_for_file(file_: PGFile): PGtkPicture; cdecl;
begin
  Result := Gtk4.gtk_picture_new_for_file(file_);
end;

function TGtkPicture.new_for_filename(filename: Pgchar): PGtkPicture; cdecl;
begin
  Result := Gtk4.gtk_picture_new_for_filename(filename);
end;

function TGtkPicture.new_for_paintable(paintable: PGdkPaintable): PGtkPicture; cdecl;
begin
  Result := Gtk4.gtk_picture_new_for_paintable(paintable);
end;

function TGtkPicture.new_for_pixbuf(pixbuf: PGdkPixbuf): PGtkPicture; cdecl;
begin
  Result := Gtk4.gtk_picture_new_for_pixbuf(pixbuf);
end;

function TGtkPicture.new_for_resource(resource_path: Pgchar): PGtkPicture; cdecl;
begin
  Result := Gtk4.gtk_picture_new_for_resource(resource_path);
end;

function TGtkPicture.get_alternative_text: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_picture_get_alternative_text(@self);
end;

function TGtkPicture.get_can_shrink: gboolean; cdecl;
begin
  Result := Gtk4.gtk_picture_get_can_shrink(@self);
end;

function TGtkPicture.get_file: PGFile; cdecl;
begin
  Result := Gtk4.gtk_picture_get_file(@self);
end;

function TGtkPicture.get_keep_aspect_ratio: gboolean; cdecl;
begin
  Result := Gtk4.gtk_picture_get_keep_aspect_ratio(@self);
end;

function TGtkPicture.get_paintable: PGdkPaintable; cdecl;
begin
  Result := Gtk4.gtk_picture_get_paintable(@self);
end;

procedure TGtkPicture.set_alternative_text(alternative_text: Pgchar); cdecl;
begin
  Gtk4.gtk_picture_set_alternative_text(@self, alternative_text);
end;

procedure TGtkPicture.set_can_shrink(can_shrink: gboolean); cdecl;
begin
  Gtk4.gtk_picture_set_can_shrink(@self, can_shrink);
end;

procedure TGtkPicture.set_file(file_: PGFile); cdecl;
begin
  Gtk4.gtk_picture_set_file(@self, file_);
end;

procedure TGtkPicture.set_filename(filename: Pgchar); cdecl;
begin
  Gtk4.gtk_picture_set_filename(@self, filename);
end;

procedure TGtkPicture.set_keep_aspect_ratio(keep_aspect_ratio: gboolean); cdecl;
begin
  Gtk4.gtk_picture_set_keep_aspect_ratio(@self, keep_aspect_ratio);
end;

procedure TGtkPicture.set_paintable(paintable: PGdkPaintable); cdecl;
begin
  Gtk4.gtk_picture_set_paintable(@self, paintable);
end;

procedure TGtkPicture.set_pixbuf(pixbuf: PGdkPixbuf); cdecl;
begin
  Gtk4.gtk_picture_set_pixbuf(@self, pixbuf);
end;

procedure TGtkPicture.set_resource(resource_path: Pgchar); cdecl;
begin
  Gtk4.gtk_picture_set_resource(@self, resource_path);
end;

function TGtkPopoverMenu.new_from_model(model: PGMenuModel): PGtkPopoverMenu; cdecl;
begin
  Result := Gtk4.gtk_popover_menu_new_from_model(model);
end;

function TGtkPopoverMenu.new_from_model_full(model: PGMenuModel; flags: TGtkPopoverMenuFlags): PGtkPopoverMenu; cdecl;
begin
  Result := Gtk4.gtk_popover_menu_new_from_model_full(model, flags);
end;

function TGtkPopoverMenu.add_child(child: PGtkWidget; id: Pgchar): gboolean; cdecl;
begin
  Result := Gtk4.gtk_popover_menu_add_child(@self, child, id);
end;

function TGtkPopoverMenu.get_menu_model: PGMenuModel; cdecl;
begin
  Result := Gtk4.gtk_popover_menu_get_menu_model(@self);
end;

function TGtkPopoverMenu.remove_child(child: PGtkWidget): gboolean; cdecl;
begin
  Result := Gtk4.gtk_popover_menu_remove_child(@self, child);
end;

procedure TGtkPopoverMenu.set_menu_model(model: PGMenuModel); cdecl;
begin
  Gtk4.gtk_popover_menu_set_menu_model(@self, model);
end;

function TGtkPopoverMenuBar.new_from_model(model: PGMenuModel): PGtkPopoverMenuBar; cdecl;
begin
  Result := Gtk4.gtk_popover_menu_bar_new_from_model(model);
end;

function TGtkPopoverMenuBar.add_child(child: PGtkWidget; id: Pgchar): gboolean; cdecl;
begin
  Result := Gtk4.gtk_popover_menu_bar_add_child(@self, child, id);
end;

function TGtkPopoverMenuBar.get_menu_model: PGMenuModel; cdecl;
begin
  Result := Gtk4.gtk_popover_menu_bar_get_menu_model(@self);
end;

function TGtkPopoverMenuBar.remove_child(child: PGtkWidget): gboolean; cdecl;
begin
  Result := Gtk4.gtk_popover_menu_bar_remove_child(@self, child);
end;

procedure TGtkPopoverMenuBar.set_menu_model(model: PGMenuModel); cdecl;
begin
  Gtk4.gtk_popover_menu_bar_set_menu_model(@self, model);
end;

function TGtkPrintContext.create_pango_context: PPangoContext; cdecl;
begin
  Result := Gtk4.gtk_print_context_create_pango_context(@self);
end;

function TGtkPrintContext.create_pango_layout: PPangoLayout; cdecl;
begin
  Result := Gtk4.gtk_print_context_create_pango_layout(@self);
end;

function TGtkPrintContext.get_cairo_context: Pcairo_t; cdecl;
begin
  Result := Gtk4.gtk_print_context_get_cairo_context(@self);
end;

function TGtkPrintContext.get_dpi_x: gdouble; cdecl;
begin
  Result := Gtk4.gtk_print_context_get_dpi_x(@self);
end;

function TGtkPrintContext.get_dpi_y: gdouble; cdecl;
begin
  Result := Gtk4.gtk_print_context_get_dpi_y(@self);
end;

function TGtkPrintContext.get_hard_margins(top: Pgdouble; bottom: Pgdouble; left: Pgdouble; right: Pgdouble): gboolean; cdecl;
begin
  Result := Gtk4.gtk_print_context_get_hard_margins(@self, top, bottom, left, right);
end;

function TGtkPrintContext.get_height: gdouble; cdecl;
begin
  Result := Gtk4.gtk_print_context_get_height(@self);
end;

function TGtkPrintContext.get_page_setup: PGtkPageSetup; cdecl;
begin
  Result := Gtk4.gtk_print_context_get_page_setup(@self);
end;

function TGtkPrintContext.get_pango_fontmap: PPangoFontMap; cdecl;
begin
  Result := Gtk4.gtk_print_context_get_pango_fontmap(@self);
end;

function TGtkPrintContext.get_width: gdouble; cdecl;
begin
  Result := Gtk4.gtk_print_context_get_width(@self);
end;

procedure TGtkPrintContext.set_cairo_context(cr: Pcairo_t; dpi_x: gdouble; dpi_y: gdouble); cdecl;
begin
  Gtk4.gtk_print_context_set_cairo_context(@self, cr, dpi_x, dpi_y);
end;

function TGtkPrintJob.new(title: Pgchar; printer: PGtkPrinter; settings: PGtkPrintSettings; page_setup: PGtkPageSetup): PGtkPrintJob; cdecl;
begin
  Result := Gtk4.gtk_print_job_new(title, printer, settings, page_setup);
end;

function TGtkPrintJob.get_collate: gboolean; cdecl;
begin
  Result := Gtk4.gtk_print_job_get_collate(@self);
end;

function TGtkPrintJob.get_n_up: guint; cdecl;
begin
  Result := Gtk4.gtk_print_job_get_n_up(@self);
end;

function TGtkPrintJob.get_n_up_layout: TGtkNumberUpLayout; cdecl;
begin
  Result := Gtk4.gtk_print_job_get_n_up_layout(@self);
end;

function TGtkPrintJob.get_num_copies: gint; cdecl;
begin
  Result := Gtk4.gtk_print_job_get_num_copies(@self);
end;

function TGtkPrintJob.get_page_ranges(n_ranges: Pgint): PGtkPageRange; cdecl;
begin
  Result := Gtk4.gtk_print_job_get_page_ranges(@self, n_ranges);
end;

function TGtkPrintJob.get_page_set: TGtkPageSet; cdecl;
begin
  Result := Gtk4.gtk_print_job_get_page_set(@self);
end;

function TGtkPrintJob.get_pages: TGtkPrintPages; cdecl;
begin
  Result := Gtk4.gtk_print_job_get_pages(@self);
end;

function TGtkPrintJob.get_printer: PGtkPrinter; cdecl;
begin
  Result := Gtk4.gtk_print_job_get_printer(@self);
end;

function TGtkPrintJob.get_reverse: gboolean; cdecl;
begin
  Result := Gtk4.gtk_print_job_get_reverse(@self);
end;

function TGtkPrintJob.get_rotate: gboolean; cdecl;
begin
  Result := Gtk4.gtk_print_job_get_rotate(@self);
end;

function TGtkPrintJob.get_scale: gdouble; cdecl;
begin
  Result := Gtk4.gtk_print_job_get_scale(@self);
end;

function TGtkPrintJob.get_settings: PGtkPrintSettings; cdecl;
begin
  Result := Gtk4.gtk_print_job_get_settings(@self);
end;

function TGtkPrintJob.get_status: TGtkPrintStatus; cdecl;
begin
  Result := Gtk4.gtk_print_job_get_status(@self);
end;

function TGtkPrintJob.get_surface(error: PPGError): Pcairo_surface_t; cdecl;
begin
  Result := Gtk4.gtk_print_job_get_surface(@self, error);
end;

function TGtkPrintJob.get_title: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_print_job_get_title(@self);
end;

function TGtkPrintJob.get_track_print_status: gboolean; cdecl;
begin
  Result := Gtk4.gtk_print_job_get_track_print_status(@self);
end;

procedure TGtkPrintJob.send(callback: TGtkPrintJobCompleteFunc; user_data: gpointer; dnotify: TGDestroyNotify); cdecl;
begin
  Gtk4.gtk_print_job_send(@self, callback, user_data, dnotify);
end;

procedure TGtkPrintJob.set_collate(collate: gboolean); cdecl;
begin
  Gtk4.gtk_print_job_set_collate(@self, collate);
end;

procedure TGtkPrintJob.set_n_up(n_up: guint); cdecl;
begin
  Gtk4.gtk_print_job_set_n_up(@self, n_up);
end;

procedure TGtkPrintJob.set_n_up_layout(layout: TGtkNumberUpLayout); cdecl;
begin
  Gtk4.gtk_print_job_set_n_up_layout(@self, layout);
end;

procedure TGtkPrintJob.set_num_copies(num_copies: gint); cdecl;
begin
  Gtk4.gtk_print_job_set_num_copies(@self, num_copies);
end;

procedure TGtkPrintJob.set_page_ranges(ranges: PGtkPageRange; n_ranges: gint); cdecl;
begin
  Gtk4.gtk_print_job_set_page_ranges(@self, ranges, n_ranges);
end;

procedure TGtkPrintJob.set_page_set(page_set: TGtkPageSet); cdecl;
begin
  Gtk4.gtk_print_job_set_page_set(@self, page_set);
end;

procedure TGtkPrintJob.set_pages(pages: TGtkPrintPages); cdecl;
begin
  Gtk4.gtk_print_job_set_pages(@self, pages);
end;

procedure TGtkPrintJob.set_reverse(reverse: gboolean); cdecl;
begin
  Gtk4.gtk_print_job_set_reverse(@self, reverse);
end;

procedure TGtkPrintJob.set_rotate(rotate: gboolean); cdecl;
begin
  Gtk4.gtk_print_job_set_rotate(@self, rotate);
end;

procedure TGtkPrintJob.set_scale(scale: gdouble); cdecl;
begin
  Gtk4.gtk_print_job_set_scale(@self, scale);
end;

function TGtkPrintJob.set_source_fd(fd: gint; error: PPGError): gboolean; cdecl;
begin
  Result := Gtk4.gtk_print_job_set_source_fd(@self, fd, error);
end;

function TGtkPrintJob.set_source_file(filename: Pgchar; error: PPGError): gboolean; cdecl;
begin
  Result := Gtk4.gtk_print_job_set_source_file(@self, filename, error);
end;

procedure TGtkPrintJob.set_track_print_status(track_status: gboolean); cdecl;
begin
  Gtk4.gtk_print_job_set_track_print_status(@self, track_status);
end;

function TGtkPrinter.new(name: Pgchar; backend: PGtkPrintBackend; virtual_: gboolean): PGtkPrinter; cdecl;
begin
  Result := Gtk4.gtk_printer_new(name, backend, virtual_);
end;

function TGtkPrinter.accepts_pdf: gboolean; cdecl;
begin
  Result := Gtk4.gtk_printer_accepts_pdf(@self);
end;

function TGtkPrinter.accepts_ps: gboolean; cdecl;
begin
  Result := Gtk4.gtk_printer_accepts_ps(@self);
end;

function TGtkPrinter.compare(b: PGtkPrinter): gint; cdecl;
begin
  Result := Gtk4.gtk_printer_compare(@self, b);
end;

function TGtkPrinter.get_backend: PGtkPrintBackend; cdecl;
begin
  Result := Gtk4.gtk_printer_get_backend(@self);
end;

function TGtkPrinter.get_capabilities: TGtkPrintCapabilities; cdecl;
begin
  Result := Gtk4.gtk_printer_get_capabilities(@self);
end;

function TGtkPrinter.get_default_page_size: PGtkPageSetup; cdecl;
begin
  Result := Gtk4.gtk_printer_get_default_page_size(@self);
end;

function TGtkPrinter.get_description: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_printer_get_description(@self);
end;

function TGtkPrinter.get_hard_margins(top: Pgdouble; bottom: Pgdouble; left: Pgdouble; right: Pgdouble): gboolean; cdecl;
begin
  Result := Gtk4.gtk_printer_get_hard_margins(@self, top, bottom, left, right);
end;

function TGtkPrinter.get_hard_margins_for_paper_size(paper_size: PGtkPaperSize; top: Pgdouble; bottom: Pgdouble; left: Pgdouble; right: Pgdouble): gboolean; cdecl;
begin
  Result := Gtk4.gtk_printer_get_hard_margins_for_paper_size(@self, paper_size, top, bottom, left, right);
end;

function TGtkPrinter.get_icon_name: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_printer_get_icon_name(@self);
end;

function TGtkPrinter.get_job_count: gint; cdecl;
begin
  Result := Gtk4.gtk_printer_get_job_count(@self);
end;

function TGtkPrinter.get_location: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_printer_get_location(@self);
end;

function TGtkPrinter.get_name: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_printer_get_name(@self);
end;

function TGtkPrinter.get_state_message: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_printer_get_state_message(@self);
end;

function TGtkPrinter.has_details: gboolean; cdecl;
begin
  Result := Gtk4.gtk_printer_has_details(@self);
end;

function TGtkPrinter.is_accepting_jobs: gboolean; cdecl;
begin
  Result := Gtk4.gtk_printer_is_accepting_jobs(@self);
end;

function TGtkPrinter.is_active: gboolean; cdecl;
begin
  Result := Gtk4.gtk_printer_is_active(@self);
end;

function TGtkPrinter.is_default: gboolean; cdecl;
begin
  Result := Gtk4.gtk_printer_is_default(@self);
end;

function TGtkPrinter.is_paused: gboolean; cdecl;
begin
  Result := Gtk4.gtk_printer_is_paused(@self);
end;

function TGtkPrinter.is_virtual: gboolean; cdecl;
begin
  Result := Gtk4.gtk_printer_is_virtual(@self);
end;

function TGtkPrinter.list_papers: PGList; cdecl;
begin
  Result := Gtk4.gtk_printer_list_papers(@self);
end;

procedure TGtkPrinter.request_details; cdecl;
begin
  Gtk4.gtk_printer_request_details(@self);
end;

procedure TGtkPrintOperationPreview.end_preview; cdecl;
begin
  Gtk4.gtk_print_operation_preview_end_preview(@self);
end;

function TGtkPrintOperationPreview.is_selected(page_nr: gint): gboolean; cdecl;
begin
  Result := Gtk4.gtk_print_operation_preview_is_selected(@self, page_nr);
end;

procedure TGtkPrintOperationPreview.render_page(page_nr: gint); cdecl;
begin
  Gtk4.gtk_print_operation_preview_render_page(@self, page_nr);
end;

function TGtkPrintOperation.new: PGtkPrintOperation; cdecl;
begin
  Result := Gtk4.gtk_print_operation_new();
end;

procedure TGtkPrintOperation.cancel; cdecl;
begin
  Gtk4.gtk_print_operation_cancel(@self);
end;

procedure TGtkPrintOperation.draw_page_finish; cdecl;
begin
  Gtk4.gtk_print_operation_draw_page_finish(@self);
end;

function TGtkPrintOperation.get_default_page_setup: PGtkPageSetup; cdecl;
begin
  Result := Gtk4.gtk_print_operation_get_default_page_setup(@self);
end;

function TGtkPrintOperation.get_embed_page_setup: gboolean; cdecl;
begin
  Result := Gtk4.gtk_print_operation_get_embed_page_setup(@self);
end;

procedure TGtkPrintOperation.get_error(error: PPGError); cdecl;
begin
  Gtk4.gtk_print_operation_get_error(@self, error);
end;

function TGtkPrintOperation.get_has_selection: gboolean; cdecl;
begin
  Result := Gtk4.gtk_print_operation_get_has_selection(@self);
end;

function TGtkPrintOperation.get_n_pages_to_print: gint; cdecl;
begin
  Result := Gtk4.gtk_print_operation_get_n_pages_to_print(@self);
end;

function TGtkPrintOperation.get_print_settings: PGtkPrintSettings; cdecl;
begin
  Result := Gtk4.gtk_print_operation_get_print_settings(@self);
end;

function TGtkPrintOperation.get_status: TGtkPrintStatus; cdecl;
begin
  Result := Gtk4.gtk_print_operation_get_status(@self);
end;

function TGtkPrintOperation.get_status_string: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_print_operation_get_status_string(@self);
end;

function TGtkPrintOperation.get_support_selection: gboolean; cdecl;
begin
  Result := Gtk4.gtk_print_operation_get_support_selection(@self);
end;

function TGtkPrintOperation.is_finished: gboolean; cdecl;
begin
  Result := Gtk4.gtk_print_operation_is_finished(@self);
end;

function TGtkPrintOperation.run(action: TGtkPrintOperationAction; parent: PGtkWindow; error: PPGError): TGtkPrintOperationResult; cdecl;
begin
  Result := Gtk4.gtk_print_operation_run(@self, action, parent, error);
end;

procedure TGtkPrintOperation.set_allow_async(allow_async: gboolean); cdecl;
begin
  Gtk4.gtk_print_operation_set_allow_async(@self, allow_async);
end;

procedure TGtkPrintOperation.set_current_page(current_page: gint); cdecl;
begin
  Gtk4.gtk_print_operation_set_current_page(@self, current_page);
end;

procedure TGtkPrintOperation.set_custom_tab_label(label_: Pgchar); cdecl;
begin
  Gtk4.gtk_print_operation_set_custom_tab_label(@self, label_);
end;

procedure TGtkPrintOperation.set_default_page_setup(default_page_setup: PGtkPageSetup); cdecl;
begin
  Gtk4.gtk_print_operation_set_default_page_setup(@self, default_page_setup);
end;

procedure TGtkPrintOperation.set_defer_drawing; cdecl;
begin
  Gtk4.gtk_print_operation_set_defer_drawing(@self);
end;

procedure TGtkPrintOperation.set_embed_page_setup(embed: gboolean); cdecl;
begin
  Gtk4.gtk_print_operation_set_embed_page_setup(@self, embed);
end;

procedure TGtkPrintOperation.set_export_filename(filename: Pgchar); cdecl;
begin
  Gtk4.gtk_print_operation_set_export_filename(@self, filename);
end;

procedure TGtkPrintOperation.set_has_selection(has_selection: gboolean); cdecl;
begin
  Gtk4.gtk_print_operation_set_has_selection(@self, has_selection);
end;

procedure TGtkPrintOperation.set_job_name(job_name: Pgchar); cdecl;
begin
  Gtk4.gtk_print_operation_set_job_name(@self, job_name);
end;

procedure TGtkPrintOperation.set_n_pages(n_pages: gint); cdecl;
begin
  Gtk4.gtk_print_operation_set_n_pages(@self, n_pages);
end;

procedure TGtkPrintOperation.set_print_settings(print_settings: PGtkPrintSettings); cdecl;
begin
  Gtk4.gtk_print_operation_set_print_settings(@self, print_settings);
end;

procedure TGtkPrintOperation.set_show_progress(show_progress: gboolean); cdecl;
begin
  Gtk4.gtk_print_operation_set_show_progress(@self, show_progress);
end;

procedure TGtkPrintOperation.set_support_selection(support_selection: gboolean); cdecl;
begin
  Gtk4.gtk_print_operation_set_support_selection(@self, support_selection);
end;

procedure TGtkPrintOperation.set_track_print_status(track_status: gboolean); cdecl;
begin
  Gtk4.gtk_print_operation_set_track_print_status(@self, track_status);
end;

procedure TGtkPrintOperation.set_unit(unit_: TGtkUnit); cdecl;
begin
  Gtk4.gtk_print_operation_set_unit(@self, unit_);
end;

procedure TGtkPrintOperation.set_use_full_page(full_page: gboolean); cdecl;
begin
  Gtk4.gtk_print_operation_set_use_full_page(@self, full_page);
end;

function TGtkPrintUnixDialog.new(title: Pgchar; parent: PGtkWindow): PGtkPrintUnixDialog; cdecl;
begin
  Result := Gtk4.gtk_print_unix_dialog_new(title, parent);
end;

procedure TGtkPrintUnixDialog.add_custom_tab(child: PGtkWidget; tab_label: PGtkWidget); cdecl;
begin
  Gtk4.gtk_print_unix_dialog_add_custom_tab(@self, child, tab_label);
end;

function TGtkPrintUnixDialog.get_current_page: gint; cdecl;
begin
  Result := Gtk4.gtk_print_unix_dialog_get_current_page(@self);
end;

function TGtkPrintUnixDialog.get_embed_page_setup: gboolean; cdecl;
begin
  Result := Gtk4.gtk_print_unix_dialog_get_embed_page_setup(@self);
end;

function TGtkPrintUnixDialog.get_has_selection: gboolean; cdecl;
begin
  Result := Gtk4.gtk_print_unix_dialog_get_has_selection(@self);
end;

function TGtkPrintUnixDialog.get_manual_capabilities: TGtkPrintCapabilities; cdecl;
begin
  Result := Gtk4.gtk_print_unix_dialog_get_manual_capabilities(@self);
end;

function TGtkPrintUnixDialog.get_page_setup: PGtkPageSetup; cdecl;
begin
  Result := Gtk4.gtk_print_unix_dialog_get_page_setup(@self);
end;

function TGtkPrintUnixDialog.get_page_setup_set: gboolean; cdecl;
begin
  Result := Gtk4.gtk_print_unix_dialog_get_page_setup_set(@self);
end;

function TGtkPrintUnixDialog.get_selected_printer: PGtkPrinter; cdecl;
begin
  Result := Gtk4.gtk_print_unix_dialog_get_selected_printer(@self);
end;

function TGtkPrintUnixDialog.get_settings: PGtkPrintSettings; cdecl;
begin
  Result := Gtk4.gtk_print_unix_dialog_get_settings(@self);
end;

function TGtkPrintUnixDialog.get_support_selection: gboolean; cdecl;
begin
  Result := Gtk4.gtk_print_unix_dialog_get_support_selection(@self);
end;

procedure TGtkPrintUnixDialog.set_current_page(current_page: gint); cdecl;
begin
  Gtk4.gtk_print_unix_dialog_set_current_page(@self, current_page);
end;

procedure TGtkPrintUnixDialog.set_embed_page_setup(embed: gboolean); cdecl;
begin
  Gtk4.gtk_print_unix_dialog_set_embed_page_setup(@self, embed);
end;

procedure TGtkPrintUnixDialog.set_has_selection(has_selection: gboolean); cdecl;
begin
  Gtk4.gtk_print_unix_dialog_set_has_selection(@self, has_selection);
end;

procedure TGtkPrintUnixDialog.set_manual_capabilities(capabilities: TGtkPrintCapabilities); cdecl;
begin
  Gtk4.gtk_print_unix_dialog_set_manual_capabilities(@self, capabilities);
end;

procedure TGtkPrintUnixDialog.set_page_setup(page_setup: PGtkPageSetup); cdecl;
begin
  Gtk4.gtk_print_unix_dialog_set_page_setup(@self, page_setup);
end;

procedure TGtkPrintUnixDialog.set_settings(settings: PGtkPrintSettings); cdecl;
begin
  Gtk4.gtk_print_unix_dialog_set_settings(@self, settings);
end;

procedure TGtkPrintUnixDialog.set_support_selection(support_selection: gboolean); cdecl;
begin
  Gtk4.gtk_print_unix_dialog_set_support_selection(@self, support_selection);
end;

function TGtkProgressBar.new: PGtkProgressBar; cdecl;
begin
  Result := Gtk4.gtk_progress_bar_new();
end;

function TGtkProgressBar.get_ellipsize: TPangoEllipsizeMode; cdecl;
begin
  Result := Gtk4.gtk_progress_bar_get_ellipsize(@self);
end;

function TGtkProgressBar.get_fraction: gdouble; cdecl;
begin
  Result := Gtk4.gtk_progress_bar_get_fraction(@self);
end;

function TGtkProgressBar.get_inverted: gboolean; cdecl;
begin
  Result := Gtk4.gtk_progress_bar_get_inverted(@self);
end;

function TGtkProgressBar.get_pulse_step: gdouble; cdecl;
begin
  Result := Gtk4.gtk_progress_bar_get_pulse_step(@self);
end;

function TGtkProgressBar.get_show_text: gboolean; cdecl;
begin
  Result := Gtk4.gtk_progress_bar_get_show_text(@self);
end;

function TGtkProgressBar.get_text: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_progress_bar_get_text(@self);
end;

procedure TGtkProgressBar.pulse; cdecl;
begin
  Gtk4.gtk_progress_bar_pulse(@self);
end;

procedure TGtkProgressBar.set_ellipsize(mode: TPangoEllipsizeMode); cdecl;
begin
  Gtk4.gtk_progress_bar_set_ellipsize(@self, mode);
end;

procedure TGtkProgressBar.set_fraction(fraction: gdouble); cdecl;
begin
  Gtk4.gtk_progress_bar_set_fraction(@self, fraction);
end;

procedure TGtkProgressBar.set_inverted(inverted: gboolean); cdecl;
begin
  Gtk4.gtk_progress_bar_set_inverted(@self, inverted);
end;

procedure TGtkProgressBar.set_pulse_step(fraction: gdouble); cdecl;
begin
  Gtk4.gtk_progress_bar_set_pulse_step(@self, fraction);
end;

procedure TGtkProgressBar.set_show_text(show_text: gboolean); cdecl;
begin
  Gtk4.gtk_progress_bar_set_show_text(@self, show_text);
end;

procedure TGtkProgressBar.set_text(text: Pgchar); cdecl;
begin
  Gtk4.gtk_progress_bar_set_text(@self, text);
end;

function TGtkPropertyExpression.new(this_type: TGType; expression: PGtkExpression; property_name: Pgchar): PGtkPropertyExpression; cdecl;
begin
  Result := Gtk4.gtk_property_expression_new(this_type, expression, property_name);
end;

function TGtkPropertyExpression.new_for_pspec(expression: PGtkExpression; pspec: PGParamSpec): PGtkPropertyExpression; cdecl;
begin
  Result := Gtk4.gtk_property_expression_new_for_pspec(expression, pspec);
end;

function TGtkPropertyExpression.get_expression: PGtkExpression; cdecl;
begin
  Result := Gtk4.gtk_property_expression_get_expression(@self);
end;

function TGtkPropertyExpression.get_pspec: PGParamSpec; cdecl;
begin
  Result := Gtk4.gtk_property_expression_get_pspec(@self);
end;

function TGtkRange.get_adjustment: PGtkAdjustment; cdecl;
begin
  Result := Gtk4.gtk_range_get_adjustment(@self);
end;

function TGtkRange.get_fill_level: gdouble; cdecl;
begin
  Result := Gtk4.gtk_range_get_fill_level(@self);
end;

function TGtkRange.get_flippable: gboolean; cdecl;
begin
  Result := Gtk4.gtk_range_get_flippable(@self);
end;

function TGtkRange.get_inverted: gboolean; cdecl;
begin
  Result := Gtk4.gtk_range_get_inverted(@self);
end;

procedure TGtkRange.get_range_rect(range_rect: PGdkRectangle); cdecl;
begin
  Gtk4.gtk_range_get_range_rect(@self, range_rect);
end;

function TGtkRange.get_restrict_to_fill_level: gboolean; cdecl;
begin
  Result := Gtk4.gtk_range_get_restrict_to_fill_level(@self);
end;

function TGtkRange.get_round_digits: gint; cdecl;
begin
  Result := Gtk4.gtk_range_get_round_digits(@self);
end;

function TGtkRange.get_show_fill_level: gboolean; cdecl;
begin
  Result := Gtk4.gtk_range_get_show_fill_level(@self);
end;

procedure TGtkRange.get_slider_range(slider_start: Pgint; slider_end: Pgint); cdecl;
begin
  Gtk4.gtk_range_get_slider_range(@self, slider_start, slider_end);
end;

function TGtkRange.get_slider_size_fixed: gboolean; cdecl;
begin
  Result := Gtk4.gtk_range_get_slider_size_fixed(@self);
end;

function TGtkRange.get_value: gdouble; cdecl;
begin
  Result := Gtk4.gtk_range_get_value(@self);
end;

procedure TGtkRange.set_adjustment(adjustment: PGtkAdjustment); cdecl;
begin
  Gtk4.gtk_range_set_adjustment(@self, adjustment);
end;

procedure TGtkRange.set_fill_level(fill_level: gdouble); cdecl;
begin
  Gtk4.gtk_range_set_fill_level(@self, fill_level);
end;

procedure TGtkRange.set_flippable(flippable: gboolean); cdecl;
begin
  Gtk4.gtk_range_set_flippable(@self, flippable);
end;

procedure TGtkRange.set_increments(step: gdouble; page: gdouble); cdecl;
begin
  Gtk4.gtk_range_set_increments(@self, step, page);
end;

procedure TGtkRange.set_inverted(setting: gboolean); cdecl;
begin
  Gtk4.gtk_range_set_inverted(@self, setting);
end;

procedure TGtkRange.set_range(min: gdouble; max: gdouble); cdecl;
begin
  Gtk4.gtk_range_set_range(@self, min, max);
end;

procedure TGtkRange.set_restrict_to_fill_level(restrict_to_fill_level: gboolean); cdecl;
begin
  Gtk4.gtk_range_set_restrict_to_fill_level(@self, restrict_to_fill_level);
end;

procedure TGtkRange.set_round_digits(round_digits: gint); cdecl;
begin
  Gtk4.gtk_range_set_round_digits(@self, round_digits);
end;

procedure TGtkRange.set_show_fill_level(show_fill_level: gboolean); cdecl;
begin
  Gtk4.gtk_range_set_show_fill_level(@self, show_fill_level);
end;

procedure TGtkRange.set_slider_size_fixed(size_fixed: gboolean); cdecl;
begin
  Gtk4.gtk_range_set_slider_size_fixed(@self, size_fixed);
end;

procedure TGtkRange.set_value(value: gdouble); cdecl;
begin
  Gtk4.gtk_range_set_value(@self, value);
end;

function TGtkRecentInfo.create_app_info(app_name: Pgchar; error: PPGError): PGAppInfo; cdecl;
begin
  Result := Gtk4.gtk_recent_info_create_app_info(@self, app_name, error);
end;

function TGtkRecentInfo.exists: gboolean; cdecl;
begin
  Result := Gtk4.gtk_recent_info_exists(@self);
end;

function TGtkRecentInfo.get_added: PGDateTime; cdecl;
begin
  Result := Gtk4.gtk_recent_info_get_added(@self);
end;

function TGtkRecentInfo.get_age: gint; cdecl;
begin
  Result := Gtk4.gtk_recent_info_get_age(@self);
end;

function TGtkRecentInfo.get_application_info(app_name: Pgchar; app_exec: PPgchar; count: Pguint; stamp: PPGDateTime): gboolean; cdecl;
begin
  Result := Gtk4.gtk_recent_info_get_application_info(@self, app_name, app_exec, count, stamp);
end;

function TGtkRecentInfo.get_applications(length: Pgsize): PPgchar; cdecl;
begin
  Result := Gtk4.gtk_recent_info_get_applications(@self, length);
end;

function TGtkRecentInfo.get_description: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_recent_info_get_description(@self);
end;

function TGtkRecentInfo.get_display_name: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_recent_info_get_display_name(@self);
end;

function TGtkRecentInfo.get_gicon: PGIcon; cdecl;
begin
  Result := Gtk4.gtk_recent_info_get_gicon(@self);
end;

function TGtkRecentInfo.get_groups(length: Pgsize): PPgchar; cdecl;
begin
  Result := Gtk4.gtk_recent_info_get_groups(@self, length);
end;

function TGtkRecentInfo.get_mime_type: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_recent_info_get_mime_type(@self);
end;

function TGtkRecentInfo.get_modified: PGDateTime; cdecl;
begin
  Result := Gtk4.gtk_recent_info_get_modified(@self);
end;

function TGtkRecentInfo.get_private_hint: gboolean; cdecl;
begin
  Result := Gtk4.gtk_recent_info_get_private_hint(@self);
end;

function TGtkRecentInfo.get_short_name: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_recent_info_get_short_name(@self);
end;

function TGtkRecentInfo.get_uri: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_recent_info_get_uri(@self);
end;

function TGtkRecentInfo.get_uri_display: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_recent_info_get_uri_display(@self);
end;

function TGtkRecentInfo.get_visited: PGDateTime; cdecl;
begin
  Result := Gtk4.gtk_recent_info_get_visited(@self);
end;

function TGtkRecentInfo.has_application(app_name: Pgchar): gboolean; cdecl;
begin
  Result := Gtk4.gtk_recent_info_has_application(@self, app_name);
end;

function TGtkRecentInfo.has_group(group_name: Pgchar): gboolean; cdecl;
begin
  Result := Gtk4.gtk_recent_info_has_group(@self, group_name);
end;

function TGtkRecentInfo.is_local: gboolean; cdecl;
begin
  Result := Gtk4.gtk_recent_info_is_local(@self);
end;

function TGtkRecentInfo.last_application: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_recent_info_last_application(@self);
end;

function TGtkRecentInfo.match(info_b: PGtkRecentInfo): gboolean; cdecl;
begin
  Result := Gtk4.gtk_recent_info_match(@self, info_b);
end;

function TGtkRecentInfo.ref: PGtkRecentInfo; cdecl;
begin
  Result := Gtk4.gtk_recent_info_ref(@self);
end;

procedure TGtkRecentInfo.unref; cdecl;
begin
  Gtk4.gtk_recent_info_unref(@self);
end;

function TGtkRecentManager.new: PGtkRecentManager; cdecl;
begin
  Result := Gtk4.gtk_recent_manager_new();
end;

function TGtkRecentManager.get_default: PGtkRecentManager; cdecl;
begin
  Result := Gtk4.gtk_recent_manager_get_default();
end;

function TGtkRecentManager.add_full(uri: Pgchar; recent_data: PGtkRecentData): gboolean; cdecl;
begin
  Result := Gtk4.gtk_recent_manager_add_full(@self, uri, recent_data);
end;

function TGtkRecentManager.add_item(uri: Pgchar): gboolean; cdecl;
begin
  Result := Gtk4.gtk_recent_manager_add_item(@self, uri);
end;

function TGtkRecentManager.get_items: PGList; cdecl;
begin
  Result := Gtk4.gtk_recent_manager_get_items(@self);
end;

function TGtkRecentManager.has_item(uri: Pgchar): gboolean; cdecl;
begin
  Result := Gtk4.gtk_recent_manager_has_item(@self, uri);
end;

function TGtkRecentManager.lookup_item(uri: Pgchar; error: PPGError): PGtkRecentInfo; cdecl;
begin
  Result := Gtk4.gtk_recent_manager_lookup_item(@self, uri, error);
end;

function TGtkRecentManager.move_item(uri: Pgchar; new_uri: Pgchar; error: PPGError): gboolean; cdecl;
begin
  Result := Gtk4.gtk_recent_manager_move_item(@self, uri, new_uri, error);
end;

function TGtkRecentManager.purge_items(error: PPGError): gint; cdecl;
begin
  Result := Gtk4.gtk_recent_manager_purge_items(@self, error);
end;

function TGtkRecentManager.remove_item(uri: Pgchar; error: PPGError): gboolean; cdecl;
begin
  Result := Gtk4.gtk_recent_manager_remove_item(@self, uri, error);
end;

function TGtkRevealer.new: PGtkRevealer; cdecl;
begin
  Result := Gtk4.gtk_revealer_new();
end;

function TGtkRevealer.get_child: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_revealer_get_child(@self);
end;

function TGtkRevealer.get_child_revealed: gboolean; cdecl;
begin
  Result := Gtk4.gtk_revealer_get_child_revealed(@self);
end;

function TGtkRevealer.get_reveal_child: gboolean; cdecl;
begin
  Result := Gtk4.gtk_revealer_get_reveal_child(@self);
end;

function TGtkRevealer.get_transition_duration: guint; cdecl;
begin
  Result := Gtk4.gtk_revealer_get_transition_duration(@self);
end;

function TGtkRevealer.get_transition_type: TGtkRevealerTransitionType; cdecl;
begin
  Result := Gtk4.gtk_revealer_get_transition_type(@self);
end;

procedure TGtkRevealer.set_child(child: PGtkWidget); cdecl;
begin
  Gtk4.gtk_revealer_set_child(@self, child);
end;

procedure TGtkRevealer.set_reveal_child(reveal_child: gboolean); cdecl;
begin
  Gtk4.gtk_revealer_set_reveal_child(@self, reveal_child);
end;

procedure TGtkRevealer.set_transition_duration(duration: guint); cdecl;
begin
  Gtk4.gtk_revealer_set_transition_duration(@self, duration);
end;

procedure TGtkRevealer.set_transition_type(transition: TGtkRevealerTransitionType); cdecl;
begin
  Gtk4.gtk_revealer_set_transition_type(@self, transition);
end;

function TGtkScale.new(orientation: TGtkOrientation; adjustment: PGtkAdjustment): PGtkScale; cdecl;
begin
  Result := Gtk4.gtk_scale_new(orientation, adjustment);
end;

function TGtkScale.new_with_range(orientation: TGtkOrientation; min: gdouble; max: gdouble; step: gdouble): PGtkScale; cdecl;
begin
  Result := Gtk4.gtk_scale_new_with_range(orientation, min, max, step);
end;

procedure TGtkScale.add_mark(value: gdouble; position: TGtkPositionType; markup: Pgchar); cdecl;
begin
  Gtk4.gtk_scale_add_mark(@self, value, position, markup);
end;

procedure TGtkScale.clear_marks; cdecl;
begin
  Gtk4.gtk_scale_clear_marks(@self);
end;

function TGtkScale.get_digits: gint; cdecl;
begin
  Result := Gtk4.gtk_scale_get_digits(@self);
end;

function TGtkScale.get_draw_value: gboolean; cdecl;
begin
  Result := Gtk4.gtk_scale_get_draw_value(@self);
end;

function TGtkScale.get_has_origin: gboolean; cdecl;
begin
  Result := Gtk4.gtk_scale_get_has_origin(@self);
end;

function TGtkScale.get_layout: PPangoLayout; cdecl;
begin
  Result := Gtk4.gtk_scale_get_layout(@self);
end;

procedure TGtkScale.get_layout_offsets(x: Pgint; y: Pgint); cdecl;
begin
  Gtk4.gtk_scale_get_layout_offsets(@self, x, y);
end;

function TGtkScale.get_value_pos: TGtkPositionType; cdecl;
begin
  Result := Gtk4.gtk_scale_get_value_pos(@self);
end;

procedure TGtkScale.set_digits(digits: gint); cdecl;
begin
  Gtk4.gtk_scale_set_digits(@self, digits);
end;

procedure TGtkScale.set_draw_value(draw_value: gboolean); cdecl;
begin
  Gtk4.gtk_scale_set_draw_value(@self, draw_value);
end;

procedure TGtkScale.set_format_value_func(func: TGtkScaleFormatValueFunc; user_data: gpointer; destroy_notify: TGDestroyNotify); cdecl;
begin
  Gtk4.gtk_scale_set_format_value_func(@self, func, user_data, destroy_notify);
end;

procedure TGtkScale.set_has_origin(has_origin: gboolean); cdecl;
begin
  Gtk4.gtk_scale_set_has_origin(@self, has_origin);
end;

procedure TGtkScale.set_value_pos(pos: TGtkPositionType); cdecl;
begin
  Gtk4.gtk_scale_set_value_pos(@self, pos);
end;

function TGtkScaleButton.new(min: gdouble; max: gdouble; step: gdouble; icons: PPgchar): PGtkScaleButton; cdecl;
begin
  Result := Gtk4.gtk_scale_button_new(min, max, step, icons);
end;

function TGtkScaleButton.get_adjustment: PGtkAdjustment; cdecl;
begin
  Result := Gtk4.gtk_scale_button_get_adjustment(@self);
end;

function TGtkScaleButton.get_minus_button: PGtkButton; cdecl;
begin
  Result := Gtk4.gtk_scale_button_get_minus_button(@self);
end;

function TGtkScaleButton.get_plus_button: PGtkButton; cdecl;
begin
  Result := Gtk4.gtk_scale_button_get_plus_button(@self);
end;

function TGtkScaleButton.get_popup: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_scale_button_get_popup(@self);
end;

function TGtkScaleButton.get_value: gdouble; cdecl;
begin
  Result := Gtk4.gtk_scale_button_get_value(@self);
end;

procedure TGtkScaleButton.set_adjustment(adjustment: PGtkAdjustment); cdecl;
begin
  Gtk4.gtk_scale_button_set_adjustment(@self, adjustment);
end;

procedure TGtkScaleButton.set_icons(icons: PPgchar); cdecl;
begin
  Gtk4.gtk_scale_button_set_icons(@self, icons);
end;

procedure TGtkScaleButton.set_value(value: gdouble); cdecl;
begin
  Gtk4.gtk_scale_button_set_value(@self, value);
end;

function TGtkScrollbar.new(orientation: TGtkOrientation; adjustment: PGtkAdjustment): PGtkScrollbar; cdecl;
begin
  Result := Gtk4.gtk_scrollbar_new(orientation, adjustment);
end;

function TGtkScrollbar.get_adjustment: PGtkAdjustment; cdecl;
begin
  Result := Gtk4.gtk_scrollbar_get_adjustment(@self);
end;

procedure TGtkScrollbar.set_adjustment(adjustment: PGtkAdjustment); cdecl;
begin
  Gtk4.gtk_scrollbar_set_adjustment(@self, adjustment);
end;

function TGtkScrolledWindow.new: PGtkScrolledWindow; cdecl;
begin
  Result := Gtk4.gtk_scrolled_window_new();
end;

function TGtkScrolledWindow.get_child: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_scrolled_window_get_child(@self);
end;

function TGtkScrolledWindow.get_hadjustment: PGtkAdjustment; cdecl;
begin
  Result := Gtk4.gtk_scrolled_window_get_hadjustment(@self);
end;

function TGtkScrolledWindow.get_has_frame: gboolean; cdecl;
begin
  Result := Gtk4.gtk_scrolled_window_get_has_frame(@self);
end;

function TGtkScrolledWindow.get_hscrollbar: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_scrolled_window_get_hscrollbar(@self);
end;

function TGtkScrolledWindow.get_kinetic_scrolling: gboolean; cdecl;
begin
  Result := Gtk4.gtk_scrolled_window_get_kinetic_scrolling(@self);
end;

function TGtkScrolledWindow.get_max_content_height: gint; cdecl;
begin
  Result := Gtk4.gtk_scrolled_window_get_max_content_height(@self);
end;

function TGtkScrolledWindow.get_max_content_width: gint; cdecl;
begin
  Result := Gtk4.gtk_scrolled_window_get_max_content_width(@self);
end;

function TGtkScrolledWindow.get_min_content_height: gint; cdecl;
begin
  Result := Gtk4.gtk_scrolled_window_get_min_content_height(@self);
end;

function TGtkScrolledWindow.get_min_content_width: gint; cdecl;
begin
  Result := Gtk4.gtk_scrolled_window_get_min_content_width(@self);
end;

function TGtkScrolledWindow.get_overlay_scrolling: gboolean; cdecl;
begin
  Result := Gtk4.gtk_scrolled_window_get_overlay_scrolling(@self);
end;

function TGtkScrolledWindow.get_placement: TGtkCornerType; cdecl;
begin
  Result := Gtk4.gtk_scrolled_window_get_placement(@self);
end;

procedure TGtkScrolledWindow.get_policy(hscrollbar_policy: PGtkPolicyType; vscrollbar_policy: PGtkPolicyType); cdecl;
begin
  Gtk4.gtk_scrolled_window_get_policy(@self, hscrollbar_policy, vscrollbar_policy);
end;

function TGtkScrolledWindow.get_propagate_natural_height: gboolean; cdecl;
begin
  Result := Gtk4.gtk_scrolled_window_get_propagate_natural_height(@self);
end;

function TGtkScrolledWindow.get_propagate_natural_width: gboolean; cdecl;
begin
  Result := Gtk4.gtk_scrolled_window_get_propagate_natural_width(@self);
end;

function TGtkScrolledWindow.get_vadjustment: PGtkAdjustment; cdecl;
begin
  Result := Gtk4.gtk_scrolled_window_get_vadjustment(@self);
end;

function TGtkScrolledWindow.get_vscrollbar: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_scrolled_window_get_vscrollbar(@self);
end;

procedure TGtkScrolledWindow.set_child(child: PGtkWidget); cdecl;
begin
  Gtk4.gtk_scrolled_window_set_child(@self, child);
end;

procedure TGtkScrolledWindow.set_hadjustment(hadjustment: PGtkAdjustment); cdecl;
begin
  Gtk4.gtk_scrolled_window_set_hadjustment(@self, hadjustment);
end;

procedure TGtkScrolledWindow.set_has_frame(has_frame: gboolean); cdecl;
begin
  Gtk4.gtk_scrolled_window_set_has_frame(@self, has_frame);
end;

procedure TGtkScrolledWindow.set_kinetic_scrolling(kinetic_scrolling: gboolean); cdecl;
begin
  Gtk4.gtk_scrolled_window_set_kinetic_scrolling(@self, kinetic_scrolling);
end;

procedure TGtkScrolledWindow.set_max_content_height(height: gint); cdecl;
begin
  Gtk4.gtk_scrolled_window_set_max_content_height(@self, height);
end;

procedure TGtkScrolledWindow.set_max_content_width(width: gint); cdecl;
begin
  Gtk4.gtk_scrolled_window_set_max_content_width(@self, width);
end;

procedure TGtkScrolledWindow.set_min_content_height(height: gint); cdecl;
begin
  Gtk4.gtk_scrolled_window_set_min_content_height(@self, height);
end;

procedure TGtkScrolledWindow.set_min_content_width(width: gint); cdecl;
begin
  Gtk4.gtk_scrolled_window_set_min_content_width(@self, width);
end;

procedure TGtkScrolledWindow.set_overlay_scrolling(overlay_scrolling: gboolean); cdecl;
begin
  Gtk4.gtk_scrolled_window_set_overlay_scrolling(@self, overlay_scrolling);
end;

procedure TGtkScrolledWindow.set_placement(window_placement: TGtkCornerType); cdecl;
begin
  Gtk4.gtk_scrolled_window_set_placement(@self, window_placement);
end;

procedure TGtkScrolledWindow.set_policy(hscrollbar_policy: TGtkPolicyType; vscrollbar_policy: TGtkPolicyType); cdecl;
begin
  Gtk4.gtk_scrolled_window_set_policy(@self, hscrollbar_policy, vscrollbar_policy);
end;

procedure TGtkScrolledWindow.set_propagate_natural_height(propagate: gboolean); cdecl;
begin
  Gtk4.gtk_scrolled_window_set_propagate_natural_height(@self, propagate);
end;

procedure TGtkScrolledWindow.set_propagate_natural_width(propagate: gboolean); cdecl;
begin
  Gtk4.gtk_scrolled_window_set_propagate_natural_width(@self, propagate);
end;

procedure TGtkScrolledWindow.set_vadjustment(vadjustment: PGtkAdjustment); cdecl;
begin
  Gtk4.gtk_scrolled_window_set_vadjustment(@self, vadjustment);
end;

procedure TGtkScrolledWindow.unset_placement; cdecl;
begin
  Gtk4.gtk_scrolled_window_unset_placement(@self);
end;

function TGtkSearchBar.new: PGtkSearchBar; cdecl;
begin
  Result := Gtk4.gtk_search_bar_new();
end;

procedure TGtkSearchBar.connect_entry(entry: PGtkEditable); cdecl;
begin
  Gtk4.gtk_search_bar_connect_entry(@self, entry);
end;

function TGtkSearchBar.get_child: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_search_bar_get_child(@self);
end;

function TGtkSearchBar.get_key_capture_widget: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_search_bar_get_key_capture_widget(@self);
end;

function TGtkSearchBar.get_search_mode: gboolean; cdecl;
begin
  Result := Gtk4.gtk_search_bar_get_search_mode(@self);
end;

function TGtkSearchBar.get_show_close_button: gboolean; cdecl;
begin
  Result := Gtk4.gtk_search_bar_get_show_close_button(@self);
end;

procedure TGtkSearchBar.set_child(child: PGtkWidget); cdecl;
begin
  Gtk4.gtk_search_bar_set_child(@self, child);
end;

procedure TGtkSearchBar.set_key_capture_widget(widget: PGtkWidget); cdecl;
begin
  Gtk4.gtk_search_bar_set_key_capture_widget(@self, widget);
end;

procedure TGtkSearchBar.set_search_mode(search_mode: gboolean); cdecl;
begin
  Gtk4.gtk_search_bar_set_search_mode(@self, search_mode);
end;

procedure TGtkSearchBar.set_show_close_button(visible: gboolean); cdecl;
begin
  Gtk4.gtk_search_bar_set_show_close_button(@self, visible);
end;

function TGtkSearchEntry.new: PGtkSearchEntry; cdecl;
begin
  Result := Gtk4.gtk_search_entry_new();
end;

function TGtkSearchEntry.get_key_capture_widget: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_search_entry_get_key_capture_widget(@self);
end;

procedure TGtkSearchEntry.set_key_capture_widget(widget: PGtkWidget); cdecl;
begin
  Gtk4.gtk_search_entry_set_key_capture_widget(@self, widget);
end;

function TGtkSelectionFilterModel.new(model: PGtkSelectionModel): PGtkSelectionFilterModel; cdecl;
begin
  Result := Gtk4.gtk_selection_filter_model_new(model);
end;

function TGtkSelectionFilterModel.get_model: PGtkSelectionModel; cdecl;
begin
  Result := Gtk4.gtk_selection_filter_model_get_model(@self);
end;

procedure TGtkSelectionFilterModel.set_model(model: PGtkSelectionModel); cdecl;
begin
  Gtk4.gtk_selection_filter_model_set_model(@self, model);
end;

function TGtkSeparator.new(orientation: TGtkOrientation): PGtkSeparator; cdecl;
begin
  Result := Gtk4.gtk_separator_new(orientation);
end;

function TGtkSettings.get_default: PGtkSettings; cdecl;
begin
  Result := Gtk4.gtk_settings_get_default();
end;

function TGtkSettings.get_for_display(display: PGdkDisplay): PGtkSettings; cdecl;
begin
  Result := Gtk4.gtk_settings_get_for_display(display);
end;

procedure TGtkSettings.reset_property(name: Pgchar); cdecl;
begin
  Gtk4.gtk_settings_reset_property(@self, name);
end;

function TGtkShortcut.new(trigger: PGtkShortcutTrigger; action: PGtkShortcutAction): PGtkShortcut; cdecl;
begin
  Result := Gtk4.gtk_shortcut_new(trigger, action);
end;

function TGtkShortcut.get_action: PGtkShortcutAction; cdecl;
begin
  Result := Gtk4.gtk_shortcut_get_action(@self);
end;

function TGtkShortcut.get_arguments: PGVariant; cdecl;
begin
  Result := Gtk4.gtk_shortcut_get_arguments(@self);
end;

function TGtkShortcut.get_trigger: PGtkShortcutTrigger; cdecl;
begin
  Result := Gtk4.gtk_shortcut_get_trigger(@self);
end;

procedure TGtkShortcut.set_action(action: PGtkShortcutAction); cdecl;
begin
  Gtk4.gtk_shortcut_set_action(@self, action);
end;

procedure TGtkShortcut.set_arguments(args: PGVariant); cdecl;
begin
  Gtk4.gtk_shortcut_set_arguments(@self, args);
end;

procedure TGtkShortcut.set_trigger(trigger: PGtkShortcutTrigger); cdecl;
begin
  Gtk4.gtk_shortcut_set_trigger(@self, trigger);
end;

function TGtkShortcutAction.parse_string(string_: Pgchar): PGtkShortcutAction; cdecl;
begin
  Result := Gtk4.gtk_shortcut_action_parse_string(string_);
end;

function TGtkShortcutAction.activate(flags: TGtkShortcutActionFlags; widget: PGtkWidget; args: PGVariant): gboolean; cdecl;
begin
  Result := Gtk4.gtk_shortcut_action_activate(@self, flags, widget, args);
end;

procedure TGtkShortcutAction.print(string_: PGString); cdecl;
begin
  Gtk4.gtk_shortcut_action_print(@self, string_);
end;

function TGtkShortcutAction.to_string: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_shortcut_action_to_string(@self);
end;

function TGtkShortcutController.new: PGtkShortcutController; cdecl;
begin
  Result := Gtk4.gtk_shortcut_controller_new();
end;

function TGtkShortcutController.new_for_model(model: PGListModel): PGtkShortcutController; cdecl;
begin
  Result := Gtk4.gtk_shortcut_controller_new_for_model(model);
end;

procedure TGtkShortcutController.add_shortcut(shortcut: PGtkShortcut); cdecl;
begin
  Gtk4.gtk_shortcut_controller_add_shortcut(@self, shortcut);
end;

function TGtkShortcutController.get_mnemonics_modifiers: TGdkModifierType; cdecl;
begin
  Result := Gtk4.gtk_shortcut_controller_get_mnemonics_modifiers(@self);
end;

function TGtkShortcutController.get_scope: TGtkShortcutScope; cdecl;
begin
  Result := Gtk4.gtk_shortcut_controller_get_scope(@self);
end;

procedure TGtkShortcutController.remove_shortcut(shortcut: PGtkShortcut); cdecl;
begin
  Gtk4.gtk_shortcut_controller_remove_shortcut(@self, shortcut);
end;

procedure TGtkShortcutController.set_mnemonics_modifiers(modifiers: TGdkModifierType); cdecl;
begin
  Gtk4.gtk_shortcut_controller_set_mnemonics_modifiers(@self, modifiers);
end;

procedure TGtkShortcutController.set_scope(scope: TGtkShortcutScope); cdecl;
begin
  Gtk4.gtk_shortcut_controller_set_scope(@self, scope);
end;

function TGtkShortcutLabel.new(accelerator: Pgchar): PGtkShortcutLabel; cdecl;
begin
  Result := Gtk4.gtk_shortcut_label_new(accelerator);
end;

function TGtkShortcutLabel.get_accelerator: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_shortcut_label_get_accelerator(@self);
end;

function TGtkShortcutLabel.get_disabled_text: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_shortcut_label_get_disabled_text(@self);
end;

procedure TGtkShortcutLabel.set_accelerator(accelerator: Pgchar); cdecl;
begin
  Gtk4.gtk_shortcut_label_set_accelerator(@self, accelerator);
end;

procedure TGtkShortcutLabel.set_disabled_text(disabled_text: Pgchar); cdecl;
begin
  Gtk4.gtk_shortcut_label_set_disabled_text(@self, disabled_text);
end;

function TGtkSizeGroup.new(mode: TGtkSizeGroupMode): PGtkSizeGroup; cdecl;
begin
  Result := Gtk4.gtk_size_group_new(mode);
end;

procedure TGtkSizeGroup.add_widget(widget: PGtkWidget); cdecl;
begin
  Gtk4.gtk_size_group_add_widget(@self, widget);
end;

function TGtkSizeGroup.get_mode: TGtkSizeGroupMode; cdecl;
begin
  Result := Gtk4.gtk_size_group_get_mode(@self);
end;

function TGtkSizeGroup.get_widgets: PGSList; cdecl;
begin
  Result := Gtk4.gtk_size_group_get_widgets(@self);
end;

procedure TGtkSizeGroup.remove_widget(widget: PGtkWidget); cdecl;
begin
  Gtk4.gtk_size_group_remove_widget(@self, widget);
end;

procedure TGtkSizeGroup.set_mode(mode: TGtkSizeGroupMode); cdecl;
begin
  Gtk4.gtk_size_group_set_mode(@self, mode);
end;

function TGtkSignalAction.new(signal_name: Pgchar): PGtkSignalAction; cdecl;
begin
  Result := Gtk4.gtk_signal_action_new(signal_name);
end;

function TGtkSignalAction.get_signal_name: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_signal_action_get_signal_name(@self);
end;

function TGtkSignalListItemFactory.new: PGtkSignalListItemFactory; cdecl;
begin
  Result := Gtk4.gtk_signal_list_item_factory_new();
end;

function TGtkSingleSelection.new(model: PGListModel): PGtkSingleSelection; cdecl;
begin
  Result := Gtk4.gtk_single_selection_new(model);
end;

function TGtkSingleSelection.get_autoselect: gboolean; cdecl;
begin
  Result := Gtk4.gtk_single_selection_get_autoselect(@self);
end;

function TGtkSingleSelection.get_can_unselect: gboolean; cdecl;
begin
  Result := Gtk4.gtk_single_selection_get_can_unselect(@self);
end;

function TGtkSingleSelection.get_model: PGListModel; cdecl;
begin
  Result := Gtk4.gtk_single_selection_get_model(@self);
end;

function TGtkSingleSelection.get_selected: guint; cdecl;
begin
  Result := Gtk4.gtk_single_selection_get_selected(@self);
end;

function TGtkSingleSelection.get_selected_item: PGObject; cdecl;
begin
  Result := Gtk4.gtk_single_selection_get_selected_item(@self);
end;

procedure TGtkSingleSelection.set_autoselect(autoselect: gboolean); cdecl;
begin
  Gtk4.gtk_single_selection_set_autoselect(@self, autoselect);
end;

procedure TGtkSingleSelection.set_can_unselect(can_unselect: gboolean); cdecl;
begin
  Gtk4.gtk_single_selection_set_can_unselect(@self, can_unselect);
end;

procedure TGtkSingleSelection.set_model(model: PGListModel); cdecl;
begin
  Gtk4.gtk_single_selection_set_model(@self, model);
end;

procedure TGtkSingleSelection.set_selected(position: guint); cdecl;
begin
  Gtk4.gtk_single_selection_set_selected(@self, position);
end;

function TGtkSliceListModel.new(model: PGListModel; offset: guint; size: guint): PGtkSliceListModel; cdecl;
begin
  Result := Gtk4.gtk_slice_list_model_new(model, offset, size);
end;

function TGtkSliceListModel.get_model: PGListModel; cdecl;
begin
  Result := Gtk4.gtk_slice_list_model_get_model(@self);
end;

function TGtkSliceListModel.get_offset: guint; cdecl;
begin
  Result := Gtk4.gtk_slice_list_model_get_offset(@self);
end;

function TGtkSliceListModel.get_size: guint; cdecl;
begin
  Result := Gtk4.gtk_slice_list_model_get_size(@self);
end;

procedure TGtkSliceListModel.set_model(model: PGListModel); cdecl;
begin
  Gtk4.gtk_slice_list_model_set_model(@self, model);
end;

procedure TGtkSliceListModel.set_offset(offset: guint); cdecl;
begin
  Gtk4.gtk_slice_list_model_set_offset(@self, offset);
end;

procedure TGtkSliceListModel.set_size(size: guint); cdecl;
begin
  Gtk4.gtk_slice_list_model_set_size(@self, size);
end;

procedure TGtkStyleContext.add_provider_for_display(display: PGdkDisplay; provider: PGtkStyleProvider; priority: guint); cdecl;
begin
  Gtk4.gtk_style_context_add_provider_for_display(display, provider, priority);
end;

procedure TGtkStyleContext.remove_provider_for_display(display: PGdkDisplay; provider: PGtkStyleProvider); cdecl;
begin
  Gtk4.gtk_style_context_remove_provider_for_display(display, provider);
end;

procedure TGtkStyleContext.add_class(class_name: Pgchar); cdecl;
begin
  Gtk4.gtk_style_context_add_class(@self, class_name);
end;

procedure TGtkStyleContext.add_provider(provider: PGtkStyleProvider; priority: guint); cdecl;
begin
  Gtk4.gtk_style_context_add_provider(@self, provider, priority);
end;

procedure TGtkStyleContext.get_border(border: PGtkBorder); cdecl;
begin
  Gtk4.gtk_style_context_get_border(@self, border);
end;

procedure TGtkStyleContext.get_color(color: PGdkRGBA); cdecl;
begin
  Gtk4.gtk_style_context_get_color(@self, color);
end;

function TGtkStyleContext.get_display: PGdkDisplay; cdecl;
begin
  Result := Gtk4.gtk_style_context_get_display(@self);
end;

procedure TGtkStyleContext.get_margin(margin: PGtkBorder); cdecl;
begin
  Gtk4.gtk_style_context_get_margin(@self, margin);
end;

procedure TGtkStyleContext.get_padding(padding: PGtkBorder); cdecl;
begin
  Gtk4.gtk_style_context_get_padding(@self, padding);
end;

function TGtkStyleContext.get_scale: gint; cdecl;
begin
  Result := Gtk4.gtk_style_context_get_scale(@self);
end;

function TGtkStyleContext.get_state: TGtkStateFlags; cdecl;
begin
  Result := Gtk4.gtk_style_context_get_state(@self);
end;

function TGtkStyleContext.has_class(class_name: Pgchar): gboolean; cdecl;
begin
  Result := Gtk4.gtk_style_context_has_class(@self, class_name);
end;

function TGtkStyleContext.lookup_color(color_name: Pgchar; color: PGdkRGBA): gboolean; cdecl;
begin
  Result := Gtk4.gtk_style_context_lookup_color(@self, color_name, color);
end;

procedure TGtkStyleContext.remove_class(class_name: Pgchar); cdecl;
begin
  Gtk4.gtk_style_context_remove_class(@self, class_name);
end;

procedure TGtkStyleContext.remove_provider(provider: PGtkStyleProvider); cdecl;
begin
  Gtk4.gtk_style_context_remove_provider(@self, provider);
end;

procedure TGtkStyleContext.restore; cdecl;
begin
  Gtk4.gtk_style_context_restore(@self);
end;

procedure TGtkStyleContext.save; cdecl;
begin
  Gtk4.gtk_style_context_save(@self);
end;

procedure TGtkStyleContext.set_display(display: PGdkDisplay); cdecl;
begin
  Gtk4.gtk_style_context_set_display(@self, display);
end;

procedure TGtkStyleContext.set_scale(scale: gint); cdecl;
begin
  Gtk4.gtk_style_context_set_scale(@self, scale);
end;

procedure TGtkStyleContext.set_state(flags: TGtkStateFlags); cdecl;
begin
  Gtk4.gtk_style_context_set_state(@self, flags);
end;

function TGtkStyleContext.to_string(flags: TGtkStyleContextPrintFlags): Pgchar; cdecl;
begin
  Result := Gtk4.gtk_style_context_to_string(@self, flags);
end;

function TGtkSortListModel.new(model: PGListModel; sorter: PGtkSorter): PGtkSortListModel; cdecl;
begin
  Result := Gtk4.gtk_sort_list_model_new(model, sorter);
end;

function TGtkSortListModel.get_incremental: gboolean; cdecl;
begin
  Result := Gtk4.gtk_sort_list_model_get_incremental(@self);
end;

function TGtkSortListModel.get_model: PGListModel; cdecl;
begin
  Result := Gtk4.gtk_sort_list_model_get_model(@self);
end;

function TGtkSortListModel.get_pending: guint; cdecl;
begin
  Result := Gtk4.gtk_sort_list_model_get_pending(@self);
end;

function TGtkSortListModel.get_sorter: PGtkSorter; cdecl;
begin
  Result := Gtk4.gtk_sort_list_model_get_sorter(@self);
end;

procedure TGtkSortListModel.set_incremental(incremental: gboolean); cdecl;
begin
  Gtk4.gtk_sort_list_model_set_incremental(@self, incremental);
end;

procedure TGtkSortListModel.set_model(model: PGListModel); cdecl;
begin
  Gtk4.gtk_sort_list_model_set_model(@self, model);
end;

procedure TGtkSortListModel.set_sorter(sorter: PGtkSorter); cdecl;
begin
  Gtk4.gtk_sort_list_model_set_sorter(@self, sorter);
end;

function TGtkSpinButton.new(adjustment: PGtkAdjustment; climb_rate: gdouble; digits: guint): PGtkSpinButton; cdecl;
begin
  Result := Gtk4.gtk_spin_button_new(adjustment, climb_rate, digits);
end;

function TGtkSpinButton.new_with_range(min: gdouble; max: gdouble; step: gdouble): PGtkSpinButton; cdecl;
begin
  Result := Gtk4.gtk_spin_button_new_with_range(min, max, step);
end;

procedure TGtkSpinButton.configure(adjustment: PGtkAdjustment; climb_rate: gdouble; digits: guint); cdecl;
begin
  Gtk4.gtk_spin_button_configure(@self, adjustment, climb_rate, digits);
end;

function TGtkSpinButton.get_adjustment: PGtkAdjustment; cdecl;
begin
  Result := Gtk4.gtk_spin_button_get_adjustment(@self);
end;

function TGtkSpinButton.get_climb_rate: gdouble; cdecl;
begin
  Result := Gtk4.gtk_spin_button_get_climb_rate(@self);
end;

function TGtkSpinButton.get_digits: guint; cdecl;
begin
  Result := Gtk4.gtk_spin_button_get_digits(@self);
end;

procedure TGtkSpinButton.get_increments(step: Pgdouble; page: Pgdouble); cdecl;
begin
  Gtk4.gtk_spin_button_get_increments(@self, step, page);
end;

function TGtkSpinButton.get_numeric: gboolean; cdecl;
begin
  Result := Gtk4.gtk_spin_button_get_numeric(@self);
end;

procedure TGtkSpinButton.get_range(min: Pgdouble; max: Pgdouble); cdecl;
begin
  Gtk4.gtk_spin_button_get_range(@self, min, max);
end;

function TGtkSpinButton.get_snap_to_ticks: gboolean; cdecl;
begin
  Result := Gtk4.gtk_spin_button_get_snap_to_ticks(@self);
end;

function TGtkSpinButton.get_update_policy: TGtkSpinButtonUpdatePolicy; cdecl;
begin
  Result := Gtk4.gtk_spin_button_get_update_policy(@self);
end;

function TGtkSpinButton.get_value: gdouble; cdecl;
begin
  Result := Gtk4.gtk_spin_button_get_value(@self);
end;

function TGtkSpinButton.get_value_as_int: gint; cdecl;
begin
  Result := Gtk4.gtk_spin_button_get_value_as_int(@self);
end;

function TGtkSpinButton.get_wrap: gboolean; cdecl;
begin
  Result := Gtk4.gtk_spin_button_get_wrap(@self);
end;

procedure TGtkSpinButton.set_adjustment(adjustment: PGtkAdjustment); cdecl;
begin
  Gtk4.gtk_spin_button_set_adjustment(@self, adjustment);
end;

procedure TGtkSpinButton.set_climb_rate(climb_rate: gdouble); cdecl;
begin
  Gtk4.gtk_spin_button_set_climb_rate(@self, climb_rate);
end;

procedure TGtkSpinButton.set_digits(digits: guint); cdecl;
begin
  Gtk4.gtk_spin_button_set_digits(@self, digits);
end;

procedure TGtkSpinButton.set_increments(step: gdouble; page: gdouble); cdecl;
begin
  Gtk4.gtk_spin_button_set_increments(@self, step, page);
end;

procedure TGtkSpinButton.set_numeric(numeric: gboolean); cdecl;
begin
  Gtk4.gtk_spin_button_set_numeric(@self, numeric);
end;

procedure TGtkSpinButton.set_range(min: gdouble; max: gdouble); cdecl;
begin
  Gtk4.gtk_spin_button_set_range(@self, min, max);
end;

procedure TGtkSpinButton.set_snap_to_ticks(snap_to_ticks: gboolean); cdecl;
begin
  Gtk4.gtk_spin_button_set_snap_to_ticks(@self, snap_to_ticks);
end;

procedure TGtkSpinButton.set_update_policy(policy: TGtkSpinButtonUpdatePolicy); cdecl;
begin
  Gtk4.gtk_spin_button_set_update_policy(@self, policy);
end;

procedure TGtkSpinButton.set_value(value: gdouble); cdecl;
begin
  Gtk4.gtk_spin_button_set_value(@self, value);
end;

procedure TGtkSpinButton.set_wrap(wrap: gboolean); cdecl;
begin
  Gtk4.gtk_spin_button_set_wrap(@self, wrap);
end;

procedure TGtkSpinButton.spin(direction: TGtkSpinType; increment: gdouble); cdecl;
begin
  Gtk4.gtk_spin_button_spin(@self, direction, increment);
end;

procedure TGtkSpinButton.update; cdecl;
begin
  Gtk4.gtk_spin_button_update(@self);
end;

function TGtkSpinner.new: PGtkSpinner; cdecl;
begin
  Result := Gtk4.gtk_spinner_new();
end;

function TGtkSpinner.get_spinning: gboolean; cdecl;
begin
  Result := Gtk4.gtk_spinner_get_spinning(@self);
end;

procedure TGtkSpinner.set_spinning(spinning: gboolean); cdecl;
begin
  Gtk4.gtk_spinner_set_spinning(@self, spinning);
end;

procedure TGtkSpinner.start; cdecl;
begin
  Gtk4.gtk_spinner_start(@self);
end;

procedure TGtkSpinner.stop; cdecl;
begin
  Gtk4.gtk_spinner_stop(@self);
end;

function TGtkStackPage.get_child: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_stack_page_get_child(@self);
end;

function TGtkStackPage.get_icon_name: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_stack_page_get_icon_name(@self);
end;

function TGtkStackPage.get_name: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_stack_page_get_name(@self);
end;

function TGtkStackPage.get_needs_attention: gboolean; cdecl;
begin
  Result := Gtk4.gtk_stack_page_get_needs_attention(@self);
end;

function TGtkStackPage.get_title: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_stack_page_get_title(@self);
end;

function TGtkStackPage.get_use_underline: gboolean; cdecl;
begin
  Result := Gtk4.gtk_stack_page_get_use_underline(@self);
end;

function TGtkStackPage.get_visible: gboolean; cdecl;
begin
  Result := Gtk4.gtk_stack_page_get_visible(@self);
end;

procedure TGtkStackPage.set_icon_name(setting: Pgchar); cdecl;
begin
  Gtk4.gtk_stack_page_set_icon_name(@self, setting);
end;

procedure TGtkStackPage.set_name(setting: Pgchar); cdecl;
begin
  Gtk4.gtk_stack_page_set_name(@self, setting);
end;

procedure TGtkStackPage.set_needs_attention(setting: gboolean); cdecl;
begin
  Gtk4.gtk_stack_page_set_needs_attention(@self, setting);
end;

procedure TGtkStackPage.set_title(setting: Pgchar); cdecl;
begin
  Gtk4.gtk_stack_page_set_title(@self, setting);
end;

procedure TGtkStackPage.set_use_underline(setting: gboolean); cdecl;
begin
  Gtk4.gtk_stack_page_set_use_underline(@self, setting);
end;

procedure TGtkStackPage.set_visible(visible: gboolean); cdecl;
begin
  Gtk4.gtk_stack_page_set_visible(@self, visible);
end;

function TGtkStack.new: PGtkStack; cdecl;
begin
  Result := Gtk4.gtk_stack_new();
end;

function TGtkStack.add_child(child: PGtkWidget): PGtkStackPage; cdecl;
begin
  Result := Gtk4.gtk_stack_add_child(@self, child);
end;

function TGtkStack.add_named(child: PGtkWidget; name: Pgchar): PGtkStackPage; cdecl;
begin
  Result := Gtk4.gtk_stack_add_named(@self, child, name);
end;

function TGtkStack.add_titled(child: PGtkWidget; name: Pgchar; title: Pgchar): PGtkStackPage; cdecl;
begin
  Result := Gtk4.gtk_stack_add_titled(@self, child, name, title);
end;

function TGtkStack.get_child_by_name(name: Pgchar): PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_stack_get_child_by_name(@self, name);
end;

function TGtkStack.get_hhomogeneous: gboolean; cdecl;
begin
  Result := Gtk4.gtk_stack_get_hhomogeneous(@self);
end;

function TGtkStack.get_interpolate_size: gboolean; cdecl;
begin
  Result := Gtk4.gtk_stack_get_interpolate_size(@self);
end;

function TGtkStack.get_page(child: PGtkWidget): PGtkStackPage; cdecl;
begin
  Result := Gtk4.gtk_stack_get_page(@self, child);
end;

function TGtkStack.get_pages: PGtkSelectionModel; cdecl;
begin
  Result := Gtk4.gtk_stack_get_pages(@self);
end;

function TGtkStack.get_transition_duration: guint; cdecl;
begin
  Result := Gtk4.gtk_stack_get_transition_duration(@self);
end;

function TGtkStack.get_transition_running: gboolean; cdecl;
begin
  Result := Gtk4.gtk_stack_get_transition_running(@self);
end;

function TGtkStack.get_transition_type: TGtkStackTransitionType; cdecl;
begin
  Result := Gtk4.gtk_stack_get_transition_type(@self);
end;

function TGtkStack.get_vhomogeneous: gboolean; cdecl;
begin
  Result := Gtk4.gtk_stack_get_vhomogeneous(@self);
end;

function TGtkStack.get_visible_child: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_stack_get_visible_child(@self);
end;

function TGtkStack.get_visible_child_name: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_stack_get_visible_child_name(@self);
end;

procedure TGtkStack.remove(child: PGtkWidget); cdecl;
begin
  Gtk4.gtk_stack_remove(@self, child);
end;

procedure TGtkStack.set_hhomogeneous(hhomogeneous: gboolean); cdecl;
begin
  Gtk4.gtk_stack_set_hhomogeneous(@self, hhomogeneous);
end;

procedure TGtkStack.set_interpolate_size(interpolate_size: gboolean); cdecl;
begin
  Gtk4.gtk_stack_set_interpolate_size(@self, interpolate_size);
end;

procedure TGtkStack.set_transition_duration(duration: guint); cdecl;
begin
  Gtk4.gtk_stack_set_transition_duration(@self, duration);
end;

procedure TGtkStack.set_transition_type(transition: TGtkStackTransitionType); cdecl;
begin
  Gtk4.gtk_stack_set_transition_type(@self, transition);
end;

procedure TGtkStack.set_vhomogeneous(vhomogeneous: gboolean); cdecl;
begin
  Gtk4.gtk_stack_set_vhomogeneous(@self, vhomogeneous);
end;

procedure TGtkStack.set_visible_child(child: PGtkWidget); cdecl;
begin
  Gtk4.gtk_stack_set_visible_child(@self, child);
end;

procedure TGtkStack.set_visible_child_full(name: Pgchar; transition: TGtkStackTransitionType); cdecl;
begin
  Gtk4.gtk_stack_set_visible_child_full(@self, name, transition);
end;

procedure TGtkStack.set_visible_child_name(name: Pgchar); cdecl;
begin
  Gtk4.gtk_stack_set_visible_child_name(@self, name);
end;

function TGtkStackSidebar.new: PGtkStackSidebar; cdecl;
begin
  Result := Gtk4.gtk_stack_sidebar_new();
end;

function TGtkStackSidebar.get_stack: PGtkStack; cdecl;
begin
  Result := Gtk4.gtk_stack_sidebar_get_stack(@self);
end;

procedure TGtkStackSidebar.set_stack(stack: PGtkStack); cdecl;
begin
  Gtk4.gtk_stack_sidebar_set_stack(@self, stack);
end;

function TGtkStackSwitcher.new: PGtkStackSwitcher; cdecl;
begin
  Result := Gtk4.gtk_stack_switcher_new();
end;

function TGtkStackSwitcher.get_stack: PGtkStack; cdecl;
begin
  Result := Gtk4.gtk_stack_switcher_get_stack(@self);
end;

procedure TGtkStackSwitcher.set_stack(stack: PGtkStack); cdecl;
begin
  Gtk4.gtk_stack_switcher_set_stack(@self, stack);
end;

function TGtkStatusbar.new: PGtkStatusbar; cdecl;
begin
  Result := Gtk4.gtk_statusbar_new();
end;

function TGtkStatusbar.get_context_id(context_description: Pgchar): guint; cdecl;
begin
  Result := Gtk4.gtk_statusbar_get_context_id(@self, context_description);
end;

procedure TGtkStatusbar.pop(context_id: guint); cdecl;
begin
  Gtk4.gtk_statusbar_pop(@self, context_id);
end;

function TGtkStatusbar.push(context_id: guint; text: Pgchar): guint; cdecl;
begin
  Result := Gtk4.gtk_statusbar_push(@self, context_id, text);
end;

procedure TGtkStatusbar.remove(context_id: guint; message_id: guint); cdecl;
begin
  Gtk4.gtk_statusbar_remove(@self, context_id, message_id);
end;

procedure TGtkStatusbar.remove_all(context_id: guint); cdecl;
begin
  Gtk4.gtk_statusbar_remove_all(@self, context_id);
end;

function TGtkStringFilter.new(expression: PGtkExpression): PGtkStringFilter; cdecl;
begin
  Result := Gtk4.gtk_string_filter_new(expression);
end;

function TGtkStringFilter.get_expression: PGtkExpression; cdecl;
begin
  Result := Gtk4.gtk_string_filter_get_expression(@self);
end;

function TGtkStringFilter.get_ignore_case: gboolean; cdecl;
begin
  Result := Gtk4.gtk_string_filter_get_ignore_case(@self);
end;

function TGtkStringFilter.get_match_mode: TGtkStringFilterMatchMode; cdecl;
begin
  Result := Gtk4.gtk_string_filter_get_match_mode(@self);
end;

function TGtkStringFilter.get_search: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_string_filter_get_search(@self);
end;

procedure TGtkStringFilter.set_expression(expression: PGtkExpression); cdecl;
begin
  Gtk4.gtk_string_filter_set_expression(@self, expression);
end;

procedure TGtkStringFilter.set_ignore_case(ignore_case: gboolean); cdecl;
begin
  Gtk4.gtk_string_filter_set_ignore_case(@self, ignore_case);
end;

procedure TGtkStringFilter.set_match_mode(mode: TGtkStringFilterMatchMode); cdecl;
begin
  Gtk4.gtk_string_filter_set_match_mode(@self, mode);
end;

procedure TGtkStringFilter.set_search(search: Pgchar); cdecl;
begin
  Gtk4.gtk_string_filter_set_search(@self, search);
end;

function TGtkStringList.new(strings: PPgchar): PGtkStringList; cdecl;
begin
  Result := Gtk4.gtk_string_list_new(strings);
end;

procedure TGtkStringList.append(string_: Pgchar); cdecl;
begin
  Gtk4.gtk_string_list_append(@self, string_);
end;

function TGtkStringList.get_string(position: guint): Pgchar; cdecl;
begin
  Result := Gtk4.gtk_string_list_get_string(@self, position);
end;

procedure TGtkStringList.remove(position: guint); cdecl;
begin
  Gtk4.gtk_string_list_remove(@self, position);
end;

procedure TGtkStringList.splice(position: guint; n_removals: guint; additions: PPgchar); cdecl;
begin
  Gtk4.gtk_string_list_splice(@self, position, n_removals, additions);
end;

procedure TGtkStringList.take(string_: Pgchar); cdecl;
begin
  Gtk4.gtk_string_list_take(@self, string_);
end;

function TGtkStringObject.new(string_: Pgchar): PGtkStringObject; cdecl;
begin
  Result := Gtk4.gtk_string_object_new(string_);
end;

function TGtkStringObject.get_string: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_string_object_get_string(@self);
end;

function TGtkStringSorter.new(expression: PGtkExpression): PGtkStringSorter; cdecl;
begin
  Result := Gtk4.gtk_string_sorter_new(expression);
end;

function TGtkStringSorter.get_expression: PGtkExpression; cdecl;
begin
  Result := Gtk4.gtk_string_sorter_get_expression(@self);
end;

function TGtkStringSorter.get_ignore_case: gboolean; cdecl;
begin
  Result := Gtk4.gtk_string_sorter_get_ignore_case(@self);
end;

procedure TGtkStringSorter.set_expression(expression: PGtkExpression); cdecl;
begin
  Gtk4.gtk_string_sorter_set_expression(@self, expression);
end;

procedure TGtkStringSorter.set_ignore_case(ignore_case: gboolean); cdecl;
begin
  Gtk4.gtk_string_sorter_set_ignore_case(@self, ignore_case);
end;

function TGtkSwitch.new: PGtkSwitch; cdecl;
begin
  Result := Gtk4.gtk_switch_new();
end;

function TGtkSwitch.get_active: gboolean; cdecl;
begin
  Result := Gtk4.gtk_switch_get_active(@self);
end;

function TGtkSwitch.get_state: gboolean; cdecl;
begin
  Result := Gtk4.gtk_switch_get_state(@self);
end;

procedure TGtkSwitch.set_active(is_active: gboolean); cdecl;
begin
  Gtk4.gtk_switch_set_active(@self, is_active);
end;

procedure TGtkSwitch.set_state(state: gboolean); cdecl;
begin
  Gtk4.gtk_switch_set_state(@self, state);
end;

function TGtkText.new: PGtkText; cdecl;
begin
  Result := Gtk4.gtk_text_new();
end;

function TGtkText.new_with_buffer(buffer: PGtkEntryBuffer): PGtkText; cdecl;
begin
  Result := Gtk4.gtk_text_new_with_buffer(buffer);
end;

procedure TGtkText.compute_cursor_extents(position: gsize; strong: Pgraphene_rect_t; weak: Pgraphene_rect_t); cdecl;
begin
  Gtk4.gtk_text_compute_cursor_extents(@self, position, strong, weak);
end;

function TGtkText.get_activates_default: gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_get_activates_default(@self);
end;

function TGtkText.get_attributes: PPangoAttrList; cdecl;
begin
  Result := Gtk4.gtk_text_get_attributes(@self);
end;

function TGtkText.get_buffer: PGtkEntryBuffer; cdecl;
begin
  Result := Gtk4.gtk_text_get_buffer(@self);
end;

function TGtkText.get_enable_emoji_completion: gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_get_enable_emoji_completion(@self);
end;

function TGtkText.get_extra_menu: PGMenuModel; cdecl;
begin
  Result := Gtk4.gtk_text_get_extra_menu(@self);
end;

function TGtkText.get_input_hints: TGtkInputHints; cdecl;
begin
  Result := Gtk4.gtk_text_get_input_hints(@self);
end;

function TGtkText.get_input_purpose: TGtkInputPurpose; cdecl;
begin
  Result := Gtk4.gtk_text_get_input_purpose(@self);
end;

function TGtkText.get_invisible_char: gunichar; cdecl;
begin
  Result := Gtk4.gtk_text_get_invisible_char(@self);
end;

function TGtkText.get_max_length: gint; cdecl;
begin
  Result := Gtk4.gtk_text_get_max_length(@self);
end;

function TGtkText.get_overwrite_mode: gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_get_overwrite_mode(@self);
end;

function TGtkText.get_placeholder_text: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_text_get_placeholder_text(@self);
end;

function TGtkText.get_propagate_text_width: gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_get_propagate_text_width(@self);
end;

function TGtkText.get_tabs: PPangoTabArray; cdecl;
begin
  Result := Gtk4.gtk_text_get_tabs(@self);
end;

function TGtkText.get_text_length: guint16; cdecl;
begin
  Result := Gtk4.gtk_text_get_text_length(@self);
end;

function TGtkText.get_truncate_multiline: gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_get_truncate_multiline(@self);
end;

function TGtkText.get_visibility: gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_get_visibility(@self);
end;

function TGtkText.grab_focus_without_selecting: gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_grab_focus_without_selecting(@self);
end;

procedure TGtkText.set_activates_default(activates: gboolean); cdecl;
begin
  Gtk4.gtk_text_set_activates_default(@self, activates);
end;

procedure TGtkText.set_attributes(attrs: PPangoAttrList); cdecl;
begin
  Gtk4.gtk_text_set_attributes(@self, attrs);
end;

procedure TGtkText.set_buffer(buffer: PGtkEntryBuffer); cdecl;
begin
  Gtk4.gtk_text_set_buffer(@self, buffer);
end;

procedure TGtkText.set_enable_emoji_completion(enable_emoji_completion: gboolean); cdecl;
begin
  Gtk4.gtk_text_set_enable_emoji_completion(@self, enable_emoji_completion);
end;

procedure TGtkText.set_extra_menu(model: PGMenuModel); cdecl;
begin
  Gtk4.gtk_text_set_extra_menu(@self, model);
end;

procedure TGtkText.set_input_hints(hints: TGtkInputHints); cdecl;
begin
  Gtk4.gtk_text_set_input_hints(@self, hints);
end;

procedure TGtkText.set_input_purpose(purpose: TGtkInputPurpose); cdecl;
begin
  Gtk4.gtk_text_set_input_purpose(@self, purpose);
end;

procedure TGtkText.set_invisible_char(ch: gunichar); cdecl;
begin
  Gtk4.gtk_text_set_invisible_char(@self, ch);
end;

procedure TGtkText.set_max_length(length: gint); cdecl;
begin
  Gtk4.gtk_text_set_max_length(@self, length);
end;

procedure TGtkText.set_overwrite_mode(overwrite: gboolean); cdecl;
begin
  Gtk4.gtk_text_set_overwrite_mode(@self, overwrite);
end;

procedure TGtkText.set_placeholder_text(text: Pgchar); cdecl;
begin
  Gtk4.gtk_text_set_placeholder_text(@self, text);
end;

procedure TGtkText.set_propagate_text_width(propagate_text_width: gboolean); cdecl;
begin
  Gtk4.gtk_text_set_propagate_text_width(@self, propagate_text_width);
end;

procedure TGtkText.set_tabs(tabs: PPangoTabArray); cdecl;
begin
  Gtk4.gtk_text_set_tabs(@self, tabs);
end;

procedure TGtkText.set_truncate_multiline(truncate_multiline: gboolean); cdecl;
begin
  Gtk4.gtk_text_set_truncate_multiline(@self, truncate_multiline);
end;

procedure TGtkText.set_visibility(visible: gboolean); cdecl;
begin
  Gtk4.gtk_text_set_visibility(@self, visible);
end;

procedure TGtkText.unset_invisible_char; cdecl;
begin
  Gtk4.gtk_text_unset_invisible_char(@self);
end;

function TGtkTextBuffer.new(table: PGtkTextTagTable): PGtkTextBuffer; cdecl;
begin
  Result := Gtk4.gtk_text_buffer_new(table);
end;

procedure TGtkTextBuffer.add_mark(mark: PGtkTextMark; where: PGtkTextIter); cdecl;
begin
  Gtk4.gtk_text_buffer_add_mark(@self, mark, where);
end;

procedure TGtkTextBuffer.add_selection_clipboard(clipboard: PGdkClipboard); cdecl;
begin
  Gtk4.gtk_text_buffer_add_selection_clipboard(@self, clipboard);
end;

procedure TGtkTextBuffer.apply_tag(tag: PGtkTextTag; start: PGtkTextIter; end_: PGtkTextIter); cdecl;
begin
  Gtk4.gtk_text_buffer_apply_tag(@self, tag, start, end_);
end;

procedure TGtkTextBuffer.apply_tag_by_name(name: Pgchar; start: PGtkTextIter; end_: PGtkTextIter); cdecl;
begin
  Gtk4.gtk_text_buffer_apply_tag_by_name(@self, name, start, end_);
end;

function TGtkTextBuffer.backspace(iter: PGtkTextIter; interactive: gboolean; default_editable: gboolean): gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_buffer_backspace(@self, iter, interactive, default_editable);
end;

procedure TGtkTextBuffer.begin_irreversible_action; cdecl;
begin
  Gtk4.gtk_text_buffer_begin_irreversible_action(@self);
end;

procedure TGtkTextBuffer.begin_user_action; cdecl;
begin
  Gtk4.gtk_text_buffer_begin_user_action(@self);
end;

procedure TGtkTextBuffer.copy_clipboard(clipboard: PGdkClipboard); cdecl;
begin
  Gtk4.gtk_text_buffer_copy_clipboard(@self, clipboard);
end;

function TGtkTextBuffer.create_child_anchor(iter: PGtkTextIter): PGtkTextChildAnchor; cdecl;
begin
  Result := Gtk4.gtk_text_buffer_create_child_anchor(@self, iter);
end;

function TGtkTextBuffer.create_mark(mark_name: Pgchar; where: PGtkTextIter; left_gravity: gboolean): PGtkTextMark; cdecl;
begin
  Result := Gtk4.gtk_text_buffer_create_mark(@self, mark_name, where, left_gravity);
end;

procedure TGtkTextBuffer.cut_clipboard(clipboard: PGdkClipboard; default_editable: gboolean); cdecl;
begin
  Gtk4.gtk_text_buffer_cut_clipboard(@self, clipboard, default_editable);
end;

procedure TGtkTextBuffer.delete(start: PGtkTextIter; end_: PGtkTextIter); cdecl;
begin
  Gtk4.gtk_text_buffer_delete(@self, start, end_);
end;

function TGtkTextBuffer.delete_interactive(start_iter: PGtkTextIter; end_iter: PGtkTextIter; default_editable: gboolean): gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_buffer_delete_interactive(@self, start_iter, end_iter, default_editable);
end;

procedure TGtkTextBuffer.delete_mark(mark: PGtkTextMark); cdecl;
begin
  Gtk4.gtk_text_buffer_delete_mark(@self, mark);
end;

procedure TGtkTextBuffer.delete_mark_by_name(name: Pgchar); cdecl;
begin
  Gtk4.gtk_text_buffer_delete_mark_by_name(@self, name);
end;

function TGtkTextBuffer.delete_selection(interactive: gboolean; default_editable: gboolean): gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_buffer_delete_selection(@self, interactive, default_editable);
end;

procedure TGtkTextBuffer.end_irreversible_action; cdecl;
begin
  Gtk4.gtk_text_buffer_end_irreversible_action(@self);
end;

procedure TGtkTextBuffer.end_user_action; cdecl;
begin
  Gtk4.gtk_text_buffer_end_user_action(@self);
end;

procedure TGtkTextBuffer.get_bounds(start: PGtkTextIter; end_: PGtkTextIter); cdecl;
begin
  Gtk4.gtk_text_buffer_get_bounds(@self, start, end_);
end;

function TGtkTextBuffer.get_can_redo: gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_buffer_get_can_redo(@self);
end;

function TGtkTextBuffer.get_can_undo: gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_buffer_get_can_undo(@self);
end;

function TGtkTextBuffer.get_char_count: gint; cdecl;
begin
  Result := Gtk4.gtk_text_buffer_get_char_count(@self);
end;

function TGtkTextBuffer.get_enable_undo: gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_buffer_get_enable_undo(@self);
end;

procedure TGtkTextBuffer.get_end_iter(iter: PGtkTextIter); cdecl;
begin
  Gtk4.gtk_text_buffer_get_end_iter(@self, iter);
end;

function TGtkTextBuffer.get_has_selection: gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_buffer_get_has_selection(@self);
end;

function TGtkTextBuffer.get_insert: PGtkTextMark; cdecl;
begin
  Result := Gtk4.gtk_text_buffer_get_insert(@self);
end;

procedure TGtkTextBuffer.get_iter_at_child_anchor(iter: PGtkTextIter; anchor: PGtkTextChildAnchor); cdecl;
begin
  Gtk4.gtk_text_buffer_get_iter_at_child_anchor(@self, iter, anchor);
end;

function TGtkTextBuffer.get_iter_at_line(iter: PGtkTextIter; line_number: gint): gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_buffer_get_iter_at_line(@self, iter, line_number);
end;

function TGtkTextBuffer.get_iter_at_line_index(iter: PGtkTextIter; line_number: gint; byte_index: gint): gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_buffer_get_iter_at_line_index(@self, iter, line_number, byte_index);
end;

function TGtkTextBuffer.get_iter_at_line_offset(iter: PGtkTextIter; line_number: gint; char_offset: gint): gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_buffer_get_iter_at_line_offset(@self, iter, line_number, char_offset);
end;

procedure TGtkTextBuffer.get_iter_at_mark(iter: PGtkTextIter; mark: PGtkTextMark); cdecl;
begin
  Gtk4.gtk_text_buffer_get_iter_at_mark(@self, iter, mark);
end;

procedure TGtkTextBuffer.get_iter_at_offset(iter: PGtkTextIter; char_offset: gint); cdecl;
begin
  Gtk4.gtk_text_buffer_get_iter_at_offset(@self, iter, char_offset);
end;

function TGtkTextBuffer.get_line_count: gint; cdecl;
begin
  Result := Gtk4.gtk_text_buffer_get_line_count(@self);
end;

function TGtkTextBuffer.get_mark(name: Pgchar): PGtkTextMark; cdecl;
begin
  Result := Gtk4.gtk_text_buffer_get_mark(@self, name);
end;

function TGtkTextBuffer.get_max_undo_levels: guint; cdecl;
begin
  Result := Gtk4.gtk_text_buffer_get_max_undo_levels(@self);
end;

function TGtkTextBuffer.get_modified: gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_buffer_get_modified(@self);
end;

function TGtkTextBuffer.get_selection_bound: PGtkTextMark; cdecl;
begin
  Result := Gtk4.gtk_text_buffer_get_selection_bound(@self);
end;

function TGtkTextBuffer.get_selection_bounds(start: PGtkTextIter; end_: PGtkTextIter): gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_buffer_get_selection_bounds(@self, start, end_);
end;

function TGtkTextBuffer.get_selection_content: PGdkContentProvider; cdecl;
begin
  Result := Gtk4.gtk_text_buffer_get_selection_content(@self);
end;

function TGtkTextBuffer.get_slice(start: PGtkTextIter; end_: PGtkTextIter; include_hidden_chars: gboolean): Pgchar; cdecl;
begin
  Result := Gtk4.gtk_text_buffer_get_slice(@self, start, end_, include_hidden_chars);
end;

procedure TGtkTextBuffer.get_start_iter(iter: PGtkTextIter); cdecl;
begin
  Gtk4.gtk_text_buffer_get_start_iter(@self, iter);
end;

function TGtkTextBuffer.get_tag_table: PGtkTextTagTable; cdecl;
begin
  Result := Gtk4.gtk_text_buffer_get_tag_table(@self);
end;

function TGtkTextBuffer.get_text(start: PGtkTextIter; end_: PGtkTextIter; include_hidden_chars: gboolean): Pgchar; cdecl;
begin
  Result := Gtk4.gtk_text_buffer_get_text(@self, start, end_, include_hidden_chars);
end;

procedure TGtkTextBuffer.insert(iter: PGtkTextIter; text: Pgchar; len: gint); cdecl;
begin
  Gtk4.gtk_text_buffer_insert(@self, iter, text, len);
end;

procedure TGtkTextBuffer.insert_at_cursor(text: Pgchar; len: gint); cdecl;
begin
  Gtk4.gtk_text_buffer_insert_at_cursor(@self, text, len);
end;

procedure TGtkTextBuffer.insert_child_anchor(iter: PGtkTextIter; anchor: PGtkTextChildAnchor); cdecl;
begin
  Gtk4.gtk_text_buffer_insert_child_anchor(@self, iter, anchor);
end;

function TGtkTextBuffer.insert_interactive(iter: PGtkTextIter; text: Pgchar; len: gint; default_editable: gboolean): gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_buffer_insert_interactive(@self, iter, text, len, default_editable);
end;

function TGtkTextBuffer.insert_interactive_at_cursor(text: Pgchar; len: gint; default_editable: gboolean): gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_buffer_insert_interactive_at_cursor(@self, text, len, default_editable);
end;

procedure TGtkTextBuffer.insert_markup(iter: PGtkTextIter; markup: Pgchar; len: gint); cdecl;
begin
  Gtk4.gtk_text_buffer_insert_markup(@self, iter, markup, len);
end;

procedure TGtkTextBuffer.insert_paintable(iter: PGtkTextIter; paintable: PGdkPaintable); cdecl;
begin
  Gtk4.gtk_text_buffer_insert_paintable(@self, iter, paintable);
end;

procedure TGtkTextBuffer.insert_range(iter: PGtkTextIter; start: PGtkTextIter; end_: PGtkTextIter); cdecl;
begin
  Gtk4.gtk_text_buffer_insert_range(@self, iter, start, end_);
end;

function TGtkTextBuffer.insert_range_interactive(iter: PGtkTextIter; start: PGtkTextIter; end_: PGtkTextIter; default_editable: gboolean): gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_buffer_insert_range_interactive(@self, iter, start, end_, default_editable);
end;

procedure TGtkTextBuffer.move_mark(mark: PGtkTextMark; where: PGtkTextIter); cdecl;
begin
  Gtk4.gtk_text_buffer_move_mark(@self, mark, where);
end;

procedure TGtkTextBuffer.move_mark_by_name(name: Pgchar; where: PGtkTextIter); cdecl;
begin
  Gtk4.gtk_text_buffer_move_mark_by_name(@self, name, where);
end;

procedure TGtkTextBuffer.paste_clipboard(clipboard: PGdkClipboard; override_location: PGtkTextIter; default_editable: gboolean); cdecl;
begin
  Gtk4.gtk_text_buffer_paste_clipboard(@self, clipboard, override_location, default_editable);
end;

procedure TGtkTextBuffer.place_cursor(where: PGtkTextIter); cdecl;
begin
  Gtk4.gtk_text_buffer_place_cursor(@self, where);
end;

procedure TGtkTextBuffer.redo; cdecl;
begin
  Gtk4.gtk_text_buffer_redo(@self);
end;

procedure TGtkTextBuffer.remove_all_tags(start: PGtkTextIter; end_: PGtkTextIter); cdecl;
begin
  Gtk4.gtk_text_buffer_remove_all_tags(@self, start, end_);
end;

procedure TGtkTextBuffer.remove_selection_clipboard(clipboard: PGdkClipboard); cdecl;
begin
  Gtk4.gtk_text_buffer_remove_selection_clipboard(@self, clipboard);
end;

procedure TGtkTextBuffer.remove_tag(tag: PGtkTextTag; start: PGtkTextIter; end_: PGtkTextIter); cdecl;
begin
  Gtk4.gtk_text_buffer_remove_tag(@self, tag, start, end_);
end;

procedure TGtkTextBuffer.remove_tag_by_name(name: Pgchar; start: PGtkTextIter; end_: PGtkTextIter); cdecl;
begin
  Gtk4.gtk_text_buffer_remove_tag_by_name(@self, name, start, end_);
end;

procedure TGtkTextBuffer.select_range(ins: PGtkTextIter; bound: PGtkTextIter); cdecl;
begin
  Gtk4.gtk_text_buffer_select_range(@self, ins, bound);
end;

procedure TGtkTextBuffer.set_enable_undo(enable_undo: gboolean); cdecl;
begin
  Gtk4.gtk_text_buffer_set_enable_undo(@self, enable_undo);
end;

procedure TGtkTextBuffer.set_max_undo_levels(max_undo_levels: guint); cdecl;
begin
  Gtk4.gtk_text_buffer_set_max_undo_levels(@self, max_undo_levels);
end;

procedure TGtkTextBuffer.set_modified(setting: gboolean); cdecl;
begin
  Gtk4.gtk_text_buffer_set_modified(@self, setting);
end;

procedure TGtkTextBuffer.set_text(text: Pgchar; len: gint); cdecl;
begin
  Gtk4.gtk_text_buffer_set_text(@self, text, len);
end;

procedure TGtkTextBuffer.undo; cdecl;
begin
  Gtk4.gtk_text_buffer_undo(@self);
end;

function TGtkTextTagTable.new: PGtkTextTagTable; cdecl;
begin
  Result := Gtk4.gtk_text_tag_table_new();
end;

function TGtkTextTagTable.add(tag: PGtkTextTag): gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_tag_table_add(@self, tag);
end;

procedure TGtkTextTagTable.foreach(func: TGtkTextTagTableForeach; data: gpointer); cdecl;
begin
  Gtk4.gtk_text_tag_table_foreach(@self, func, data);
end;

function TGtkTextTagTable.get_size: gint; cdecl;
begin
  Result := Gtk4.gtk_text_tag_table_get_size(@self);
end;

function TGtkTextTagTable.lookup(name: Pgchar): PGtkTextTag; cdecl;
begin
  Result := Gtk4.gtk_text_tag_table_lookup(@self, name);
end;

procedure TGtkTextTagTable.remove(tag: PGtkTextTag); cdecl;
begin
  Gtk4.gtk_text_tag_table_remove(@self, tag);
end;

function TGtkTextTag.new(name: Pgchar): PGtkTextTag; cdecl;
begin
  Result := Gtk4.gtk_text_tag_new(name);
end;

procedure TGtkTextTag.changed(size_changed: gboolean); cdecl;
begin
  Gtk4.gtk_text_tag_changed(@self, size_changed);
end;

function TGtkTextTag.get_priority: gint; cdecl;
begin
  Result := Gtk4.gtk_text_tag_get_priority(@self);
end;

procedure TGtkTextTag.set_priority(priority: gint); cdecl;
begin
  Gtk4.gtk_text_tag_set_priority(@self, priority);
end;

procedure TGtkTextIter.assign(other: PGtkTextIter); cdecl;
begin
  Gtk4.gtk_text_iter_assign(@self, other);
end;

function TGtkTextIter.backward_char: gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_backward_char(@self);
end;

function TGtkTextIter.backward_chars(count: gint): gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_backward_chars(@self, count);
end;

function TGtkTextIter.backward_cursor_position: gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_backward_cursor_position(@self);
end;

function TGtkTextIter.backward_cursor_positions(count: gint): gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_backward_cursor_positions(@self, count);
end;

function TGtkTextIter.backward_find_char(pred: TGtkTextCharPredicate; user_data: gpointer; limit: PGtkTextIter): gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_backward_find_char(@self, pred, user_data, limit);
end;

function TGtkTextIter.backward_line: gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_backward_line(@self);
end;

function TGtkTextIter.backward_lines(count: gint): gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_backward_lines(@self, count);
end;

function TGtkTextIter.backward_search(str: Pgchar; flags: TGtkTextSearchFlags; match_start: PGtkTextIter; match_end: PGtkTextIter; limit: PGtkTextIter): gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_backward_search(@self, str, flags, match_start, match_end, limit);
end;

function TGtkTextIter.backward_sentence_start: gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_backward_sentence_start(@self);
end;

function TGtkTextIter.backward_sentence_starts(count: gint): gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_backward_sentence_starts(@self, count);
end;

function TGtkTextIter.backward_to_tag_toggle(tag: PGtkTextTag): gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_backward_to_tag_toggle(@self, tag);
end;

function TGtkTextIter.backward_visible_cursor_position: gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_backward_visible_cursor_position(@self);
end;

function TGtkTextIter.backward_visible_cursor_positions(count: gint): gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_backward_visible_cursor_positions(@self, count);
end;

function TGtkTextIter.backward_visible_line: gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_backward_visible_line(@self);
end;

function TGtkTextIter.backward_visible_lines(count: gint): gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_backward_visible_lines(@self, count);
end;

function TGtkTextIter.backward_visible_word_start: gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_backward_visible_word_start(@self);
end;

function TGtkTextIter.backward_visible_word_starts(count: gint): gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_backward_visible_word_starts(@self, count);
end;

function TGtkTextIter.backward_word_start: gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_backward_word_start(@self);
end;

function TGtkTextIter.backward_word_starts(count: gint): gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_backward_word_starts(@self, count);
end;

function TGtkTextIter.can_insert(default_editability: gboolean): gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_can_insert(@self, default_editability);
end;

function TGtkTextIter.compare(rhs: PGtkTextIter): gint; cdecl;
begin
  Result := Gtk4.gtk_text_iter_compare(@self, rhs);
end;

function TGtkTextIter.copy: PGtkTextIter; cdecl;
begin
  Result := Gtk4.gtk_text_iter_copy(@self);
end;

function TGtkTextIter.editable(default_setting: gboolean): gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_editable(@self, default_setting);
end;

function TGtkTextIter.ends_line: gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_ends_line(@self);
end;

function TGtkTextIter.ends_sentence: gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_ends_sentence(@self);
end;

function TGtkTextIter.ends_tag(tag: PGtkTextTag): gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_ends_tag(@self, tag);
end;

function TGtkTextIter.ends_word: gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_ends_word(@self);
end;

function TGtkTextIter.equal(rhs: PGtkTextIter): gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_equal(@self, rhs);
end;

function TGtkTextIter.forward_char: gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_forward_char(@self);
end;

function TGtkTextIter.forward_chars(count: gint): gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_forward_chars(@self, count);
end;

function TGtkTextIter.forward_cursor_position: gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_forward_cursor_position(@self);
end;

function TGtkTextIter.forward_cursor_positions(count: gint): gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_forward_cursor_positions(@self, count);
end;

function TGtkTextIter.forward_find_char(pred: TGtkTextCharPredicate; user_data: gpointer; limit: PGtkTextIter): gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_forward_find_char(@self, pred, user_data, limit);
end;

function TGtkTextIter.forward_line: gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_forward_line(@self);
end;

function TGtkTextIter.forward_lines(count: gint): gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_forward_lines(@self, count);
end;

function TGtkTextIter.forward_search(str: Pgchar; flags: TGtkTextSearchFlags; match_start: PGtkTextIter; match_end: PGtkTextIter; limit: PGtkTextIter): gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_forward_search(@self, str, flags, match_start, match_end, limit);
end;

function TGtkTextIter.forward_sentence_end: gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_forward_sentence_end(@self);
end;

function TGtkTextIter.forward_sentence_ends(count: gint): gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_forward_sentence_ends(@self, count);
end;

procedure TGtkTextIter.forward_to_end; cdecl;
begin
  Gtk4.gtk_text_iter_forward_to_end(@self);
end;

function TGtkTextIter.forward_to_line_end: gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_forward_to_line_end(@self);
end;

function TGtkTextIter.forward_to_tag_toggle(tag: PGtkTextTag): gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_forward_to_tag_toggle(@self, tag);
end;

function TGtkTextIter.forward_visible_cursor_position: gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_forward_visible_cursor_position(@self);
end;

function TGtkTextIter.forward_visible_cursor_positions(count: gint): gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_forward_visible_cursor_positions(@self, count);
end;

function TGtkTextIter.forward_visible_line: gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_forward_visible_line(@self);
end;

function TGtkTextIter.forward_visible_lines(count: gint): gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_forward_visible_lines(@self, count);
end;

function TGtkTextIter.forward_visible_word_end: gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_forward_visible_word_end(@self);
end;

function TGtkTextIter.forward_visible_word_ends(count: gint): gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_forward_visible_word_ends(@self, count);
end;

function TGtkTextIter.forward_word_end: gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_forward_word_end(@self);
end;

function TGtkTextIter.forward_word_ends(count: gint): gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_forward_word_ends(@self, count);
end;

procedure TGtkTextIter.free; cdecl;
begin
  Gtk4.gtk_text_iter_free(@self);
end;

function TGtkTextIter.get_buffer: PGtkTextBuffer; cdecl;
begin
  Result := Gtk4.gtk_text_iter_get_buffer(@self);
end;

function TGtkTextIter.get_bytes_in_line: gint; cdecl;
begin
  Result := Gtk4.gtk_text_iter_get_bytes_in_line(@self);
end;

function TGtkTextIter.get_char: gunichar; cdecl;
begin
  Result := Gtk4.gtk_text_iter_get_char(@self);
end;

function TGtkTextIter.get_chars_in_line: gint; cdecl;
begin
  Result := Gtk4.gtk_text_iter_get_chars_in_line(@self);
end;

function TGtkTextIter.get_child_anchor: PGtkTextChildAnchor; cdecl;
begin
  Result := Gtk4.gtk_text_iter_get_child_anchor(@self);
end;

function TGtkTextIter.get_language: PPangoLanguage; cdecl;
begin
  Result := Gtk4.gtk_text_iter_get_language(@self);
end;

function TGtkTextIter.get_line: gint; cdecl;
begin
  Result := Gtk4.gtk_text_iter_get_line(@self);
end;

function TGtkTextIter.get_line_index: gint; cdecl;
begin
  Result := Gtk4.gtk_text_iter_get_line_index(@self);
end;

function TGtkTextIter.get_line_offset: gint; cdecl;
begin
  Result := Gtk4.gtk_text_iter_get_line_offset(@self);
end;

function TGtkTextIter.get_marks: PGSList; cdecl;
begin
  Result := Gtk4.gtk_text_iter_get_marks(@self);
end;

function TGtkTextIter.get_offset: gint; cdecl;
begin
  Result := Gtk4.gtk_text_iter_get_offset(@self);
end;

function TGtkTextIter.get_paintable: PGdkPaintable; cdecl;
begin
  Result := Gtk4.gtk_text_iter_get_paintable(@self);
end;

function TGtkTextIter.get_slice(end_: PGtkTextIter): Pgchar; cdecl;
begin
  Result := Gtk4.gtk_text_iter_get_slice(@self, end_);
end;

function TGtkTextIter.get_tags: PGSList; cdecl;
begin
  Result := Gtk4.gtk_text_iter_get_tags(@self);
end;

function TGtkTextIter.get_text(end_: PGtkTextIter): Pgchar; cdecl;
begin
  Result := Gtk4.gtk_text_iter_get_text(@self, end_);
end;

function TGtkTextIter.get_toggled_tags(toggled_on: gboolean): PGSList; cdecl;
begin
  Result := Gtk4.gtk_text_iter_get_toggled_tags(@self, toggled_on);
end;

function TGtkTextIter.get_visible_line_index: gint; cdecl;
begin
  Result := Gtk4.gtk_text_iter_get_visible_line_index(@self);
end;

function TGtkTextIter.get_visible_line_offset: gint; cdecl;
begin
  Result := Gtk4.gtk_text_iter_get_visible_line_offset(@self);
end;

function TGtkTextIter.get_visible_slice(end_: PGtkTextIter): Pgchar; cdecl;
begin
  Result := Gtk4.gtk_text_iter_get_visible_slice(@self, end_);
end;

function TGtkTextIter.get_visible_text(end_: PGtkTextIter): Pgchar; cdecl;
begin
  Result := Gtk4.gtk_text_iter_get_visible_text(@self, end_);
end;

function TGtkTextIter.has_tag(tag: PGtkTextTag): gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_has_tag(@self, tag);
end;

function TGtkTextIter.in_range(start: PGtkTextIter; end_: PGtkTextIter): gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_in_range(@self, start, end_);
end;

function TGtkTextIter.inside_sentence: gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_inside_sentence(@self);
end;

function TGtkTextIter.inside_word: gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_inside_word(@self);
end;

function TGtkTextIter.is_cursor_position: gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_is_cursor_position(@self);
end;

function TGtkTextIter.is_end: gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_is_end(@self);
end;

function TGtkTextIter.is_start: gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_is_start(@self);
end;

procedure TGtkTextIter.order(second: PGtkTextIter); cdecl;
begin
  Gtk4.gtk_text_iter_order(@self, second);
end;

procedure TGtkTextIter.set_line(line_number: gint); cdecl;
begin
  Gtk4.gtk_text_iter_set_line(@self, line_number);
end;

procedure TGtkTextIter.set_line_index(byte_on_line: gint); cdecl;
begin
  Gtk4.gtk_text_iter_set_line_index(@self, byte_on_line);
end;

procedure TGtkTextIter.set_line_offset(char_on_line: gint); cdecl;
begin
  Gtk4.gtk_text_iter_set_line_offset(@self, char_on_line);
end;

procedure TGtkTextIter.set_offset(char_offset: gint); cdecl;
begin
  Gtk4.gtk_text_iter_set_offset(@self, char_offset);
end;

procedure TGtkTextIter.set_visible_line_index(byte_on_line: gint); cdecl;
begin
  Gtk4.gtk_text_iter_set_visible_line_index(@self, byte_on_line);
end;

procedure TGtkTextIter.set_visible_line_offset(char_on_line: gint); cdecl;
begin
  Gtk4.gtk_text_iter_set_visible_line_offset(@self, char_on_line);
end;

function TGtkTextIter.starts_line: gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_starts_line(@self);
end;

function TGtkTextIter.starts_sentence: gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_starts_sentence(@self);
end;

function TGtkTextIter.starts_tag(tag: PGtkTextTag): gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_starts_tag(@self, tag);
end;

function TGtkTextIter.starts_word: gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_starts_word(@self);
end;

function TGtkTextIter.toggles_tag(tag: PGtkTextTag): gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_iter_toggles_tag(@self, tag);
end;

function TGtkTextChildAnchor.new: PGtkTextChildAnchor; cdecl;
begin
  Result := Gtk4.gtk_text_child_anchor_new();
end;

function TGtkTextChildAnchor.new_with_replacement(character: Pgchar): PGtkTextChildAnchor; cdecl;
begin
  Result := Gtk4.gtk_text_child_anchor_new_with_replacement(character);
end;

function TGtkTextChildAnchor.get_deleted: gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_child_anchor_get_deleted(@self);
end;

function TGtkTextChildAnchor.get_widgets(out_len: Pguint): PPGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_text_child_anchor_get_widgets(@self, out_len);
end;

function TGtkTextMark.new(name: Pgchar; left_gravity: gboolean): PGtkTextMark; cdecl;
begin
  Result := Gtk4.gtk_text_mark_new(name, left_gravity);
end;

function TGtkTextMark.get_buffer: PGtkTextBuffer; cdecl;
begin
  Result := Gtk4.gtk_text_mark_get_buffer(@self);
end;

function TGtkTextMark.get_deleted: gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_mark_get_deleted(@self);
end;

function TGtkTextMark.get_left_gravity: gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_mark_get_left_gravity(@self);
end;

function TGtkTextMark.get_name: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_text_mark_get_name(@self);
end;

function TGtkTextMark.get_visible: gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_mark_get_visible(@self);
end;

procedure TGtkTextMark.set_visible(setting: gboolean); cdecl;
begin
  Gtk4.gtk_text_mark_set_visible(@self, setting);
end;

function TGtkTextView.new: PGtkTextView; cdecl;
begin
  Result := Gtk4.gtk_text_view_new();
end;

function TGtkTextView.new_with_buffer(buffer: PGtkTextBuffer): PGtkTextView; cdecl;
begin
  Result := Gtk4.gtk_text_view_new_with_buffer(buffer);
end;

procedure TGtkTextView.add_child_at_anchor(child: PGtkWidget; anchor: PGtkTextChildAnchor); cdecl;
begin
  Gtk4.gtk_text_view_add_child_at_anchor(@self, child, anchor);
end;

procedure TGtkTextView.add_overlay(child: PGtkWidget; xpos: gint; ypos: gint); cdecl;
begin
  Gtk4.gtk_text_view_add_overlay(@self, child, xpos, ypos);
end;

function TGtkTextView.backward_display_line(iter: PGtkTextIter): gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_view_backward_display_line(@self, iter);
end;

function TGtkTextView.backward_display_line_start(iter: PGtkTextIter): gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_view_backward_display_line_start(@self, iter);
end;

procedure TGtkTextView.buffer_to_window_coords(win: TGtkTextWindowType; buffer_x: gint; buffer_y: gint; window_x: Pgint; window_y: Pgint); cdecl;
begin
  Gtk4.gtk_text_view_buffer_to_window_coords(@self, win, buffer_x, buffer_y, window_x, window_y);
end;

function TGtkTextView.forward_display_line(iter: PGtkTextIter): gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_view_forward_display_line(@self, iter);
end;

function TGtkTextView.forward_display_line_end(iter: PGtkTextIter): gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_view_forward_display_line_end(@self, iter);
end;

function TGtkTextView.get_accepts_tab: gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_view_get_accepts_tab(@self);
end;

function TGtkTextView.get_bottom_margin: gint; cdecl;
begin
  Result := Gtk4.gtk_text_view_get_bottom_margin(@self);
end;

function TGtkTextView.get_buffer: PGtkTextBuffer; cdecl;
begin
  Result := Gtk4.gtk_text_view_get_buffer(@self);
end;

procedure TGtkTextView.get_cursor_locations(iter: PGtkTextIter; strong: PGdkRectangle; weak: PGdkRectangle); cdecl;
begin
  Gtk4.gtk_text_view_get_cursor_locations(@self, iter, strong, weak);
end;

function TGtkTextView.get_cursor_visible: gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_view_get_cursor_visible(@self);
end;

function TGtkTextView.get_editable: gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_view_get_editable(@self);
end;

function TGtkTextView.get_extra_menu: PGMenuModel; cdecl;
begin
  Result := Gtk4.gtk_text_view_get_extra_menu(@self);
end;

function TGtkTextView.get_gutter(win: TGtkTextWindowType): PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_text_view_get_gutter(@self, win);
end;

function TGtkTextView.get_indent: gint; cdecl;
begin
  Result := Gtk4.gtk_text_view_get_indent(@self);
end;

function TGtkTextView.get_input_hints: TGtkInputHints; cdecl;
begin
  Result := Gtk4.gtk_text_view_get_input_hints(@self);
end;

function TGtkTextView.get_input_purpose: TGtkInputPurpose; cdecl;
begin
  Result := Gtk4.gtk_text_view_get_input_purpose(@self);
end;

function TGtkTextView.get_iter_at_location(iter: PGtkTextIter; x: gint; y: gint): gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_view_get_iter_at_location(@self, iter, x, y);
end;

function TGtkTextView.get_iter_at_position(iter: PGtkTextIter; trailing: Pgint; x: gint; y: gint): gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_view_get_iter_at_position(@self, iter, trailing, x, y);
end;

procedure TGtkTextView.get_iter_location(iter: PGtkTextIter; location: PGdkRectangle); cdecl;
begin
  Gtk4.gtk_text_view_get_iter_location(@self, iter, location);
end;

function TGtkTextView.get_justification: TGtkJustification; cdecl;
begin
  Result := Gtk4.gtk_text_view_get_justification(@self);
end;

function TGtkTextView.get_left_margin: gint; cdecl;
begin
  Result := Gtk4.gtk_text_view_get_left_margin(@self);
end;

procedure TGtkTextView.get_line_at_y(target_iter: PGtkTextIter; y: gint; line_top: Pgint); cdecl;
begin
  Gtk4.gtk_text_view_get_line_at_y(@self, target_iter, y, line_top);
end;

procedure TGtkTextView.get_line_yrange(iter: PGtkTextIter; y: Pgint; height: Pgint); cdecl;
begin
  Gtk4.gtk_text_view_get_line_yrange(@self, iter, y, height);
end;

function TGtkTextView.get_ltr_context: PPangoContext; cdecl;
begin
  Result := Gtk4.gtk_text_view_get_ltr_context(@self);
end;

function TGtkTextView.get_monospace: gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_view_get_monospace(@self);
end;

function TGtkTextView.get_overwrite: gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_view_get_overwrite(@self);
end;

function TGtkTextView.get_pixels_above_lines: gint; cdecl;
begin
  Result := Gtk4.gtk_text_view_get_pixels_above_lines(@self);
end;

function TGtkTextView.get_pixels_below_lines: gint; cdecl;
begin
  Result := Gtk4.gtk_text_view_get_pixels_below_lines(@self);
end;

function TGtkTextView.get_pixels_inside_wrap: gint; cdecl;
begin
  Result := Gtk4.gtk_text_view_get_pixels_inside_wrap(@self);
end;

function TGtkTextView.get_right_margin: gint; cdecl;
begin
  Result := Gtk4.gtk_text_view_get_right_margin(@self);
end;

function TGtkTextView.get_rtl_context: PPangoContext; cdecl;
begin
  Result := Gtk4.gtk_text_view_get_rtl_context(@self);
end;

function TGtkTextView.get_tabs: PPangoTabArray; cdecl;
begin
  Result := Gtk4.gtk_text_view_get_tabs(@self);
end;

function TGtkTextView.get_top_margin: gint; cdecl;
begin
  Result := Gtk4.gtk_text_view_get_top_margin(@self);
end;

procedure TGtkTextView.get_visible_rect(visible_rect: PGdkRectangle); cdecl;
begin
  Gtk4.gtk_text_view_get_visible_rect(@self, visible_rect);
end;

function TGtkTextView.get_wrap_mode: TGtkWrapMode; cdecl;
begin
  Result := Gtk4.gtk_text_view_get_wrap_mode(@self);
end;

function TGtkTextView.im_context_filter_keypress(event: PGdkEvent): gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_view_im_context_filter_keypress(@self, event);
end;

function TGtkTextView.move_mark_onscreen(mark: PGtkTextMark): gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_view_move_mark_onscreen(@self, mark);
end;

procedure TGtkTextView.move_overlay(child: PGtkWidget; xpos: gint; ypos: gint); cdecl;
begin
  Gtk4.gtk_text_view_move_overlay(@self, child, xpos, ypos);
end;

function TGtkTextView.move_visually(iter: PGtkTextIter; count: gint): gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_view_move_visually(@self, iter, count);
end;

function TGtkTextView.place_cursor_onscreen: gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_view_place_cursor_onscreen(@self);
end;

procedure TGtkTextView.remove(child: PGtkWidget); cdecl;
begin
  Gtk4.gtk_text_view_remove(@self, child);
end;

procedure TGtkTextView.reset_cursor_blink; cdecl;
begin
  Gtk4.gtk_text_view_reset_cursor_blink(@self);
end;

procedure TGtkTextView.reset_im_context; cdecl;
begin
  Gtk4.gtk_text_view_reset_im_context(@self);
end;

procedure TGtkTextView.scroll_mark_onscreen(mark: PGtkTextMark); cdecl;
begin
  Gtk4.gtk_text_view_scroll_mark_onscreen(@self, mark);
end;

function TGtkTextView.scroll_to_iter(iter: PGtkTextIter; within_margin: gdouble; use_align: gboolean; xalign: gdouble; yalign: gdouble): gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_view_scroll_to_iter(@self, iter, within_margin, use_align, xalign, yalign);
end;

procedure TGtkTextView.scroll_to_mark(mark: PGtkTextMark; within_margin: gdouble; use_align: gboolean; xalign: gdouble; yalign: gdouble); cdecl;
begin
  Gtk4.gtk_text_view_scroll_to_mark(@self, mark, within_margin, use_align, xalign, yalign);
end;

procedure TGtkTextView.set_accepts_tab(accepts_tab: gboolean); cdecl;
begin
  Gtk4.gtk_text_view_set_accepts_tab(@self, accepts_tab);
end;

procedure TGtkTextView.set_bottom_margin(bottom_margin: gint); cdecl;
begin
  Gtk4.gtk_text_view_set_bottom_margin(@self, bottom_margin);
end;

procedure TGtkTextView.set_buffer(buffer: PGtkTextBuffer); cdecl;
begin
  Gtk4.gtk_text_view_set_buffer(@self, buffer);
end;

procedure TGtkTextView.set_cursor_visible(setting: gboolean); cdecl;
begin
  Gtk4.gtk_text_view_set_cursor_visible(@self, setting);
end;

procedure TGtkTextView.set_editable(setting: gboolean); cdecl;
begin
  Gtk4.gtk_text_view_set_editable(@self, setting);
end;

procedure TGtkTextView.set_extra_menu(model: PGMenuModel); cdecl;
begin
  Gtk4.gtk_text_view_set_extra_menu(@self, model);
end;

procedure TGtkTextView.set_gutter(win: TGtkTextWindowType; widget: PGtkWidget); cdecl;
begin
  Gtk4.gtk_text_view_set_gutter(@self, win, widget);
end;

procedure TGtkTextView.set_indent(indent: gint); cdecl;
begin
  Gtk4.gtk_text_view_set_indent(@self, indent);
end;

procedure TGtkTextView.set_input_hints(hints: TGtkInputHints); cdecl;
begin
  Gtk4.gtk_text_view_set_input_hints(@self, hints);
end;

procedure TGtkTextView.set_input_purpose(purpose: TGtkInputPurpose); cdecl;
begin
  Gtk4.gtk_text_view_set_input_purpose(@self, purpose);
end;

procedure TGtkTextView.set_justification(justification: TGtkJustification); cdecl;
begin
  Gtk4.gtk_text_view_set_justification(@self, justification);
end;

procedure TGtkTextView.set_left_margin(left_margin: gint); cdecl;
begin
  Gtk4.gtk_text_view_set_left_margin(@self, left_margin);
end;

procedure TGtkTextView.set_monospace(monospace: gboolean); cdecl;
begin
  Gtk4.gtk_text_view_set_monospace(@self, monospace);
end;

procedure TGtkTextView.set_overwrite(overwrite: gboolean); cdecl;
begin
  Gtk4.gtk_text_view_set_overwrite(@self, overwrite);
end;

procedure TGtkTextView.set_pixels_above_lines(pixels_above_lines: gint); cdecl;
begin
  Gtk4.gtk_text_view_set_pixels_above_lines(@self, pixels_above_lines);
end;

procedure TGtkTextView.set_pixels_below_lines(pixels_below_lines: gint); cdecl;
begin
  Gtk4.gtk_text_view_set_pixels_below_lines(@self, pixels_below_lines);
end;

procedure TGtkTextView.set_pixels_inside_wrap(pixels_inside_wrap: gint); cdecl;
begin
  Gtk4.gtk_text_view_set_pixels_inside_wrap(@self, pixels_inside_wrap);
end;

procedure TGtkTextView.set_right_margin(right_margin: gint); cdecl;
begin
  Gtk4.gtk_text_view_set_right_margin(@self, right_margin);
end;

procedure TGtkTextView.set_tabs(tabs: PPangoTabArray); cdecl;
begin
  Gtk4.gtk_text_view_set_tabs(@self, tabs);
end;

procedure TGtkTextView.set_top_margin(top_margin: gint); cdecl;
begin
  Gtk4.gtk_text_view_set_top_margin(@self, top_margin);
end;

procedure TGtkTextView.set_wrap_mode(wrap_mode: TGtkWrapMode); cdecl;
begin
  Gtk4.gtk_text_view_set_wrap_mode(@self, wrap_mode);
end;

function TGtkTextView.starts_display_line(iter: PGtkTextIter): gboolean; cdecl;
begin
  Result := Gtk4.gtk_text_view_starts_display_line(@self, iter);
end;

procedure TGtkTextView.window_to_buffer_coords(win: TGtkTextWindowType; window_x: gint; window_y: gint; buffer_x: Pgint; buffer_y: Pgint); cdecl;
begin
  Gtk4.gtk_text_view_window_to_buffer_coords(@self, win, window_x, window_y, buffer_x, buffer_y);
end;

function TGtkToggleButton.new: PGtkToggleButton; cdecl;
begin
  Result := Gtk4.gtk_toggle_button_new();
end;

function TGtkToggleButton.new_with_label(label_: Pgchar): PGtkToggleButton; cdecl;
begin
  Result := Gtk4.gtk_toggle_button_new_with_label(label_);
end;

function TGtkToggleButton.new_with_mnemonic(label_: Pgchar): PGtkToggleButton; cdecl;
begin
  Result := Gtk4.gtk_toggle_button_new_with_mnemonic(label_);
end;

function TGtkToggleButton.get_active: gboolean; cdecl;
begin
  Result := Gtk4.gtk_toggle_button_get_active(@self);
end;

procedure TGtkToggleButton.set_active(is_active: gboolean); cdecl;
begin
  Gtk4.gtk_toggle_button_set_active(@self, is_active);
end;

procedure TGtkToggleButton.set_group(group: PGtkToggleButton); cdecl;
begin
  Gtk4.gtk_toggle_button_set_group(@self, group);
end;

procedure TGtkToggleButton.toggled; cdecl;
begin
  Gtk4.gtk_toggle_button_toggled(@self);
end;

function TGtkTreeViewColumn.new: PGtkTreeViewColumn; cdecl;
begin
  Result := Gtk4.gtk_tree_view_column_new();
end;

function TGtkTreeViewColumn.new_with_area(area: PGtkCellArea): PGtkTreeViewColumn; cdecl;
begin
  Result := Gtk4.gtk_tree_view_column_new_with_area(area);
end;

procedure TGtkTreeViewColumn.add_attribute(cell_renderer: PGtkCellRenderer; attribute: Pgchar; column: gint); cdecl;
begin
  Gtk4.gtk_tree_view_column_add_attribute(@self, cell_renderer, attribute, column);
end;

function TGtkTreeViewColumn.cell_get_position(cell_renderer: PGtkCellRenderer; x_offset: Pgint; width: Pgint): gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_view_column_cell_get_position(@self, cell_renderer, x_offset, width);
end;

procedure TGtkTreeViewColumn.cell_get_size(x_offset: Pgint; y_offset: Pgint; width: Pgint; height: Pgint); cdecl;
begin
  Gtk4.gtk_tree_view_column_cell_get_size(@self, x_offset, y_offset, width, height);
end;

function TGtkTreeViewColumn.cell_is_visible: gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_view_column_cell_is_visible(@self);
end;

procedure TGtkTreeViewColumn.cell_set_cell_data(tree_model: PGtkTreeModel; iter: PGtkTreeIter; is_expander: gboolean; is_expanded: gboolean); cdecl;
begin
  Gtk4.gtk_tree_view_column_cell_set_cell_data(@self, tree_model, iter, is_expander, is_expanded);
end;

procedure TGtkTreeViewColumn.clear; cdecl;
begin
  Gtk4.gtk_tree_view_column_clear(@self);
end;

procedure TGtkTreeViewColumn.clear_attributes(cell_renderer: PGtkCellRenderer); cdecl;
begin
  Gtk4.gtk_tree_view_column_clear_attributes(@self, cell_renderer);
end;

procedure TGtkTreeViewColumn.clicked; cdecl;
begin
  Gtk4.gtk_tree_view_column_clicked(@self);
end;

procedure TGtkTreeViewColumn.focus_cell(cell: PGtkCellRenderer); cdecl;
begin
  Gtk4.gtk_tree_view_column_focus_cell(@self, cell);
end;

function TGtkTreeViewColumn.get_alignment: gfloat; cdecl;
begin
  Result := Gtk4.gtk_tree_view_column_get_alignment(@self);
end;

function TGtkTreeViewColumn.get_button: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_tree_view_column_get_button(@self);
end;

function TGtkTreeViewColumn.get_clickable: gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_view_column_get_clickable(@self);
end;

function TGtkTreeViewColumn.get_expand: gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_view_column_get_expand(@self);
end;

function TGtkTreeViewColumn.get_fixed_width: gint; cdecl;
begin
  Result := Gtk4.gtk_tree_view_column_get_fixed_width(@self);
end;

function TGtkTreeViewColumn.get_max_width: gint; cdecl;
begin
  Result := Gtk4.gtk_tree_view_column_get_max_width(@self);
end;

function TGtkTreeViewColumn.get_min_width: gint; cdecl;
begin
  Result := Gtk4.gtk_tree_view_column_get_min_width(@self);
end;

function TGtkTreeViewColumn.get_reorderable: gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_view_column_get_reorderable(@self);
end;

function TGtkTreeViewColumn.get_resizable: gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_view_column_get_resizable(@self);
end;

function TGtkTreeViewColumn.get_sizing: TGtkTreeViewColumnSizing; cdecl;
begin
  Result := Gtk4.gtk_tree_view_column_get_sizing(@self);
end;

function TGtkTreeViewColumn.get_sort_column_id: gint; cdecl;
begin
  Result := Gtk4.gtk_tree_view_column_get_sort_column_id(@self);
end;

function TGtkTreeViewColumn.get_sort_indicator: gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_view_column_get_sort_indicator(@self);
end;

function TGtkTreeViewColumn.get_sort_order: TGtkSortType; cdecl;
begin
  Result := Gtk4.gtk_tree_view_column_get_sort_order(@self);
end;

function TGtkTreeViewColumn.get_spacing: gint; cdecl;
begin
  Result := Gtk4.gtk_tree_view_column_get_spacing(@self);
end;

function TGtkTreeViewColumn.get_title: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_tree_view_column_get_title(@self);
end;

function TGtkTreeViewColumn.get_tree_view: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_tree_view_column_get_tree_view(@self);
end;

function TGtkTreeViewColumn.get_visible: gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_view_column_get_visible(@self);
end;

function TGtkTreeViewColumn.get_widget: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_tree_view_column_get_widget(@self);
end;

function TGtkTreeViewColumn.get_width: gint; cdecl;
begin
  Result := Gtk4.gtk_tree_view_column_get_width(@self);
end;

function TGtkTreeViewColumn.get_x_offset: gint; cdecl;
begin
  Result := Gtk4.gtk_tree_view_column_get_x_offset(@self);
end;

procedure TGtkTreeViewColumn.pack_end(cell: PGtkCellRenderer; expand: gboolean); cdecl;
begin
  Gtk4.gtk_tree_view_column_pack_end(@self, cell, expand);
end;

procedure TGtkTreeViewColumn.pack_start(cell: PGtkCellRenderer; expand: gboolean); cdecl;
begin
  Gtk4.gtk_tree_view_column_pack_start(@self, cell, expand);
end;

procedure TGtkTreeViewColumn.queue_resize; cdecl;
begin
  Gtk4.gtk_tree_view_column_queue_resize(@self);
end;

procedure TGtkTreeViewColumn.set_alignment(xalign: gfloat); cdecl;
begin
  Gtk4.gtk_tree_view_column_set_alignment(@self, xalign);
end;

procedure TGtkTreeViewColumn.set_cell_data_func(cell_renderer: PGtkCellRenderer; func: TGtkTreeCellDataFunc; func_data: gpointer; destroy_: TGDestroyNotify); cdecl;
begin
  Gtk4.gtk_tree_view_column_set_cell_data_func(@self, cell_renderer, func, func_data, destroy_);
end;

procedure TGtkTreeViewColumn.set_clickable(clickable: gboolean); cdecl;
begin
  Gtk4.gtk_tree_view_column_set_clickable(@self, clickable);
end;

procedure TGtkTreeViewColumn.set_expand(expand: gboolean); cdecl;
begin
  Gtk4.gtk_tree_view_column_set_expand(@self, expand);
end;

procedure TGtkTreeViewColumn.set_fixed_width(fixed_width: gint); cdecl;
begin
  Gtk4.gtk_tree_view_column_set_fixed_width(@self, fixed_width);
end;

procedure TGtkTreeViewColumn.set_max_width(max_width: gint); cdecl;
begin
  Gtk4.gtk_tree_view_column_set_max_width(@self, max_width);
end;

procedure TGtkTreeViewColumn.set_min_width(min_width: gint); cdecl;
begin
  Gtk4.gtk_tree_view_column_set_min_width(@self, min_width);
end;

procedure TGtkTreeViewColumn.set_reorderable(reorderable: gboolean); cdecl;
begin
  Gtk4.gtk_tree_view_column_set_reorderable(@self, reorderable);
end;

procedure TGtkTreeViewColumn.set_resizable(resizable: gboolean); cdecl;
begin
  Gtk4.gtk_tree_view_column_set_resizable(@self, resizable);
end;

procedure TGtkTreeViewColumn.set_sizing(type_: TGtkTreeViewColumnSizing); cdecl;
begin
  Gtk4.gtk_tree_view_column_set_sizing(@self, type_);
end;

procedure TGtkTreeViewColumn.set_sort_column_id(sort_column_id: gint); cdecl;
begin
  Gtk4.gtk_tree_view_column_set_sort_column_id(@self, sort_column_id);
end;

procedure TGtkTreeViewColumn.set_sort_indicator(setting: gboolean); cdecl;
begin
  Gtk4.gtk_tree_view_column_set_sort_indicator(@self, setting);
end;

procedure TGtkTreeViewColumn.set_sort_order(order: TGtkSortType); cdecl;
begin
  Gtk4.gtk_tree_view_column_set_sort_order(@self, order);
end;

procedure TGtkTreeViewColumn.set_spacing(spacing: gint); cdecl;
begin
  Gtk4.gtk_tree_view_column_set_spacing(@self, spacing);
end;

procedure TGtkTreeViewColumn.set_title(title: Pgchar); cdecl;
begin
  Gtk4.gtk_tree_view_column_set_title(@self, title);
end;

procedure TGtkTreeViewColumn.set_visible(visible: gboolean); cdecl;
begin
  Gtk4.gtk_tree_view_column_set_visible(@self, visible);
end;

procedure TGtkTreeViewColumn.set_widget(widget: PGtkWidget); cdecl;
begin
  Gtk4.gtk_tree_view_column_set_widget(@self, widget);
end;

function TGtkTreeExpander.new: PGtkTreeExpander; cdecl;
begin
  Result := Gtk4.gtk_tree_expander_new();
end;

function TGtkTreeExpander.get_child: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_tree_expander_get_child(@self);
end;

function TGtkTreeExpander.get_indent_for_icon: gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_expander_get_indent_for_icon(@self);
end;

function TGtkTreeExpander.get_item: PGObject; cdecl;
begin
  Result := Gtk4.gtk_tree_expander_get_item(@self);
end;

function TGtkTreeExpander.get_list_row: PGtkTreeListRow; cdecl;
begin
  Result := Gtk4.gtk_tree_expander_get_list_row(@self);
end;

procedure TGtkTreeExpander.set_child(child: PGtkWidget); cdecl;
begin
  Gtk4.gtk_tree_expander_set_child(@self, child);
end;

procedure TGtkTreeExpander.set_indent_for_icon(indent_for_icon: gboolean); cdecl;
begin
  Gtk4.gtk_tree_expander_set_indent_for_icon(@self, indent_for_icon);
end;

procedure TGtkTreeExpander.set_list_row(list_row: PGtkTreeListRow); cdecl;
begin
  Gtk4.gtk_tree_expander_set_list_row(@self, list_row);
end;

function TGtkTreeListRow.get_child_row(position: guint): PGtkTreeListRow; cdecl;
begin
  Result := Gtk4.gtk_tree_list_row_get_child_row(@self, position);
end;

function TGtkTreeListRow.get_children: PGListModel; cdecl;
begin
  Result := Gtk4.gtk_tree_list_row_get_children(@self);
end;

function TGtkTreeListRow.get_depth: guint; cdecl;
begin
  Result := Gtk4.gtk_tree_list_row_get_depth(@self);
end;

function TGtkTreeListRow.get_expanded: gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_list_row_get_expanded(@self);
end;

function TGtkTreeListRow.get_item: PGObject; cdecl;
begin
  Result := Gtk4.gtk_tree_list_row_get_item(@self);
end;

function TGtkTreeListRow.get_parent: PGtkTreeListRow; cdecl;
begin
  Result := Gtk4.gtk_tree_list_row_get_parent(@self);
end;

function TGtkTreeListRow.get_position: guint; cdecl;
begin
  Result := Gtk4.gtk_tree_list_row_get_position(@self);
end;

function TGtkTreeListRow.is_expandable: gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_list_row_is_expandable(@self);
end;

procedure TGtkTreeListRow.set_expanded(expanded: gboolean); cdecl;
begin
  Gtk4.gtk_tree_list_row_set_expanded(@self, expanded);
end;

function TGtkTreeListModel.new(root: PGListModel; passthrough: gboolean; autoexpand: gboolean; create_func: TGtkTreeListModelCreateModelFunc; user_data: gpointer; user_destroy: TGDestroyNotify): PGtkTreeListModel; cdecl;
begin
  Result := Gtk4.gtk_tree_list_model_new(root, passthrough, autoexpand, create_func, user_data, user_destroy);
end;

function TGtkTreeListModel.get_autoexpand: gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_list_model_get_autoexpand(@self);
end;

function TGtkTreeListModel.get_child_row(position: guint): PGtkTreeListRow; cdecl;
begin
  Result := Gtk4.gtk_tree_list_model_get_child_row(@self, position);
end;

function TGtkTreeListModel.get_model: PGListModel; cdecl;
begin
  Result := Gtk4.gtk_tree_list_model_get_model(@self);
end;

function TGtkTreeListModel.get_passthrough: gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_list_model_get_passthrough(@self);
end;

function TGtkTreeListModel.get_row(position: guint): PGtkTreeListRow; cdecl;
begin
  Result := Gtk4.gtk_tree_list_model_get_row(@self, position);
end;

procedure TGtkTreeListModel.set_autoexpand(autoexpand: gboolean); cdecl;
begin
  Gtk4.gtk_tree_list_model_set_autoexpand(@self, autoexpand);
end;

function TGtkTreeListRowSorter.new(sorter: PGtkSorter): PGtkTreeListRowSorter; cdecl;
begin
  Result := Gtk4.gtk_tree_list_row_sorter_new(sorter);
end;

function TGtkTreeListRowSorter.get_sorter: PGtkSorter; cdecl;
begin
  Result := Gtk4.gtk_tree_list_row_sorter_get_sorter(@self);
end;

procedure TGtkTreeListRowSorter.set_sorter(sorter: PGtkSorter); cdecl;
begin
  Gtk4.gtk_tree_list_row_sorter_set_sorter(@self, sorter);
end;

procedure TGtkTreeModelFilter.clear_cache; cdecl;
begin
  Gtk4.gtk_tree_model_filter_clear_cache(@self);
end;

function TGtkTreeModelFilter.convert_child_iter_to_iter(filter_iter: PGtkTreeIter; child_iter: PGtkTreeIter): gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_model_filter_convert_child_iter_to_iter(@self, filter_iter, child_iter);
end;

function TGtkTreeModelFilter.convert_child_path_to_path(child_path: PGtkTreePath): PGtkTreePath; cdecl;
begin
  Result := Gtk4.gtk_tree_model_filter_convert_child_path_to_path(@self, child_path);
end;

procedure TGtkTreeModelFilter.convert_iter_to_child_iter(child_iter: PGtkTreeIter; filter_iter: PGtkTreeIter); cdecl;
begin
  Gtk4.gtk_tree_model_filter_convert_iter_to_child_iter(@self, child_iter, filter_iter);
end;

function TGtkTreeModelFilter.convert_path_to_child_path(filter_path: PGtkTreePath): PGtkTreePath; cdecl;
begin
  Result := Gtk4.gtk_tree_model_filter_convert_path_to_child_path(@self, filter_path);
end;

function TGtkTreeModelFilter.get_model: PGtkTreeModel; cdecl;
begin
  Result := Gtk4.gtk_tree_model_filter_get_model(@self);
end;

procedure TGtkTreeModelFilter.refilter; cdecl;
begin
  Gtk4.gtk_tree_model_filter_refilter(@self);
end;

procedure TGtkTreeModelFilter.set_modify_func(n_columns: gint; types: PGType; func: TGtkTreeModelFilterModifyFunc; data: gpointer; destroy_: TGDestroyNotify); cdecl;
begin
  Gtk4.gtk_tree_model_filter_set_modify_func(@self, n_columns, types, func, data, destroy_);
end;

procedure TGtkTreeModelFilter.set_visible_column(column: gint); cdecl;
begin
  Gtk4.gtk_tree_model_filter_set_visible_column(@self, column);
end;

procedure TGtkTreeModelFilter.set_visible_func(func: TGtkTreeModelFilterVisibleFunc; data: gpointer; destroy_: TGDestroyNotify); cdecl;
begin
  Gtk4.gtk_tree_model_filter_set_visible_func(@self, func, data, destroy_);
end;

function TGtkTreeModelSort.new_with_model(child_model: PGtkTreeModel): PGtkTreeModelSort; cdecl;
begin
  Result := Gtk4.gtk_tree_model_sort_new_with_model(child_model);
end;

procedure TGtkTreeModelSort.clear_cache; cdecl;
begin
  Gtk4.gtk_tree_model_sort_clear_cache(@self);
end;

function TGtkTreeModelSort.convert_child_iter_to_iter(sort_iter: PGtkTreeIter; child_iter: PGtkTreeIter): gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_model_sort_convert_child_iter_to_iter(@self, sort_iter, child_iter);
end;

function TGtkTreeModelSort.convert_child_path_to_path(child_path: PGtkTreePath): PGtkTreePath; cdecl;
begin
  Result := Gtk4.gtk_tree_model_sort_convert_child_path_to_path(@self, child_path);
end;

procedure TGtkTreeModelSort.convert_iter_to_child_iter(child_iter: PGtkTreeIter; sorted_iter: PGtkTreeIter); cdecl;
begin
  Gtk4.gtk_tree_model_sort_convert_iter_to_child_iter(@self, child_iter, sorted_iter);
end;

function TGtkTreeModelSort.convert_path_to_child_path(sorted_path: PGtkTreePath): PGtkTreePath; cdecl;
begin
  Result := Gtk4.gtk_tree_model_sort_convert_path_to_child_path(@self, sorted_path);
end;

function TGtkTreeModelSort.get_model: PGtkTreeModel; cdecl;
begin
  Result := Gtk4.gtk_tree_model_sort_get_model(@self);
end;

function TGtkTreeModelSort.iter_is_valid(iter: PGtkTreeIter): gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_model_sort_iter_is_valid(@self, iter);
end;

procedure TGtkTreeModelSort.reset_default_sort_func; cdecl;
begin
  Gtk4.gtk_tree_model_sort_reset_default_sort_func(@self);
end;

function TGtkTreeRowReference.new(model: PGtkTreeModel; path: PGtkTreePath): PGtkTreeRowReference; cdecl;
begin
  Result := Gtk4.gtk_tree_row_reference_new(model, path);
end;

function TGtkTreeRowReference.new_proxy(proxy: PGObject; model: PGtkTreeModel; path: PGtkTreePath): PGtkTreeRowReference; cdecl;
begin
  Result := Gtk4.gtk_tree_row_reference_new_proxy(proxy, model, path);
end;

function TGtkTreeRowReference.copy: PGtkTreeRowReference; cdecl;
begin
  Result := Gtk4.gtk_tree_row_reference_copy(@self);
end;

procedure TGtkTreeRowReference.free; cdecl;
begin
  Gtk4.gtk_tree_row_reference_free(@self);
end;

function TGtkTreeRowReference.get_model: PGtkTreeModel; cdecl;
begin
  Result := Gtk4.gtk_tree_row_reference_get_model(@self);
end;

function TGtkTreeRowReference.get_path: PGtkTreePath; cdecl;
begin
  Result := Gtk4.gtk_tree_row_reference_get_path(@self);
end;

function TGtkTreeRowReference.valid: gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_row_reference_valid(@self);
end;

procedure TGtkTreeRowReference.deleted(proxy: PGObject; path: PGtkTreePath); cdecl;
begin
  Gtk4.gtk_tree_row_reference_deleted(proxy, path);
end;

procedure TGtkTreeRowReference.inserted(proxy: PGObject; path: PGtkTreePath); cdecl;
begin
  Gtk4.gtk_tree_row_reference_inserted(proxy, path);
end;

procedure TGtkTreeRowReference.reordered(proxy: PGObject; path: PGtkTreePath; iter: PGtkTreeIter; new_order: Pgint); cdecl;
begin
  Gtk4.gtk_tree_row_reference_reordered(proxy, path, iter, new_order);
end;

function TGtkTreeSelection.count_selected_rows: gint; cdecl;
begin
  Result := Gtk4.gtk_tree_selection_count_selected_rows(@self);
end;

function TGtkTreeSelection.get_mode: TGtkSelectionMode; cdecl;
begin
  Result := Gtk4.gtk_tree_selection_get_mode(@self);
end;

function TGtkTreeSelection.get_select_function: TGtkTreeSelectionFunc; cdecl;
begin
  Result := Gtk4.gtk_tree_selection_get_select_function(@self);
end;

function TGtkTreeSelection.get_selected(model: PPGtkTreeModel; iter: PGtkTreeIter): gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_selection_get_selected(@self, model, iter);
end;

function TGtkTreeSelection.get_selected_rows(model: PPGtkTreeModel): PGList; cdecl;
begin
  Result := Gtk4.gtk_tree_selection_get_selected_rows(@self, model);
end;

function TGtkTreeSelection.get_tree_view: PGtkTreeView; cdecl;
begin
  Result := Gtk4.gtk_tree_selection_get_tree_view(@self);
end;

function TGtkTreeSelection.get_user_data: gpointer; cdecl;
begin
  Result := Gtk4.gtk_tree_selection_get_user_data(@self);
end;

function TGtkTreeSelection.iter_is_selected(iter: PGtkTreeIter): gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_selection_iter_is_selected(@self, iter);
end;

function TGtkTreeSelection.path_is_selected(path: PGtkTreePath): gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_selection_path_is_selected(@self, path);
end;

procedure TGtkTreeSelection.select_all; cdecl;
begin
  Gtk4.gtk_tree_selection_select_all(@self);
end;

procedure TGtkTreeSelection.select_iter(iter: PGtkTreeIter); cdecl;
begin
  Gtk4.gtk_tree_selection_select_iter(@self, iter);
end;

procedure TGtkTreeSelection.select_path(path: PGtkTreePath); cdecl;
begin
  Gtk4.gtk_tree_selection_select_path(@self, path);
end;

procedure TGtkTreeSelection.select_range(start_path: PGtkTreePath; end_path: PGtkTreePath); cdecl;
begin
  Gtk4.gtk_tree_selection_select_range(@self, start_path, end_path);
end;

procedure TGtkTreeSelection.selected_foreach(func: TGtkTreeSelectionForeachFunc; data: gpointer); cdecl;
begin
  Gtk4.gtk_tree_selection_selected_foreach(@self, func, data);
end;

procedure TGtkTreeSelection.set_mode(type_: TGtkSelectionMode); cdecl;
begin
  Gtk4.gtk_tree_selection_set_mode(@self, type_);
end;

procedure TGtkTreeSelection.set_select_function(func: TGtkTreeSelectionFunc; data: gpointer; destroy_: TGDestroyNotify); cdecl;
begin
  Gtk4.gtk_tree_selection_set_select_function(@self, func, data, destroy_);
end;

procedure TGtkTreeSelection.unselect_all; cdecl;
begin
  Gtk4.gtk_tree_selection_unselect_all(@self);
end;

procedure TGtkTreeSelection.unselect_iter(iter: PGtkTreeIter); cdecl;
begin
  Gtk4.gtk_tree_selection_unselect_iter(@self, iter);
end;

procedure TGtkTreeSelection.unselect_path(path: PGtkTreePath); cdecl;
begin
  Gtk4.gtk_tree_selection_unselect_path(@self, path);
end;

procedure TGtkTreeSelection.unselect_range(start_path: PGtkTreePath; end_path: PGtkTreePath); cdecl;
begin
  Gtk4.gtk_tree_selection_unselect_range(@self, start_path, end_path);
end;

function TGtkTreeView.new: PGtkTreeView; cdecl;
begin
  Result := Gtk4.gtk_tree_view_new();
end;

function TGtkTreeView.new_with_model(model: PGtkTreeModel): PGtkTreeView; cdecl;
begin
  Result := Gtk4.gtk_tree_view_new_with_model(model);
end;

function TGtkTreeView.append_column(column: PGtkTreeViewColumn): gint; cdecl;
begin
  Result := Gtk4.gtk_tree_view_append_column(@self, column);
end;

procedure TGtkTreeView.collapse_all; cdecl;
begin
  Gtk4.gtk_tree_view_collapse_all(@self);
end;

function TGtkTreeView.collapse_row(path: PGtkTreePath): gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_view_collapse_row(@self, path);
end;

procedure TGtkTreeView.columns_autosize; cdecl;
begin
  Gtk4.gtk_tree_view_columns_autosize(@self);
end;

procedure TGtkTreeView.convert_bin_window_to_tree_coords(bx: gint; by: gint; tx: Pgint; ty: Pgint); cdecl;
begin
  Gtk4.gtk_tree_view_convert_bin_window_to_tree_coords(@self, bx, by, tx, ty);
end;

procedure TGtkTreeView.convert_bin_window_to_widget_coords(bx: gint; by: gint; wx: Pgint; wy: Pgint); cdecl;
begin
  Gtk4.gtk_tree_view_convert_bin_window_to_widget_coords(@self, bx, by, wx, wy);
end;

procedure TGtkTreeView.convert_tree_to_bin_window_coords(tx: gint; ty: gint; bx: Pgint; by: Pgint); cdecl;
begin
  Gtk4.gtk_tree_view_convert_tree_to_bin_window_coords(@self, tx, ty, bx, by);
end;

procedure TGtkTreeView.convert_tree_to_widget_coords(tx: gint; ty: gint; wx: Pgint; wy: Pgint); cdecl;
begin
  Gtk4.gtk_tree_view_convert_tree_to_widget_coords(@self, tx, ty, wx, wy);
end;

procedure TGtkTreeView.convert_widget_to_bin_window_coords(wx: gint; wy: gint; bx: Pgint; by: Pgint); cdecl;
begin
  Gtk4.gtk_tree_view_convert_widget_to_bin_window_coords(@self, wx, wy, bx, by);
end;

procedure TGtkTreeView.convert_widget_to_tree_coords(wx: gint; wy: gint; tx: Pgint; ty: Pgint); cdecl;
begin
  Gtk4.gtk_tree_view_convert_widget_to_tree_coords(@self, wx, wy, tx, ty);
end;

function TGtkTreeView.create_row_drag_icon(path: PGtkTreePath): PGdkPaintable; cdecl;
begin
  Result := Gtk4.gtk_tree_view_create_row_drag_icon(@self, path);
end;

procedure TGtkTreeView.enable_model_drag_dest(formats: PGdkContentFormats; actions: TGdkDragAction); cdecl;
begin
  Gtk4.gtk_tree_view_enable_model_drag_dest(@self, formats, actions);
end;

procedure TGtkTreeView.enable_model_drag_source(start_button_mask: TGdkModifierType; formats: PGdkContentFormats; actions: TGdkDragAction); cdecl;
begin
  Gtk4.gtk_tree_view_enable_model_drag_source(@self, start_button_mask, formats, actions);
end;

procedure TGtkTreeView.expand_all; cdecl;
begin
  Gtk4.gtk_tree_view_expand_all(@self);
end;

function TGtkTreeView.expand_row(path: PGtkTreePath; open_all: gboolean): gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_view_expand_row(@self, path, open_all);
end;

procedure TGtkTreeView.expand_to_path(path: PGtkTreePath); cdecl;
begin
  Gtk4.gtk_tree_view_expand_to_path(@self, path);
end;

function TGtkTreeView.get_activate_on_single_click: gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_view_get_activate_on_single_click(@self);
end;

procedure TGtkTreeView.get_background_area(path: PGtkTreePath; column: PGtkTreeViewColumn; rect: PGdkRectangle); cdecl;
begin
  Gtk4.gtk_tree_view_get_background_area(@self, path, column, rect);
end;

procedure TGtkTreeView.get_cell_area(path: PGtkTreePath; column: PGtkTreeViewColumn; rect: PGdkRectangle); cdecl;
begin
  Gtk4.gtk_tree_view_get_cell_area(@self, path, column, rect);
end;

function TGtkTreeView.get_column(n: gint): PGtkTreeViewColumn; cdecl;
begin
  Result := Gtk4.gtk_tree_view_get_column(@self, n);
end;

function TGtkTreeView.get_columns: PGList; cdecl;
begin
  Result := Gtk4.gtk_tree_view_get_columns(@self);
end;

procedure TGtkTreeView.get_cursor(path: PPGtkTreePath; focus_column: PPGtkTreeViewColumn); cdecl;
begin
  Gtk4.gtk_tree_view_get_cursor(@self, path, focus_column);
end;

function TGtkTreeView.get_dest_row_at_pos(drag_x: gint; drag_y: gint; path: PPGtkTreePath; pos: PGtkTreeViewDropPosition): gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_view_get_dest_row_at_pos(@self, drag_x, drag_y, path, pos);
end;

procedure TGtkTreeView.get_drag_dest_row(path: PPGtkTreePath; pos: PGtkTreeViewDropPosition); cdecl;
begin
  Gtk4.gtk_tree_view_get_drag_dest_row(@self, path, pos);
end;

function TGtkTreeView.get_enable_search: gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_view_get_enable_search(@self);
end;

function TGtkTreeView.get_enable_tree_lines: gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_view_get_enable_tree_lines(@self);
end;

function TGtkTreeView.get_expander_column: PGtkTreeViewColumn; cdecl;
begin
  Result := Gtk4.gtk_tree_view_get_expander_column(@self);
end;

function TGtkTreeView.get_fixed_height_mode: gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_view_get_fixed_height_mode(@self);
end;

function TGtkTreeView.get_grid_lines: TGtkTreeViewGridLines; cdecl;
begin
  Result := Gtk4.gtk_tree_view_get_grid_lines(@self);
end;

function TGtkTreeView.get_headers_clickable: gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_view_get_headers_clickable(@self);
end;

function TGtkTreeView.get_headers_visible: gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_view_get_headers_visible(@self);
end;

function TGtkTreeView.get_hover_expand: gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_view_get_hover_expand(@self);
end;

function TGtkTreeView.get_hover_selection: gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_view_get_hover_selection(@self);
end;

function TGtkTreeView.get_level_indentation: gint; cdecl;
begin
  Result := Gtk4.gtk_tree_view_get_level_indentation(@self);
end;

function TGtkTreeView.get_model: PGtkTreeModel; cdecl;
begin
  Result := Gtk4.gtk_tree_view_get_model(@self);
end;

function TGtkTreeView.get_n_columns: guint; cdecl;
begin
  Result := Gtk4.gtk_tree_view_get_n_columns(@self);
end;

function TGtkTreeView.get_path_at_pos(x: gint; y: gint; path: PPGtkTreePath; column: PPGtkTreeViewColumn; cell_x: Pgint; cell_y: Pgint): gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_view_get_path_at_pos(@self, x, y, path, column, cell_x, cell_y);
end;

function TGtkTreeView.get_reorderable: gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_view_get_reorderable(@self);
end;

function TGtkTreeView.get_row_separator_func: TGtkTreeViewRowSeparatorFunc; cdecl;
begin
  Result := Gtk4.gtk_tree_view_get_row_separator_func(@self);
end;

function TGtkTreeView.get_rubber_banding: gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_view_get_rubber_banding(@self);
end;

function TGtkTreeView.get_search_column: gint; cdecl;
begin
  Result := Gtk4.gtk_tree_view_get_search_column(@self);
end;

function TGtkTreeView.get_search_entry: PGtkEditable; cdecl;
begin
  Result := Gtk4.gtk_tree_view_get_search_entry(@self);
end;

function TGtkTreeView.get_search_equal_func: TGtkTreeViewSearchEqualFunc; cdecl;
begin
  Result := Gtk4.gtk_tree_view_get_search_equal_func(@self);
end;

function TGtkTreeView.get_selection: PGtkTreeSelection; cdecl;
begin
  Result := Gtk4.gtk_tree_view_get_selection(@self);
end;

function TGtkTreeView.get_show_expanders: gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_view_get_show_expanders(@self);
end;

function TGtkTreeView.get_tooltip_column: gint; cdecl;
begin
  Result := Gtk4.gtk_tree_view_get_tooltip_column(@self);
end;

function TGtkTreeView.get_tooltip_context(x: gint; y: gint; keyboard_tip: gboolean; model: PPGtkTreeModel; path: PPGtkTreePath; iter: PGtkTreeIter): gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_view_get_tooltip_context(@self, x, y, keyboard_tip, model, path, iter);
end;

function TGtkTreeView.get_visible_range(start_path: PPGtkTreePath; end_path: PPGtkTreePath): gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_view_get_visible_range(@self, start_path, end_path);
end;

procedure TGtkTreeView.get_visible_rect(visible_rect: PGdkRectangle); cdecl;
begin
  Gtk4.gtk_tree_view_get_visible_rect(@self, visible_rect);
end;

function TGtkTreeView.insert_column(column: PGtkTreeViewColumn; position: gint): gint; cdecl;
begin
  Result := Gtk4.gtk_tree_view_insert_column(@self, column, position);
end;

function TGtkTreeView.insert_column_with_data_func(position: gint; title: Pgchar; cell: PGtkCellRenderer; func: TGtkTreeCellDataFunc; data: gpointer; dnotify: TGDestroyNotify): gint; cdecl;
begin
  Result := Gtk4.gtk_tree_view_insert_column_with_data_func(@self, position, title, cell, func, data, dnotify);
end;

function TGtkTreeView.is_blank_at_pos(x: gint; y: gint; path: PPGtkTreePath; column: PPGtkTreeViewColumn; cell_x: Pgint; cell_y: Pgint): gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_view_is_blank_at_pos(@self, x, y, path, column, cell_x, cell_y);
end;

function TGtkTreeView.is_rubber_banding_active: gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_view_is_rubber_banding_active(@self);
end;

procedure TGtkTreeView.map_expanded_rows(func: TGtkTreeViewMappingFunc; data: gpointer); cdecl;
begin
  Gtk4.gtk_tree_view_map_expanded_rows(@self, func, data);
end;

procedure TGtkTreeView.move_column_after(column: PGtkTreeViewColumn; base_column: PGtkTreeViewColumn); cdecl;
begin
  Gtk4.gtk_tree_view_move_column_after(@self, column, base_column);
end;

function TGtkTreeView.remove_column(column: PGtkTreeViewColumn): gint; cdecl;
begin
  Result := Gtk4.gtk_tree_view_remove_column(@self, column);
end;

procedure TGtkTreeView.row_activated(path: PGtkTreePath; column: PGtkTreeViewColumn); cdecl;
begin
  Gtk4.gtk_tree_view_row_activated(@self, path, column);
end;

function TGtkTreeView.row_expanded(path: PGtkTreePath): gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_view_row_expanded(@self, path);
end;

procedure TGtkTreeView.scroll_to_cell(path: PGtkTreePath; column: PGtkTreeViewColumn; use_align: gboolean; row_align: gfloat; col_align: gfloat); cdecl;
begin
  Gtk4.gtk_tree_view_scroll_to_cell(@self, path, column, use_align, row_align, col_align);
end;

procedure TGtkTreeView.scroll_to_point(tree_x: gint; tree_y: gint); cdecl;
begin
  Gtk4.gtk_tree_view_scroll_to_point(@self, tree_x, tree_y);
end;

procedure TGtkTreeView.set_activate_on_single_click(single: gboolean); cdecl;
begin
  Gtk4.gtk_tree_view_set_activate_on_single_click(@self, single);
end;

procedure TGtkTreeView.set_column_drag_function(func: TGtkTreeViewColumnDropFunc; user_data: gpointer; destroy_: TGDestroyNotify); cdecl;
begin
  Gtk4.gtk_tree_view_set_column_drag_function(@self, func, user_data, destroy_);
end;

procedure TGtkTreeView.set_cursor(path: PGtkTreePath; focus_column: PGtkTreeViewColumn; start_editing: gboolean); cdecl;
begin
  Gtk4.gtk_tree_view_set_cursor(@self, path, focus_column, start_editing);
end;

procedure TGtkTreeView.set_cursor_on_cell(path: PGtkTreePath; focus_column: PGtkTreeViewColumn; focus_cell: PGtkCellRenderer; start_editing: gboolean); cdecl;
begin
  Gtk4.gtk_tree_view_set_cursor_on_cell(@self, path, focus_column, focus_cell, start_editing);
end;

procedure TGtkTreeView.set_drag_dest_row(path: PGtkTreePath; pos: TGtkTreeViewDropPosition); cdecl;
begin
  Gtk4.gtk_tree_view_set_drag_dest_row(@self, path, pos);
end;

procedure TGtkTreeView.set_enable_search(enable_search: gboolean); cdecl;
begin
  Gtk4.gtk_tree_view_set_enable_search(@self, enable_search);
end;

procedure TGtkTreeView.set_enable_tree_lines(enabled: gboolean); cdecl;
begin
  Gtk4.gtk_tree_view_set_enable_tree_lines(@self, enabled);
end;

procedure TGtkTreeView.set_expander_column(column: PGtkTreeViewColumn); cdecl;
begin
  Gtk4.gtk_tree_view_set_expander_column(@self, column);
end;

procedure TGtkTreeView.set_fixed_height_mode(enable: gboolean); cdecl;
begin
  Gtk4.gtk_tree_view_set_fixed_height_mode(@self, enable);
end;

procedure TGtkTreeView.set_grid_lines(grid_lines: TGtkTreeViewGridLines); cdecl;
begin
  Gtk4.gtk_tree_view_set_grid_lines(@self, grid_lines);
end;

procedure TGtkTreeView.set_headers_clickable(setting: gboolean); cdecl;
begin
  Gtk4.gtk_tree_view_set_headers_clickable(@self, setting);
end;

procedure TGtkTreeView.set_headers_visible(headers_visible: gboolean); cdecl;
begin
  Gtk4.gtk_tree_view_set_headers_visible(@self, headers_visible);
end;

procedure TGtkTreeView.set_hover_expand(expand: gboolean); cdecl;
begin
  Gtk4.gtk_tree_view_set_hover_expand(@self, expand);
end;

procedure TGtkTreeView.set_hover_selection(hover: gboolean); cdecl;
begin
  Gtk4.gtk_tree_view_set_hover_selection(@self, hover);
end;

procedure TGtkTreeView.set_level_indentation(indentation: gint); cdecl;
begin
  Gtk4.gtk_tree_view_set_level_indentation(@self, indentation);
end;

procedure TGtkTreeView.set_model(model: PGtkTreeModel); cdecl;
begin
  Gtk4.gtk_tree_view_set_model(@self, model);
end;

procedure TGtkTreeView.set_reorderable(reorderable: gboolean); cdecl;
begin
  Gtk4.gtk_tree_view_set_reorderable(@self, reorderable);
end;

procedure TGtkTreeView.set_row_separator_func(func: TGtkTreeViewRowSeparatorFunc; data: gpointer; destroy_: TGDestroyNotify); cdecl;
begin
  Gtk4.gtk_tree_view_set_row_separator_func(@self, func, data, destroy_);
end;

procedure TGtkTreeView.set_rubber_banding(enable: gboolean); cdecl;
begin
  Gtk4.gtk_tree_view_set_rubber_banding(@self, enable);
end;

procedure TGtkTreeView.set_search_column(column: gint); cdecl;
begin
  Gtk4.gtk_tree_view_set_search_column(@self, column);
end;

procedure TGtkTreeView.set_search_entry(entry: PGtkEditable); cdecl;
begin
  Gtk4.gtk_tree_view_set_search_entry(@self, entry);
end;

procedure TGtkTreeView.set_search_equal_func(search_equal_func: TGtkTreeViewSearchEqualFunc; search_user_data: gpointer; search_destroy: TGDestroyNotify); cdecl;
begin
  Gtk4.gtk_tree_view_set_search_equal_func(@self, search_equal_func, search_user_data, search_destroy);
end;

procedure TGtkTreeView.set_show_expanders(enabled: gboolean); cdecl;
begin
  Gtk4.gtk_tree_view_set_show_expanders(@self, enabled);
end;

procedure TGtkTreeView.set_tooltip_cell(tooltip: PGtkTooltip; path: PGtkTreePath; column: PGtkTreeViewColumn; cell: PGtkCellRenderer); cdecl;
begin
  Gtk4.gtk_tree_view_set_tooltip_cell(@self, tooltip, path, column, cell);
end;

procedure TGtkTreeView.set_tooltip_column(column: gint); cdecl;
begin
  Gtk4.gtk_tree_view_set_tooltip_column(@self, column);
end;

procedure TGtkTreeView.set_tooltip_row(tooltip: PGtkTooltip; path: PGtkTreePath); cdecl;
begin
  Gtk4.gtk_tree_view_set_tooltip_row(@self, tooltip, path);
end;

procedure TGtkTreeView.unset_rows_drag_dest; cdecl;
begin
  Gtk4.gtk_tree_view_unset_rows_drag_dest(@self);
end;

procedure TGtkTreeView.unset_rows_drag_source; cdecl;
begin
  Gtk4.gtk_tree_view_unset_rows_drag_source(@self);
end;

function TGtkTreeStore.newv(n_columns: gint; types: PGType): PGtkTreeStore; cdecl;
begin
  Result := Gtk4.gtk_tree_store_newv(n_columns, types);
end;

procedure TGtkTreeStore.append(iter: PGtkTreeIter; parent: PGtkTreeIter); cdecl;
begin
  Gtk4.gtk_tree_store_append(@self, iter, parent);
end;

procedure TGtkTreeStore.clear; cdecl;
begin
  Gtk4.gtk_tree_store_clear(@self);
end;

procedure TGtkTreeStore.insert(iter: PGtkTreeIter; parent: PGtkTreeIter; position: gint); cdecl;
begin
  Gtk4.gtk_tree_store_insert(@self, iter, parent, position);
end;

procedure TGtkTreeStore.insert_after(iter: PGtkTreeIter; parent: PGtkTreeIter; sibling: PGtkTreeIter); cdecl;
begin
  Gtk4.gtk_tree_store_insert_after(@self, iter, parent, sibling);
end;

procedure TGtkTreeStore.insert_before(iter: PGtkTreeIter; parent: PGtkTreeIter; sibling: PGtkTreeIter); cdecl;
begin
  Gtk4.gtk_tree_store_insert_before(@self, iter, parent, sibling);
end;

procedure TGtkTreeStore.insert_with_valuesv(iter: PGtkTreeIter; parent: PGtkTreeIter; position: gint; columns: Pgint; values: PGValue; n_values: gint); cdecl;
begin
  Gtk4.gtk_tree_store_insert_with_valuesv(@self, iter, parent, position, columns, values, n_values);
end;

function TGtkTreeStore.is_ancestor(iter: PGtkTreeIter; descendant: PGtkTreeIter): gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_store_is_ancestor(@self, iter, descendant);
end;

function TGtkTreeStore.iter_depth(iter: PGtkTreeIter): gint; cdecl;
begin
  Result := Gtk4.gtk_tree_store_iter_depth(@self, iter);
end;

function TGtkTreeStore.iter_is_valid(iter: PGtkTreeIter): gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_store_iter_is_valid(@self, iter);
end;

procedure TGtkTreeStore.move_after(iter: PGtkTreeIter; position: PGtkTreeIter); cdecl;
begin
  Gtk4.gtk_tree_store_move_after(@self, iter, position);
end;

procedure TGtkTreeStore.move_before(iter: PGtkTreeIter; position: PGtkTreeIter); cdecl;
begin
  Gtk4.gtk_tree_store_move_before(@self, iter, position);
end;

procedure TGtkTreeStore.prepend(iter: PGtkTreeIter; parent: PGtkTreeIter); cdecl;
begin
  Gtk4.gtk_tree_store_prepend(@self, iter, parent);
end;

function TGtkTreeStore.remove(iter: PGtkTreeIter): gboolean; cdecl;
begin
  Result := Gtk4.gtk_tree_store_remove(@self, iter);
end;

procedure TGtkTreeStore.reorder(parent: PGtkTreeIter; new_order: Pgint); cdecl;
begin
  Gtk4.gtk_tree_store_reorder(@self, parent, new_order);
end;

procedure TGtkTreeStore.set_column_types(n_columns: gint; types: PGType); cdecl;
begin
  Gtk4.gtk_tree_store_set_column_types(@self, n_columns, types);
end;

procedure TGtkTreeStore.set_value(iter: PGtkTreeIter; column: gint; value: PGValue); cdecl;
begin
  Gtk4.gtk_tree_store_set_value(@self, iter, column, value);
end;

procedure TGtkTreeStore.set_valuesv(iter: PGtkTreeIter; columns: Pgint; values: PGValue; n_values: gint); cdecl;
begin
  Gtk4.gtk_tree_store_set_valuesv(@self, iter, columns, values, n_values);
end;

procedure TGtkTreeStore.swap(a: PGtkTreeIter; b: PGtkTreeIter); cdecl;
begin
  Gtk4.gtk_tree_store_swap(@self, a, b);
end;

function TGtkVideo.new: PGtkVideo; cdecl;
begin
  Result := Gtk4.gtk_video_new();
end;

function TGtkVideo.new_for_file(file_: PGFile): PGtkVideo; cdecl;
begin
  Result := Gtk4.gtk_video_new_for_file(file_);
end;

function TGtkVideo.new_for_filename(filename: Pgchar): PGtkVideo; cdecl;
begin
  Result := Gtk4.gtk_video_new_for_filename(filename);
end;

function TGtkVideo.new_for_media_stream(stream: PGtkMediaStream): PGtkVideo; cdecl;
begin
  Result := Gtk4.gtk_video_new_for_media_stream(stream);
end;

function TGtkVideo.new_for_resource(resource_path: Pgchar): PGtkVideo; cdecl;
begin
  Result := Gtk4.gtk_video_new_for_resource(resource_path);
end;

function TGtkVideo.get_autoplay: gboolean; cdecl;
begin
  Result := Gtk4.gtk_video_get_autoplay(@self);
end;

function TGtkVideo.get_file: PGFile; cdecl;
begin
  Result := Gtk4.gtk_video_get_file(@self);
end;

function TGtkVideo.get_loop: gboolean; cdecl;
begin
  Result := Gtk4.gtk_video_get_loop(@self);
end;

function TGtkVideo.get_media_stream: PGtkMediaStream; cdecl;
begin
  Result := Gtk4.gtk_video_get_media_stream(@self);
end;

procedure TGtkVideo.set_autoplay(autoplay: gboolean); cdecl;
begin
  Gtk4.gtk_video_set_autoplay(@self, autoplay);
end;

procedure TGtkVideo.set_file(file_: PGFile); cdecl;
begin
  Gtk4.gtk_video_set_file(@self, file_);
end;

procedure TGtkVideo.set_filename(filename: Pgchar); cdecl;
begin
  Gtk4.gtk_video_set_filename(@self, filename);
end;

procedure TGtkVideo.set_loop(loop: gboolean); cdecl;
begin
  Gtk4.gtk_video_set_loop(@self, loop);
end;

procedure TGtkVideo.set_media_stream(stream: PGtkMediaStream); cdecl;
begin
  Gtk4.gtk_video_set_media_stream(@self, stream);
end;

procedure TGtkVideo.set_resource(resource_path: Pgchar); cdecl;
begin
  Gtk4.gtk_video_set_resource(@self, resource_path);
end;

function TGtkViewport.new(hadjustment: PGtkAdjustment; vadjustment: PGtkAdjustment): PGtkViewport; cdecl;
begin
  Result := Gtk4.gtk_viewport_new(hadjustment, vadjustment);
end;

function TGtkViewport.get_child: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_viewport_get_child(@self);
end;

function TGtkViewport.get_scroll_to_focus: gboolean; cdecl;
begin
  Result := Gtk4.gtk_viewport_get_scroll_to_focus(@self);
end;

procedure TGtkViewport.set_child(child: PGtkWidget); cdecl;
begin
  Gtk4.gtk_viewport_set_child(@self, child);
end;

procedure TGtkViewport.set_scroll_to_focus(scroll_to_focus: gboolean); cdecl;
begin
  Gtk4.gtk_viewport_set_scroll_to_focus(@self, scroll_to_focus);
end;

function TGtkVolumeButton.new: PGtkVolumeButton; cdecl;
begin
  Result := Gtk4.gtk_volume_button_new();
end;

function TGtkWidgetPaintable.new(widget: PGtkWidget): PGtkWidgetPaintable; cdecl;
begin
  Result := Gtk4.gtk_widget_paintable_new(widget);
end;

function TGtkWidgetPaintable.get_widget: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_widget_paintable_get_widget(@self);
end;

procedure TGtkWidgetPaintable.set_widget(widget: PGtkWidget); cdecl;
begin
  Gtk4.gtk_widget_paintable_set_widget(@self, widget);
end;

function TGtkWindowGroup.new: PGtkWindowGroup; cdecl;
begin
  Result := Gtk4.gtk_window_group_new();
end;

procedure TGtkWindowGroup.add_window(window: PGtkWindow); cdecl;
begin
  Gtk4.gtk_window_group_add_window(@self, window);
end;

function TGtkWindowGroup.list_windows: PGList; cdecl;
begin
  Result := Gtk4.gtk_window_group_list_windows(@self);
end;

procedure TGtkWindowGroup.remove_window(window: PGtkWindow); cdecl;
begin
  Gtk4.gtk_window_group_remove_window(@self, window);
end;

function TGtkWindowControls.new(side: TGtkPackType): PGtkWindowControls; cdecl;
begin
  Result := Gtk4.gtk_window_controls_new(side);
end;

function TGtkWindowControls.get_decoration_layout: Pgchar; cdecl;
begin
  Result := Gtk4.gtk_window_controls_get_decoration_layout(@self);
end;

function TGtkWindowControls.get_empty: gboolean; cdecl;
begin
  Result := Gtk4.gtk_window_controls_get_empty(@self);
end;

function TGtkWindowControls.get_side: TGtkPackType; cdecl;
begin
  Result := Gtk4.gtk_window_controls_get_side(@self);
end;

procedure TGtkWindowControls.set_decoration_layout(layout: Pgchar); cdecl;
begin
  Gtk4.gtk_window_controls_set_decoration_layout(@self, layout);
end;

procedure TGtkWindowControls.set_side(side: TGtkPackType); cdecl;
begin
  Gtk4.gtk_window_controls_set_side(@self, side);
end;

function TGtkWindowHandle.new: PGtkWindowHandle; cdecl;
begin
  Result := Gtk4.gtk_window_handle_new();
end;

function TGtkWindowHandle.get_child: PGtkWidget; cdecl;
begin
  Result := Gtk4.gtk_window_handle_get_child(@self);
end;

procedure TGtkWindowHandle.set_child(child: PGtkWidget); cdecl;
begin
  Gtk4.gtk_window_handle_set_child(@self, child);
end;

end.
