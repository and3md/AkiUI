{ This is an autogenerated unit using gobject introspection (gir2pascal). Do not Edit. }
unit Graphene1;

{$MODE OBJFPC}{$H+}

{$PACKRECORDS C}
{$MODESWITCH DUPLICATELOCALS+}

{$ifdef Unix}
{$LINKLIB libgraphene-1.0.so.0}
{$endif}
interface
uses
  CTypes, GObject2, Glib2;

const
  {$ifdef MsWindows}
  Graphene1_library = 'libgraphene-1.0.so.dll';
  {$else}
  Graphene1_library = 'libgraphene-1.0.so.0';
  {$endif}

  GRAPHENE_PI = 3.141593;
  GRAPHENE_PI_2 = 1.570796;
  GRAPHENE_VEC2_LEN = 2;
  GRAPHENE_VEC3_LEN = 3;
  GRAPHENE_VEC4_LEN = 4;

type
  Tgraphene_euler_order_t = Integer;
const
  { graphene_euler_order_t }
  GRAPHENE_EULER_ORDER_DEFAULT: Tgraphene_euler_order_t = -1;
  GRAPHENE_EULER_ORDER_XYZ: Tgraphene_euler_order_t = 0;
  GRAPHENE_EULER_ORDER_YZX: Tgraphene_euler_order_t = 1;
  GRAPHENE_EULER_ORDER_ZXY: Tgraphene_euler_order_t = 2;
  GRAPHENE_EULER_ORDER_XZY: Tgraphene_euler_order_t = 3;
  GRAPHENE_EULER_ORDER_YXZ: Tgraphene_euler_order_t = 4;
  GRAPHENE_EULER_ORDER_ZYX: Tgraphene_euler_order_t = 5;
  GRAPHENE_EULER_ORDER_SXYZ: Tgraphene_euler_order_t = 6;
  GRAPHENE_EULER_ORDER_SXYX: Tgraphene_euler_order_t = 7;
  GRAPHENE_EULER_ORDER_SXZY: Tgraphene_euler_order_t = 8;
  GRAPHENE_EULER_ORDER_SXZX: Tgraphene_euler_order_t = 9;
  GRAPHENE_EULER_ORDER_SYZX: Tgraphene_euler_order_t = 10;
  GRAPHENE_EULER_ORDER_SYZY: Tgraphene_euler_order_t = 11;
  GRAPHENE_EULER_ORDER_SYXZ: Tgraphene_euler_order_t = 12;
  GRAPHENE_EULER_ORDER_SYXY: Tgraphene_euler_order_t = 13;
  GRAPHENE_EULER_ORDER_SZXY: Tgraphene_euler_order_t = 14;
  GRAPHENE_EULER_ORDER_SZXZ: Tgraphene_euler_order_t = 15;
  GRAPHENE_EULER_ORDER_SZYX: Tgraphene_euler_order_t = 16;
  GRAPHENE_EULER_ORDER_SZYZ: Tgraphene_euler_order_t = 17;
  GRAPHENE_EULER_ORDER_RZYX: Tgraphene_euler_order_t = 18;
  GRAPHENE_EULER_ORDER_RXYX: Tgraphene_euler_order_t = 19;
  GRAPHENE_EULER_ORDER_RYZX: Tgraphene_euler_order_t = 20;
  GRAPHENE_EULER_ORDER_RXZX: Tgraphene_euler_order_t = 21;
  GRAPHENE_EULER_ORDER_RXZY: Tgraphene_euler_order_t = 22;
  GRAPHENE_EULER_ORDER_RYZY: Tgraphene_euler_order_t = 23;
  GRAPHENE_EULER_ORDER_RZXY: Tgraphene_euler_order_t = 24;
  GRAPHENE_EULER_ORDER_RYXY: Tgraphene_euler_order_t = 25;
  GRAPHENE_EULER_ORDER_RYXZ: Tgraphene_euler_order_t = 26;
  GRAPHENE_EULER_ORDER_RZXZ: Tgraphene_euler_order_t = 27;
  GRAPHENE_EULER_ORDER_RXYZ: Tgraphene_euler_order_t = 28;
  GRAPHENE_EULER_ORDER_RZYZ: Tgraphene_euler_order_t = 29;

type
  Tgraphene_ray_intersection_kind_t = DWord;
const
  { graphene_ray_intersection_kind_t }
  GRAPHENE_RAY_INTERSECTION_KIND_NONE: Tgraphene_ray_intersection_kind_t = 0;
  GRAPHENE_RAY_INTERSECTION_KIND_ENTER: Tgraphene_ray_intersection_kind_t = 1;
  GRAPHENE_RAY_INTERSECTION_KIND_LEAVE: Tgraphene_ray_intersection_kind_t = 2;
type

  PPgraphene_vec3_t = ^Pgraphene_vec3_t;
  Pgraphene_vec3_t = ^Tgraphene_vec3_t;

  PPgraphene_vec2_t = ^Pgraphene_vec2_t;
  Pgraphene_vec2_t = ^Tgraphene_vec2_t;

  PPgraphene_vec4_t = ^Pgraphene_vec4_t;
  Pgraphene_vec4_t = ^Tgraphene_vec4_t;

  PPgraphene_simd4f_t = ^Pgraphene_simd4f_t;
  Pgraphene_simd4f_t = ^Tgraphene_simd4f_t;

  Tgraphene_simd4f_t = record
    x: gfloat;
    y: gfloat;
    z: gfloat;
    w: gfloat;
  end;


  Tgraphene_vec3_t = object
    value: Tgraphene_simd4f_t;
    function alloc: Pgraphene_vec3_t; cdecl; inline; static;
    procedure add(b: Pgraphene_vec3_t; res: Pgraphene_vec3_t); cdecl; inline;
    procedure cross(b: Pgraphene_vec3_t; res: Pgraphene_vec3_t); cdecl; inline;
    procedure divide(b: Pgraphene_vec3_t; res: Pgraphene_vec3_t); cdecl; inline;
    function dot(b: Pgraphene_vec3_t): gfloat; cdecl; inline;
    function equal(v2: Pgraphene_vec3_t): gboolean; cdecl; inline;
    procedure free; cdecl; inline;
    function get_x: gfloat; cdecl; inline;
    procedure get_xy(res: Pgraphene_vec2_t); cdecl; inline;
    procedure get_xy0(res: Pgraphene_vec3_t); cdecl; inline;
    procedure get_xyz0(res: Pgraphene_vec4_t); cdecl; inline;
    procedure get_xyz1(res: Pgraphene_vec4_t); cdecl; inline;
    procedure get_xyzw(w: gfloat; res: Pgraphene_vec4_t); cdecl; inline;
    function get_y: gfloat; cdecl; inline;
    function get_z: gfloat; cdecl; inline;
    function init(x: gfloat; y: gfloat; z: gfloat): Pgraphene_vec3_t; cdecl; inline;
    function init_from_float(src: Pgfloat): Pgraphene_vec3_t; cdecl; inline;
    function init_from_vec3(src: Pgraphene_vec3_t): Pgraphene_vec3_t; cdecl; inline;
    procedure interpolate(v2: Pgraphene_vec3_t; factor: gdouble; res: Pgraphene_vec3_t); cdecl; inline;
    function length: gfloat; cdecl; inline;
    procedure max(b: Pgraphene_vec3_t; res: Pgraphene_vec3_t); cdecl; inline;
    procedure min(b: Pgraphene_vec3_t; res: Pgraphene_vec3_t); cdecl; inline;
    procedure multiply(b: Pgraphene_vec3_t; res: Pgraphene_vec3_t); cdecl; inline;
    function near(v2: Pgraphene_vec3_t; epsilon: gfloat): gboolean; cdecl; inline;
    procedure negate(res: Pgraphene_vec3_t); cdecl; inline;
    procedure normalize(res: Pgraphene_vec3_t); cdecl; inline;
    procedure scale(factor: gfloat; res: Pgraphene_vec3_t); cdecl; inline;
    procedure subtract(b: Pgraphene_vec3_t; res: Pgraphene_vec3_t); cdecl; inline;
    procedure to_float(dest: Pgfloat); cdecl; inline;
    function one: Pgraphene_vec3_t; cdecl; inline; static;
    function x_axis: Pgraphene_vec3_t; cdecl; inline; static;
    function y_axis: Pgraphene_vec3_t; cdecl; inline; static;
    function z_axis: Pgraphene_vec3_t; cdecl; inline; static;
    function zero: Pgraphene_vec3_t; cdecl; inline; static;
  end;

  PPgraphene_box_t = ^Pgraphene_box_t;
  Pgraphene_box_t = ^Tgraphene_box_t;

  PPgraphene_point3d_t = ^Pgraphene_point3d_t;
  Pgraphene_point3d_t = ^Tgraphene_point3d_t;

  PPgraphene_sphere_t = ^Pgraphene_sphere_t;
  Pgraphene_sphere_t = ^Tgraphene_sphere_t;
  Tgraphene_box_t = object
    min: Tgraphene_vec3_t;
    max: Tgraphene_vec3_t;
    function alloc: Pgraphene_box_t; cdecl; inline; static;
    function contains_box(b: Pgraphene_box_t): gboolean; cdecl; inline;
    function contains_point(point: Pgraphene_point3d_t): gboolean; cdecl; inline;
    function equal(b: Pgraphene_box_t): gboolean; cdecl; inline;
    procedure expand(point: Pgraphene_point3d_t; res: Pgraphene_box_t); cdecl; inline;
    procedure expand_scalar(scalar: gfloat; res: Pgraphene_box_t); cdecl; inline;
    procedure expand_vec3(vec: Pgraphene_vec3_t; res: Pgraphene_box_t); cdecl; inline;
    procedure free; cdecl; inline;
    procedure get_bounding_sphere(sphere: Pgraphene_sphere_t); cdecl; inline;
    procedure get_center(center: Pgraphene_point3d_t); cdecl; inline;
    function get_depth: gfloat; cdecl; inline;
    function get_height: gfloat; cdecl; inline;
    procedure get_max(max: Pgraphene_point3d_t); cdecl; inline;
    procedure get_min(min: Pgraphene_point3d_t); cdecl; inline;
    procedure get_size(size: Pgraphene_vec3_t); cdecl; inline;
    procedure get_vertices(vertices: Pgraphene_vec3_t); cdecl; inline;
    function get_width: gfloat; cdecl; inline;
    function init(min: Pgraphene_point3d_t; max: Pgraphene_point3d_t): Pgraphene_box_t; cdecl; inline;
    function init_from_box(src: Pgraphene_box_t): Pgraphene_box_t; cdecl; inline;
    function init_from_points(n_points: guint; points: Pgraphene_point3d_t): Pgraphene_box_t; cdecl; inline;
    function init_from_vec3(min: Pgraphene_vec3_t; max: Pgraphene_vec3_t): Pgraphene_box_t; cdecl; inline;
    function init_from_vectors(n_vectors: guint; vectors: Pgraphene_vec3_t): Pgraphene_box_t; cdecl; inline;
    function intersection(b: Pgraphene_box_t; res: Pgraphene_box_t): gboolean; cdecl; inline;
    procedure union(b: Pgraphene_box_t; res: Pgraphene_box_t); cdecl; inline;
    function empty: Pgraphene_box_t; cdecl; inline; static;
    function infinite: Pgraphene_box_t; cdecl; inline; static;
    function minus_one: Pgraphene_box_t; cdecl; inline; static;
    function one: Pgraphene_box_t; cdecl; inline; static;
    function one_minus_one: Pgraphene_box_t; cdecl; inline; static;
    function zero: Pgraphene_box_t; cdecl; inline; static;
  end;

  PPgraphene_rect_t = ^Pgraphene_rect_t;
  Pgraphene_rect_t = ^Tgraphene_rect_t;
  Tgraphene_point3d_t = object
    x: gfloat;
    y: gfloat;
    z: gfloat;
    function alloc: Pgraphene_point3d_t; cdecl; inline; static;
    procedure cross(b: Pgraphene_point3d_t; res: Pgraphene_point3d_t); cdecl; inline;
    function distance(b: Pgraphene_point3d_t; delta: Pgraphene_vec3_t): gfloat; cdecl; inline;
    function dot(b: Pgraphene_point3d_t): gfloat; cdecl; inline;
    function equal(b: Pgraphene_point3d_t): gboolean; cdecl; inline;
    procedure free; cdecl; inline;
    function init(x: gfloat; y: gfloat; z: gfloat): Pgraphene_point3d_t; cdecl; inline;
    function init_from_point(src: Pgraphene_point3d_t): Pgraphene_point3d_t; cdecl; inline;
    function init_from_vec3(v: Pgraphene_vec3_t): Pgraphene_point3d_t; cdecl; inline;
    procedure interpolate(b: Pgraphene_point3d_t; factor: gdouble; res: Pgraphene_point3d_t); cdecl; inline;
    function length: gfloat; cdecl; inline;
    function near(b: Pgraphene_point3d_t; epsilon: gfloat): gboolean; cdecl; inline;
    procedure normalize(res: Pgraphene_point3d_t); cdecl; inline;
    procedure normalize_viewport(viewport: Pgraphene_rect_t; z_near: gfloat; z_far: gfloat; res: Pgraphene_point3d_t); cdecl; inline;
    procedure scale(factor: gfloat; res: Pgraphene_point3d_t); cdecl; inline;
    procedure to_vec3(v: Pgraphene_vec3_t); cdecl; inline;
    function zero: Pgraphene_point3d_t; cdecl; inline; static;
  end;
  Tgraphene_sphere_t = object
    center: Tgraphene_vec3_t;
    radius: gfloat;
    function alloc: Pgraphene_sphere_t; cdecl; inline; static;
    function contains_point(point: Pgraphene_point3d_t): gboolean; cdecl; inline;
    function distance(point: Pgraphene_point3d_t): gfloat; cdecl; inline;
    function equal(b: Pgraphene_sphere_t): gboolean; cdecl; inline;
    procedure free; cdecl; inline;
    procedure get_bounding_box(box: Pgraphene_box_t); cdecl; inline;
    procedure get_center(center: Pgraphene_point3d_t); cdecl; inline;
    function get_radius: gfloat; cdecl; inline;
    function init(center: Pgraphene_point3d_t; radius: gfloat): Pgraphene_sphere_t; cdecl; inline;
    function init_from_points(n_points: guint; points: Pgraphene_point3d_t; center: Pgraphene_point3d_t): Pgraphene_sphere_t; cdecl; inline;
    function init_from_vectors(n_vectors: guint; vectors: Pgraphene_vec3_t; center: Pgraphene_point3d_t): Pgraphene_sphere_t; cdecl; inline;
    function is_empty: gboolean; cdecl; inline;
    procedure translate(point: Pgraphene_point3d_t; res: Pgraphene_sphere_t); cdecl; inline;
  end;

  PPgraphene_euler_order_t = ^Pgraphene_euler_order_t;
  Pgraphene_euler_order_t = ^Tgraphene_euler_order_t;

  PPgraphene_euler_t = ^Pgraphene_euler_t;
  Pgraphene_euler_t = ^Tgraphene_euler_t;

  PPgraphene_matrix_t = ^Pgraphene_matrix_t;
  Pgraphene_matrix_t = ^Tgraphene_matrix_t;

  PPgraphene_quaternion_t = ^Pgraphene_quaternion_t;
  Pgraphene_quaternion_t = ^Tgraphene_quaternion_t;
  Tgraphene_euler_t = object
    angles: Tgraphene_vec3_t;
    order: Tgraphene_euler_order_t;
    function alloc: Pgraphene_euler_t; cdecl; inline; static;
    function equal(b: Pgraphene_euler_t): gboolean; cdecl; inline;
    procedure free; cdecl; inline;
    function get_alpha: gfloat; cdecl; inline;
    function get_beta: gfloat; cdecl; inline;
    function get_gamma: gfloat; cdecl; inline;
    function get_order: Tgraphene_euler_order_t; cdecl; inline;
    function get_x: gfloat; cdecl; inline;
    function get_y: gfloat; cdecl; inline;
    function get_z: gfloat; cdecl; inline;
    function init(x: gfloat; y: gfloat; z: gfloat): Pgraphene_euler_t; cdecl; inline;
    function init_from_euler(src: Pgraphene_euler_t): Pgraphene_euler_t; cdecl; inline;
    function init_from_matrix(m: Pgraphene_matrix_t; order: Tgraphene_euler_order_t): Pgraphene_euler_t; cdecl; inline;
    function init_from_quaternion(q: Pgraphene_quaternion_t; order: Tgraphene_euler_order_t): Pgraphene_euler_t; cdecl; inline;
    function init_from_radians(x: gfloat; y: gfloat; z: gfloat; order: Tgraphene_euler_order_t): Pgraphene_euler_t; cdecl; inline;
    function init_from_vec3(v: Pgraphene_vec3_t; order: Tgraphene_euler_order_t): Pgraphene_euler_t; cdecl; inline;
    function init_with_order(x: gfloat; y: gfloat; z: gfloat; order: Tgraphene_euler_order_t): Pgraphene_euler_t; cdecl; inline;
    procedure reorder(order: Tgraphene_euler_order_t; res: Pgraphene_euler_t); cdecl; inline;
    procedure to_matrix(res: Pgraphene_matrix_t); cdecl; inline;
    procedure to_quaternion(res: Pgraphene_quaternion_t); cdecl; inline;
    procedure to_vec3(res: Pgraphene_vec3_t); cdecl; inline;
  end;

  PPgraphene_point_t = ^Pgraphene_point_t;
  Pgraphene_point_t = ^Tgraphene_point_t;

  PPgraphene_quad_t = ^Pgraphene_quad_t;
  Pgraphene_quad_t = ^Tgraphene_quad_t;

  PPgraphene_ray_t = ^Pgraphene_ray_t;
  Pgraphene_ray_t = ^Tgraphene_ray_t;

  PPgraphene_simd4x4f_t = ^Pgraphene_simd4x4f_t;
  Pgraphene_simd4x4f_t = ^Tgraphene_simd4x4f_t;

  Tgraphene_simd4x4f_t = record
    x: Tgraphene_simd4f_t;
    y: Tgraphene_simd4f_t;
    z: Tgraphene_simd4f_t;
    w: Tgraphene_simd4f_t;
  end;


  Tgraphene_matrix_t = object
    value: Tgraphene_simd4x4f_t;
    function alloc: Pgraphene_matrix_t; cdecl; inline; static;
    function decompose(translate: Pgraphene_vec3_t; scale: Pgraphene_vec3_t; rotate: Pgraphene_quaternion_t; shear: Pgraphene_vec3_t; perspective: Pgraphene_vec4_t): gboolean; cdecl; inline;
    function determinant: gfloat; cdecl; inline;
    function equal(b: Pgraphene_matrix_t): gboolean; cdecl; inline;
    function equal_fast(b: Pgraphene_matrix_t): gboolean; cdecl; inline;
    procedure free; cdecl; inline;
    procedure get_row(index_: guint; res: Pgraphene_vec4_t); cdecl; inline;
    function get_value(row: guint; col: guint): gfloat; cdecl; inline;
    function get_x_scale: gfloat; cdecl; inline;
    function get_x_translation: gfloat; cdecl; inline;
    function get_y_scale: gfloat; cdecl; inline;
    function get_y_translation: gfloat; cdecl; inline;
    function get_z_scale: gfloat; cdecl; inline;
    function get_z_translation: gfloat; cdecl; inline;
    function init_from_2d(xx: gdouble; yx: gdouble; xy: gdouble; yy: gdouble; x_0: gdouble; y_0: gdouble): Pgraphene_matrix_t; cdecl; inline;
    function init_from_float(v: Pgfloat): Pgraphene_matrix_t; cdecl; inline;
    function init_from_matrix(src: Pgraphene_matrix_t): Pgraphene_matrix_t; cdecl; inline;
    function init_from_vec4(v0: Pgraphene_vec4_t; v1: Pgraphene_vec4_t; v2: Pgraphene_vec4_t; v3: Pgraphene_vec4_t): Pgraphene_matrix_t; cdecl; inline;
    function init_frustum(left: gfloat; right: gfloat; bottom: gfloat; top: gfloat; z_near: gfloat; z_far: gfloat): Pgraphene_matrix_t; cdecl; inline;
    function init_identity: Pgraphene_matrix_t; cdecl; inline;
    function init_look_at(eye: Pgraphene_vec3_t; center: Pgraphene_vec3_t; up: Pgraphene_vec3_t): Pgraphene_matrix_t; cdecl; inline;
    function init_ortho(left: gfloat; right: gfloat; top: gfloat; bottom: gfloat; z_near: gfloat; z_far: gfloat): Pgraphene_matrix_t; cdecl; inline;
    function init_perspective(fovy: gfloat; aspect: gfloat; z_near: gfloat; z_far: gfloat): Pgraphene_matrix_t; cdecl; inline;
    function init_rotate(angle: gfloat; axis: Pgraphene_vec3_t): Pgraphene_matrix_t; cdecl; inline;
    function init_scale(x: gfloat; y: gfloat; z: gfloat): Pgraphene_matrix_t; cdecl; inline;
    function init_skew(x_skew: gfloat; y_skew: gfloat): Pgraphene_matrix_t; cdecl; inline;
    function init_translate(p: Pgraphene_point3d_t): Pgraphene_matrix_t; cdecl; inline;
    procedure interpolate(b: Pgraphene_matrix_t; factor: gdouble; res: Pgraphene_matrix_t); cdecl; inline;
    function inverse(res: Pgraphene_matrix_t): gboolean; cdecl; inline;
    function is_2d: gboolean; cdecl; inline;
    function is_backface_visible: gboolean; cdecl; inline;
    function is_identity: gboolean; cdecl; inline;
    function is_singular: gboolean; cdecl; inline;
    procedure multiply(b: Pgraphene_matrix_t; res: Pgraphene_matrix_t); cdecl; inline;
    function near(b: Pgraphene_matrix_t; epsilon: gfloat): gboolean; cdecl; inline;
    procedure normalize(res: Pgraphene_matrix_t); cdecl; inline;
    procedure perspective(depth: gfloat; res: Pgraphene_matrix_t); cdecl; inline;
    procedure print; cdecl; inline;
    procedure project_point(p: Pgraphene_point_t; res: Pgraphene_point_t); cdecl; inline;
    procedure project_rect(r: Pgraphene_rect_t; res: Pgraphene_quad_t); cdecl; inline;
    procedure project_rect_bounds(r: Pgraphene_rect_t; res: Pgraphene_rect_t); cdecl; inline;
    procedure rotate(angle: gfloat; axis: Pgraphene_vec3_t); cdecl; inline;
    procedure rotate_euler(e: Pgraphene_euler_t); cdecl; inline;
    procedure rotate_quaternion(q: Pgraphene_quaternion_t); cdecl; inline;
    procedure rotate_x(angle: gfloat); cdecl; inline;
    procedure rotate_y(angle: gfloat); cdecl; inline;
    procedure rotate_z(angle: gfloat); cdecl; inline;
    procedure scale(factor_x: gfloat; factor_y: gfloat; factor_z: gfloat); cdecl; inline;
    procedure skew_xy(factor: gfloat); cdecl; inline;
    procedure skew_xz(factor: gfloat); cdecl; inline;
    procedure skew_yz(factor: gfloat); cdecl; inline;
    function to_2d(xx: Pgdouble; yx: Pgdouble; xy: Pgdouble; yy: Pgdouble; x_0: Pgdouble; y_0: Pgdouble): gboolean; cdecl; inline;
    procedure to_float(v: Pgfloat); cdecl; inline;
    procedure transform_bounds(r: Pgraphene_rect_t; res: Pgraphene_rect_t); cdecl; inline;
    procedure transform_box(b: Pgraphene_box_t; res: Pgraphene_box_t); cdecl; inline;
    procedure transform_point(p: Pgraphene_point_t; res: Pgraphene_point_t); cdecl; inline;
    procedure transform_point3d(p: Pgraphene_point3d_t; res: Pgraphene_point3d_t); cdecl; inline;
    procedure transform_ray(r: Pgraphene_ray_t; res: Pgraphene_ray_t); cdecl; inline;
    procedure transform_rect(r: Pgraphene_rect_t; res: Pgraphene_quad_t); cdecl; inline;
    procedure transform_sphere(s: Pgraphene_sphere_t; res: Pgraphene_sphere_t); cdecl; inline;
    procedure transform_vec3(v: Pgraphene_vec3_t; res: Pgraphene_vec3_t); cdecl; inline;
    procedure transform_vec4(v: Pgraphene_vec4_t; res: Pgraphene_vec4_t); cdecl; inline;
    procedure translate(pos: Pgraphene_point3d_t); cdecl; inline;
    procedure transpose(res: Pgraphene_matrix_t); cdecl; inline;
    procedure unproject_point3d(modelview: Pgraphene_matrix_t; point: Pgraphene_point3d_t; res: Pgraphene_point3d_t); cdecl; inline;
    procedure untransform_bounds(r: Pgraphene_rect_t; bounds: Pgraphene_rect_t; res: Pgraphene_rect_t); cdecl; inline;
    function untransform_point(p: Pgraphene_point_t; bounds: Pgraphene_rect_t; res: Pgraphene_point_t): gboolean; cdecl; inline;
  end;
  Tgraphene_quaternion_t = object
    x: gfloat;
    y: gfloat;
    z: gfloat;
    w: gfloat;
    function alloc: Pgraphene_quaternion_t; cdecl; inline; static;
    procedure add(b: Pgraphene_quaternion_t; res: Pgraphene_quaternion_t); cdecl; inline;
    function dot(b: Pgraphene_quaternion_t): gfloat; cdecl; inline;
    function equal(b: Pgraphene_quaternion_t): gboolean; cdecl; inline;
    procedure free; cdecl; inline;
    function init(x: gfloat; y: gfloat; z: gfloat; w: gfloat): Pgraphene_quaternion_t; cdecl; inline;
    function init_from_angle_vec3(angle: gfloat; axis: Pgraphene_vec3_t): Pgraphene_quaternion_t; cdecl; inline;
    function init_from_angles(deg_x: gfloat; deg_y: gfloat; deg_z: gfloat): Pgraphene_quaternion_t; cdecl; inline;
    function init_from_euler(e: Pgraphene_euler_t): Pgraphene_quaternion_t; cdecl; inline;
    function init_from_matrix(m: Pgraphene_matrix_t): Pgraphene_quaternion_t; cdecl; inline;
    function init_from_quaternion(src: Pgraphene_quaternion_t): Pgraphene_quaternion_t; cdecl; inline;
    function init_from_radians(rad_x: gfloat; rad_y: gfloat; rad_z: gfloat): Pgraphene_quaternion_t; cdecl; inline;
    function init_from_vec4(src: Pgraphene_vec4_t): Pgraphene_quaternion_t; cdecl; inline;
    function init_identity: Pgraphene_quaternion_t; cdecl; inline;
    procedure invert(res: Pgraphene_quaternion_t); cdecl; inline;
    procedure multiply(b: Pgraphene_quaternion_t; res: Pgraphene_quaternion_t); cdecl; inline;
    procedure normalize(res: Pgraphene_quaternion_t); cdecl; inline;
    procedure scale(factor: gfloat; res: Pgraphene_quaternion_t); cdecl; inline;
    procedure slerp(b: Pgraphene_quaternion_t; factor: gfloat; res: Pgraphene_quaternion_t); cdecl; inline;
    procedure to_angle_vec3(angle: Pgfloat; axis: Pgraphene_vec3_t); cdecl; inline;
    procedure to_angles(deg_x: Pgfloat; deg_y: Pgfloat; deg_z: Pgfloat); cdecl; inline;
    procedure to_matrix(m: Pgraphene_matrix_t); cdecl; inline;
    procedure to_radians(rad_x: Pgfloat; rad_y: Pgfloat; rad_z: Pgfloat); cdecl; inline;
    procedure to_vec4(res: Pgraphene_vec4_t); cdecl; inline;
  end;

  PPgraphene_plane_t = ^Pgraphene_plane_t;
  Pgraphene_plane_t = ^Tgraphene_plane_t;
  Tgraphene_plane_t = object
    normal: Tgraphene_vec3_t;
    constant: gfloat;
    function alloc: Pgraphene_plane_t; cdecl; inline; static;
    function distance(point: Pgraphene_point3d_t): gfloat; cdecl; inline;
    function equal(b: Pgraphene_plane_t): gboolean; cdecl; inline;
    procedure free; cdecl; inline;
    function get_constant: gfloat; cdecl; inline;
    procedure get_normal(normal: Pgraphene_vec3_t); cdecl; inline;
    function init(normal: Pgraphene_vec3_t; constant: gfloat): Pgraphene_plane_t; cdecl; inline;
    function init_from_plane(src: Pgraphene_plane_t): Pgraphene_plane_t; cdecl; inline;
    function init_from_point(normal: Pgraphene_vec3_t; point: Pgraphene_point3d_t): Pgraphene_plane_t; cdecl; inline;
    function init_from_points(a: Pgraphene_point3d_t; b: Pgraphene_point3d_t; c: Pgraphene_point3d_t): Pgraphene_plane_t; cdecl; inline;
    function init_from_vec4(src: Pgraphene_vec4_t): Pgraphene_plane_t; cdecl; inline;
    procedure negate(res: Pgraphene_plane_t); cdecl; inline;
    procedure normalize(res: Pgraphene_plane_t); cdecl; inline;
    procedure transform(matrix: Pgraphene_matrix_t; normal_matrix: Pgraphene_matrix_t; res: Pgraphene_plane_t); cdecl; inline;
  end;

  PPgraphene_frustum_t = ^Pgraphene_frustum_t;
  Pgraphene_frustum_t = ^Tgraphene_frustum_t;
  Tgraphene_frustum_t = object
    planes: array [0..5] of Tgraphene_plane_t;
    function alloc: Pgraphene_frustum_t; cdecl; inline; static;
    function contains_point(point: Pgraphene_point3d_t): gboolean; cdecl; inline;
    function equal(b: Pgraphene_frustum_t): gboolean; cdecl; inline;
    procedure free; cdecl; inline;
    procedure get_planes(planes: Pgraphene_plane_t); cdecl; inline;
    function init(p0: Pgraphene_plane_t; p1: Pgraphene_plane_t; p2: Pgraphene_plane_t; p3: Pgraphene_plane_t; p4: Pgraphene_plane_t; p5: Pgraphene_plane_t): Pgraphene_frustum_t; cdecl; inline;
    function init_from_frustum(src: Pgraphene_frustum_t): Pgraphene_frustum_t; cdecl; inline;
    function init_from_matrix(matrix: Pgraphene_matrix_t): Pgraphene_frustum_t; cdecl; inline;
    function intersects_box(box: Pgraphene_box_t): gboolean; cdecl; inline;
    function intersects_sphere(sphere: Pgraphene_sphere_t): gboolean; cdecl; inline;
  end;
  Tgraphene_vec4_t = object
    value: Tgraphene_simd4f_t;
    function alloc: Pgraphene_vec4_t; cdecl; inline; static;
    procedure add(b: Pgraphene_vec4_t; res: Pgraphene_vec4_t); cdecl; inline;
    procedure divide(b: Pgraphene_vec4_t; res: Pgraphene_vec4_t); cdecl; inline;
    function dot(b: Pgraphene_vec4_t): gfloat; cdecl; inline;
    function equal(v2: Pgraphene_vec4_t): gboolean; cdecl; inline;
    procedure free; cdecl; inline;
    function get_w: gfloat; cdecl; inline;
    function get_x: gfloat; cdecl; inline;
    procedure get_xy(res: Pgraphene_vec2_t); cdecl; inline;
    procedure get_xyz(res: Pgraphene_vec3_t); cdecl; inline;
    function get_y: gfloat; cdecl; inline;
    function get_z: gfloat; cdecl; inline;
    function init(x: gfloat; y: gfloat; z: gfloat; w: gfloat): Pgraphene_vec4_t; cdecl; inline;
    function init_from_float(src: Pgfloat): Pgraphene_vec4_t; cdecl; inline;
    function init_from_vec2(src: Pgraphene_vec2_t; z: gfloat; w: gfloat): Pgraphene_vec4_t; cdecl; inline;
    function init_from_vec3(src: Pgraphene_vec3_t; w: gfloat): Pgraphene_vec4_t; cdecl; inline;
    function init_from_vec4(src: Pgraphene_vec4_t): Pgraphene_vec4_t; cdecl; inline;
    procedure interpolate(v2: Pgraphene_vec4_t; factor: gdouble; res: Pgraphene_vec4_t); cdecl; inline;
    function length: gfloat; cdecl; inline;
    procedure max(b: Pgraphene_vec4_t; res: Pgraphene_vec4_t); cdecl; inline;
    procedure min(b: Pgraphene_vec4_t; res: Pgraphene_vec4_t); cdecl; inline;
    procedure multiply(b: Pgraphene_vec4_t; res: Pgraphene_vec4_t); cdecl; inline;
    function near(v2: Pgraphene_vec4_t; epsilon: gfloat): gboolean; cdecl; inline;
    procedure negate(res: Pgraphene_vec4_t); cdecl; inline;
    procedure normalize(res: Pgraphene_vec4_t); cdecl; inline;
    procedure scale(factor: gfloat; res: Pgraphene_vec4_t); cdecl; inline;
    procedure subtract(b: Pgraphene_vec4_t; res: Pgraphene_vec4_t); cdecl; inline;
    procedure to_float(dest: Pgfloat); cdecl; inline;
    function one: Pgraphene_vec4_t; cdecl; inline; static;
    function w_axis: Pgraphene_vec4_t; cdecl; inline; static;
    function x_axis: Pgraphene_vec4_t; cdecl; inline; static;
    function y_axis: Pgraphene_vec4_t; cdecl; inline; static;
    function z_axis: Pgraphene_vec4_t; cdecl; inline; static;
    function zero: Pgraphene_vec4_t; cdecl; inline; static;
  end;
  Tgraphene_point_t = object
    x: gfloat;
    y: gfloat;
    function alloc: Pgraphene_point_t; cdecl; inline; static;
    function distance(b: Pgraphene_point_t; d_x: Pgfloat; d_y: Pgfloat): gfloat; cdecl; inline;
    function equal(b: Pgraphene_point_t): gboolean; cdecl; inline;
    procedure free; cdecl; inline;
    function init(x: gfloat; y: gfloat): Pgraphene_point_t; cdecl; inline;
    function init_from_point(src: Pgraphene_point_t): Pgraphene_point_t; cdecl; inline;
    function init_from_vec2(src: Pgraphene_vec2_t): Pgraphene_point_t; cdecl; inline;
    procedure interpolate(b: Pgraphene_point_t; factor: gdouble; res: Pgraphene_point_t); cdecl; inline;
    function near(b: Pgraphene_point_t; epsilon: gfloat): gboolean; cdecl; inline;
    procedure to_vec2(v: Pgraphene_vec2_t); cdecl; inline;
    function zero: Pgraphene_point_t; cdecl; inline; static;
  end;

  PPgraphene_size_t = ^Pgraphene_size_t;
  Pgraphene_size_t = ^Tgraphene_size_t;
  Tgraphene_size_t = object
    width: gfloat;
    height: gfloat;
    function alloc: Pgraphene_size_t; cdecl; inline; static;
    function equal(b: Pgraphene_size_t): gboolean; cdecl; inline;
    procedure free; cdecl; inline;
    function init(width: gfloat; height: gfloat): Pgraphene_size_t; cdecl; inline;
    function init_from_size(src: Pgraphene_size_t): Pgraphene_size_t; cdecl; inline;
    procedure interpolate(b: Pgraphene_size_t; factor: gdouble; res: Pgraphene_size_t); cdecl; inline;
    procedure scale(factor: gfloat; res: Pgraphene_size_t); cdecl; inline;
    function zero: Pgraphene_size_t; cdecl; inline; static;
  end;
  Tgraphene_rect_t = object
    origin: Tgraphene_point_t;
    size: Tgraphene_size_t;
    function contains_point(p: Pgraphene_point_t): gboolean; cdecl; inline;
    function contains_rect(b: Pgraphene_rect_t): gboolean; cdecl; inline;
    function equal(b: Pgraphene_rect_t): gboolean; cdecl; inline;
    procedure expand(p: Pgraphene_point_t; res: Pgraphene_rect_t); cdecl; inline;
    procedure free; cdecl; inline;
    function get_area: gfloat; cdecl; inline;
    procedure get_bottom_left(p: Pgraphene_point_t); cdecl; inline;
    procedure get_bottom_right(p: Pgraphene_point_t); cdecl; inline;
    procedure get_center(p: Pgraphene_point_t); cdecl; inline;
    function get_height: gfloat; cdecl; inline;
    procedure get_top_left(p: Pgraphene_point_t); cdecl; inline;
    procedure get_top_right(p: Pgraphene_point_t); cdecl; inline;
    procedure get_vertices(vertices: Pgraphene_vec2_t); cdecl; inline;
    function get_width: gfloat; cdecl; inline;
    function get_x: gfloat; cdecl; inline;
    function get_y: gfloat; cdecl; inline;
    function init(x: gfloat; y: gfloat; width: gfloat; height: gfloat): Pgraphene_rect_t; cdecl; inline;
    function init_from_rect(src: Pgraphene_rect_t): Pgraphene_rect_t; cdecl; inline;
    function inset(d_x: gfloat; d_y: gfloat): Pgraphene_rect_t; cdecl; inline;
    procedure inset_r(d_x: gfloat; d_y: gfloat; res: Pgraphene_rect_t); cdecl; inline;
    procedure interpolate(b: Pgraphene_rect_t; factor: gdouble; res: Pgraphene_rect_t); cdecl; inline;
    function intersection(b: Pgraphene_rect_t; res: Pgraphene_rect_t): gboolean; cdecl; inline;
    function normalize: Pgraphene_rect_t; cdecl; inline;
    procedure normalize_r(res: Pgraphene_rect_t); cdecl; inline;
    function offset(d_x: gfloat; d_y: gfloat): Pgraphene_rect_t; cdecl; inline;
    procedure offset_r(d_x: gfloat; d_y: gfloat; res: Pgraphene_rect_t); cdecl; inline;
    procedure round_extents(res: Pgraphene_rect_t); cdecl; inline;
    procedure scale(s_h: gfloat; s_v: gfloat; res: Pgraphene_rect_t); cdecl; inline;
    procedure union(b: Pgraphene_rect_t; res: Pgraphene_rect_t); cdecl; inline;
    function alloc: Pgraphene_rect_t; cdecl; inline; static;
    function zero: Pgraphene_rect_t; cdecl; inline; static;
  end;
  Tgraphene_quad_t = object
    points: array [0..3] of Tgraphene_point_t;
    function alloc: Pgraphene_quad_t; cdecl; inline; static;
    procedure bounds(r: Pgraphene_rect_t); cdecl; inline;
    function contains(p: Pgraphene_point_t): gboolean; cdecl; inline;
    procedure free; cdecl; inline;
    function get_point(index_: guint): Pgraphene_point_t; cdecl; inline;
    function init(p1: Pgraphene_point_t; p2: Pgraphene_point_t; p3: Pgraphene_point_t; p4: Pgraphene_point_t): Pgraphene_quad_t; cdecl; inline;
    function init_from_points(points: Pgraphene_point_t): Pgraphene_quad_t; cdecl; inline;
    function init_from_rect(r: Pgraphene_rect_t): Pgraphene_quad_t; cdecl; inline;
  end;

  PPgraphene_ray_intersection_kind_t = ^Pgraphene_ray_intersection_kind_t;
  Pgraphene_ray_intersection_kind_t = ^Tgraphene_ray_intersection_kind_t;

  PPgraphene_triangle_t = ^Pgraphene_triangle_t;
  Pgraphene_triangle_t = ^Tgraphene_triangle_t;
  Tgraphene_ray_t = object
    origin: Tgraphene_vec3_t;
    direction: Tgraphene_vec3_t;
    function alloc: Pgraphene_ray_t; cdecl; inline; static;
    function equal(b: Pgraphene_ray_t): gboolean; cdecl; inline;
    procedure free; cdecl; inline;
    procedure get_closest_point_to_point(p: Pgraphene_point3d_t; res: Pgraphene_point3d_t); cdecl; inline;
    procedure get_direction(direction: Pgraphene_vec3_t); cdecl; inline;
    function get_distance_to_plane(p: Pgraphene_plane_t): gfloat; cdecl; inline;
    function get_distance_to_point(p: Pgraphene_point3d_t): gfloat; cdecl; inline;
    procedure get_origin(origin: Pgraphene_point3d_t); cdecl; inline;
    procedure get_position_at(t: gfloat; position: Pgraphene_point3d_t); cdecl; inline;
    function init(origin: Pgraphene_point3d_t; direction: Pgraphene_vec3_t): Pgraphene_ray_t; cdecl; inline;
    function init_from_ray(src: Pgraphene_ray_t): Pgraphene_ray_t; cdecl; inline;
    function init_from_vec3(origin: Pgraphene_vec3_t; direction: Pgraphene_vec3_t): Pgraphene_ray_t; cdecl; inline;
    function intersect_box(b: Pgraphene_box_t; t_out: Pgfloat): Tgraphene_ray_intersection_kind_t; cdecl; inline;
    function intersect_sphere(s: Pgraphene_sphere_t; t_out: Pgfloat): Tgraphene_ray_intersection_kind_t; cdecl; inline;
    function intersect_triangle(t: Pgraphene_triangle_t; t_out: Pgfloat): Tgraphene_ray_intersection_kind_t; cdecl; inline;
    function intersects_box(b: Pgraphene_box_t): gboolean; cdecl; inline;
    function intersects_sphere(s: Pgraphene_sphere_t): gboolean; cdecl; inline;
    function intersects_triangle(t: Pgraphene_triangle_t): gboolean; cdecl; inline;
  end;
  Tgraphene_vec2_t = object
    value: Tgraphene_simd4f_t;
    function alloc: Pgraphene_vec2_t; cdecl; inline; static;
    procedure add(b: Pgraphene_vec2_t; res: Pgraphene_vec2_t); cdecl; inline;
    procedure divide(b: Pgraphene_vec2_t; res: Pgraphene_vec2_t); cdecl; inline;
    function dot(b: Pgraphene_vec2_t): gfloat; cdecl; inline;
    function equal(v2: Pgraphene_vec2_t): gboolean; cdecl; inline;
    procedure free; cdecl; inline;
    function get_x: gfloat; cdecl; inline;
    function get_y: gfloat; cdecl; inline;
    function init(x: gfloat; y: gfloat): Pgraphene_vec2_t; cdecl; inline;
    function init_from_float(src: Pgfloat): Pgraphene_vec2_t; cdecl; inline;
    function init_from_vec2(src: Pgraphene_vec2_t): Pgraphene_vec2_t; cdecl; inline;
    procedure interpolate(v2: Pgraphene_vec2_t; factor: gdouble; res: Pgraphene_vec2_t); cdecl; inline;
    function length: gfloat; cdecl; inline;
    procedure max(b: Pgraphene_vec2_t; res: Pgraphene_vec2_t); cdecl; inline;
    procedure min(b: Pgraphene_vec2_t; res: Pgraphene_vec2_t); cdecl; inline;
    procedure multiply(b: Pgraphene_vec2_t; res: Pgraphene_vec2_t); cdecl; inline;
    function near(v2: Pgraphene_vec2_t; epsilon: gfloat): gboolean; cdecl; inline;
    procedure negate(res: Pgraphene_vec2_t); cdecl; inline;
    procedure normalize(res: Pgraphene_vec2_t); cdecl; inline;
    procedure scale(factor: gfloat; res: Pgraphene_vec2_t); cdecl; inline;
    procedure subtract(b: Pgraphene_vec2_t; res: Pgraphene_vec2_t); cdecl; inline;
    procedure to_float(dest: Pgfloat); cdecl; inline;
    function one: Pgraphene_vec2_t; cdecl; inline; static;
    function x_axis: Pgraphene_vec2_t; cdecl; inline; static;
    function y_axis: Pgraphene_vec2_t; cdecl; inline; static;
    function zero: Pgraphene_vec2_t; cdecl; inline; static;
  end;
  Tgraphene_triangle_t = object
    a: Tgraphene_vec3_t;
    b: Tgraphene_vec3_t;
    c: Tgraphene_vec3_t;
    function alloc: Pgraphene_triangle_t; cdecl; inline; static;
    function contains_point(p: Pgraphene_point3d_t): gboolean; cdecl; inline;
    function equal(b: Pgraphene_triangle_t): gboolean; cdecl; inline;
    procedure free; cdecl; inline;
    function get_area: gfloat; cdecl; inline;
    function get_barycoords(p: Pgraphene_point3d_t; res: Pgraphene_vec2_t): gboolean; cdecl; inline;
    procedure get_bounding_box(res: Pgraphene_box_t); cdecl; inline;
    procedure get_midpoint(res: Pgraphene_point3d_t); cdecl; inline;
    procedure get_normal(res: Pgraphene_vec3_t); cdecl; inline;
    procedure get_plane(res: Pgraphene_plane_t); cdecl; inline;
    procedure get_points(a: Pgraphene_point3d_t; b: Pgraphene_point3d_t; c: Pgraphene_point3d_t); cdecl; inline;
    function get_uv(p: Pgraphene_point3d_t; uv_a: Pgraphene_vec2_t; uv_b: Pgraphene_vec2_t; uv_c: Pgraphene_vec2_t; res: Pgraphene_vec2_t): gboolean; cdecl; inline;
    procedure get_vertices(a: Pgraphene_vec3_t; b: Pgraphene_vec3_t; c: Pgraphene_vec3_t); cdecl; inline;
    function init_from_float(a: Pgfloat; b: Pgfloat; c: Pgfloat): Pgraphene_triangle_t; cdecl; inline;
    function init_from_point3d(a: Pgraphene_point3d_t; b: Pgraphene_point3d_t; c: Pgraphene_point3d_t): Pgraphene_triangle_t; cdecl; inline;
    function init_from_vec3(a: Pgraphene_vec3_t; b: Pgraphene_vec3_t; c: Pgraphene_vec3_t): Pgraphene_triangle_t; cdecl; inline;
  end;

function graphene_box_alloc: Pgraphene_box_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_box_alloc'{$endif};
function graphene_box_contains_box(a: Pgraphene_box_t; b: Pgraphene_box_t): gboolean; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_box_contains_box'{$endif};
function graphene_box_contains_point(box: Pgraphene_box_t; point: Pgraphene_point3d_t): gboolean; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_box_contains_point'{$endif};
function graphene_box_empty: Pgraphene_box_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_box_empty'{$endif};
function graphene_box_equal(a: Pgraphene_box_t; b: Pgraphene_box_t): gboolean; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_box_equal'{$endif};
function graphene_box_get_depth(box: Pgraphene_box_t): gfloat; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_box_get_depth'{$endif};
function graphene_box_get_height(box: Pgraphene_box_t): gfloat; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_box_get_height'{$endif};
function graphene_box_get_type: csize_t { TGType }; cdecl; external {$ifdef MSWindows} Graphene1_library name 'graphene_box_get_type' {$endif};
function graphene_box_get_width(box: Pgraphene_box_t): gfloat; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_box_get_width'{$endif};
function graphene_box_infinite: Pgraphene_box_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_box_infinite'{$endif};
function graphene_box_init(box: Pgraphene_box_t; min: Pgraphene_point3d_t; max: Pgraphene_point3d_t): Pgraphene_box_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_box_init'{$endif};
function graphene_box_init_from_box(box: Pgraphene_box_t; src: Pgraphene_box_t): Pgraphene_box_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_box_init_from_box'{$endif};
function graphene_box_init_from_points(box: Pgraphene_box_t; n_points: guint; points: Pgraphene_point3d_t): Pgraphene_box_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_box_init_from_points'{$endif};
function graphene_box_init_from_vec3(box: Pgraphene_box_t; min: Pgraphene_vec3_t; max: Pgraphene_vec3_t): Pgraphene_box_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_box_init_from_vec3'{$endif};
function graphene_box_init_from_vectors(box: Pgraphene_box_t; n_vectors: guint; vectors: Pgraphene_vec3_t): Pgraphene_box_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_box_init_from_vectors'{$endif};
function graphene_box_intersection(a: Pgraphene_box_t; b: Pgraphene_box_t; res: Pgraphene_box_t): gboolean; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_box_intersection'{$endif};
function graphene_box_minus_one: Pgraphene_box_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_box_minus_one'{$endif};
function graphene_box_one: Pgraphene_box_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_box_one'{$endif};
function graphene_box_one_minus_one: Pgraphene_box_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_box_one_minus_one'{$endif};
function graphene_box_zero: Pgraphene_box_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_box_zero'{$endif};
function graphene_euler_alloc: Pgraphene_euler_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_euler_alloc'{$endif};
function graphene_euler_equal(a: Pgraphene_euler_t; b: Pgraphene_euler_t): gboolean; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_euler_equal'{$endif};
function graphene_euler_get_alpha(e: Pgraphene_euler_t): gfloat; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_euler_get_alpha'{$endif};
function graphene_euler_get_beta(e: Pgraphene_euler_t): gfloat; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_euler_get_beta'{$endif};
function graphene_euler_get_gamma(e: Pgraphene_euler_t): gfloat; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_euler_get_gamma'{$endif};
function graphene_euler_get_order(e: Pgraphene_euler_t): Tgraphene_euler_order_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_euler_get_order'{$endif};
function graphene_euler_get_type: csize_t { TGType }; cdecl; external {$ifdef MSWindows} Graphene1_library name 'graphene_euler_get_type' {$endif};
function graphene_euler_get_x(e: Pgraphene_euler_t): gfloat; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_euler_get_x'{$endif};
function graphene_euler_get_y(e: Pgraphene_euler_t): gfloat; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_euler_get_y'{$endif};
function graphene_euler_get_z(e: Pgraphene_euler_t): gfloat; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_euler_get_z'{$endif};
function graphene_euler_init(e: Pgraphene_euler_t; x: gfloat; y: gfloat; z: gfloat): Pgraphene_euler_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_euler_init'{$endif};
function graphene_euler_init_from_euler(e: Pgraphene_euler_t; src: Pgraphene_euler_t): Pgraphene_euler_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_euler_init_from_euler'{$endif};
function graphene_euler_init_from_matrix(e: Pgraphene_euler_t; m: Pgraphene_matrix_t; order: Tgraphene_euler_order_t): Pgraphene_euler_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_euler_init_from_matrix'{$endif};
function graphene_euler_init_from_quaternion(e: Pgraphene_euler_t; q: Pgraphene_quaternion_t; order: Tgraphene_euler_order_t): Pgraphene_euler_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_euler_init_from_quaternion'{$endif};
function graphene_euler_init_from_radians(e: Pgraphene_euler_t; x: gfloat; y: gfloat; z: gfloat; order: Tgraphene_euler_order_t): Pgraphene_euler_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_euler_init_from_radians'{$endif};
function graphene_euler_init_from_vec3(e: Pgraphene_euler_t; v: Pgraphene_vec3_t; order: Tgraphene_euler_order_t): Pgraphene_euler_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_euler_init_from_vec3'{$endif};
function graphene_euler_init_with_order(e: Pgraphene_euler_t; x: gfloat; y: gfloat; z: gfloat; order: Tgraphene_euler_order_t): Pgraphene_euler_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_euler_init_with_order'{$endif};
function graphene_frustum_alloc: Pgraphene_frustum_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_frustum_alloc'{$endif};
function graphene_frustum_contains_point(f: Pgraphene_frustum_t; point: Pgraphene_point3d_t): gboolean; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_frustum_contains_point'{$endif};
function graphene_frustum_equal(a: Pgraphene_frustum_t; b: Pgraphene_frustum_t): gboolean; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_frustum_equal'{$endif};
function graphene_frustum_get_type: csize_t { TGType }; cdecl; external {$ifdef MSWindows} Graphene1_library name 'graphene_frustum_get_type' {$endif};
function graphene_frustum_init(f: Pgraphene_frustum_t; p0: Pgraphene_plane_t; p1: Pgraphene_plane_t; p2: Pgraphene_plane_t; p3: Pgraphene_plane_t; p4: Pgraphene_plane_t; p5: Pgraphene_plane_t): Pgraphene_frustum_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_frustum_init'{$endif};
function graphene_frustum_init_from_frustum(f: Pgraphene_frustum_t; src: Pgraphene_frustum_t): Pgraphene_frustum_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_frustum_init_from_frustum'{$endif};
function graphene_frustum_init_from_matrix(f: Pgraphene_frustum_t; matrix: Pgraphene_matrix_t): Pgraphene_frustum_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_frustum_init_from_matrix'{$endif};
function graphene_frustum_intersects_box(f: Pgraphene_frustum_t; box: Pgraphene_box_t): gboolean; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_frustum_intersects_box'{$endif};
function graphene_frustum_intersects_sphere(f: Pgraphene_frustum_t; sphere: Pgraphene_sphere_t): gboolean; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_frustum_intersects_sphere'{$endif};
function graphene_matrix_alloc: Pgraphene_matrix_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_alloc'{$endif};
function graphene_matrix_decompose(m: Pgraphene_matrix_t; translate: Pgraphene_vec3_t; scale: Pgraphene_vec3_t; rotate: Pgraphene_quaternion_t; shear: Pgraphene_vec3_t; perspective: Pgraphene_vec4_t): gboolean; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_decompose'{$endif};
function graphene_matrix_determinant(m: Pgraphene_matrix_t): gfloat; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_determinant'{$endif};
function graphene_matrix_equal(a: Pgraphene_matrix_t; b: Pgraphene_matrix_t): gboolean; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_equal'{$endif};
function graphene_matrix_equal_fast(a: Pgraphene_matrix_t; b: Pgraphene_matrix_t): gboolean; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_equal_fast'{$endif};
function graphene_matrix_get_type: csize_t { TGType }; cdecl; external {$ifdef MSWindows} Graphene1_library name 'graphene_matrix_get_type' {$endif};
function graphene_matrix_get_value(m: Pgraphene_matrix_t; row: guint; col: guint): gfloat; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_get_value'{$endif};
function graphene_matrix_get_x_scale(m: Pgraphene_matrix_t): gfloat; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_get_x_scale'{$endif};
function graphene_matrix_get_x_translation(m: Pgraphene_matrix_t): gfloat; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_get_x_translation'{$endif};
function graphene_matrix_get_y_scale(m: Pgraphene_matrix_t): gfloat; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_get_y_scale'{$endif};
function graphene_matrix_get_y_translation(m: Pgraphene_matrix_t): gfloat; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_get_y_translation'{$endif};
function graphene_matrix_get_z_scale(m: Pgraphene_matrix_t): gfloat; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_get_z_scale'{$endif};
function graphene_matrix_get_z_translation(m: Pgraphene_matrix_t): gfloat; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_get_z_translation'{$endif};
function graphene_matrix_init_from_2d(m: Pgraphene_matrix_t; xx: gdouble; yx: gdouble; xy: gdouble; yy: gdouble; x_0: gdouble; y_0: gdouble): Pgraphene_matrix_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_init_from_2d'{$endif};
function graphene_matrix_init_from_float(m: Pgraphene_matrix_t; v: Pgfloat): Pgraphene_matrix_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_init_from_float'{$endif};
function graphene_matrix_init_from_matrix(m: Pgraphene_matrix_t; src: Pgraphene_matrix_t): Pgraphene_matrix_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_init_from_matrix'{$endif};
function graphene_matrix_init_from_vec4(m: Pgraphene_matrix_t; v0: Pgraphene_vec4_t; v1: Pgraphene_vec4_t; v2: Pgraphene_vec4_t; v3: Pgraphene_vec4_t): Pgraphene_matrix_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_init_from_vec4'{$endif};
function graphene_matrix_init_frustum(m: Pgraphene_matrix_t; left: gfloat; right: gfloat; bottom: gfloat; top: gfloat; z_near: gfloat; z_far: gfloat): Pgraphene_matrix_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_init_frustum'{$endif};
function graphene_matrix_init_identity(m: Pgraphene_matrix_t): Pgraphene_matrix_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_init_identity'{$endif};
function graphene_matrix_init_look_at(m: Pgraphene_matrix_t; eye: Pgraphene_vec3_t; center: Pgraphene_vec3_t; up: Pgraphene_vec3_t): Pgraphene_matrix_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_init_look_at'{$endif};
function graphene_matrix_init_ortho(m: Pgraphene_matrix_t; left: gfloat; right: gfloat; top: gfloat; bottom: gfloat; z_near: gfloat; z_far: gfloat): Pgraphene_matrix_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_init_ortho'{$endif};
function graphene_matrix_init_perspective(m: Pgraphene_matrix_t; fovy: gfloat; aspect: gfloat; z_near: gfloat; z_far: gfloat): Pgraphene_matrix_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_init_perspective'{$endif};
function graphene_matrix_init_rotate(m: Pgraphene_matrix_t; angle: gfloat; axis: Pgraphene_vec3_t): Pgraphene_matrix_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_init_rotate'{$endif};
function graphene_matrix_init_scale(m: Pgraphene_matrix_t; x: gfloat; y: gfloat; z: gfloat): Pgraphene_matrix_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_init_scale'{$endif};
function graphene_matrix_init_skew(m: Pgraphene_matrix_t; x_skew: gfloat; y_skew: gfloat): Pgraphene_matrix_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_init_skew'{$endif};
function graphene_matrix_init_translate(m: Pgraphene_matrix_t; p: Pgraphene_point3d_t): Pgraphene_matrix_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_init_translate'{$endif};
function graphene_matrix_inverse(m: Pgraphene_matrix_t; res: Pgraphene_matrix_t): gboolean; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_inverse'{$endif};
function graphene_matrix_is_2d(m: Pgraphene_matrix_t): gboolean; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_is_2d'{$endif};
function graphene_matrix_is_backface_visible(m: Pgraphene_matrix_t): gboolean; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_is_backface_visible'{$endif};
function graphene_matrix_is_identity(m: Pgraphene_matrix_t): gboolean; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_is_identity'{$endif};
function graphene_matrix_is_singular(m: Pgraphene_matrix_t): gboolean; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_is_singular'{$endif};
function graphene_matrix_near(a: Pgraphene_matrix_t; b: Pgraphene_matrix_t; epsilon: gfloat): gboolean; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_near'{$endif};
function graphene_matrix_to_2d(m: Pgraphene_matrix_t; xx: Pgdouble; yx: Pgdouble; xy: Pgdouble; yy: Pgdouble; x_0: Pgdouble; y_0: Pgdouble): gboolean; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_to_2d'{$endif};
function graphene_matrix_untransform_point(m: Pgraphene_matrix_t; p: Pgraphene_point_t; bounds: Pgraphene_rect_t; res: Pgraphene_point_t): gboolean; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_untransform_point'{$endif};
function graphene_plane_alloc: Pgraphene_plane_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_plane_alloc'{$endif};
function graphene_plane_distance(p: Pgraphene_plane_t; point: Pgraphene_point3d_t): gfloat; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_plane_distance'{$endif};
function graphene_plane_equal(a: Pgraphene_plane_t; b: Pgraphene_plane_t): gboolean; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_plane_equal'{$endif};
function graphene_plane_get_constant(p: Pgraphene_plane_t): gfloat; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_plane_get_constant'{$endif};
function graphene_plane_get_type: csize_t { TGType }; cdecl; external {$ifdef MSWindows} Graphene1_library name 'graphene_plane_get_type' {$endif};
function graphene_plane_init(p: Pgraphene_plane_t; normal: Pgraphene_vec3_t; constant: gfloat): Pgraphene_plane_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_plane_init'{$endif};
function graphene_plane_init_from_plane(p: Pgraphene_plane_t; src: Pgraphene_plane_t): Pgraphene_plane_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_plane_init_from_plane'{$endif};
function graphene_plane_init_from_point(p: Pgraphene_plane_t; normal: Pgraphene_vec3_t; point: Pgraphene_point3d_t): Pgraphene_plane_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_plane_init_from_point'{$endif};
function graphene_plane_init_from_points(p: Pgraphene_plane_t; a: Pgraphene_point3d_t; b: Pgraphene_point3d_t; c: Pgraphene_point3d_t): Pgraphene_plane_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_plane_init_from_points'{$endif};
function graphene_plane_init_from_vec4(p: Pgraphene_plane_t; src: Pgraphene_vec4_t): Pgraphene_plane_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_plane_init_from_vec4'{$endif};
function graphene_point3d_alloc: Pgraphene_point3d_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_point3d_alloc'{$endif};
function graphene_point3d_distance(a: Pgraphene_point3d_t; b: Pgraphene_point3d_t; delta: Pgraphene_vec3_t): gfloat; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_point3d_distance'{$endif};
function graphene_point3d_dot(a: Pgraphene_point3d_t; b: Pgraphene_point3d_t): gfloat; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_point3d_dot'{$endif};
function graphene_point3d_equal(a: Pgraphene_point3d_t; b: Pgraphene_point3d_t): gboolean; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_point3d_equal'{$endif};
function graphene_point3d_get_type: csize_t { TGType }; cdecl; external {$ifdef MSWindows} Graphene1_library name 'graphene_point3d_get_type' {$endif};
function graphene_point3d_init(p: Pgraphene_point3d_t; x: gfloat; y: gfloat; z: gfloat): Pgraphene_point3d_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_point3d_init'{$endif};
function graphene_point3d_init_from_point(p: Pgraphene_point3d_t; src: Pgraphene_point3d_t): Pgraphene_point3d_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_point3d_init_from_point'{$endif};
function graphene_point3d_init_from_vec3(p: Pgraphene_point3d_t; v: Pgraphene_vec3_t): Pgraphene_point3d_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_point3d_init_from_vec3'{$endif};
function graphene_point3d_length(p: Pgraphene_point3d_t): gfloat; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_point3d_length'{$endif};
function graphene_point3d_near(a: Pgraphene_point3d_t; b: Pgraphene_point3d_t; epsilon: gfloat): gboolean; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_point3d_near'{$endif};
function graphene_point3d_zero: Pgraphene_point3d_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_point3d_zero'{$endif};
function graphene_point_alloc: Pgraphene_point_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_point_alloc'{$endif};
function graphene_point_distance(a: Pgraphene_point_t; b: Pgraphene_point_t; d_x: Pgfloat; d_y: Pgfloat): gfloat; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_point_distance'{$endif};
function graphene_point_equal(a: Pgraphene_point_t; b: Pgraphene_point_t): gboolean; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_point_equal'{$endif};
function graphene_point_get_type: csize_t { TGType }; cdecl; external {$ifdef MSWindows} Graphene1_library name 'graphene_point_get_type' {$endif};
function graphene_point_init(p: Pgraphene_point_t; x: gfloat; y: gfloat): Pgraphene_point_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_point_init'{$endif};
function graphene_point_init_from_point(p: Pgraphene_point_t; src: Pgraphene_point_t): Pgraphene_point_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_point_init_from_point'{$endif};
function graphene_point_init_from_vec2(p: Pgraphene_point_t; src: Pgraphene_vec2_t): Pgraphene_point_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_point_init_from_vec2'{$endif};
function graphene_point_near(a: Pgraphene_point_t; b: Pgraphene_point_t; epsilon: gfloat): gboolean; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_point_near'{$endif};
function graphene_point_zero: Pgraphene_point_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_point_zero'{$endif};
function graphene_quad_alloc: Pgraphene_quad_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_quad_alloc'{$endif};
function graphene_quad_contains(q: Pgraphene_quad_t; p: Pgraphene_point_t): gboolean; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_quad_contains'{$endif};
function graphene_quad_get_point(q: Pgraphene_quad_t; index_: guint): Pgraphene_point_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_quad_get_point'{$endif};
function graphene_quad_get_type: csize_t { TGType }; cdecl; external {$ifdef MSWindows} Graphene1_library name 'graphene_quad_get_type' {$endif};
function graphene_quad_init(q: Pgraphene_quad_t; p1: Pgraphene_point_t; p2: Pgraphene_point_t; p3: Pgraphene_point_t; p4: Pgraphene_point_t): Pgraphene_quad_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_quad_init'{$endif};
function graphene_quad_init_from_points(q: Pgraphene_quad_t; points: Pgraphene_point_t): Pgraphene_quad_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_quad_init_from_points'{$endif};
function graphene_quad_init_from_rect(q: Pgraphene_quad_t; r: Pgraphene_rect_t): Pgraphene_quad_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_quad_init_from_rect'{$endif};
function graphene_quaternion_alloc: Pgraphene_quaternion_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_quaternion_alloc'{$endif};
function graphene_quaternion_dot(a: Pgraphene_quaternion_t; b: Pgraphene_quaternion_t): gfloat; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_quaternion_dot'{$endif};
function graphene_quaternion_equal(a: Pgraphene_quaternion_t; b: Pgraphene_quaternion_t): gboolean; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_quaternion_equal'{$endif};
function graphene_quaternion_get_type: csize_t { TGType }; cdecl; external {$ifdef MSWindows} Graphene1_library name 'graphene_quaternion_get_type' {$endif};
function graphene_quaternion_init(q: Pgraphene_quaternion_t; x: gfloat; y: gfloat; z: gfloat; w: gfloat): Pgraphene_quaternion_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_quaternion_init'{$endif};
function graphene_quaternion_init_from_angle_vec3(q: Pgraphene_quaternion_t; angle: gfloat; axis: Pgraphene_vec3_t): Pgraphene_quaternion_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_quaternion_init_from_angle_vec3'{$endif};
function graphene_quaternion_init_from_angles(q: Pgraphene_quaternion_t; deg_x: gfloat; deg_y: gfloat; deg_z: gfloat): Pgraphene_quaternion_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_quaternion_init_from_angles'{$endif};
function graphene_quaternion_init_from_euler(q: Pgraphene_quaternion_t; e: Pgraphene_euler_t): Pgraphene_quaternion_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_quaternion_init_from_euler'{$endif};
function graphene_quaternion_init_from_matrix(q: Pgraphene_quaternion_t; m: Pgraphene_matrix_t): Pgraphene_quaternion_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_quaternion_init_from_matrix'{$endif};
function graphene_quaternion_init_from_quaternion(q: Pgraphene_quaternion_t; src: Pgraphene_quaternion_t): Pgraphene_quaternion_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_quaternion_init_from_quaternion'{$endif};
function graphene_quaternion_init_from_radians(q: Pgraphene_quaternion_t; rad_x: gfloat; rad_y: gfloat; rad_z: gfloat): Pgraphene_quaternion_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_quaternion_init_from_radians'{$endif};
function graphene_quaternion_init_from_vec4(q: Pgraphene_quaternion_t; src: Pgraphene_vec4_t): Pgraphene_quaternion_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_quaternion_init_from_vec4'{$endif};
function graphene_quaternion_init_identity(q: Pgraphene_quaternion_t): Pgraphene_quaternion_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_quaternion_init_identity'{$endif};
function graphene_ray_alloc: Pgraphene_ray_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_ray_alloc'{$endif};
function graphene_ray_equal(a: Pgraphene_ray_t; b: Pgraphene_ray_t): gboolean; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_ray_equal'{$endif};
function graphene_ray_get_distance_to_plane(r: Pgraphene_ray_t; p: Pgraphene_plane_t): gfloat; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_ray_get_distance_to_plane'{$endif};
function graphene_ray_get_distance_to_point(r: Pgraphene_ray_t; p: Pgraphene_point3d_t): gfloat; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_ray_get_distance_to_point'{$endif};
function graphene_ray_get_type: csize_t { TGType }; cdecl; external {$ifdef MSWindows} Graphene1_library name 'graphene_ray_get_type' {$endif};
function graphene_ray_init(r: Pgraphene_ray_t; origin: Pgraphene_point3d_t; direction: Pgraphene_vec3_t): Pgraphene_ray_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_ray_init'{$endif};
function graphene_ray_init_from_ray(r: Pgraphene_ray_t; src: Pgraphene_ray_t): Pgraphene_ray_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_ray_init_from_ray'{$endif};
function graphene_ray_init_from_vec3(r: Pgraphene_ray_t; origin: Pgraphene_vec3_t; direction: Pgraphene_vec3_t): Pgraphene_ray_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_ray_init_from_vec3'{$endif};
function graphene_ray_intersect_box(r: Pgraphene_ray_t; b: Pgraphene_box_t; t_out: Pgfloat): Tgraphene_ray_intersection_kind_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_ray_intersect_box'{$endif};
function graphene_ray_intersect_sphere(r: Pgraphene_ray_t; s: Pgraphene_sphere_t; t_out: Pgfloat): Tgraphene_ray_intersection_kind_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_ray_intersect_sphere'{$endif};
function graphene_ray_intersect_triangle(r: Pgraphene_ray_t; t: Pgraphene_triangle_t; t_out: Pgfloat): Tgraphene_ray_intersection_kind_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_ray_intersect_triangle'{$endif};
function graphene_ray_intersects_box(r: Pgraphene_ray_t; b: Pgraphene_box_t): gboolean; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_ray_intersects_box'{$endif};
function graphene_ray_intersects_sphere(r: Pgraphene_ray_t; s: Pgraphene_sphere_t): gboolean; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_ray_intersects_sphere'{$endif};
function graphene_ray_intersects_triangle(r: Pgraphene_ray_t; t: Pgraphene_triangle_t): gboolean; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_ray_intersects_triangle'{$endif};
function graphene_rect_alloc: Pgraphene_rect_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_rect_alloc'{$endif};
function graphene_rect_contains_point(r: Pgraphene_rect_t; p: Pgraphene_point_t): gboolean; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_rect_contains_point'{$endif};
function graphene_rect_contains_rect(a: Pgraphene_rect_t; b: Pgraphene_rect_t): gboolean; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_rect_contains_rect'{$endif};
function graphene_rect_equal(a: Pgraphene_rect_t; b: Pgraphene_rect_t): gboolean; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_rect_equal'{$endif};
function graphene_rect_get_area(r: Pgraphene_rect_t): gfloat; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_rect_get_area'{$endif};
function graphene_rect_get_height(r: Pgraphene_rect_t): gfloat; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_rect_get_height'{$endif};
function graphene_rect_get_type: csize_t { TGType }; cdecl; external {$ifdef MSWindows} Graphene1_library name 'graphene_rect_get_type' {$endif};
function graphene_rect_get_width(r: Pgraphene_rect_t): gfloat; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_rect_get_width'{$endif};
function graphene_rect_get_x(r: Pgraphene_rect_t): gfloat; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_rect_get_x'{$endif};
function graphene_rect_get_y(r: Pgraphene_rect_t): gfloat; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_rect_get_y'{$endif};
function graphene_rect_init(r: Pgraphene_rect_t; x: gfloat; y: gfloat; width: gfloat; height: gfloat): Pgraphene_rect_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_rect_init'{$endif};
function graphene_rect_init_from_rect(r: Pgraphene_rect_t; src: Pgraphene_rect_t): Pgraphene_rect_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_rect_init_from_rect'{$endif};
function graphene_rect_inset(r: Pgraphene_rect_t; d_x: gfloat; d_y: gfloat): Pgraphene_rect_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_rect_inset'{$endif};
function graphene_rect_intersection(a: Pgraphene_rect_t; b: Pgraphene_rect_t; res: Pgraphene_rect_t): gboolean; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_rect_intersection'{$endif};
function graphene_rect_normalize(r: Pgraphene_rect_t): Pgraphene_rect_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_rect_normalize'{$endif};
function graphene_rect_offset(r: Pgraphene_rect_t; d_x: gfloat; d_y: gfloat): Pgraphene_rect_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_rect_offset'{$endif};
function graphene_rect_zero: Pgraphene_rect_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_rect_zero'{$endif};
function graphene_size_alloc: Pgraphene_size_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_size_alloc'{$endif};
function graphene_size_equal(a: Pgraphene_size_t; b: Pgraphene_size_t): gboolean; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_size_equal'{$endif};
function graphene_size_get_type: csize_t { TGType }; cdecl; external {$ifdef MSWindows} Graphene1_library name 'graphene_size_get_type' {$endif};
function graphene_size_init(s: Pgraphene_size_t; width: gfloat; height: gfloat): Pgraphene_size_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_size_init'{$endif};
function graphene_size_init_from_size(s: Pgraphene_size_t; src: Pgraphene_size_t): Pgraphene_size_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_size_init_from_size'{$endif};
function graphene_size_zero: Pgraphene_size_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_size_zero'{$endif};
function graphene_sphere_alloc: Pgraphene_sphere_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_sphere_alloc'{$endif};
function graphene_sphere_contains_point(s: Pgraphene_sphere_t; point: Pgraphene_point3d_t): gboolean; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_sphere_contains_point'{$endif};
function graphene_sphere_distance(s: Pgraphene_sphere_t; point: Pgraphene_point3d_t): gfloat; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_sphere_distance'{$endif};
function graphene_sphere_equal(a: Pgraphene_sphere_t; b: Pgraphene_sphere_t): gboolean; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_sphere_equal'{$endif};
function graphene_sphere_get_radius(s: Pgraphene_sphere_t): gfloat; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_sphere_get_radius'{$endif};
function graphene_sphere_get_type: csize_t { TGType }; cdecl; external {$ifdef MSWindows} Graphene1_library name 'graphene_sphere_get_type' {$endif};
function graphene_sphere_init(s: Pgraphene_sphere_t; center: Pgraphene_point3d_t; radius: gfloat): Pgraphene_sphere_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_sphere_init'{$endif};
function graphene_sphere_init_from_points(s: Pgraphene_sphere_t; n_points: guint; points: Pgraphene_point3d_t; center: Pgraphene_point3d_t): Pgraphene_sphere_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_sphere_init_from_points'{$endif};
function graphene_sphere_init_from_vectors(s: Pgraphene_sphere_t; n_vectors: guint; vectors: Pgraphene_vec3_t; center: Pgraphene_point3d_t): Pgraphene_sphere_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_sphere_init_from_vectors'{$endif};
function graphene_sphere_is_empty(s: Pgraphene_sphere_t): gboolean; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_sphere_is_empty'{$endif};
function graphene_triangle_alloc: Pgraphene_triangle_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_triangle_alloc'{$endif};
function graphene_triangle_contains_point(t: Pgraphene_triangle_t; p: Pgraphene_point3d_t): gboolean; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_triangle_contains_point'{$endif};
function graphene_triangle_equal(a: Pgraphene_triangle_t; b: Pgraphene_triangle_t): gboolean; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_triangle_equal'{$endif};
function graphene_triangle_get_area(t: Pgraphene_triangle_t): gfloat; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_triangle_get_area'{$endif};
function graphene_triangle_get_barycoords(t: Pgraphene_triangle_t; p: Pgraphene_point3d_t; res: Pgraphene_vec2_t): gboolean; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_triangle_get_barycoords'{$endif};
function graphene_triangle_get_type: csize_t { TGType }; cdecl; external {$ifdef MSWindows} Graphene1_library name 'graphene_triangle_get_type' {$endif};
function graphene_triangle_get_uv(t: Pgraphene_triangle_t; p: Pgraphene_point3d_t; uv_a: Pgraphene_vec2_t; uv_b: Pgraphene_vec2_t; uv_c: Pgraphene_vec2_t; res: Pgraphene_vec2_t): gboolean; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_triangle_get_uv'{$endif};
function graphene_triangle_init_from_float(t: Pgraphene_triangle_t; a: Pgfloat; b: Pgfloat; c: Pgfloat): Pgraphene_triangle_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_triangle_init_from_float'{$endif};
function graphene_triangle_init_from_point3d(t: Pgraphene_triangle_t; a: Pgraphene_point3d_t; b: Pgraphene_point3d_t; c: Pgraphene_point3d_t): Pgraphene_triangle_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_triangle_init_from_point3d'{$endif};
function graphene_triangle_init_from_vec3(t: Pgraphene_triangle_t; a: Pgraphene_vec3_t; b: Pgraphene_vec3_t; c: Pgraphene_vec3_t): Pgraphene_triangle_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_triangle_init_from_vec3'{$endif};
function graphene_vec2_alloc: Pgraphene_vec2_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec2_alloc'{$endif};
function graphene_vec2_dot(a: Pgraphene_vec2_t; b: Pgraphene_vec2_t): gfloat; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec2_dot'{$endif};
function graphene_vec2_equal(v1: Pgraphene_vec2_t; v2: Pgraphene_vec2_t): gboolean; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec2_equal'{$endif};
function graphene_vec2_get_type: csize_t { TGType }; cdecl; external {$ifdef MSWindows} Graphene1_library name 'graphene_vec2_get_type' {$endif};
function graphene_vec2_get_x(v: Pgraphene_vec2_t): gfloat; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec2_get_x'{$endif};
function graphene_vec2_get_y(v: Pgraphene_vec2_t): gfloat; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec2_get_y'{$endif};
function graphene_vec2_init(v: Pgraphene_vec2_t; x: gfloat; y: gfloat): Pgraphene_vec2_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec2_init'{$endif};
function graphene_vec2_init_from_float(v: Pgraphene_vec2_t; src: Pgfloat): Pgraphene_vec2_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec2_init_from_float'{$endif};
function graphene_vec2_init_from_vec2(v: Pgraphene_vec2_t; src: Pgraphene_vec2_t): Pgraphene_vec2_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec2_init_from_vec2'{$endif};
function graphene_vec2_length(v: Pgraphene_vec2_t): gfloat; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec2_length'{$endif};
function graphene_vec2_near(v1: Pgraphene_vec2_t; v2: Pgraphene_vec2_t; epsilon: gfloat): gboolean; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec2_near'{$endif};
function graphene_vec2_one: Pgraphene_vec2_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec2_one'{$endif};
function graphene_vec2_x_axis: Pgraphene_vec2_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec2_x_axis'{$endif};
function graphene_vec2_y_axis: Pgraphene_vec2_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec2_y_axis'{$endif};
function graphene_vec2_zero: Pgraphene_vec2_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec2_zero'{$endif};
function graphene_vec3_alloc: Pgraphene_vec3_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec3_alloc'{$endif};
function graphene_vec3_dot(a: Pgraphene_vec3_t; b: Pgraphene_vec3_t): gfloat; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec3_dot'{$endif};
function graphene_vec3_equal(v1: Pgraphene_vec3_t; v2: Pgraphene_vec3_t): gboolean; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec3_equal'{$endif};
function graphene_vec3_get_type: csize_t { TGType }; cdecl; external {$ifdef MSWindows} Graphene1_library name 'graphene_vec3_get_type' {$endif};
function graphene_vec3_get_x(v: Pgraphene_vec3_t): gfloat; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec3_get_x'{$endif};
function graphene_vec3_get_y(v: Pgraphene_vec3_t): gfloat; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec3_get_y'{$endif};
function graphene_vec3_get_z(v: Pgraphene_vec3_t): gfloat; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec3_get_z'{$endif};
function graphene_vec3_init(v: Pgraphene_vec3_t; x: gfloat; y: gfloat; z: gfloat): Pgraphene_vec3_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec3_init'{$endif};
function graphene_vec3_init_from_float(v: Pgraphene_vec3_t; src: Pgfloat): Pgraphene_vec3_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec3_init_from_float'{$endif};
function graphene_vec3_init_from_vec3(v: Pgraphene_vec3_t; src: Pgraphene_vec3_t): Pgraphene_vec3_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec3_init_from_vec3'{$endif};
function graphene_vec3_length(v: Pgraphene_vec3_t): gfloat; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec3_length'{$endif};
function graphene_vec3_near(v1: Pgraphene_vec3_t; v2: Pgraphene_vec3_t; epsilon: gfloat): gboolean; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec3_near'{$endif};
function graphene_vec3_one: Pgraphene_vec3_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec3_one'{$endif};
function graphene_vec3_x_axis: Pgraphene_vec3_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec3_x_axis'{$endif};
function graphene_vec3_y_axis: Pgraphene_vec3_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec3_y_axis'{$endif};
function graphene_vec3_z_axis: Pgraphene_vec3_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec3_z_axis'{$endif};
function graphene_vec3_zero: Pgraphene_vec3_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec3_zero'{$endif};
function graphene_vec4_alloc: Pgraphene_vec4_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec4_alloc'{$endif};
function graphene_vec4_dot(a: Pgraphene_vec4_t; b: Pgraphene_vec4_t): gfloat; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec4_dot'{$endif};
function graphene_vec4_equal(v1: Pgraphene_vec4_t; v2: Pgraphene_vec4_t): gboolean; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec4_equal'{$endif};
function graphene_vec4_get_type: csize_t { TGType }; cdecl; external {$ifdef MSWindows} Graphene1_library name 'graphene_vec4_get_type' {$endif};
function graphene_vec4_get_w(v: Pgraphene_vec4_t): gfloat; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec4_get_w'{$endif};
function graphene_vec4_get_x(v: Pgraphene_vec4_t): gfloat; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec4_get_x'{$endif};
function graphene_vec4_get_y(v: Pgraphene_vec4_t): gfloat; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec4_get_y'{$endif};
function graphene_vec4_get_z(v: Pgraphene_vec4_t): gfloat; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec4_get_z'{$endif};
function graphene_vec4_init(v: Pgraphene_vec4_t; x: gfloat; y: gfloat; z: gfloat; w: gfloat): Pgraphene_vec4_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec4_init'{$endif};
function graphene_vec4_init_from_float(v: Pgraphene_vec4_t; src: Pgfloat): Pgraphene_vec4_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec4_init_from_float'{$endif};
function graphene_vec4_init_from_vec2(v: Pgraphene_vec4_t; src: Pgraphene_vec2_t; z: gfloat; w: gfloat): Pgraphene_vec4_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec4_init_from_vec2'{$endif};
function graphene_vec4_init_from_vec3(v: Pgraphene_vec4_t; src: Pgraphene_vec3_t; w: gfloat): Pgraphene_vec4_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec4_init_from_vec3'{$endif};
function graphene_vec4_init_from_vec4(v: Pgraphene_vec4_t; src: Pgraphene_vec4_t): Pgraphene_vec4_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec4_init_from_vec4'{$endif};
function graphene_vec4_length(v: Pgraphene_vec4_t): gfloat; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec4_length'{$endif};
function graphene_vec4_near(v1: Pgraphene_vec4_t; v2: Pgraphene_vec4_t; epsilon: gfloat): gboolean; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec4_near'{$endif};
function graphene_vec4_one: Pgraphene_vec4_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec4_one'{$endif};
function graphene_vec4_w_axis: Pgraphene_vec4_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec4_w_axis'{$endif};
function graphene_vec4_x_axis: Pgraphene_vec4_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec4_x_axis'{$endif};
function graphene_vec4_y_axis: Pgraphene_vec4_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec4_y_axis'{$endif};
function graphene_vec4_z_axis: Pgraphene_vec4_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec4_z_axis'{$endif};
function graphene_vec4_zero: Pgraphene_vec4_t; cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec4_zero'{$endif};
procedure graphene_box_expand(box: Pgraphene_box_t; point: Pgraphene_point3d_t; res: Pgraphene_box_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_box_expand'{$endif};
procedure graphene_box_expand_scalar(box: Pgraphene_box_t; scalar: gfloat; res: Pgraphene_box_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_box_expand_scalar'{$endif};
procedure graphene_box_expand_vec3(box: Pgraphene_box_t; vec: Pgraphene_vec3_t; res: Pgraphene_box_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_box_expand_vec3'{$endif};
procedure graphene_box_free(box: Pgraphene_box_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_box_free'{$endif};
procedure graphene_box_get_bounding_sphere(box: Pgraphene_box_t; sphere: Pgraphene_sphere_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_box_get_bounding_sphere'{$endif};
procedure graphene_box_get_center(box: Pgraphene_box_t; center: Pgraphene_point3d_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_box_get_center'{$endif};
procedure graphene_box_get_max(box: Pgraphene_box_t; max: Pgraphene_point3d_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_box_get_max'{$endif};
procedure graphene_box_get_min(box: Pgraphene_box_t; min: Pgraphene_point3d_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_box_get_min'{$endif};
procedure graphene_box_get_size(box: Pgraphene_box_t; size: Pgraphene_vec3_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_box_get_size'{$endif};
procedure graphene_box_get_vertices(box: Pgraphene_box_t; vertices: Pgraphene_vec3_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_box_get_vertices'{$endif};
procedure graphene_box_union(a: Pgraphene_box_t; b: Pgraphene_box_t; res: Pgraphene_box_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_box_union'{$endif};
procedure graphene_euler_free(e: Pgraphene_euler_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_euler_free'{$endif};
procedure graphene_euler_reorder(e: Pgraphene_euler_t; order: Tgraphene_euler_order_t; res: Pgraphene_euler_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_euler_reorder'{$endif};
procedure graphene_euler_to_matrix(e: Pgraphene_euler_t; res: Pgraphene_matrix_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_euler_to_matrix'{$endif};
procedure graphene_euler_to_quaternion(e: Pgraphene_euler_t; res: Pgraphene_quaternion_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_euler_to_quaternion'{$endif};
procedure graphene_euler_to_vec3(e: Pgraphene_euler_t; res: Pgraphene_vec3_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_euler_to_vec3'{$endif};
procedure graphene_frustum_free(f: Pgraphene_frustum_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_frustum_free'{$endif};
procedure graphene_frustum_get_planes(f: Pgraphene_frustum_t; planes: Pgraphene_plane_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_frustum_get_planes'{$endif};
procedure graphene_matrix_free(m: Pgraphene_matrix_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_free'{$endif};
procedure graphene_matrix_get_row(m: Pgraphene_matrix_t; index_: guint; res: Pgraphene_vec4_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_get_row'{$endif};
procedure graphene_matrix_interpolate(a: Pgraphene_matrix_t; b: Pgraphene_matrix_t; factor: gdouble; res: Pgraphene_matrix_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_interpolate'{$endif};
procedure graphene_matrix_multiply(a: Pgraphene_matrix_t; b: Pgraphene_matrix_t; res: Pgraphene_matrix_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_multiply'{$endif};
procedure graphene_matrix_normalize(m: Pgraphene_matrix_t; res: Pgraphene_matrix_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_normalize'{$endif};
procedure graphene_matrix_perspective(m: Pgraphene_matrix_t; depth: gfloat; res: Pgraphene_matrix_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_perspective'{$endif};
procedure graphene_matrix_print(m: Pgraphene_matrix_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_print'{$endif};
procedure graphene_matrix_project_point(m: Pgraphene_matrix_t; p: Pgraphene_point_t; res: Pgraphene_point_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_project_point'{$endif};
procedure graphene_matrix_project_rect(m: Pgraphene_matrix_t; r: Pgraphene_rect_t; res: Pgraphene_quad_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_project_rect'{$endif};
procedure graphene_matrix_project_rect_bounds(m: Pgraphene_matrix_t; r: Pgraphene_rect_t; res: Pgraphene_rect_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_project_rect_bounds'{$endif};
procedure graphene_matrix_rotate(m: Pgraphene_matrix_t; angle: gfloat; axis: Pgraphene_vec3_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_rotate'{$endif};
procedure graphene_matrix_rotate_euler(m: Pgraphene_matrix_t; e: Pgraphene_euler_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_rotate_euler'{$endif};
procedure graphene_matrix_rotate_quaternion(m: Pgraphene_matrix_t; q: Pgraphene_quaternion_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_rotate_quaternion'{$endif};
procedure graphene_matrix_rotate_x(m: Pgraphene_matrix_t; angle: gfloat); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_rotate_x'{$endif};
procedure graphene_matrix_rotate_y(m: Pgraphene_matrix_t; angle: gfloat); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_rotate_y'{$endif};
procedure graphene_matrix_rotate_z(m: Pgraphene_matrix_t; angle: gfloat); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_rotate_z'{$endif};
procedure graphene_matrix_scale(m: Pgraphene_matrix_t; factor_x: gfloat; factor_y: gfloat; factor_z: gfloat); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_scale'{$endif};
procedure graphene_matrix_skew_xy(m: Pgraphene_matrix_t; factor: gfloat); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_skew_xy'{$endif};
procedure graphene_matrix_skew_xz(m: Pgraphene_matrix_t; factor: gfloat); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_skew_xz'{$endif};
procedure graphene_matrix_skew_yz(m: Pgraphene_matrix_t; factor: gfloat); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_skew_yz'{$endif};
procedure graphene_matrix_to_float(m: Pgraphene_matrix_t; v: Pgfloat); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_to_float'{$endif};
procedure graphene_matrix_transform_bounds(m: Pgraphene_matrix_t; r: Pgraphene_rect_t; res: Pgraphene_rect_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_transform_bounds'{$endif};
procedure graphene_matrix_transform_box(m: Pgraphene_matrix_t; b: Pgraphene_box_t; res: Pgraphene_box_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_transform_box'{$endif};
procedure graphene_matrix_transform_point(m: Pgraphene_matrix_t; p: Pgraphene_point_t; res: Pgraphene_point_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_transform_point'{$endif};
procedure graphene_matrix_transform_point3d(m: Pgraphene_matrix_t; p: Pgraphene_point3d_t; res: Pgraphene_point3d_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_transform_point3d'{$endif};
procedure graphene_matrix_transform_ray(m: Pgraphene_matrix_t; r: Pgraphene_ray_t; res: Pgraphene_ray_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_transform_ray'{$endif};
procedure graphene_matrix_transform_rect(m: Pgraphene_matrix_t; r: Pgraphene_rect_t; res: Pgraphene_quad_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_transform_rect'{$endif};
procedure graphene_matrix_transform_sphere(m: Pgraphene_matrix_t; s: Pgraphene_sphere_t; res: Pgraphene_sphere_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_transform_sphere'{$endif};
procedure graphene_matrix_transform_vec3(m: Pgraphene_matrix_t; v: Pgraphene_vec3_t; res: Pgraphene_vec3_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_transform_vec3'{$endif};
procedure graphene_matrix_transform_vec4(m: Pgraphene_matrix_t; v: Pgraphene_vec4_t; res: Pgraphene_vec4_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_transform_vec4'{$endif};
procedure graphene_matrix_translate(m: Pgraphene_matrix_t; pos: Pgraphene_point3d_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_translate'{$endif};
procedure graphene_matrix_transpose(m: Pgraphene_matrix_t; res: Pgraphene_matrix_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_transpose'{$endif};
procedure graphene_matrix_unproject_point3d(projection: Pgraphene_matrix_t; modelview: Pgraphene_matrix_t; point: Pgraphene_point3d_t; res: Pgraphene_point3d_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_unproject_point3d'{$endif};
procedure graphene_matrix_untransform_bounds(m: Pgraphene_matrix_t; r: Pgraphene_rect_t; bounds: Pgraphene_rect_t; res: Pgraphene_rect_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_matrix_untransform_bounds'{$endif};
procedure graphene_plane_free(p: Pgraphene_plane_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_plane_free'{$endif};
procedure graphene_plane_get_normal(p: Pgraphene_plane_t; normal: Pgraphene_vec3_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_plane_get_normal'{$endif};
procedure graphene_plane_negate(p: Pgraphene_plane_t; res: Pgraphene_plane_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_plane_negate'{$endif};
procedure graphene_plane_normalize(p: Pgraphene_plane_t; res: Pgraphene_plane_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_plane_normalize'{$endif};
procedure graphene_plane_transform(p: Pgraphene_plane_t; matrix: Pgraphene_matrix_t; normal_matrix: Pgraphene_matrix_t; res: Pgraphene_plane_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_plane_transform'{$endif};
procedure graphene_point3d_cross(a: Pgraphene_point3d_t; b: Pgraphene_point3d_t; res: Pgraphene_point3d_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_point3d_cross'{$endif};
procedure graphene_point3d_free(p: Pgraphene_point3d_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_point3d_free'{$endif};
procedure graphene_point3d_interpolate(a: Pgraphene_point3d_t; b: Pgraphene_point3d_t; factor: gdouble; res: Pgraphene_point3d_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_point3d_interpolate'{$endif};
procedure graphene_point3d_normalize(p: Pgraphene_point3d_t; res: Pgraphene_point3d_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_point3d_normalize'{$endif};
procedure graphene_point3d_normalize_viewport(p: Pgraphene_point3d_t; viewport: Pgraphene_rect_t; z_near: gfloat; z_far: gfloat; res: Pgraphene_point3d_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_point3d_normalize_viewport'{$endif};
procedure graphene_point3d_scale(p: Pgraphene_point3d_t; factor: gfloat; res: Pgraphene_point3d_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_point3d_scale'{$endif};
procedure graphene_point3d_to_vec3(p: Pgraphene_point3d_t; v: Pgraphene_vec3_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_point3d_to_vec3'{$endif};
procedure graphene_point_free(p: Pgraphene_point_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_point_free'{$endif};
procedure graphene_point_interpolate(a: Pgraphene_point_t; b: Pgraphene_point_t; factor: gdouble; res: Pgraphene_point_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_point_interpolate'{$endif};
procedure graphene_point_to_vec2(p: Pgraphene_point_t; v: Pgraphene_vec2_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_point_to_vec2'{$endif};
procedure graphene_quad_bounds(q: Pgraphene_quad_t; r: Pgraphene_rect_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_quad_bounds'{$endif};
procedure graphene_quad_free(q: Pgraphene_quad_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_quad_free'{$endif};
procedure graphene_quaternion_add(a: Pgraphene_quaternion_t; b: Pgraphene_quaternion_t; res: Pgraphene_quaternion_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_quaternion_add'{$endif};
procedure graphene_quaternion_free(q: Pgraphene_quaternion_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_quaternion_free'{$endif};
procedure graphene_quaternion_invert(q: Pgraphene_quaternion_t; res: Pgraphene_quaternion_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_quaternion_invert'{$endif};
procedure graphene_quaternion_multiply(a: Pgraphene_quaternion_t; b: Pgraphene_quaternion_t; res: Pgraphene_quaternion_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_quaternion_multiply'{$endif};
procedure graphene_quaternion_normalize(q: Pgraphene_quaternion_t; res: Pgraphene_quaternion_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_quaternion_normalize'{$endif};
procedure graphene_quaternion_scale(q: Pgraphene_quaternion_t; factor: gfloat; res: Pgraphene_quaternion_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_quaternion_scale'{$endif};
procedure graphene_quaternion_slerp(a: Pgraphene_quaternion_t; b: Pgraphene_quaternion_t; factor: gfloat; res: Pgraphene_quaternion_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_quaternion_slerp'{$endif};
procedure graphene_quaternion_to_angle_vec3(q: Pgraphene_quaternion_t; angle: Pgfloat; axis: Pgraphene_vec3_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_quaternion_to_angle_vec3'{$endif};
procedure graphene_quaternion_to_angles(q: Pgraphene_quaternion_t; deg_x: Pgfloat; deg_y: Pgfloat; deg_z: Pgfloat); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_quaternion_to_angles'{$endif};
procedure graphene_quaternion_to_matrix(q: Pgraphene_quaternion_t; m: Pgraphene_matrix_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_quaternion_to_matrix'{$endif};
procedure graphene_quaternion_to_radians(q: Pgraphene_quaternion_t; rad_x: Pgfloat; rad_y: Pgfloat; rad_z: Pgfloat); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_quaternion_to_radians'{$endif};
procedure graphene_quaternion_to_vec4(q: Pgraphene_quaternion_t; res: Pgraphene_vec4_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_quaternion_to_vec4'{$endif};
procedure graphene_ray_free(r: Pgraphene_ray_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_ray_free'{$endif};
procedure graphene_ray_get_closest_point_to_point(r: Pgraphene_ray_t; p: Pgraphene_point3d_t; res: Pgraphene_point3d_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_ray_get_closest_point_to_point'{$endif};
procedure graphene_ray_get_direction(r: Pgraphene_ray_t; direction: Pgraphene_vec3_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_ray_get_direction'{$endif};
procedure graphene_ray_get_origin(r: Pgraphene_ray_t; origin: Pgraphene_point3d_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_ray_get_origin'{$endif};
procedure graphene_ray_get_position_at(r: Pgraphene_ray_t; t: gfloat; position: Pgraphene_point3d_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_ray_get_position_at'{$endif};
procedure graphene_rect_expand(r: Pgraphene_rect_t; p: Pgraphene_point_t; res: Pgraphene_rect_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_rect_expand'{$endif};
procedure graphene_rect_free(r: Pgraphene_rect_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_rect_free'{$endif};
procedure graphene_rect_get_bottom_left(r: Pgraphene_rect_t; p: Pgraphene_point_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_rect_get_bottom_left'{$endif};
procedure graphene_rect_get_bottom_right(r: Pgraphene_rect_t; p: Pgraphene_point_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_rect_get_bottom_right'{$endif};
procedure graphene_rect_get_center(r: Pgraphene_rect_t; p: Pgraphene_point_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_rect_get_center'{$endif};
procedure graphene_rect_get_top_left(r: Pgraphene_rect_t; p: Pgraphene_point_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_rect_get_top_left'{$endif};
procedure graphene_rect_get_top_right(r: Pgraphene_rect_t; p: Pgraphene_point_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_rect_get_top_right'{$endif};
procedure graphene_rect_get_vertices(r: Pgraphene_rect_t; vertices: Pgraphene_vec2_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_rect_get_vertices'{$endif};
procedure graphene_rect_inset_r(r: Pgraphene_rect_t; d_x: gfloat; d_y: gfloat; res: Pgraphene_rect_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_rect_inset_r'{$endif};
procedure graphene_rect_interpolate(a: Pgraphene_rect_t; b: Pgraphene_rect_t; factor: gdouble; res: Pgraphene_rect_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_rect_interpolate'{$endif};
procedure graphene_rect_normalize_r(r: Pgraphene_rect_t; res: Pgraphene_rect_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_rect_normalize_r'{$endif};
procedure graphene_rect_offset_r(r: Pgraphene_rect_t; d_x: gfloat; d_y: gfloat; res: Pgraphene_rect_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_rect_offset_r'{$endif};
procedure graphene_rect_round_extents(r: Pgraphene_rect_t; res: Pgraphene_rect_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_rect_round_extents'{$endif};
procedure graphene_rect_scale(r: Pgraphene_rect_t; s_h: gfloat; s_v: gfloat; res: Pgraphene_rect_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_rect_scale'{$endif};
procedure graphene_rect_union(a: Pgraphene_rect_t; b: Pgraphene_rect_t; res: Pgraphene_rect_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_rect_union'{$endif};
procedure graphene_size_free(s: Pgraphene_size_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_size_free'{$endif};
procedure graphene_size_interpolate(a: Pgraphene_size_t; b: Pgraphene_size_t; factor: gdouble; res: Pgraphene_size_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_size_interpolate'{$endif};
procedure graphene_size_scale(s: Pgraphene_size_t; factor: gfloat; res: Pgraphene_size_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_size_scale'{$endif};
procedure graphene_sphere_free(s: Pgraphene_sphere_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_sphere_free'{$endif};
procedure graphene_sphere_get_bounding_box(s: Pgraphene_sphere_t; box: Pgraphene_box_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_sphere_get_bounding_box'{$endif};
procedure graphene_sphere_get_center(s: Pgraphene_sphere_t; center: Pgraphene_point3d_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_sphere_get_center'{$endif};
procedure graphene_sphere_translate(s: Pgraphene_sphere_t; point: Pgraphene_point3d_t; res: Pgraphene_sphere_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_sphere_translate'{$endif};
procedure graphene_triangle_free(t: Pgraphene_triangle_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_triangle_free'{$endif};
procedure graphene_triangle_get_bounding_box(t: Pgraphene_triangle_t; res: Pgraphene_box_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_triangle_get_bounding_box'{$endif};
procedure graphene_triangle_get_midpoint(t: Pgraphene_triangle_t; res: Pgraphene_point3d_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_triangle_get_midpoint'{$endif};
procedure graphene_triangle_get_normal(t: Pgraphene_triangle_t; res: Pgraphene_vec3_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_triangle_get_normal'{$endif};
procedure graphene_triangle_get_plane(t: Pgraphene_triangle_t; res: Pgraphene_plane_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_triangle_get_plane'{$endif};
procedure graphene_triangle_get_points(t: Pgraphene_triangle_t; a: Pgraphene_point3d_t; b: Pgraphene_point3d_t; c: Pgraphene_point3d_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_triangle_get_points'{$endif};
procedure graphene_triangle_get_vertices(t: Pgraphene_triangle_t; a: Pgraphene_vec3_t; b: Pgraphene_vec3_t; c: Pgraphene_vec3_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_triangle_get_vertices'{$endif};
procedure graphene_vec2_add(a: Pgraphene_vec2_t; b: Pgraphene_vec2_t; res: Pgraphene_vec2_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec2_add'{$endif};
procedure graphene_vec2_divide(a: Pgraphene_vec2_t; b: Pgraphene_vec2_t; res: Pgraphene_vec2_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec2_divide'{$endif};
procedure graphene_vec2_free(v: Pgraphene_vec2_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec2_free'{$endif};
procedure graphene_vec2_interpolate(v1: Pgraphene_vec2_t; v2: Pgraphene_vec2_t; factor: gdouble; res: Pgraphene_vec2_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec2_interpolate'{$endif};
procedure graphene_vec2_max(a: Pgraphene_vec2_t; b: Pgraphene_vec2_t; res: Pgraphene_vec2_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec2_max'{$endif};
procedure graphene_vec2_min(a: Pgraphene_vec2_t; b: Pgraphene_vec2_t; res: Pgraphene_vec2_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec2_min'{$endif};
procedure graphene_vec2_multiply(a: Pgraphene_vec2_t; b: Pgraphene_vec2_t; res: Pgraphene_vec2_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec2_multiply'{$endif};
procedure graphene_vec2_negate(v: Pgraphene_vec2_t; res: Pgraphene_vec2_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec2_negate'{$endif};
procedure graphene_vec2_normalize(v: Pgraphene_vec2_t; res: Pgraphene_vec2_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec2_normalize'{$endif};
procedure graphene_vec2_scale(v: Pgraphene_vec2_t; factor: gfloat; res: Pgraphene_vec2_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec2_scale'{$endif};
procedure graphene_vec2_subtract(a: Pgraphene_vec2_t; b: Pgraphene_vec2_t; res: Pgraphene_vec2_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec2_subtract'{$endif};
procedure graphene_vec2_to_float(v: Pgraphene_vec2_t; dest: Pgfloat); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec2_to_float'{$endif};
procedure graphene_vec3_add(a: Pgraphene_vec3_t; b: Pgraphene_vec3_t; res: Pgraphene_vec3_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec3_add'{$endif};
procedure graphene_vec3_cross(a: Pgraphene_vec3_t; b: Pgraphene_vec3_t; res: Pgraphene_vec3_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec3_cross'{$endif};
procedure graphene_vec3_divide(a: Pgraphene_vec3_t; b: Pgraphene_vec3_t; res: Pgraphene_vec3_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec3_divide'{$endif};
procedure graphene_vec3_free(v: Pgraphene_vec3_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec3_free'{$endif};
procedure graphene_vec3_get_xy(v: Pgraphene_vec3_t; res: Pgraphene_vec2_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec3_get_xy'{$endif};
procedure graphene_vec3_get_xy0(v: Pgraphene_vec3_t; res: Pgraphene_vec3_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec3_get_xy0'{$endif};
procedure graphene_vec3_get_xyz0(v: Pgraphene_vec3_t; res: Pgraphene_vec4_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec3_get_xyz0'{$endif};
procedure graphene_vec3_get_xyz1(v: Pgraphene_vec3_t; res: Pgraphene_vec4_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec3_get_xyz1'{$endif};
procedure graphene_vec3_get_xyzw(v: Pgraphene_vec3_t; w: gfloat; res: Pgraphene_vec4_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec3_get_xyzw'{$endif};
procedure graphene_vec3_interpolate(v1: Pgraphene_vec3_t; v2: Pgraphene_vec3_t; factor: gdouble; res: Pgraphene_vec3_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec3_interpolate'{$endif};
procedure graphene_vec3_max(a: Pgraphene_vec3_t; b: Pgraphene_vec3_t; res: Pgraphene_vec3_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec3_max'{$endif};
procedure graphene_vec3_min(a: Pgraphene_vec3_t; b: Pgraphene_vec3_t; res: Pgraphene_vec3_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec3_min'{$endif};
procedure graphene_vec3_multiply(a: Pgraphene_vec3_t; b: Pgraphene_vec3_t; res: Pgraphene_vec3_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec3_multiply'{$endif};
procedure graphene_vec3_negate(v: Pgraphene_vec3_t; res: Pgraphene_vec3_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec3_negate'{$endif};
procedure graphene_vec3_normalize(v: Pgraphene_vec3_t; res: Pgraphene_vec3_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec3_normalize'{$endif};
procedure graphene_vec3_scale(v: Pgraphene_vec3_t; factor: gfloat; res: Pgraphene_vec3_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec3_scale'{$endif};
procedure graphene_vec3_subtract(a: Pgraphene_vec3_t; b: Pgraphene_vec3_t; res: Pgraphene_vec3_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec3_subtract'{$endif};
procedure graphene_vec3_to_float(v: Pgraphene_vec3_t; dest: Pgfloat); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec3_to_float'{$endif};
procedure graphene_vec4_add(a: Pgraphene_vec4_t; b: Pgraphene_vec4_t; res: Pgraphene_vec4_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec4_add'{$endif};
procedure graphene_vec4_divide(a: Pgraphene_vec4_t; b: Pgraphene_vec4_t; res: Pgraphene_vec4_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec4_divide'{$endif};
procedure graphene_vec4_free(v: Pgraphene_vec4_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec4_free'{$endif};
procedure graphene_vec4_get_xy(v: Pgraphene_vec4_t; res: Pgraphene_vec2_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec4_get_xy'{$endif};
procedure graphene_vec4_get_xyz(v: Pgraphene_vec4_t; res: Pgraphene_vec3_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec4_get_xyz'{$endif};
procedure graphene_vec4_interpolate(v1: Pgraphene_vec4_t; v2: Pgraphene_vec4_t; factor: gdouble; res: Pgraphene_vec4_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec4_interpolate'{$endif};
procedure graphene_vec4_max(a: Pgraphene_vec4_t; b: Pgraphene_vec4_t; res: Pgraphene_vec4_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec4_max'{$endif};
procedure graphene_vec4_min(a: Pgraphene_vec4_t; b: Pgraphene_vec4_t; res: Pgraphene_vec4_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec4_min'{$endif};
procedure graphene_vec4_multiply(a: Pgraphene_vec4_t; b: Pgraphene_vec4_t; res: Pgraphene_vec4_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec4_multiply'{$endif};
procedure graphene_vec4_negate(v: Pgraphene_vec4_t; res: Pgraphene_vec4_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec4_negate'{$endif};
procedure graphene_vec4_normalize(v: Pgraphene_vec4_t; res: Pgraphene_vec4_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec4_normalize'{$endif};
procedure graphene_vec4_scale(v: Pgraphene_vec4_t; factor: gfloat; res: Pgraphene_vec4_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec4_scale'{$endif};
procedure graphene_vec4_subtract(a: Pgraphene_vec4_t; b: Pgraphene_vec4_t; res: Pgraphene_vec4_t); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec4_subtract'{$endif};
procedure graphene_vec4_to_float(v: Pgraphene_vec4_t; dest: Pgfloat); cdecl; external {$ifdef Mswindows}Graphene1_library  name 'graphene_vec4_to_float'{$endif};
implementation
function Tgraphene_vec3_t.alloc: Pgraphene_vec3_t; cdecl;
begin
  Result := Graphene1.graphene_vec3_alloc();
end;

procedure Tgraphene_vec3_t.add(b: Pgraphene_vec3_t; res: Pgraphene_vec3_t); cdecl;
begin
  Graphene1.graphene_vec3_add(@self, b, res);
end;

procedure Tgraphene_vec3_t.cross(b: Pgraphene_vec3_t; res: Pgraphene_vec3_t); cdecl;
begin
  Graphene1.graphene_vec3_cross(@self, b, res);
end;

procedure Tgraphene_vec3_t.divide(b: Pgraphene_vec3_t; res: Pgraphene_vec3_t); cdecl;
begin
  Graphene1.graphene_vec3_divide(@self, b, res);
end;

function Tgraphene_vec3_t.dot(b: Pgraphene_vec3_t): gfloat; cdecl;
begin
  Result := Graphene1.graphene_vec3_dot(@self, b);
end;

function Tgraphene_vec3_t.equal(v2: Pgraphene_vec3_t): gboolean; cdecl;
begin
  Result := Graphene1.graphene_vec3_equal(@self, v2);
end;

procedure Tgraphene_vec3_t.free; cdecl;
begin
  Graphene1.graphene_vec3_free(@self);
end;

function Tgraphene_vec3_t.get_x: gfloat; cdecl;
begin
  Result := Graphene1.graphene_vec3_get_x(@self);
end;

procedure Tgraphene_vec3_t.get_xy(res: Pgraphene_vec2_t); cdecl;
begin
  Graphene1.graphene_vec3_get_xy(@self, res);
end;

procedure Tgraphene_vec3_t.get_xy0(res: Pgraphene_vec3_t); cdecl;
begin
  Graphene1.graphene_vec3_get_xy0(@self, res);
end;

procedure Tgraphene_vec3_t.get_xyz0(res: Pgraphene_vec4_t); cdecl;
begin
  Graphene1.graphene_vec3_get_xyz0(@self, res);
end;

procedure Tgraphene_vec3_t.get_xyz1(res: Pgraphene_vec4_t); cdecl;
begin
  Graphene1.graphene_vec3_get_xyz1(@self, res);
end;

procedure Tgraphene_vec3_t.get_xyzw(w: gfloat; res: Pgraphene_vec4_t); cdecl;
begin
  Graphene1.graphene_vec3_get_xyzw(@self, w, res);
end;

function Tgraphene_vec3_t.get_y: gfloat; cdecl;
begin
  Result := Graphene1.graphene_vec3_get_y(@self);
end;

function Tgraphene_vec3_t.get_z: gfloat; cdecl;
begin
  Result := Graphene1.graphene_vec3_get_z(@self);
end;

function Tgraphene_vec3_t.init(x: gfloat; y: gfloat; z: gfloat): Pgraphene_vec3_t; cdecl;
begin
  Result := Graphene1.graphene_vec3_init(@self, x, y, z);
end;

function Tgraphene_vec3_t.init_from_float(src: Pgfloat): Pgraphene_vec3_t; cdecl;
begin
  Result := Graphene1.graphene_vec3_init_from_float(@self, src);
end;

function Tgraphene_vec3_t.init_from_vec3(src: Pgraphene_vec3_t): Pgraphene_vec3_t; cdecl;
begin
  Result := Graphene1.graphene_vec3_init_from_vec3(@self, src);
end;

procedure Tgraphene_vec3_t.interpolate(v2: Pgraphene_vec3_t; factor: gdouble; res: Pgraphene_vec3_t); cdecl;
begin
  Graphene1.graphene_vec3_interpolate(@self, v2, factor, res);
end;

function Tgraphene_vec3_t.length: gfloat; cdecl;
begin
  Result := Graphene1.graphene_vec3_length(@self);
end;

procedure Tgraphene_vec3_t.max(b: Pgraphene_vec3_t; res: Pgraphene_vec3_t); cdecl;
begin
  Graphene1.graphene_vec3_max(@self, b, res);
end;

procedure Tgraphene_vec3_t.min(b: Pgraphene_vec3_t; res: Pgraphene_vec3_t); cdecl;
begin
  Graphene1.graphene_vec3_min(@self, b, res);
end;

procedure Tgraphene_vec3_t.multiply(b: Pgraphene_vec3_t; res: Pgraphene_vec3_t); cdecl;
begin
  Graphene1.graphene_vec3_multiply(@self, b, res);
end;

function Tgraphene_vec3_t.near(v2: Pgraphene_vec3_t; epsilon: gfloat): gboolean; cdecl;
begin
  Result := Graphene1.graphene_vec3_near(@self, v2, epsilon);
end;

procedure Tgraphene_vec3_t.negate(res: Pgraphene_vec3_t); cdecl;
begin
  Graphene1.graphene_vec3_negate(@self, res);
end;

procedure Tgraphene_vec3_t.normalize(res: Pgraphene_vec3_t); cdecl;
begin
  Graphene1.graphene_vec3_normalize(@self, res);
end;

procedure Tgraphene_vec3_t.scale(factor: gfloat; res: Pgraphene_vec3_t); cdecl;
begin
  Graphene1.graphene_vec3_scale(@self, factor, res);
end;

procedure Tgraphene_vec3_t.subtract(b: Pgraphene_vec3_t; res: Pgraphene_vec3_t); cdecl;
begin
  Graphene1.graphene_vec3_subtract(@self, b, res);
end;

procedure Tgraphene_vec3_t.to_float(dest: Pgfloat); cdecl;
begin
  Graphene1.graphene_vec3_to_float(@self, dest);
end;

function Tgraphene_vec3_t.one: Pgraphene_vec3_t; cdecl;
begin
  Result := Graphene1.graphene_vec3_one();
end;

function Tgraphene_vec3_t.x_axis: Pgraphene_vec3_t; cdecl;
begin
  Result := Graphene1.graphene_vec3_x_axis();
end;

function Tgraphene_vec3_t.y_axis: Pgraphene_vec3_t; cdecl;
begin
  Result := Graphene1.graphene_vec3_y_axis();
end;

function Tgraphene_vec3_t.z_axis: Pgraphene_vec3_t; cdecl;
begin
  Result := Graphene1.graphene_vec3_z_axis();
end;

function Tgraphene_vec3_t.zero: Pgraphene_vec3_t; cdecl;
begin
  Result := Graphene1.graphene_vec3_zero();
end;

function Tgraphene_box_t.alloc: Pgraphene_box_t; cdecl;
begin
  Result := Graphene1.graphene_box_alloc();
end;

function Tgraphene_box_t.contains_box(b: Pgraphene_box_t): gboolean; cdecl;
begin
  Result := Graphene1.graphene_box_contains_box(@self, b);
end;

function Tgraphene_box_t.contains_point(point: Pgraphene_point3d_t): gboolean; cdecl;
begin
  Result := Graphene1.graphene_box_contains_point(@self, point);
end;

function Tgraphene_box_t.equal(b: Pgraphene_box_t): gboolean; cdecl;
begin
  Result := Graphene1.graphene_box_equal(@self, b);
end;

procedure Tgraphene_box_t.expand(point: Pgraphene_point3d_t; res: Pgraphene_box_t); cdecl;
begin
  Graphene1.graphene_box_expand(@self, point, res);
end;

procedure Tgraphene_box_t.expand_scalar(scalar: gfloat; res: Pgraphene_box_t); cdecl;
begin
  Graphene1.graphene_box_expand_scalar(@self, scalar, res);
end;

procedure Tgraphene_box_t.expand_vec3(vec: Pgraphene_vec3_t; res: Pgraphene_box_t); cdecl;
begin
  Graphene1.graphene_box_expand_vec3(@self, vec, res);
end;

procedure Tgraphene_box_t.free; cdecl;
begin
  Graphene1.graphene_box_free(@self);
end;

procedure Tgraphene_box_t.get_bounding_sphere(sphere: Pgraphene_sphere_t); cdecl;
begin
  Graphene1.graphene_box_get_bounding_sphere(@self, sphere);
end;

procedure Tgraphene_box_t.get_center(center: Pgraphene_point3d_t); cdecl;
begin
  Graphene1.graphene_box_get_center(@self, center);
end;

function Tgraphene_box_t.get_depth: gfloat; cdecl;
begin
  Result := Graphene1.graphene_box_get_depth(@self);
end;

function Tgraphene_box_t.get_height: gfloat; cdecl;
begin
  Result := Graphene1.graphene_box_get_height(@self);
end;

procedure Tgraphene_box_t.get_max(max: Pgraphene_point3d_t); cdecl;
begin
  Graphene1.graphene_box_get_max(@self, max);
end;

procedure Tgraphene_box_t.get_min(min: Pgraphene_point3d_t); cdecl;
begin
  Graphene1.graphene_box_get_min(@self, min);
end;

procedure Tgraphene_box_t.get_size(size: Pgraphene_vec3_t); cdecl;
begin
  Graphene1.graphene_box_get_size(@self, size);
end;

procedure Tgraphene_box_t.get_vertices(vertices: Pgraphene_vec3_t); cdecl;
begin
  Graphene1.graphene_box_get_vertices(@self, vertices);
end;

function Tgraphene_box_t.get_width: gfloat; cdecl;
begin
  Result := Graphene1.graphene_box_get_width(@self);
end;

function Tgraphene_box_t.init(min: Pgraphene_point3d_t; max: Pgraphene_point3d_t): Pgraphene_box_t; cdecl;
begin
  Result := Graphene1.graphene_box_init(@self, min, max);
end;

function Tgraphene_box_t.init_from_box(src: Pgraphene_box_t): Pgraphene_box_t; cdecl;
begin
  Result := Graphene1.graphene_box_init_from_box(@self, src);
end;

function Tgraphene_box_t.init_from_points(n_points: guint; points: Pgraphene_point3d_t): Pgraphene_box_t; cdecl;
begin
  Result := Graphene1.graphene_box_init_from_points(@self, n_points, points);
end;

function Tgraphene_box_t.init_from_vec3(min: Pgraphene_vec3_t; max: Pgraphene_vec3_t): Pgraphene_box_t; cdecl;
begin
  Result := Graphene1.graphene_box_init_from_vec3(@self, min, max);
end;

function Tgraphene_box_t.init_from_vectors(n_vectors: guint; vectors: Pgraphene_vec3_t): Pgraphene_box_t; cdecl;
begin
  Result := Graphene1.graphene_box_init_from_vectors(@self, n_vectors, vectors);
end;

function Tgraphene_box_t.intersection(b: Pgraphene_box_t; res: Pgraphene_box_t): gboolean; cdecl;
begin
  Result := Graphene1.graphene_box_intersection(@self, b, res);
end;

procedure Tgraphene_box_t.union(b: Pgraphene_box_t; res: Pgraphene_box_t); cdecl;
begin
  Graphene1.graphene_box_union(@self, b, res);
end;

function Tgraphene_box_t.empty: Pgraphene_box_t; cdecl;
begin
  Result := Graphene1.graphene_box_empty();
end;

function Tgraphene_box_t.infinite: Pgraphene_box_t; cdecl;
begin
  Result := Graphene1.graphene_box_infinite();
end;

function Tgraphene_box_t.minus_one: Pgraphene_box_t; cdecl;
begin
  Result := Graphene1.graphene_box_minus_one();
end;

function Tgraphene_box_t.one: Pgraphene_box_t; cdecl;
begin
  Result := Graphene1.graphene_box_one();
end;

function Tgraphene_box_t.one_minus_one: Pgraphene_box_t; cdecl;
begin
  Result := Graphene1.graphene_box_one_minus_one();
end;

function Tgraphene_box_t.zero: Pgraphene_box_t; cdecl;
begin
  Result := Graphene1.graphene_box_zero();
end;

function Tgraphene_point3d_t.alloc: Pgraphene_point3d_t; cdecl;
begin
  Result := Graphene1.graphene_point3d_alloc();
end;

procedure Tgraphene_point3d_t.cross(b: Pgraphene_point3d_t; res: Pgraphene_point3d_t); cdecl;
begin
  Graphene1.graphene_point3d_cross(@self, b, res);
end;

function Tgraphene_point3d_t.distance(b: Pgraphene_point3d_t; delta: Pgraphene_vec3_t): gfloat; cdecl;
begin
  Result := Graphene1.graphene_point3d_distance(@self, b, delta);
end;

function Tgraphene_point3d_t.dot(b: Pgraphene_point3d_t): gfloat; cdecl;
begin
  Result := Graphene1.graphene_point3d_dot(@self, b);
end;

function Tgraphene_point3d_t.equal(b: Pgraphene_point3d_t): gboolean; cdecl;
begin
  Result := Graphene1.graphene_point3d_equal(@self, b);
end;

procedure Tgraphene_point3d_t.free; cdecl;
begin
  Graphene1.graphene_point3d_free(@self);
end;

function Tgraphene_point3d_t.init(x: gfloat; y: gfloat; z: gfloat): Pgraphene_point3d_t; cdecl;
begin
  Result := Graphene1.graphene_point3d_init(@self, x, y, z);
end;

function Tgraphene_point3d_t.init_from_point(src: Pgraphene_point3d_t): Pgraphene_point3d_t; cdecl;
begin
  Result := Graphene1.graphene_point3d_init_from_point(@self, src);
end;

function Tgraphene_point3d_t.init_from_vec3(v: Pgraphene_vec3_t): Pgraphene_point3d_t; cdecl;
begin
  Result := Graphene1.graphene_point3d_init_from_vec3(@self, v);
end;

procedure Tgraphene_point3d_t.interpolate(b: Pgraphene_point3d_t; factor: gdouble; res: Pgraphene_point3d_t); cdecl;
begin
  Graphene1.graphene_point3d_interpolate(@self, b, factor, res);
end;

function Tgraphene_point3d_t.length: gfloat; cdecl;
begin
  Result := Graphene1.graphene_point3d_length(@self);
end;

function Tgraphene_point3d_t.near(b: Pgraphene_point3d_t; epsilon: gfloat): gboolean; cdecl;
begin
  Result := Graphene1.graphene_point3d_near(@self, b, epsilon);
end;

procedure Tgraphene_point3d_t.normalize(res: Pgraphene_point3d_t); cdecl;
begin
  Graphene1.graphene_point3d_normalize(@self, res);
end;

procedure Tgraphene_point3d_t.normalize_viewport(viewport: Pgraphene_rect_t; z_near: gfloat; z_far: gfloat; res: Pgraphene_point3d_t); cdecl;
begin
  Graphene1.graphene_point3d_normalize_viewport(@self, viewport, z_near, z_far, res);
end;

procedure Tgraphene_point3d_t.scale(factor: gfloat; res: Pgraphene_point3d_t); cdecl;
begin
  Graphene1.graphene_point3d_scale(@self, factor, res);
end;

procedure Tgraphene_point3d_t.to_vec3(v: Pgraphene_vec3_t); cdecl;
begin
  Graphene1.graphene_point3d_to_vec3(@self, v);
end;

function Tgraphene_point3d_t.zero: Pgraphene_point3d_t; cdecl;
begin
  Result := Graphene1.graphene_point3d_zero();
end;

function Tgraphene_sphere_t.alloc: Pgraphene_sphere_t; cdecl;
begin
  Result := Graphene1.graphene_sphere_alloc();
end;

function Tgraphene_sphere_t.contains_point(point: Pgraphene_point3d_t): gboolean; cdecl;
begin
  Result := Graphene1.graphene_sphere_contains_point(@self, point);
end;

function Tgraphene_sphere_t.distance(point: Pgraphene_point3d_t): gfloat; cdecl;
begin
  Result := Graphene1.graphene_sphere_distance(@self, point);
end;

function Tgraphene_sphere_t.equal(b: Pgraphene_sphere_t): gboolean; cdecl;
begin
  Result := Graphene1.graphene_sphere_equal(@self, b);
end;

procedure Tgraphene_sphere_t.free; cdecl;
begin
  Graphene1.graphene_sphere_free(@self);
end;

procedure Tgraphene_sphere_t.get_bounding_box(box: Pgraphene_box_t); cdecl;
begin
  Graphene1.graphene_sphere_get_bounding_box(@self, box);
end;

procedure Tgraphene_sphere_t.get_center(center: Pgraphene_point3d_t); cdecl;
begin
  Graphene1.graphene_sphere_get_center(@self, center);
end;

function Tgraphene_sphere_t.get_radius: gfloat; cdecl;
begin
  Result := Graphene1.graphene_sphere_get_radius(@self);
end;

function Tgraphene_sphere_t.init(center: Pgraphene_point3d_t; radius: gfloat): Pgraphene_sphere_t; cdecl;
begin
  Result := Graphene1.graphene_sphere_init(@self, center, radius);
end;

function Tgraphene_sphere_t.init_from_points(n_points: guint; points: Pgraphene_point3d_t; center: Pgraphene_point3d_t): Pgraphene_sphere_t; cdecl;
begin
  Result := Graphene1.graphene_sphere_init_from_points(@self, n_points, points, center);
end;

function Tgraphene_sphere_t.init_from_vectors(n_vectors: guint; vectors: Pgraphene_vec3_t; center: Pgraphene_point3d_t): Pgraphene_sphere_t; cdecl;
begin
  Result := Graphene1.graphene_sphere_init_from_vectors(@self, n_vectors, vectors, center);
end;

function Tgraphene_sphere_t.is_empty: gboolean; cdecl;
begin
  Result := Graphene1.graphene_sphere_is_empty(@self);
end;

procedure Tgraphene_sphere_t.translate(point: Pgraphene_point3d_t; res: Pgraphene_sphere_t); cdecl;
begin
  Graphene1.graphene_sphere_translate(@self, point, res);
end;

function Tgraphene_euler_t.alloc: Pgraphene_euler_t; cdecl;
begin
  Result := Graphene1.graphene_euler_alloc();
end;

function Tgraphene_euler_t.equal(b: Pgraphene_euler_t): gboolean; cdecl;
begin
  Result := Graphene1.graphene_euler_equal(@self, b);
end;

procedure Tgraphene_euler_t.free; cdecl;
begin
  Graphene1.graphene_euler_free(@self);
end;

function Tgraphene_euler_t.get_alpha: gfloat; cdecl;
begin
  Result := Graphene1.graphene_euler_get_alpha(@self);
end;

function Tgraphene_euler_t.get_beta: gfloat; cdecl;
begin
  Result := Graphene1.graphene_euler_get_beta(@self);
end;

function Tgraphene_euler_t.get_gamma: gfloat; cdecl;
begin
  Result := Graphene1.graphene_euler_get_gamma(@self);
end;

function Tgraphene_euler_t.get_order: Tgraphene_euler_order_t; cdecl;
begin
  Result := Graphene1.graphene_euler_get_order(@self);
end;

function Tgraphene_euler_t.get_x: gfloat; cdecl;
begin
  Result := Graphene1.graphene_euler_get_x(@self);
end;

function Tgraphene_euler_t.get_y: gfloat; cdecl;
begin
  Result := Graphene1.graphene_euler_get_y(@self);
end;

function Tgraphene_euler_t.get_z: gfloat; cdecl;
begin
  Result := Graphene1.graphene_euler_get_z(@self);
end;

function Tgraphene_euler_t.init(x: gfloat; y: gfloat; z: gfloat): Pgraphene_euler_t; cdecl;
begin
  Result := Graphene1.graphene_euler_init(@self, x, y, z);
end;

function Tgraphene_euler_t.init_from_euler(src: Pgraphene_euler_t): Pgraphene_euler_t; cdecl;
begin
  Result := Graphene1.graphene_euler_init_from_euler(@self, src);
end;

function Tgraphene_euler_t.init_from_matrix(m: Pgraphene_matrix_t; order: Tgraphene_euler_order_t): Pgraphene_euler_t; cdecl;
begin
  Result := Graphene1.graphene_euler_init_from_matrix(@self, m, order);
end;

function Tgraphene_euler_t.init_from_quaternion(q: Pgraphene_quaternion_t; order: Tgraphene_euler_order_t): Pgraphene_euler_t; cdecl;
begin
  Result := Graphene1.graphene_euler_init_from_quaternion(@self, q, order);
end;

function Tgraphene_euler_t.init_from_radians(x: gfloat; y: gfloat; z: gfloat; order: Tgraphene_euler_order_t): Pgraphene_euler_t; cdecl;
begin
  Result := Graphene1.graphene_euler_init_from_radians(@self, x, y, z, order);
end;

function Tgraphene_euler_t.init_from_vec3(v: Pgraphene_vec3_t; order: Tgraphene_euler_order_t): Pgraphene_euler_t; cdecl;
begin
  Result := Graphene1.graphene_euler_init_from_vec3(@self, v, order);
end;

function Tgraphene_euler_t.init_with_order(x: gfloat; y: gfloat; z: gfloat; order: Tgraphene_euler_order_t): Pgraphene_euler_t; cdecl;
begin
  Result := Graphene1.graphene_euler_init_with_order(@self, x, y, z, order);
end;

procedure Tgraphene_euler_t.reorder(order: Tgraphene_euler_order_t; res: Pgraphene_euler_t); cdecl;
begin
  Graphene1.graphene_euler_reorder(@self, order, res);
end;

procedure Tgraphene_euler_t.to_matrix(res: Pgraphene_matrix_t); cdecl;
begin
  Graphene1.graphene_euler_to_matrix(@self, res);
end;

procedure Tgraphene_euler_t.to_quaternion(res: Pgraphene_quaternion_t); cdecl;
begin
  Graphene1.graphene_euler_to_quaternion(@self, res);
end;

procedure Tgraphene_euler_t.to_vec3(res: Pgraphene_vec3_t); cdecl;
begin
  Graphene1.graphene_euler_to_vec3(@self, res);
end;

function Tgraphene_matrix_t.alloc: Pgraphene_matrix_t; cdecl;
begin
  Result := Graphene1.graphene_matrix_alloc();
end;

function Tgraphene_matrix_t.decompose(translate: Pgraphene_vec3_t; scale: Pgraphene_vec3_t; rotate: Pgraphene_quaternion_t; shear: Pgraphene_vec3_t; perspective: Pgraphene_vec4_t): gboolean; cdecl;
begin
  Result := Graphene1.graphene_matrix_decompose(@self, translate, scale, rotate, shear, perspective);
end;

function Tgraphene_matrix_t.determinant: gfloat; cdecl;
begin
  Result := Graphene1.graphene_matrix_determinant(@self);
end;

function Tgraphene_matrix_t.equal(b: Pgraphene_matrix_t): gboolean; cdecl;
begin
  Result := Graphene1.graphene_matrix_equal(@self, b);
end;

function Tgraphene_matrix_t.equal_fast(b: Pgraphene_matrix_t): gboolean; cdecl;
begin
  Result := Graphene1.graphene_matrix_equal_fast(@self, b);
end;

procedure Tgraphene_matrix_t.free; cdecl;
begin
  Graphene1.graphene_matrix_free(@self);
end;

procedure Tgraphene_matrix_t.get_row(index_: guint; res: Pgraphene_vec4_t); cdecl;
begin
  Graphene1.graphene_matrix_get_row(@self, index_, res);
end;

function Tgraphene_matrix_t.get_value(row: guint; col: guint): gfloat; cdecl;
begin
  Result := Graphene1.graphene_matrix_get_value(@self, row, col);
end;

function Tgraphene_matrix_t.get_x_scale: gfloat; cdecl;
begin
  Result := Graphene1.graphene_matrix_get_x_scale(@self);
end;

function Tgraphene_matrix_t.get_x_translation: gfloat; cdecl;
begin
  Result := Graphene1.graphene_matrix_get_x_translation(@self);
end;

function Tgraphene_matrix_t.get_y_scale: gfloat; cdecl;
begin
  Result := Graphene1.graphene_matrix_get_y_scale(@self);
end;

function Tgraphene_matrix_t.get_y_translation: gfloat; cdecl;
begin
  Result := Graphene1.graphene_matrix_get_y_translation(@self);
end;

function Tgraphene_matrix_t.get_z_scale: gfloat; cdecl;
begin
  Result := Graphene1.graphene_matrix_get_z_scale(@self);
end;

function Tgraphene_matrix_t.get_z_translation: gfloat; cdecl;
begin
  Result := Graphene1.graphene_matrix_get_z_translation(@self);
end;

function Tgraphene_matrix_t.init_from_2d(xx: gdouble; yx: gdouble; xy: gdouble; yy: gdouble; x_0: gdouble; y_0: gdouble): Pgraphene_matrix_t; cdecl;
begin
  Result := Graphene1.graphene_matrix_init_from_2d(@self, xx, yx, xy, yy, x_0, y_0);
end;

function Tgraphene_matrix_t.init_from_float(v: Pgfloat): Pgraphene_matrix_t; cdecl;
begin
  Result := Graphene1.graphene_matrix_init_from_float(@self, v);
end;

function Tgraphene_matrix_t.init_from_matrix(src: Pgraphene_matrix_t): Pgraphene_matrix_t; cdecl;
begin
  Result := Graphene1.graphene_matrix_init_from_matrix(@self, src);
end;

function Tgraphene_matrix_t.init_from_vec4(v0: Pgraphene_vec4_t; v1: Pgraphene_vec4_t; v2: Pgraphene_vec4_t; v3: Pgraphene_vec4_t): Pgraphene_matrix_t; cdecl;
begin
  Result := Graphene1.graphene_matrix_init_from_vec4(@self, v0, v1, v2, v3);
end;

function Tgraphene_matrix_t.init_frustum(left: gfloat; right: gfloat; bottom: gfloat; top: gfloat; z_near: gfloat; z_far: gfloat): Pgraphene_matrix_t; cdecl;
begin
  Result := Graphene1.graphene_matrix_init_frustum(@self, left, right, bottom, top, z_near, z_far);
end;

function Tgraphene_matrix_t.init_identity: Pgraphene_matrix_t; cdecl;
begin
  Result := Graphene1.graphene_matrix_init_identity(@self);
end;

function Tgraphene_matrix_t.init_look_at(eye: Pgraphene_vec3_t; center: Pgraphene_vec3_t; up: Pgraphene_vec3_t): Pgraphene_matrix_t; cdecl;
begin
  Result := Graphene1.graphene_matrix_init_look_at(@self, eye, center, up);
end;

function Tgraphene_matrix_t.init_ortho(left: gfloat; right: gfloat; top: gfloat; bottom: gfloat; z_near: gfloat; z_far: gfloat): Pgraphene_matrix_t; cdecl;
begin
  Result := Graphene1.graphene_matrix_init_ortho(@self, left, right, top, bottom, z_near, z_far);
end;

function Tgraphene_matrix_t.init_perspective(fovy: gfloat; aspect: gfloat; z_near: gfloat; z_far: gfloat): Pgraphene_matrix_t; cdecl;
begin
  Result := Graphene1.graphene_matrix_init_perspective(@self, fovy, aspect, z_near, z_far);
end;

function Tgraphene_matrix_t.init_rotate(angle: gfloat; axis: Pgraphene_vec3_t): Pgraphene_matrix_t; cdecl;
begin
  Result := Graphene1.graphene_matrix_init_rotate(@self, angle, axis);
end;

function Tgraphene_matrix_t.init_scale(x: gfloat; y: gfloat; z: gfloat): Pgraphene_matrix_t; cdecl;
begin
  Result := Graphene1.graphene_matrix_init_scale(@self, x, y, z);
end;

function Tgraphene_matrix_t.init_skew(x_skew: gfloat; y_skew: gfloat): Pgraphene_matrix_t; cdecl;
begin
  Result := Graphene1.graphene_matrix_init_skew(@self, x_skew, y_skew);
end;

function Tgraphene_matrix_t.init_translate(p: Pgraphene_point3d_t): Pgraphene_matrix_t; cdecl;
begin
  Result := Graphene1.graphene_matrix_init_translate(@self, p);
end;

procedure Tgraphene_matrix_t.interpolate(b: Pgraphene_matrix_t; factor: gdouble; res: Pgraphene_matrix_t); cdecl;
begin
  Graphene1.graphene_matrix_interpolate(@self, b, factor, res);
end;

function Tgraphene_matrix_t.inverse(res: Pgraphene_matrix_t): gboolean; cdecl;
begin
  Result := Graphene1.graphene_matrix_inverse(@self, res);
end;

function Tgraphene_matrix_t.is_2d: gboolean; cdecl;
begin
  Result := Graphene1.graphene_matrix_is_2d(@self);
end;

function Tgraphene_matrix_t.is_backface_visible: gboolean; cdecl;
begin
  Result := Graphene1.graphene_matrix_is_backface_visible(@self);
end;

function Tgraphene_matrix_t.is_identity: gboolean; cdecl;
begin
  Result := Graphene1.graphene_matrix_is_identity(@self);
end;

function Tgraphene_matrix_t.is_singular: gboolean; cdecl;
begin
  Result := Graphene1.graphene_matrix_is_singular(@self);
end;

procedure Tgraphene_matrix_t.multiply(b: Pgraphene_matrix_t; res: Pgraphene_matrix_t); cdecl;
begin
  Graphene1.graphene_matrix_multiply(@self, b, res);
end;

function Tgraphene_matrix_t.near(b: Pgraphene_matrix_t; epsilon: gfloat): gboolean; cdecl;
begin
  Result := Graphene1.graphene_matrix_near(@self, b, epsilon);
end;

procedure Tgraphene_matrix_t.normalize(res: Pgraphene_matrix_t); cdecl;
begin
  Graphene1.graphene_matrix_normalize(@self, res);
end;

procedure Tgraphene_matrix_t.perspective(depth: gfloat; res: Pgraphene_matrix_t); cdecl;
begin
  Graphene1.graphene_matrix_perspective(@self, depth, res);
end;

procedure Tgraphene_matrix_t.print; cdecl;
begin
  Graphene1.graphene_matrix_print(@self);
end;

procedure Tgraphene_matrix_t.project_point(p: Pgraphene_point_t; res: Pgraphene_point_t); cdecl;
begin
  Graphene1.graphene_matrix_project_point(@self, p, res);
end;

procedure Tgraphene_matrix_t.project_rect(r: Pgraphene_rect_t; res: Pgraphene_quad_t); cdecl;
begin
  Graphene1.graphene_matrix_project_rect(@self, r, res);
end;

procedure Tgraphene_matrix_t.project_rect_bounds(r: Pgraphene_rect_t; res: Pgraphene_rect_t); cdecl;
begin
  Graphene1.graphene_matrix_project_rect_bounds(@self, r, res);
end;

procedure Tgraphene_matrix_t.rotate(angle: gfloat; axis: Pgraphene_vec3_t); cdecl;
begin
  Graphene1.graphene_matrix_rotate(@self, angle, axis);
end;

procedure Tgraphene_matrix_t.rotate_euler(e: Pgraphene_euler_t); cdecl;
begin
  Graphene1.graphene_matrix_rotate_euler(@self, e);
end;

procedure Tgraphene_matrix_t.rotate_quaternion(q: Pgraphene_quaternion_t); cdecl;
begin
  Graphene1.graphene_matrix_rotate_quaternion(@self, q);
end;

procedure Tgraphene_matrix_t.rotate_x(angle: gfloat); cdecl;
begin
  Graphene1.graphene_matrix_rotate_x(@self, angle);
end;

procedure Tgraphene_matrix_t.rotate_y(angle: gfloat); cdecl;
begin
  Graphene1.graphene_matrix_rotate_y(@self, angle);
end;

procedure Tgraphene_matrix_t.rotate_z(angle: gfloat); cdecl;
begin
  Graphene1.graphene_matrix_rotate_z(@self, angle);
end;

procedure Tgraphene_matrix_t.scale(factor_x: gfloat; factor_y: gfloat; factor_z: gfloat); cdecl;
begin
  Graphene1.graphene_matrix_scale(@self, factor_x, factor_y, factor_z);
end;

procedure Tgraphene_matrix_t.skew_xy(factor: gfloat); cdecl;
begin
  Graphene1.graphene_matrix_skew_xy(@self, factor);
end;

procedure Tgraphene_matrix_t.skew_xz(factor: gfloat); cdecl;
begin
  Graphene1.graphene_matrix_skew_xz(@self, factor);
end;

procedure Tgraphene_matrix_t.skew_yz(factor: gfloat); cdecl;
begin
  Graphene1.graphene_matrix_skew_yz(@self, factor);
end;

function Tgraphene_matrix_t.to_2d(xx: Pgdouble; yx: Pgdouble; xy: Pgdouble; yy: Pgdouble; x_0: Pgdouble; y_0: Pgdouble): gboolean; cdecl;
begin
  Result := Graphene1.graphene_matrix_to_2d(@self, xx, yx, xy, yy, x_0, y_0);
end;

procedure Tgraphene_matrix_t.to_float(v: Pgfloat); cdecl;
begin
  Graphene1.graphene_matrix_to_float(@self, v);
end;

procedure Tgraphene_matrix_t.transform_bounds(r: Pgraphene_rect_t; res: Pgraphene_rect_t); cdecl;
begin
  Graphene1.graphene_matrix_transform_bounds(@self, r, res);
end;

procedure Tgraphene_matrix_t.transform_box(b: Pgraphene_box_t; res: Pgraphene_box_t); cdecl;
begin
  Graphene1.graphene_matrix_transform_box(@self, b, res);
end;

procedure Tgraphene_matrix_t.transform_point(p: Pgraphene_point_t; res: Pgraphene_point_t); cdecl;
begin
  Graphene1.graphene_matrix_transform_point(@self, p, res);
end;

procedure Tgraphene_matrix_t.transform_point3d(p: Pgraphene_point3d_t; res: Pgraphene_point3d_t); cdecl;
begin
  Graphene1.graphene_matrix_transform_point3d(@self, p, res);
end;

procedure Tgraphene_matrix_t.transform_ray(r: Pgraphene_ray_t; res: Pgraphene_ray_t); cdecl;
begin
  Graphene1.graphene_matrix_transform_ray(@self, r, res);
end;

procedure Tgraphene_matrix_t.transform_rect(r: Pgraphene_rect_t; res: Pgraphene_quad_t); cdecl;
begin
  Graphene1.graphene_matrix_transform_rect(@self, r, res);
end;

procedure Tgraphene_matrix_t.transform_sphere(s: Pgraphene_sphere_t; res: Pgraphene_sphere_t); cdecl;
begin
  Graphene1.graphene_matrix_transform_sphere(@self, s, res);
end;

procedure Tgraphene_matrix_t.transform_vec3(v: Pgraphene_vec3_t; res: Pgraphene_vec3_t); cdecl;
begin
  Graphene1.graphene_matrix_transform_vec3(@self, v, res);
end;

procedure Tgraphene_matrix_t.transform_vec4(v: Pgraphene_vec4_t; res: Pgraphene_vec4_t); cdecl;
begin
  Graphene1.graphene_matrix_transform_vec4(@self, v, res);
end;

procedure Tgraphene_matrix_t.translate(pos: Pgraphene_point3d_t); cdecl;
begin
  Graphene1.graphene_matrix_translate(@self, pos);
end;

procedure Tgraphene_matrix_t.transpose(res: Pgraphene_matrix_t); cdecl;
begin
  Graphene1.graphene_matrix_transpose(@self, res);
end;

procedure Tgraphene_matrix_t.unproject_point3d(modelview: Pgraphene_matrix_t; point: Pgraphene_point3d_t; res: Pgraphene_point3d_t); cdecl;
begin
  Graphene1.graphene_matrix_unproject_point3d(@self, modelview, point, res);
end;

procedure Tgraphene_matrix_t.untransform_bounds(r: Pgraphene_rect_t; bounds: Pgraphene_rect_t; res: Pgraphene_rect_t); cdecl;
begin
  Graphene1.graphene_matrix_untransform_bounds(@self, r, bounds, res);
end;

function Tgraphene_matrix_t.untransform_point(p: Pgraphene_point_t; bounds: Pgraphene_rect_t; res: Pgraphene_point_t): gboolean; cdecl;
begin
  Result := Graphene1.graphene_matrix_untransform_point(@self, p, bounds, res);
end;

function Tgraphene_quaternion_t.alloc: Pgraphene_quaternion_t; cdecl;
begin
  Result := Graphene1.graphene_quaternion_alloc();
end;

procedure Tgraphene_quaternion_t.add(b: Pgraphene_quaternion_t; res: Pgraphene_quaternion_t); cdecl;
begin
  Graphene1.graphene_quaternion_add(@self, b, res);
end;

function Tgraphene_quaternion_t.dot(b: Pgraphene_quaternion_t): gfloat; cdecl;
begin
  Result := Graphene1.graphene_quaternion_dot(@self, b);
end;

function Tgraphene_quaternion_t.equal(b: Pgraphene_quaternion_t): gboolean; cdecl;
begin
  Result := Graphene1.graphene_quaternion_equal(@self, b);
end;

procedure Tgraphene_quaternion_t.free; cdecl;
begin
  Graphene1.graphene_quaternion_free(@self);
end;

function Tgraphene_quaternion_t.init(x: gfloat; y: gfloat; z: gfloat; w: gfloat): Pgraphene_quaternion_t; cdecl;
begin
  Result := Graphene1.graphene_quaternion_init(@self, x, y, z, w);
end;

function Tgraphene_quaternion_t.init_from_angle_vec3(angle: gfloat; axis: Pgraphene_vec3_t): Pgraphene_quaternion_t; cdecl;
begin
  Result := Graphene1.graphene_quaternion_init_from_angle_vec3(@self, angle, axis);
end;

function Tgraphene_quaternion_t.init_from_angles(deg_x: gfloat; deg_y: gfloat; deg_z: gfloat): Pgraphene_quaternion_t; cdecl;
begin
  Result := Graphene1.graphene_quaternion_init_from_angles(@self, deg_x, deg_y, deg_z);
end;

function Tgraphene_quaternion_t.init_from_euler(e: Pgraphene_euler_t): Pgraphene_quaternion_t; cdecl;
begin
  Result := Graphene1.graphene_quaternion_init_from_euler(@self, e);
end;

function Tgraphene_quaternion_t.init_from_matrix(m: Pgraphene_matrix_t): Pgraphene_quaternion_t; cdecl;
begin
  Result := Graphene1.graphene_quaternion_init_from_matrix(@self, m);
end;

function Tgraphene_quaternion_t.init_from_quaternion(src: Pgraphene_quaternion_t): Pgraphene_quaternion_t; cdecl;
begin
  Result := Graphene1.graphene_quaternion_init_from_quaternion(@self, src);
end;

function Tgraphene_quaternion_t.init_from_radians(rad_x: gfloat; rad_y: gfloat; rad_z: gfloat): Pgraphene_quaternion_t; cdecl;
begin
  Result := Graphene1.graphene_quaternion_init_from_radians(@self, rad_x, rad_y, rad_z);
end;

function Tgraphene_quaternion_t.init_from_vec4(src: Pgraphene_vec4_t): Pgraphene_quaternion_t; cdecl;
begin
  Result := Graphene1.graphene_quaternion_init_from_vec4(@self, src);
end;

function Tgraphene_quaternion_t.init_identity: Pgraphene_quaternion_t; cdecl;
begin
  Result := Graphene1.graphene_quaternion_init_identity(@self);
end;

procedure Tgraphene_quaternion_t.invert(res: Pgraphene_quaternion_t); cdecl;
begin
  Graphene1.graphene_quaternion_invert(@self, res);
end;

procedure Tgraphene_quaternion_t.multiply(b: Pgraphene_quaternion_t; res: Pgraphene_quaternion_t); cdecl;
begin
  Graphene1.graphene_quaternion_multiply(@self, b, res);
end;

procedure Tgraphene_quaternion_t.normalize(res: Pgraphene_quaternion_t); cdecl;
begin
  Graphene1.graphene_quaternion_normalize(@self, res);
end;

procedure Tgraphene_quaternion_t.scale(factor: gfloat; res: Pgraphene_quaternion_t); cdecl;
begin
  Graphene1.graphene_quaternion_scale(@self, factor, res);
end;

procedure Tgraphene_quaternion_t.slerp(b: Pgraphene_quaternion_t; factor: gfloat; res: Pgraphene_quaternion_t); cdecl;
begin
  Graphene1.graphene_quaternion_slerp(@self, b, factor, res);
end;

procedure Tgraphene_quaternion_t.to_angle_vec3(angle: Pgfloat; axis: Pgraphene_vec3_t); cdecl;
begin
  Graphene1.graphene_quaternion_to_angle_vec3(@self, angle, axis);
end;

procedure Tgraphene_quaternion_t.to_angles(deg_x: Pgfloat; deg_y: Pgfloat; deg_z: Pgfloat); cdecl;
begin
  Graphene1.graphene_quaternion_to_angles(@self, deg_x, deg_y, deg_z);
end;

procedure Tgraphene_quaternion_t.to_matrix(m: Pgraphene_matrix_t); cdecl;
begin
  Graphene1.graphene_quaternion_to_matrix(@self, m);
end;

procedure Tgraphene_quaternion_t.to_radians(rad_x: Pgfloat; rad_y: Pgfloat; rad_z: Pgfloat); cdecl;
begin
  Graphene1.graphene_quaternion_to_radians(@self, rad_x, rad_y, rad_z);
end;

procedure Tgraphene_quaternion_t.to_vec4(res: Pgraphene_vec4_t); cdecl;
begin
  Graphene1.graphene_quaternion_to_vec4(@self, res);
end;

function Tgraphene_plane_t.alloc: Pgraphene_plane_t; cdecl;
begin
  Result := Graphene1.graphene_plane_alloc();
end;

function Tgraphene_plane_t.distance(point: Pgraphene_point3d_t): gfloat; cdecl;
begin
  Result := Graphene1.graphene_plane_distance(@self, point);
end;

function Tgraphene_plane_t.equal(b: Pgraphene_plane_t): gboolean; cdecl;
begin
  Result := Graphene1.graphene_plane_equal(@self, b);
end;

procedure Tgraphene_plane_t.free; cdecl;
begin
  Graphene1.graphene_plane_free(@self);
end;

function Tgraphene_plane_t.get_constant: gfloat; cdecl;
begin
  Result := Graphene1.graphene_plane_get_constant(@self);
end;

procedure Tgraphene_plane_t.get_normal(normal: Pgraphene_vec3_t); cdecl;
begin
  Graphene1.graphene_plane_get_normal(@self, normal);
end;

function Tgraphene_plane_t.init(normal: Pgraphene_vec3_t; constant: gfloat): Pgraphene_plane_t; cdecl;
begin
  Result := Graphene1.graphene_plane_init(@self, normal, constant);
end;

function Tgraphene_plane_t.init_from_plane(src: Pgraphene_plane_t): Pgraphene_plane_t; cdecl;
begin
  Result := Graphene1.graphene_plane_init_from_plane(@self, src);
end;

function Tgraphene_plane_t.init_from_point(normal: Pgraphene_vec3_t; point: Pgraphene_point3d_t): Pgraphene_plane_t; cdecl;
begin
  Result := Graphene1.graphene_plane_init_from_point(@self, normal, point);
end;

function Tgraphene_plane_t.init_from_points(a: Pgraphene_point3d_t; b: Pgraphene_point3d_t; c: Pgraphene_point3d_t): Pgraphene_plane_t; cdecl;
begin
  Result := Graphene1.graphene_plane_init_from_points(@self, a, b, c);
end;

function Tgraphene_plane_t.init_from_vec4(src: Pgraphene_vec4_t): Pgraphene_plane_t; cdecl;
begin
  Result := Graphene1.graphene_plane_init_from_vec4(@self, src);
end;

procedure Tgraphene_plane_t.negate(res: Pgraphene_plane_t); cdecl;
begin
  Graphene1.graphene_plane_negate(@self, res);
end;

procedure Tgraphene_plane_t.normalize(res: Pgraphene_plane_t); cdecl;
begin
  Graphene1.graphene_plane_normalize(@self, res);
end;

procedure Tgraphene_plane_t.transform(matrix: Pgraphene_matrix_t; normal_matrix: Pgraphene_matrix_t; res: Pgraphene_plane_t); cdecl;
begin
  Graphene1.graphene_plane_transform(@self, matrix, normal_matrix, res);
end;

function Tgraphene_frustum_t.alloc: Pgraphene_frustum_t; cdecl;
begin
  Result := Graphene1.graphene_frustum_alloc();
end;

function Tgraphene_frustum_t.contains_point(point: Pgraphene_point3d_t): gboolean; cdecl;
begin
  Result := Graphene1.graphene_frustum_contains_point(@self, point);
end;

function Tgraphene_frustum_t.equal(b: Pgraphene_frustum_t): gboolean; cdecl;
begin
  Result := Graphene1.graphene_frustum_equal(@self, b);
end;

procedure Tgraphene_frustum_t.free; cdecl;
begin
  Graphene1.graphene_frustum_free(@self);
end;

procedure Tgraphene_frustum_t.get_planes(planes: Pgraphene_plane_t); cdecl;
begin
  Graphene1.graphene_frustum_get_planes(@self, planes);
end;

function Tgraphene_frustum_t.init(p0: Pgraphene_plane_t; p1: Pgraphene_plane_t; p2: Pgraphene_plane_t; p3: Pgraphene_plane_t; p4: Pgraphene_plane_t; p5: Pgraphene_plane_t): Pgraphene_frustum_t; cdecl;
begin
  Result := Graphene1.graphene_frustum_init(@self, p0, p1, p2, p3, p4, p5);
end;

function Tgraphene_frustum_t.init_from_frustum(src: Pgraphene_frustum_t): Pgraphene_frustum_t; cdecl;
begin
  Result := Graphene1.graphene_frustum_init_from_frustum(@self, src);
end;

function Tgraphene_frustum_t.init_from_matrix(matrix: Pgraphene_matrix_t): Pgraphene_frustum_t; cdecl;
begin
  Result := Graphene1.graphene_frustum_init_from_matrix(@self, matrix);
end;

function Tgraphene_frustum_t.intersects_box(box: Pgraphene_box_t): gboolean; cdecl;
begin
  Result := Graphene1.graphene_frustum_intersects_box(@self, box);
end;

function Tgraphene_frustum_t.intersects_sphere(sphere: Pgraphene_sphere_t): gboolean; cdecl;
begin
  Result := Graphene1.graphene_frustum_intersects_sphere(@self, sphere);
end;

function Tgraphene_vec4_t.alloc: Pgraphene_vec4_t; cdecl;
begin
  Result := Graphene1.graphene_vec4_alloc();
end;

procedure Tgraphene_vec4_t.add(b: Pgraphene_vec4_t; res: Pgraphene_vec4_t); cdecl;
begin
  Graphene1.graphene_vec4_add(@self, b, res);
end;

procedure Tgraphene_vec4_t.divide(b: Pgraphene_vec4_t; res: Pgraphene_vec4_t); cdecl;
begin
  Graphene1.graphene_vec4_divide(@self, b, res);
end;

function Tgraphene_vec4_t.dot(b: Pgraphene_vec4_t): gfloat; cdecl;
begin
  Result := Graphene1.graphene_vec4_dot(@self, b);
end;

function Tgraphene_vec4_t.equal(v2: Pgraphene_vec4_t): gboolean; cdecl;
begin
  Result := Graphene1.graphene_vec4_equal(@self, v2);
end;

procedure Tgraphene_vec4_t.free; cdecl;
begin
  Graphene1.graphene_vec4_free(@self);
end;

function Tgraphene_vec4_t.get_w: gfloat; cdecl;
begin
  Result := Graphene1.graphene_vec4_get_w(@self);
end;

function Tgraphene_vec4_t.get_x: gfloat; cdecl;
begin
  Result := Graphene1.graphene_vec4_get_x(@self);
end;

procedure Tgraphene_vec4_t.get_xy(res: Pgraphene_vec2_t); cdecl;
begin
  Graphene1.graphene_vec4_get_xy(@self, res);
end;

procedure Tgraphene_vec4_t.get_xyz(res: Pgraphene_vec3_t); cdecl;
begin
  Graphene1.graphene_vec4_get_xyz(@self, res);
end;

function Tgraphene_vec4_t.get_y: gfloat; cdecl;
begin
  Result := Graphene1.graphene_vec4_get_y(@self);
end;

function Tgraphene_vec4_t.get_z: gfloat; cdecl;
begin
  Result := Graphene1.graphene_vec4_get_z(@self);
end;

function Tgraphene_vec4_t.init(x: gfloat; y: gfloat; z: gfloat; w: gfloat): Pgraphene_vec4_t; cdecl;
begin
  Result := Graphene1.graphene_vec4_init(@self, x, y, z, w);
end;

function Tgraphene_vec4_t.init_from_float(src: Pgfloat): Pgraphene_vec4_t; cdecl;
begin
  Result := Graphene1.graphene_vec4_init_from_float(@self, src);
end;

function Tgraphene_vec4_t.init_from_vec2(src: Pgraphene_vec2_t; z: gfloat; w: gfloat): Pgraphene_vec4_t; cdecl;
begin
  Result := Graphene1.graphene_vec4_init_from_vec2(@self, src, z, w);
end;

function Tgraphene_vec4_t.init_from_vec3(src: Pgraphene_vec3_t; w: gfloat): Pgraphene_vec4_t; cdecl;
begin
  Result := Graphene1.graphene_vec4_init_from_vec3(@self, src, w);
end;

function Tgraphene_vec4_t.init_from_vec4(src: Pgraphene_vec4_t): Pgraphene_vec4_t; cdecl;
begin
  Result := Graphene1.graphene_vec4_init_from_vec4(@self, src);
end;

procedure Tgraphene_vec4_t.interpolate(v2: Pgraphene_vec4_t; factor: gdouble; res: Pgraphene_vec4_t); cdecl;
begin
  Graphene1.graphene_vec4_interpolate(@self, v2, factor, res);
end;

function Tgraphene_vec4_t.length: gfloat; cdecl;
begin
  Result := Graphene1.graphene_vec4_length(@self);
end;

procedure Tgraphene_vec4_t.max(b: Pgraphene_vec4_t; res: Pgraphene_vec4_t); cdecl;
begin
  Graphene1.graphene_vec4_max(@self, b, res);
end;

procedure Tgraphene_vec4_t.min(b: Pgraphene_vec4_t; res: Pgraphene_vec4_t); cdecl;
begin
  Graphene1.graphene_vec4_min(@self, b, res);
end;

procedure Tgraphene_vec4_t.multiply(b: Pgraphene_vec4_t; res: Pgraphene_vec4_t); cdecl;
begin
  Graphene1.graphene_vec4_multiply(@self, b, res);
end;

function Tgraphene_vec4_t.near(v2: Pgraphene_vec4_t; epsilon: gfloat): gboolean; cdecl;
begin
  Result := Graphene1.graphene_vec4_near(@self, v2, epsilon);
end;

procedure Tgraphene_vec4_t.negate(res: Pgraphene_vec4_t); cdecl;
begin
  Graphene1.graphene_vec4_negate(@self, res);
end;

procedure Tgraphene_vec4_t.normalize(res: Pgraphene_vec4_t); cdecl;
begin
  Graphene1.graphene_vec4_normalize(@self, res);
end;

procedure Tgraphene_vec4_t.scale(factor: gfloat; res: Pgraphene_vec4_t); cdecl;
begin
  Graphene1.graphene_vec4_scale(@self, factor, res);
end;

procedure Tgraphene_vec4_t.subtract(b: Pgraphene_vec4_t; res: Pgraphene_vec4_t); cdecl;
begin
  Graphene1.graphene_vec4_subtract(@self, b, res);
end;

procedure Tgraphene_vec4_t.to_float(dest: Pgfloat); cdecl;
begin
  Graphene1.graphene_vec4_to_float(@self, dest);
end;

function Tgraphene_vec4_t.one: Pgraphene_vec4_t; cdecl;
begin
  Result := Graphene1.graphene_vec4_one();
end;

function Tgraphene_vec4_t.w_axis: Pgraphene_vec4_t; cdecl;
begin
  Result := Graphene1.graphene_vec4_w_axis();
end;

function Tgraphene_vec4_t.x_axis: Pgraphene_vec4_t; cdecl;
begin
  Result := Graphene1.graphene_vec4_x_axis();
end;

function Tgraphene_vec4_t.y_axis: Pgraphene_vec4_t; cdecl;
begin
  Result := Graphene1.graphene_vec4_y_axis();
end;

function Tgraphene_vec4_t.z_axis: Pgraphene_vec4_t; cdecl;
begin
  Result := Graphene1.graphene_vec4_z_axis();
end;

function Tgraphene_vec4_t.zero: Pgraphene_vec4_t; cdecl;
begin
  Result := Graphene1.graphene_vec4_zero();
end;

function Tgraphene_point_t.alloc: Pgraphene_point_t; cdecl;
begin
  Result := Graphene1.graphene_point_alloc();
end;

function Tgraphene_point_t.distance(b: Pgraphene_point_t; d_x: Pgfloat; d_y: Pgfloat): gfloat; cdecl;
begin
  Result := Graphene1.graphene_point_distance(@self, b, d_x, d_y);
end;

function Tgraphene_point_t.equal(b: Pgraphene_point_t): gboolean; cdecl;
begin
  Result := Graphene1.graphene_point_equal(@self, b);
end;

procedure Tgraphene_point_t.free; cdecl;
begin
  Graphene1.graphene_point_free(@self);
end;

function Tgraphene_point_t.init(x: gfloat; y: gfloat): Pgraphene_point_t; cdecl;
begin
  Result := Graphene1.graphene_point_init(@self, x, y);
end;

function Tgraphene_point_t.init_from_point(src: Pgraphene_point_t): Pgraphene_point_t; cdecl;
begin
  Result := Graphene1.graphene_point_init_from_point(@self, src);
end;

function Tgraphene_point_t.init_from_vec2(src: Pgraphene_vec2_t): Pgraphene_point_t; cdecl;
begin
  Result := Graphene1.graphene_point_init_from_vec2(@self, src);
end;

procedure Tgraphene_point_t.interpolate(b: Pgraphene_point_t; factor: gdouble; res: Pgraphene_point_t); cdecl;
begin
  Graphene1.graphene_point_interpolate(@self, b, factor, res);
end;

function Tgraphene_point_t.near(b: Pgraphene_point_t; epsilon: gfloat): gboolean; cdecl;
begin
  Result := Graphene1.graphene_point_near(@self, b, epsilon);
end;

procedure Tgraphene_point_t.to_vec2(v: Pgraphene_vec2_t); cdecl;
begin
  Graphene1.graphene_point_to_vec2(@self, v);
end;

function Tgraphene_point_t.zero: Pgraphene_point_t; cdecl;
begin
  Result := Graphene1.graphene_point_zero();
end;

function Tgraphene_rect_t.contains_point(p: Pgraphene_point_t): gboolean; cdecl;
begin
  Result := Graphene1.graphene_rect_contains_point(@self, p);
end;

function Tgraphene_rect_t.contains_rect(b: Pgraphene_rect_t): gboolean; cdecl;
begin
  Result := Graphene1.graphene_rect_contains_rect(@self, b);
end;

function Tgraphene_rect_t.equal(b: Pgraphene_rect_t): gboolean; cdecl;
begin
  Result := Graphene1.graphene_rect_equal(@self, b);
end;

procedure Tgraphene_rect_t.expand(p: Pgraphene_point_t; res: Pgraphene_rect_t); cdecl;
begin
  Graphene1.graphene_rect_expand(@self, p, res);
end;

procedure Tgraphene_rect_t.free; cdecl;
begin
  Graphene1.graphene_rect_free(@self);
end;

function Tgraphene_rect_t.get_area: gfloat; cdecl;
begin
  Result := Graphene1.graphene_rect_get_area(@self);
end;

procedure Tgraphene_rect_t.get_bottom_left(p: Pgraphene_point_t); cdecl;
begin
  Graphene1.graphene_rect_get_bottom_left(@self, p);
end;

procedure Tgraphene_rect_t.get_bottom_right(p: Pgraphene_point_t); cdecl;
begin
  Graphene1.graphene_rect_get_bottom_right(@self, p);
end;

procedure Tgraphene_rect_t.get_center(p: Pgraphene_point_t); cdecl;
begin
  Graphene1.graphene_rect_get_center(@self, p);
end;

function Tgraphene_rect_t.get_height: gfloat; cdecl;
begin
  Result := Graphene1.graphene_rect_get_height(@self);
end;

procedure Tgraphene_rect_t.get_top_left(p: Pgraphene_point_t); cdecl;
begin
  Graphene1.graphene_rect_get_top_left(@self, p);
end;

procedure Tgraphene_rect_t.get_top_right(p: Pgraphene_point_t); cdecl;
begin
  Graphene1.graphene_rect_get_top_right(@self, p);
end;

procedure Tgraphene_rect_t.get_vertices(vertices: Pgraphene_vec2_t); cdecl;
begin
  Graphene1.graphene_rect_get_vertices(@self, vertices);
end;

function Tgraphene_rect_t.get_width: gfloat; cdecl;
begin
  Result := Graphene1.graphene_rect_get_width(@self);
end;

function Tgraphene_rect_t.get_x: gfloat; cdecl;
begin
  Result := Graphene1.graphene_rect_get_x(@self);
end;

function Tgraphene_rect_t.get_y: gfloat; cdecl;
begin
  Result := Graphene1.graphene_rect_get_y(@self);
end;

function Tgraphene_rect_t.init(x: gfloat; y: gfloat; width: gfloat; height: gfloat): Pgraphene_rect_t; cdecl;
begin
  Result := Graphene1.graphene_rect_init(@self, x, y, width, height);
end;

function Tgraphene_rect_t.init_from_rect(src: Pgraphene_rect_t): Pgraphene_rect_t; cdecl;
begin
  Result := Graphene1.graphene_rect_init_from_rect(@self, src);
end;

function Tgraphene_rect_t.inset(d_x: gfloat; d_y: gfloat): Pgraphene_rect_t; cdecl;
begin
  Result := Graphene1.graphene_rect_inset(@self, d_x, d_y);
end;

procedure Tgraphene_rect_t.inset_r(d_x: gfloat; d_y: gfloat; res: Pgraphene_rect_t); cdecl;
begin
  Graphene1.graphene_rect_inset_r(@self, d_x, d_y, res);
end;

procedure Tgraphene_rect_t.interpolate(b: Pgraphene_rect_t; factor: gdouble; res: Pgraphene_rect_t); cdecl;
begin
  Graphene1.graphene_rect_interpolate(@self, b, factor, res);
end;

function Tgraphene_rect_t.intersection(b: Pgraphene_rect_t; res: Pgraphene_rect_t): gboolean; cdecl;
begin
  Result := Graphene1.graphene_rect_intersection(@self, b, res);
end;

function Tgraphene_rect_t.normalize: Pgraphene_rect_t; cdecl;
begin
  Result := Graphene1.graphene_rect_normalize(@self);
end;

procedure Tgraphene_rect_t.normalize_r(res: Pgraphene_rect_t); cdecl;
begin
  Graphene1.graphene_rect_normalize_r(@self, res);
end;

function Tgraphene_rect_t.offset(d_x: gfloat; d_y: gfloat): Pgraphene_rect_t; cdecl;
begin
  Result := Graphene1.graphene_rect_offset(@self, d_x, d_y);
end;

procedure Tgraphene_rect_t.offset_r(d_x: gfloat; d_y: gfloat; res: Pgraphene_rect_t); cdecl;
begin
  Graphene1.graphene_rect_offset_r(@self, d_x, d_y, res);
end;

procedure Tgraphene_rect_t.round_extents(res: Pgraphene_rect_t); cdecl;
begin
  Graphene1.graphene_rect_round_extents(@self, res);
end;

procedure Tgraphene_rect_t.scale(s_h: gfloat; s_v: gfloat; res: Pgraphene_rect_t); cdecl;
begin
  Graphene1.graphene_rect_scale(@self, s_h, s_v, res);
end;

procedure Tgraphene_rect_t.union(b: Pgraphene_rect_t; res: Pgraphene_rect_t); cdecl;
begin
  Graphene1.graphene_rect_union(@self, b, res);
end;

function Tgraphene_rect_t.alloc: Pgraphene_rect_t; cdecl;
begin
  Result := Graphene1.graphene_rect_alloc();
end;

function Tgraphene_rect_t.zero: Pgraphene_rect_t; cdecl;
begin
  Result := Graphene1.graphene_rect_zero();
end;

function Tgraphene_size_t.alloc: Pgraphene_size_t; cdecl;
begin
  Result := Graphene1.graphene_size_alloc();
end;

function Tgraphene_size_t.equal(b: Pgraphene_size_t): gboolean; cdecl;
begin
  Result := Graphene1.graphene_size_equal(@self, b);
end;

procedure Tgraphene_size_t.free; cdecl;
begin
  Graphene1.graphene_size_free(@self);
end;

function Tgraphene_size_t.init(width: gfloat; height: gfloat): Pgraphene_size_t; cdecl;
begin
  Result := Graphene1.graphene_size_init(@self, width, height);
end;

function Tgraphene_size_t.init_from_size(src: Pgraphene_size_t): Pgraphene_size_t; cdecl;
begin
  Result := Graphene1.graphene_size_init_from_size(@self, src);
end;

procedure Tgraphene_size_t.interpolate(b: Pgraphene_size_t; factor: gdouble; res: Pgraphene_size_t); cdecl;
begin
  Graphene1.graphene_size_interpolate(@self, b, factor, res);
end;

procedure Tgraphene_size_t.scale(factor: gfloat; res: Pgraphene_size_t); cdecl;
begin
  Graphene1.graphene_size_scale(@self, factor, res);
end;

function Tgraphene_size_t.zero: Pgraphene_size_t; cdecl;
begin
  Result := Graphene1.graphene_size_zero();
end;

function Tgraphene_quad_t.alloc: Pgraphene_quad_t; cdecl;
begin
  Result := Graphene1.graphene_quad_alloc();
end;

procedure Tgraphene_quad_t.bounds(r: Pgraphene_rect_t); cdecl;
begin
  Graphene1.graphene_quad_bounds(@self, r);
end;

function Tgraphene_quad_t.contains(p: Pgraphene_point_t): gboolean; cdecl;
begin
  Result := Graphene1.graphene_quad_contains(@self, p);
end;

procedure Tgraphene_quad_t.free; cdecl;
begin
  Graphene1.graphene_quad_free(@self);
end;

function Tgraphene_quad_t.get_point(index_: guint): Pgraphene_point_t; cdecl;
begin
  Result := Graphene1.graphene_quad_get_point(@self, index_);
end;

function Tgraphene_quad_t.init(p1: Pgraphene_point_t; p2: Pgraphene_point_t; p3: Pgraphene_point_t; p4: Pgraphene_point_t): Pgraphene_quad_t; cdecl;
begin
  Result := Graphene1.graphene_quad_init(@self, p1, p2, p3, p4);
end;

function Tgraphene_quad_t.init_from_points(points: Pgraphene_point_t): Pgraphene_quad_t; cdecl;
begin
  Result := Graphene1.graphene_quad_init_from_points(@self, points);
end;

function Tgraphene_quad_t.init_from_rect(r: Pgraphene_rect_t): Pgraphene_quad_t; cdecl;
begin
  Result := Graphene1.graphene_quad_init_from_rect(@self, r);
end;

function Tgraphene_ray_t.alloc: Pgraphene_ray_t; cdecl;
begin
  Result := Graphene1.graphene_ray_alloc();
end;

function Tgraphene_ray_t.equal(b: Pgraphene_ray_t): gboolean; cdecl;
begin
  Result := Graphene1.graphene_ray_equal(@self, b);
end;

procedure Tgraphene_ray_t.free; cdecl;
begin
  Graphene1.graphene_ray_free(@self);
end;

procedure Tgraphene_ray_t.get_closest_point_to_point(p: Pgraphene_point3d_t; res: Pgraphene_point3d_t); cdecl;
begin
  Graphene1.graphene_ray_get_closest_point_to_point(@self, p, res);
end;

procedure Tgraphene_ray_t.get_direction(direction: Pgraphene_vec3_t); cdecl;
begin
  Graphene1.graphene_ray_get_direction(@self, direction);
end;

function Tgraphene_ray_t.get_distance_to_plane(p: Pgraphene_plane_t): gfloat; cdecl;
begin
  Result := Graphene1.graphene_ray_get_distance_to_plane(@self, p);
end;

function Tgraphene_ray_t.get_distance_to_point(p: Pgraphene_point3d_t): gfloat; cdecl;
begin
  Result := Graphene1.graphene_ray_get_distance_to_point(@self, p);
end;

procedure Tgraphene_ray_t.get_origin(origin: Pgraphene_point3d_t); cdecl;
begin
  Graphene1.graphene_ray_get_origin(@self, origin);
end;

procedure Tgraphene_ray_t.get_position_at(t: gfloat; position: Pgraphene_point3d_t); cdecl;
begin
  Graphene1.graphene_ray_get_position_at(@self, t, position);
end;

function Tgraphene_ray_t.init(origin: Pgraphene_point3d_t; direction: Pgraphene_vec3_t): Pgraphene_ray_t; cdecl;
begin
  Result := Graphene1.graphene_ray_init(@self, origin, direction);
end;

function Tgraphene_ray_t.init_from_ray(src: Pgraphene_ray_t): Pgraphene_ray_t; cdecl;
begin
  Result := Graphene1.graphene_ray_init_from_ray(@self, src);
end;

function Tgraphene_ray_t.init_from_vec3(origin: Pgraphene_vec3_t; direction: Pgraphene_vec3_t): Pgraphene_ray_t; cdecl;
begin
  Result := Graphene1.graphene_ray_init_from_vec3(@self, origin, direction);
end;

function Tgraphene_ray_t.intersect_box(b: Pgraphene_box_t; t_out: Pgfloat): Tgraphene_ray_intersection_kind_t; cdecl;
begin
  Result := Graphene1.graphene_ray_intersect_box(@self, b, t_out);
end;

function Tgraphene_ray_t.intersect_sphere(s: Pgraphene_sphere_t; t_out: Pgfloat): Tgraphene_ray_intersection_kind_t; cdecl;
begin
  Result := Graphene1.graphene_ray_intersect_sphere(@self, s, t_out);
end;

function Tgraphene_ray_t.intersect_triangle(t: Pgraphene_triangle_t; t_out: Pgfloat): Tgraphene_ray_intersection_kind_t; cdecl;
begin
  Result := Graphene1.graphene_ray_intersect_triangle(@self, t, t_out);
end;

function Tgraphene_ray_t.intersects_box(b: Pgraphene_box_t): gboolean; cdecl;
begin
  Result := Graphene1.graphene_ray_intersects_box(@self, b);
end;

function Tgraphene_ray_t.intersects_sphere(s: Pgraphene_sphere_t): gboolean; cdecl;
begin
  Result := Graphene1.graphene_ray_intersects_sphere(@self, s);
end;

function Tgraphene_ray_t.intersects_triangle(t: Pgraphene_triangle_t): gboolean; cdecl;
begin
  Result := Graphene1.graphene_ray_intersects_triangle(@self, t);
end;

function Tgraphene_vec2_t.alloc: Pgraphene_vec2_t; cdecl;
begin
  Result := Graphene1.graphene_vec2_alloc();
end;

procedure Tgraphene_vec2_t.add(b: Pgraphene_vec2_t; res: Pgraphene_vec2_t); cdecl;
begin
  Graphene1.graphene_vec2_add(@self, b, res);
end;

procedure Tgraphene_vec2_t.divide(b: Pgraphene_vec2_t; res: Pgraphene_vec2_t); cdecl;
begin
  Graphene1.graphene_vec2_divide(@self, b, res);
end;

function Tgraphene_vec2_t.dot(b: Pgraphene_vec2_t): gfloat; cdecl;
begin
  Result := Graphene1.graphene_vec2_dot(@self, b);
end;

function Tgraphene_vec2_t.equal(v2: Pgraphene_vec2_t): gboolean; cdecl;
begin
  Result := Graphene1.graphene_vec2_equal(@self, v2);
end;

procedure Tgraphene_vec2_t.free; cdecl;
begin
  Graphene1.graphene_vec2_free(@self);
end;

function Tgraphene_vec2_t.get_x: gfloat; cdecl;
begin
  Result := Graphene1.graphene_vec2_get_x(@self);
end;

function Tgraphene_vec2_t.get_y: gfloat; cdecl;
begin
  Result := Graphene1.graphene_vec2_get_y(@self);
end;

function Tgraphene_vec2_t.init(x: gfloat; y: gfloat): Pgraphene_vec2_t; cdecl;
begin
  Result := Graphene1.graphene_vec2_init(@self, x, y);
end;

function Tgraphene_vec2_t.init_from_float(src: Pgfloat): Pgraphene_vec2_t; cdecl;
begin
  Result := Graphene1.graphene_vec2_init_from_float(@self, src);
end;

function Tgraphene_vec2_t.init_from_vec2(src: Pgraphene_vec2_t): Pgraphene_vec2_t; cdecl;
begin
  Result := Graphene1.graphene_vec2_init_from_vec2(@self, src);
end;

procedure Tgraphene_vec2_t.interpolate(v2: Pgraphene_vec2_t; factor: gdouble; res: Pgraphene_vec2_t); cdecl;
begin
  Graphene1.graphene_vec2_interpolate(@self, v2, factor, res);
end;

function Tgraphene_vec2_t.length: gfloat; cdecl;
begin
  Result := Graphene1.graphene_vec2_length(@self);
end;

procedure Tgraphene_vec2_t.max(b: Pgraphene_vec2_t; res: Pgraphene_vec2_t); cdecl;
begin
  Graphene1.graphene_vec2_max(@self, b, res);
end;

procedure Tgraphene_vec2_t.min(b: Pgraphene_vec2_t; res: Pgraphene_vec2_t); cdecl;
begin
  Graphene1.graphene_vec2_min(@self, b, res);
end;

procedure Tgraphene_vec2_t.multiply(b: Pgraphene_vec2_t; res: Pgraphene_vec2_t); cdecl;
begin
  Graphene1.graphene_vec2_multiply(@self, b, res);
end;

function Tgraphene_vec2_t.near(v2: Pgraphene_vec2_t; epsilon: gfloat): gboolean; cdecl;
begin
  Result := Graphene1.graphene_vec2_near(@self, v2, epsilon);
end;

procedure Tgraphene_vec2_t.negate(res: Pgraphene_vec2_t); cdecl;
begin
  Graphene1.graphene_vec2_negate(@self, res);
end;

procedure Tgraphene_vec2_t.normalize(res: Pgraphene_vec2_t); cdecl;
begin
  Graphene1.graphene_vec2_normalize(@self, res);
end;

procedure Tgraphene_vec2_t.scale(factor: gfloat; res: Pgraphene_vec2_t); cdecl;
begin
  Graphene1.graphene_vec2_scale(@self, factor, res);
end;

procedure Tgraphene_vec2_t.subtract(b: Pgraphene_vec2_t; res: Pgraphene_vec2_t); cdecl;
begin
  Graphene1.graphene_vec2_subtract(@self, b, res);
end;

procedure Tgraphene_vec2_t.to_float(dest: Pgfloat); cdecl;
begin
  Graphene1.graphene_vec2_to_float(@self, dest);
end;

function Tgraphene_vec2_t.one: Pgraphene_vec2_t; cdecl;
begin
  Result := Graphene1.graphene_vec2_one();
end;

function Tgraphene_vec2_t.x_axis: Pgraphene_vec2_t; cdecl;
begin
  Result := Graphene1.graphene_vec2_x_axis();
end;

function Tgraphene_vec2_t.y_axis: Pgraphene_vec2_t; cdecl;
begin
  Result := Graphene1.graphene_vec2_y_axis();
end;

function Tgraphene_vec2_t.zero: Pgraphene_vec2_t; cdecl;
begin
  Result := Graphene1.graphene_vec2_zero();
end;

function Tgraphene_triangle_t.alloc: Pgraphene_triangle_t; cdecl;
begin
  Result := Graphene1.graphene_triangle_alloc();
end;

function Tgraphene_triangle_t.contains_point(p: Pgraphene_point3d_t): gboolean; cdecl;
begin
  Result := Graphene1.graphene_triangle_contains_point(@self, p);
end;

function Tgraphene_triangle_t.equal(b: Pgraphene_triangle_t): gboolean; cdecl;
begin
  Result := Graphene1.graphene_triangle_equal(@self, b);
end;

procedure Tgraphene_triangle_t.free; cdecl;
begin
  Graphene1.graphene_triangle_free(@self);
end;

function Tgraphene_triangle_t.get_area: gfloat; cdecl;
begin
  Result := Graphene1.graphene_triangle_get_area(@self);
end;

function Tgraphene_triangle_t.get_barycoords(p: Pgraphene_point3d_t; res: Pgraphene_vec2_t): gboolean; cdecl;
begin
  Result := Graphene1.graphene_triangle_get_barycoords(@self, p, res);
end;

procedure Tgraphene_triangle_t.get_bounding_box(res: Pgraphene_box_t); cdecl;
begin
  Graphene1.graphene_triangle_get_bounding_box(@self, res);
end;

procedure Tgraphene_triangle_t.get_midpoint(res: Pgraphene_point3d_t); cdecl;
begin
  Graphene1.graphene_triangle_get_midpoint(@self, res);
end;

procedure Tgraphene_triangle_t.get_normal(res: Pgraphene_vec3_t); cdecl;
begin
  Graphene1.graphene_triangle_get_normal(@self, res);
end;

procedure Tgraphene_triangle_t.get_plane(res: Pgraphene_plane_t); cdecl;
begin
  Graphene1.graphene_triangle_get_plane(@self, res);
end;

procedure Tgraphene_triangle_t.get_points(a: Pgraphene_point3d_t; b: Pgraphene_point3d_t; c: Pgraphene_point3d_t); cdecl;
begin
  Graphene1.graphene_triangle_get_points(@self, a, b, c);
end;

function Tgraphene_triangle_t.get_uv(p: Pgraphene_point3d_t; uv_a: Pgraphene_vec2_t; uv_b: Pgraphene_vec2_t; uv_c: Pgraphene_vec2_t; res: Pgraphene_vec2_t): gboolean; cdecl;
begin
  Result := Graphene1.graphene_triangle_get_uv(@self, p, uv_a, uv_b, uv_c, res);
end;

procedure Tgraphene_triangle_t.get_vertices(a: Pgraphene_vec3_t; b: Pgraphene_vec3_t; c: Pgraphene_vec3_t); cdecl;
begin
  Graphene1.graphene_triangle_get_vertices(@self, a, b, c);
end;

function Tgraphene_triangle_t.init_from_float(a: Pgfloat; b: Pgfloat; c: Pgfloat): Pgraphene_triangle_t; cdecl;
begin
  Result := Graphene1.graphene_triangle_init_from_float(@self, a, b, c);
end;

function Tgraphene_triangle_t.init_from_point3d(a: Pgraphene_point3d_t; b: Pgraphene_point3d_t; c: Pgraphene_point3d_t): Pgraphene_triangle_t; cdecl;
begin
  Result := Graphene1.graphene_triangle_init_from_point3d(@self, a, b, c);
end;

function Tgraphene_triangle_t.init_from_vec3(a: Pgraphene_vec3_t; b: Pgraphene_vec3_t; c: Pgraphene_vec3_t): Pgraphene_triangle_t; cdecl;
begin
  Result := Graphene1.graphene_triangle_init_from_vec3(@self, a, b, c);
end;

end.
