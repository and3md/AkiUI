{ This is an autogenerated unit using gobject introspection (gir2pascal). Do not Edit. }
unit Gdk4;

{$MODE OBJFPC}{$H+}

{$PACKRECORDS C}
{$MODESWITCH DUPLICATELOCALS+}

{$ifdef Unix}
{$LINKLIB libgtk-4.so.1}
{$endif}
interface
uses
  CTypes, GdkPixbuf2, Gio2, Pango1, PangoCairo1, cairo1, GLib2, GObject2;

const
  {$ifdef MsWindows}
  Gdk4_library = 'libgtk-4.so.dll';
  {$else}
  Gdk4_library = 'libgtk-4.so.1';
  {$endif}

  GDK_ACTION_ALL = 7;
  GDK_BUTTON_MIDDLE = 2;
  GDK_BUTTON_PRIMARY = 1;
  GDK_BUTTON_SECONDARY = 3;
  GDK_CURRENT_TIME = 0;
  GDK_EVENT_PROPAGATE = false;
  GDK_EVENT_STOP = true;
  GDK_KEY_0 = 48;
  GDK_KEY_1 = 49;
  GDK_KEY_2 = 50;
  GDK_KEY_3 = 51;
  GDK_KEY_3270_AltCursor = 64784;
  GDK_KEY_3270_Attn = 64782;
  GDK_KEY_3270_BackTab = 64773;
  GDK_KEY_3270_ChangeScreen = 64793;
  GDK_KEY_3270_Copy = 64789;
  GDK_KEY_3270_CursorBlink = 64783;
  GDK_KEY_3270_CursorSelect = 64796;
  GDK_KEY_3270_DeleteWord = 64794;
  GDK_KEY_3270_Duplicate = 64769;
  GDK_KEY_3270_Enter = 64798;
  GDK_KEY_3270_EraseEOF = 64774;
  GDK_KEY_3270_EraseInput = 64775;
  GDK_KEY_3270_ExSelect = 64795;
  GDK_KEY_3270_FieldMark = 64770;
  GDK_KEY_3270_Ident = 64787;
  GDK_KEY_3270_Jump = 64786;
  GDK_KEY_3270_KeyClick = 64785;
  GDK_KEY_3270_Left2 = 64772;
  GDK_KEY_3270_PA1 = 64778;
  GDK_KEY_3270_PA2 = 64779;
  GDK_KEY_3270_PA3 = 64780;
  GDK_KEY_3270_Play = 64790;
  GDK_KEY_3270_PrintScreen = 64797;
  GDK_KEY_3270_Quit = 64777;
  GDK_KEY_3270_Record = 64792;
  GDK_KEY_3270_Reset = 64776;
  GDK_KEY_3270_Right2 = 64771;
  GDK_KEY_3270_Rule = 64788;
  GDK_KEY_3270_Setup = 64791;
  GDK_KEY_3270_Test = 64781;
  GDK_KEY_4 = 52;
  GDK_KEY_5 = 53;
  GDK_KEY_6 = 54;
  GDK_KEY_7 = 55;
  GDK_KEY_8 = 56;
  GDK_KEY_9 = 57;
  GDK_KEY_A = 65;
  GDK_KEY_AE = 198;
  GDK_KEY_Aacute = 193;
  GDK_KEY_Abelowdot = 16785056;
  GDK_KEY_Abreve = 451;
  GDK_KEY_Abreveacute = 16785070;
  GDK_KEY_Abrevebelowdot = 16785078;
  GDK_KEY_Abrevegrave = 16785072;
  GDK_KEY_Abrevehook = 16785074;
  GDK_KEY_Abrevetilde = 16785076;
  GDK_KEY_AccessX_Enable = 65136;
  GDK_KEY_AccessX_Feedback_Enable = 65137;
  GDK_KEY_Acircumflex = 194;
  GDK_KEY_Acircumflexacute = 16785060;
  GDK_KEY_Acircumflexbelowdot = 16785068;
  GDK_KEY_Acircumflexgrave = 16785062;
  GDK_KEY_Acircumflexhook = 16785064;
  GDK_KEY_Acircumflextilde = 16785066;
  GDK_KEY_AddFavorite = 269025081;
  GDK_KEY_Adiaeresis = 196;
  GDK_KEY_Agrave = 192;
  GDK_KEY_Ahook = 16785058;
  GDK_KEY_Alt_L = 65513;
  GDK_KEY_Alt_R = 65514;
  GDK_KEY_Amacron = 960;
  GDK_KEY_Aogonek = 417;
  GDK_KEY_ApplicationLeft = 269025104;
  GDK_KEY_ApplicationRight = 269025105;
  GDK_KEY_Arabic_0 = 16778848;
  GDK_KEY_Arabic_1 = 16778849;
  GDK_KEY_Arabic_2 = 16778850;
  GDK_KEY_Arabic_3 = 16778851;
  GDK_KEY_Arabic_4 = 16778852;
  GDK_KEY_Arabic_5 = 16778853;
  GDK_KEY_Arabic_6 = 16778854;
  GDK_KEY_Arabic_7 = 16778855;
  GDK_KEY_Arabic_8 = 16778856;
  GDK_KEY_Arabic_9 = 16778857;
  GDK_KEY_Arabic_ain = 1497;
  GDK_KEY_Arabic_alef = 1479;
  GDK_KEY_Arabic_alefmaksura = 1513;
  GDK_KEY_Arabic_beh = 1480;
  GDK_KEY_Arabic_comma = 1452;
  GDK_KEY_Arabic_dad = 1494;
  GDK_KEY_Arabic_dal = 1487;
  GDK_KEY_Arabic_damma = 1519;
  GDK_KEY_Arabic_dammatan = 1516;
  GDK_KEY_Arabic_ddal = 16778888;
  GDK_KEY_Arabic_farsi_yeh = 16778956;
  GDK_KEY_Arabic_fatha = 1518;
  GDK_KEY_Arabic_fathatan = 1515;
  GDK_KEY_Arabic_feh = 1505;
  GDK_KEY_Arabic_fullstop = 16778964;
  GDK_KEY_Arabic_gaf = 16778927;
  GDK_KEY_Arabic_ghain = 1498;
  GDK_KEY_Arabic_ha = 1511;
  GDK_KEY_Arabic_hah = 1485;
  GDK_KEY_Arabic_hamza = 1473;
  GDK_KEY_Arabic_hamza_above = 16778836;
  GDK_KEY_Arabic_hamza_below = 16778837;
  GDK_KEY_Arabic_hamzaonalef = 1475;
  GDK_KEY_Arabic_hamzaonwaw = 1476;
  GDK_KEY_Arabic_hamzaonyeh = 1478;
  GDK_KEY_Arabic_hamzaunderalef = 1477;
  GDK_KEY_Arabic_heh = 1511;
  GDK_KEY_Arabic_heh_doachashmee = 16778942;
  GDK_KEY_Arabic_heh_goal = 16778945;
  GDK_KEY_Arabic_jeem = 1484;
  GDK_KEY_Arabic_jeh = 16778904;
  GDK_KEY_Arabic_kaf = 1507;
  GDK_KEY_Arabic_kasra = 1520;
  GDK_KEY_Arabic_kasratan = 1517;
  GDK_KEY_Arabic_keheh = 16778921;
  GDK_KEY_Arabic_khah = 1486;
  GDK_KEY_Arabic_lam = 1508;
  GDK_KEY_Arabic_madda_above = 16778835;
  GDK_KEY_Arabic_maddaonalef = 1474;
  GDK_KEY_Arabic_meem = 1509;
  GDK_KEY_Arabic_noon = 1510;
  GDK_KEY_Arabic_noon_ghunna = 16778938;
  GDK_KEY_Arabic_peh = 16778878;
  GDK_KEY_Arabic_percent = 16778858;
  GDK_KEY_Arabic_qaf = 1506;
  GDK_KEY_Arabic_question_mark = 1471;
  GDK_KEY_Arabic_ra = 1489;
  GDK_KEY_Arabic_rreh = 16778897;
  GDK_KEY_Arabic_sad = 1493;
  GDK_KEY_Arabic_seen = 1491;
  GDK_KEY_Arabic_semicolon = 1467;
  GDK_KEY_Arabic_shadda = 1521;
  GDK_KEY_Arabic_sheen = 1492;
  GDK_KEY_Arabic_sukun = 1522;
  GDK_KEY_Arabic_superscript_alef = 16778864;
  GDK_KEY_Arabic_switch = 65406;
  GDK_KEY_Arabic_tah = 1495;
  GDK_KEY_Arabic_tatweel = 1504;
  GDK_KEY_Arabic_tcheh = 16778886;
  GDK_KEY_Arabic_teh = 1482;
  GDK_KEY_Arabic_tehmarbuta = 1481;
  GDK_KEY_Arabic_thal = 1488;
  GDK_KEY_Arabic_theh = 1483;
  GDK_KEY_Arabic_tteh = 16778873;
  GDK_KEY_Arabic_veh = 16778916;
  GDK_KEY_Arabic_waw = 1512;
  GDK_KEY_Arabic_yeh = 1514;
  GDK_KEY_Arabic_yeh_baree = 16778962;
  GDK_KEY_Arabic_zah = 1496;
  GDK_KEY_Arabic_zain = 1490;
  GDK_KEY_Aring = 197;
  GDK_KEY_Armenian_AT = 16778552;
  GDK_KEY_Armenian_AYB = 16778545;
  GDK_KEY_Armenian_BEN = 16778546;
  GDK_KEY_Armenian_CHA = 16778569;
  GDK_KEY_Armenian_DA = 16778548;
  GDK_KEY_Armenian_DZA = 16778561;
  GDK_KEY_Armenian_E = 16778551;
  GDK_KEY_Armenian_FE = 16778582;
  GDK_KEY_Armenian_GHAT = 16778562;
  GDK_KEY_Armenian_GIM = 16778547;
  GDK_KEY_Armenian_HI = 16778565;
  GDK_KEY_Armenian_HO = 16778560;
  GDK_KEY_Armenian_INI = 16778555;
  GDK_KEY_Armenian_JE = 16778571;
  GDK_KEY_Armenian_KE = 16778580;
  GDK_KEY_Armenian_KEN = 16778559;
  GDK_KEY_Armenian_KHE = 16778557;
  GDK_KEY_Armenian_LYUN = 16778556;
  GDK_KEY_Armenian_MEN = 16778564;
  GDK_KEY_Armenian_NU = 16778566;
  GDK_KEY_Armenian_O = 16778581;
  GDK_KEY_Armenian_PE = 16778570;
  GDK_KEY_Armenian_PYUR = 16778579;
  GDK_KEY_Armenian_RA = 16778572;
  GDK_KEY_Armenian_RE = 16778576;
  GDK_KEY_Armenian_SE = 16778573;
  GDK_KEY_Armenian_SHA = 16778567;
  GDK_KEY_Armenian_TCHE = 16778563;
  GDK_KEY_Armenian_TO = 16778553;
  GDK_KEY_Armenian_TSA = 16778558;
  GDK_KEY_Armenian_TSO = 16778577;
  GDK_KEY_Armenian_TYUN = 16778575;
  GDK_KEY_Armenian_VEV = 16778574;
  GDK_KEY_Armenian_VO = 16778568;
  GDK_KEY_Armenian_VYUN = 16778578;
  GDK_KEY_Armenian_YECH = 16778549;
  GDK_KEY_Armenian_ZA = 16778550;
  GDK_KEY_Armenian_ZHE = 16778554;
  GDK_KEY_Armenian_accent = 16778587;
  GDK_KEY_Armenian_amanak = 16778588;
  GDK_KEY_Armenian_apostrophe = 16778586;
  GDK_KEY_Armenian_at_ = 16778600;
  GDK_KEY_Armenian_ayb_ = 16778593;
  GDK_KEY_Armenian_ben_ = 16778594;
  GDK_KEY_Armenian_but = 16778589;
  GDK_KEY_Armenian_cha_ = 16778617;
  GDK_KEY_Armenian_da_ = 16778596;
  GDK_KEY_Armenian_dza_ = 16778609;
  GDK_KEY_Armenian_e_ = 16778599;
  GDK_KEY_Armenian_exclam = 16778588;
  GDK_KEY_Armenian_fe_ = 16778630;
  GDK_KEY_Armenian_full_stop = 16778633;
  GDK_KEY_Armenian_ghat_ = 16778610;
  GDK_KEY_Armenian_gim_ = 16778595;
  GDK_KEY_Armenian_hi_ = 16778613;
  GDK_KEY_Armenian_ho_ = 16778608;
  GDK_KEY_Armenian_hyphen = 16778634;
  GDK_KEY_Armenian_ini_ = 16778603;
  GDK_KEY_Armenian_je_ = 16778619;
  GDK_KEY_Armenian_ke_ = 16778628;
  GDK_KEY_Armenian_ken_ = 16778607;
  GDK_KEY_Armenian_khe_ = 16778605;
  GDK_KEY_Armenian_ligature_ew = 16778631;
  GDK_KEY_Armenian_lyun_ = 16778604;
  GDK_KEY_Armenian_men_ = 16778612;
  GDK_KEY_Armenian_nu_ = 16778614;
  GDK_KEY_Armenian_o_ = 16778629;
  GDK_KEY_Armenian_paruyk = 16778590;
  GDK_KEY_Armenian_pe_ = 16778618;
  GDK_KEY_Armenian_pyur_ = 16778627;
  GDK_KEY_Armenian_question = 16778590;
  GDK_KEY_Armenian_ra_ = 16778620;
  GDK_KEY_Armenian_re_ = 16778624;
  GDK_KEY_Armenian_se_ = 16778621;
  GDK_KEY_Armenian_separation_mark = 16778589;
  GDK_KEY_Armenian_sha_ = 16778615;
  GDK_KEY_Armenian_shesht = 16778587;
  GDK_KEY_Armenian_tche_ = 16778611;
  GDK_KEY_Armenian_to_ = 16778601;
  GDK_KEY_Armenian_tsa_ = 16778606;
  GDK_KEY_Armenian_tso_ = 16778625;
  GDK_KEY_Armenian_tyun_ = 16778623;
  GDK_KEY_Armenian_verjaket = 16778633;
  GDK_KEY_Armenian_vev_ = 16778622;
  GDK_KEY_Armenian_vo_ = 16778616;
  GDK_KEY_Armenian_vyun_ = 16778626;
  GDK_KEY_Armenian_yech_ = 16778597;
  GDK_KEY_Armenian_yentamna = 16778634;
  GDK_KEY_Armenian_za_ = 16778598;
  GDK_KEY_Armenian_zhe_ = 16778602;
  GDK_KEY_Atilde = 195;
  GDK_KEY_AudibleBell_Enable = 65146;
  GDK_KEY_AudioCycleTrack = 269025179;
  GDK_KEY_AudioForward = 269025175;
  GDK_KEY_AudioLowerVolume = 269025041;
  GDK_KEY_AudioMedia = 269025074;
  GDK_KEY_AudioMicMute = 269025202;
  GDK_KEY_AudioMute = 269025042;
  GDK_KEY_AudioNext = 269025047;
  GDK_KEY_AudioPause = 269025073;
  GDK_KEY_AudioPlay = 269025044;
  GDK_KEY_AudioPreset = 269025206;
  GDK_KEY_AudioPrev = 269025046;
  GDK_KEY_AudioRaiseVolume = 269025043;
  GDK_KEY_AudioRandomPlay = 269025177;
  GDK_KEY_AudioRecord = 269025052;
  GDK_KEY_AudioRepeat = 269025176;
  GDK_KEY_AudioRewind = 269025086;
  GDK_KEY_AudioStop = 269025045;
  GDK_KEY_Away = 269025165;
  GDK_KEY_B = 66;
  GDK_KEY_Babovedot = 16784898;
  GDK_KEY_Back = 269025062;
  GDK_KEY_BackForward = 269025087;
  GDK_KEY_BackSpace = 65288;
  GDK_KEY_Battery = 269025171;
  GDK_KEY_Begin = 65368;
  GDK_KEY_Blue = 269025190;
  GDK_KEY_Bluetooth = 269025172;
  GDK_KEY_Book = 269025106;
  GDK_KEY_BounceKeys_Enable = 65140;
  GDK_KEY_Break = 65387;
  GDK_KEY_BrightnessAdjust = 269025083;
  GDK_KEY_Byelorussian_SHORTU = 1726;
  GDK_KEY_Byelorussian_shortu_ = 1710;
  GDK_KEY_C = 67;
  GDK_KEY_CD = 269025107;
  GDK_KEY_CH = 65186;
  GDK_KEY_C_H = 65189;
  GDK_KEY_C_h_ = 65188;
  GDK_KEY_Cabovedot = 709;
  GDK_KEY_Cacute = 454;
  GDK_KEY_Calculator = 269025053;
  GDK_KEY_Calendar = 269025056;
  GDK_KEY_Cancel = 65385;
  GDK_KEY_Caps_Lock = 65509;
  GDK_KEY_Ccaron = 456;
  GDK_KEY_Ccedilla = 199;
  GDK_KEY_Ccircumflex = 710;
  GDK_KEY_Ch_ = 65185;
  GDK_KEY_Clear = 65291;
  GDK_KEY_ClearGrab = 269024801;
  GDK_KEY_Close = 269025110;
  GDK_KEY_Codeinput = 65335;
  GDK_KEY_ColonSign = 16785569;
  GDK_KEY_Community = 269025085;
  GDK_KEY_ContrastAdjust = 269025058;
  GDK_KEY_Control_L = 65507;
  GDK_KEY_Control_R = 65508;
  GDK_KEY_Copy = 269025111;
  GDK_KEY_CruzeiroSign = 16785570;
  GDK_KEY_Cut = 269025112;
  GDK_KEY_CycleAngle = 269025180;
  GDK_KEY_Cyrillic_A = 1761;
  GDK_KEY_Cyrillic_BE = 1762;
  GDK_KEY_Cyrillic_CHE = 1790;
  GDK_KEY_Cyrillic_CHE_descender = 16778422;
  GDK_KEY_Cyrillic_CHE_vertstroke = 16778424;
  GDK_KEY_Cyrillic_DE = 1764;
  GDK_KEY_Cyrillic_DZHE = 1727;
  GDK_KEY_Cyrillic_E = 1788;
  GDK_KEY_Cyrillic_EF = 1766;
  GDK_KEY_Cyrillic_EL = 1772;
  GDK_KEY_Cyrillic_EM = 1773;
  GDK_KEY_Cyrillic_EN = 1774;
  GDK_KEY_Cyrillic_EN_descender = 16778402;
  GDK_KEY_Cyrillic_ER = 1778;
  GDK_KEY_Cyrillic_ES = 1779;
  GDK_KEY_Cyrillic_GHE = 1767;
  GDK_KEY_Cyrillic_GHE_bar = 16778386;
  GDK_KEY_Cyrillic_HA = 1768;
  GDK_KEY_Cyrillic_HARDSIGN = 1791;
  GDK_KEY_Cyrillic_HA_descender = 16778418;
  GDK_KEY_Cyrillic_I = 1769;
  GDK_KEY_Cyrillic_IE = 1765;
  GDK_KEY_Cyrillic_IO = 1715;
  GDK_KEY_Cyrillic_I_macron = 16778466;
  GDK_KEY_Cyrillic_JE = 1720;
  GDK_KEY_Cyrillic_KA = 1771;
  GDK_KEY_Cyrillic_KA_descender = 16778394;
  GDK_KEY_Cyrillic_KA_vertstroke = 16778396;
  GDK_KEY_Cyrillic_LJE = 1721;
  GDK_KEY_Cyrillic_NJE = 1722;
  GDK_KEY_Cyrillic_O = 1775;
  GDK_KEY_Cyrillic_O_bar = 16778472;
  GDK_KEY_Cyrillic_PE = 1776;
  GDK_KEY_Cyrillic_SCHWA = 16778456;
  GDK_KEY_Cyrillic_SHA = 1787;
  GDK_KEY_Cyrillic_SHCHA = 1789;
  GDK_KEY_Cyrillic_SHHA = 16778426;
  GDK_KEY_Cyrillic_SHORTI = 1770;
  GDK_KEY_Cyrillic_SOFTSIGN = 1784;
  GDK_KEY_Cyrillic_TE = 1780;
  GDK_KEY_Cyrillic_TSE = 1763;
  GDK_KEY_Cyrillic_U = 1781;
  GDK_KEY_Cyrillic_U_macron = 16778478;
  GDK_KEY_Cyrillic_U_straight = 16778414;
  GDK_KEY_Cyrillic_U_straight_bar = 16778416;
  GDK_KEY_Cyrillic_VE = 1783;
  GDK_KEY_Cyrillic_YA = 1777;
  GDK_KEY_Cyrillic_YERU = 1785;
  GDK_KEY_Cyrillic_YU = 1760;
  GDK_KEY_Cyrillic_ZE = 1786;
  GDK_KEY_Cyrillic_ZHE = 1782;
  GDK_KEY_Cyrillic_ZHE_descender = 16778390;
  GDK_KEY_Cyrillic_a_ = 1729;
  GDK_KEY_Cyrillic_be_ = 1730;
  GDK_KEY_Cyrillic_che_ = 1758;
  GDK_KEY_Cyrillic_che_descender_ = 16778423;
  GDK_KEY_Cyrillic_che_vertstroke_ = 16778425;
  GDK_KEY_Cyrillic_de_ = 1732;
  GDK_KEY_Cyrillic_dzhe_ = 1711;
  GDK_KEY_Cyrillic_e_ = 1756;
  GDK_KEY_Cyrillic_ef_ = 1734;
  GDK_KEY_Cyrillic_el_ = 1740;
  GDK_KEY_Cyrillic_em_ = 1741;
  GDK_KEY_Cyrillic_en_ = 1742;
  GDK_KEY_Cyrillic_en_descender_ = 16778403;
  GDK_KEY_Cyrillic_er_ = 1746;
  GDK_KEY_Cyrillic_es_ = 1747;
  GDK_KEY_Cyrillic_ghe_ = 1735;
  GDK_KEY_Cyrillic_ghe_bar_ = 16778387;
  GDK_KEY_Cyrillic_ha_ = 1736;
  GDK_KEY_Cyrillic_ha_descender_ = 16778419;
  GDK_KEY_Cyrillic_hardsign_ = 1759;
  GDK_KEY_Cyrillic_i_ = 1737;
  GDK_KEY_Cyrillic_i_macron_ = 16778467;
  GDK_KEY_Cyrillic_ie_ = 1733;
  GDK_KEY_Cyrillic_io_ = 1699;
  GDK_KEY_Cyrillic_je_ = 1704;
  GDK_KEY_Cyrillic_ka_ = 1739;
  GDK_KEY_Cyrillic_ka_descender_ = 16778395;
  GDK_KEY_Cyrillic_ka_vertstroke_ = 16778397;
  GDK_KEY_Cyrillic_lje_ = 1705;
  GDK_KEY_Cyrillic_nje_ = 1706;
  GDK_KEY_Cyrillic_o_ = 1743;
  GDK_KEY_Cyrillic_o_bar_ = 16778473;
  GDK_KEY_Cyrillic_pe_ = 1744;
  GDK_KEY_Cyrillic_schwa_ = 16778457;
  GDK_KEY_Cyrillic_sha_ = 1755;
  GDK_KEY_Cyrillic_shcha_ = 1757;
  GDK_KEY_Cyrillic_shha_ = 16778427;
  GDK_KEY_Cyrillic_shorti_ = 1738;
  GDK_KEY_Cyrillic_softsign_ = 1752;
  GDK_KEY_Cyrillic_te_ = 1748;
  GDK_KEY_Cyrillic_tse_ = 1731;
  GDK_KEY_Cyrillic_u_ = 1749;
  GDK_KEY_Cyrillic_u_macron_ = 16778479;
  GDK_KEY_Cyrillic_u_straight_ = 16778415;
  GDK_KEY_Cyrillic_u_straight_bar_ = 16778417;
  GDK_KEY_Cyrillic_ve_ = 1751;
  GDK_KEY_Cyrillic_ya_ = 1745;
  GDK_KEY_Cyrillic_yeru_ = 1753;
  GDK_KEY_Cyrillic_yu_ = 1728;
  GDK_KEY_Cyrillic_ze_ = 1754;
  GDK_KEY_Cyrillic_zhe_ = 1750;
  GDK_KEY_Cyrillic_zhe_descender_ = 16778391;
  GDK_KEY_D = 68;
  GDK_KEY_DOS = 269025114;
  GDK_KEY_Dabovedot = 16784906;
  GDK_KEY_Dcaron = 463;
  GDK_KEY_Delete = 65535;
  GDK_KEY_Display = 269025113;
  GDK_KEY_Documents = 269025115;
  GDK_KEY_DongSign = 16785579;
  GDK_KEY_Down = 65364;
  GDK_KEY_Dstroke = 464;
  GDK_KEY_E = 69;
  GDK_KEY_ENG = 957;
  GDK_KEY_ETH = 208;
  GDK_KEY_EZH = 16777655;
  GDK_KEY_Eabovedot = 972;
  GDK_KEY_Eacute = 201;
  GDK_KEY_Ebelowdot = 16785080;
  GDK_KEY_Ecaron = 460;
  GDK_KEY_Ecircumflex = 202;
  GDK_KEY_Ecircumflexacute = 16785086;
  GDK_KEY_Ecircumflexbelowdot = 16785094;
  GDK_KEY_Ecircumflexgrave = 16785088;
  GDK_KEY_Ecircumflexhook = 16785090;
  GDK_KEY_Ecircumflextilde = 16785092;
  GDK_KEY_EcuSign = 16785568;
  GDK_KEY_Ediaeresis = 203;
  GDK_KEY_Egrave = 200;
  GDK_KEY_Ehook = 16785082;
  GDK_KEY_Eisu_Shift = 65327;
  GDK_KEY_Eisu_toggle = 65328;
  GDK_KEY_Eject = 269025068;
  GDK_KEY_Emacron = 938;
  GDK_KEY_End = 65367;
  GDK_KEY_Eogonek = 458;
  GDK_KEY_Escape = 65307;
  GDK_KEY_Eth_ = 208;
  GDK_KEY_Etilde = 16785084;
  GDK_KEY_EuroSign = 8364;
  GDK_KEY_Excel = 269025116;
  GDK_KEY_Execute = 65378;
  GDK_KEY_Explorer = 269025117;
  GDK_KEY_F = 70;
  GDK_KEY_F1 = 65470;
  GDK_KEY_F10 = 65479;
  GDK_KEY_F11 = 65480;
  GDK_KEY_F12 = 65481;
  GDK_KEY_F13 = 65482;
  GDK_KEY_F14 = 65483;
  GDK_KEY_F15 = 65484;
  GDK_KEY_F16 = 65485;
  GDK_KEY_F17 = 65486;
  GDK_KEY_F18 = 65487;
  GDK_KEY_F19 = 65488;
  GDK_KEY_F2 = 65471;
  GDK_KEY_F20 = 65489;
  GDK_KEY_F21 = 65490;
  GDK_KEY_F22 = 65491;
  GDK_KEY_F23 = 65492;
  GDK_KEY_F24 = 65493;
  GDK_KEY_F25 = 65494;
  GDK_KEY_F26 = 65495;
  GDK_KEY_F27 = 65496;
  GDK_KEY_F28 = 65497;
  GDK_KEY_F29 = 65498;
  GDK_KEY_F3 = 65472;
  GDK_KEY_F30 = 65499;
  GDK_KEY_F31 = 65500;
  GDK_KEY_F32 = 65501;
  GDK_KEY_F33 = 65502;
  GDK_KEY_F34 = 65503;
  GDK_KEY_F35 = 65504;
  GDK_KEY_F4 = 65473;
  GDK_KEY_F5 = 65474;
  GDK_KEY_F6 = 65475;
  GDK_KEY_F7 = 65476;
  GDK_KEY_F8 = 65477;
  GDK_KEY_F9 = 65478;
  GDK_KEY_FFrancSign = 16785571;
  GDK_KEY_Fabovedot = 16784926;
  GDK_KEY_Farsi_0 = 16778992;
  GDK_KEY_Farsi_1 = 16778993;
  GDK_KEY_Farsi_2 = 16778994;
  GDK_KEY_Farsi_3 = 16778995;
  GDK_KEY_Farsi_4 = 16778996;
  GDK_KEY_Farsi_5 = 16778997;
  GDK_KEY_Farsi_6 = 16778998;
  GDK_KEY_Farsi_7 = 16778999;
  GDK_KEY_Farsi_8 = 16779000;
  GDK_KEY_Farsi_9 = 16779001;
  GDK_KEY_Farsi_yeh = 16778956;
  GDK_KEY_Favorites = 269025072;
  GDK_KEY_Finance = 269025084;
  GDK_KEY_Find = 65384;
  GDK_KEY_First_Virtual_Screen = 65232;
  GDK_KEY_Forward = 269025063;
  GDK_KEY_FrameBack = 269025181;
  GDK_KEY_FrameForward = 269025182;
  GDK_KEY_G = 71;
  GDK_KEY_Gabovedot = 725;
  GDK_KEY_Game = 269025118;
  GDK_KEY_Gbreve = 683;
  GDK_KEY_Gcaron = 16777702;
  GDK_KEY_Gcedilla = 939;
  GDK_KEY_Gcircumflex = 728;
  GDK_KEY_Georgian_an = 16781520;
  GDK_KEY_Georgian_ban = 16781521;
  GDK_KEY_Georgian_can = 16781546;
  GDK_KEY_Georgian_char = 16781549;
  GDK_KEY_Georgian_chin = 16781545;
  GDK_KEY_Georgian_cil = 16781548;
  GDK_KEY_Georgian_don = 16781523;
  GDK_KEY_Georgian_en = 16781524;
  GDK_KEY_Georgian_fi = 16781558;
  GDK_KEY_Georgian_gan = 16781522;
  GDK_KEY_Georgian_ghan = 16781542;
  GDK_KEY_Georgian_hae = 16781552;
  GDK_KEY_Georgian_har = 16781556;
  GDK_KEY_Georgian_he = 16781553;
  GDK_KEY_Georgian_hie = 16781554;
  GDK_KEY_Georgian_hoe = 16781557;
  GDK_KEY_Georgian_in = 16781528;
  GDK_KEY_Georgian_jhan = 16781551;
  GDK_KEY_Georgian_jil = 16781547;
  GDK_KEY_Georgian_kan = 16781529;
  GDK_KEY_Georgian_khar = 16781541;
  GDK_KEY_Georgian_las = 16781530;
  GDK_KEY_Georgian_man = 16781531;
  GDK_KEY_Georgian_nar = 16781532;
  GDK_KEY_Georgian_on = 16781533;
  GDK_KEY_Georgian_par = 16781534;
  GDK_KEY_Georgian_phar = 16781540;
  GDK_KEY_Georgian_qar = 16781543;
  GDK_KEY_Georgian_rae = 16781536;
  GDK_KEY_Georgian_san = 16781537;
  GDK_KEY_Georgian_shin = 16781544;
  GDK_KEY_Georgian_tan = 16781527;
  GDK_KEY_Georgian_tar = 16781538;
  GDK_KEY_Georgian_un = 16781539;
  GDK_KEY_Georgian_vin = 16781525;
  GDK_KEY_Georgian_we = 16781555;
  GDK_KEY_Georgian_xan = 16781550;
  GDK_KEY_Georgian_zen = 16781526;
  GDK_KEY_Georgian_zhar = 16781535;
  GDK_KEY_Go = 269025119;
  GDK_KEY_Greek_ALPHA = 1985;
  GDK_KEY_Greek_ALPHAaccent = 1953;
  GDK_KEY_Greek_BETA = 1986;
  GDK_KEY_Greek_CHI = 2007;
  GDK_KEY_Greek_DELTA = 1988;
  GDK_KEY_Greek_EPSILON = 1989;
  GDK_KEY_Greek_EPSILONaccent = 1954;
  GDK_KEY_Greek_ETA = 1991;
  GDK_KEY_Greek_ETAaccent = 1955;
  GDK_KEY_Greek_GAMMA = 1987;
  GDK_KEY_Greek_IOTA = 1993;
  GDK_KEY_Greek_IOTAaccent = 1956;
  GDK_KEY_Greek_IOTAdiaeresis = 1957;
  GDK_KEY_Greek_IOTAdieresis = 1957;
  GDK_KEY_Greek_KAPPA = 1994;
  GDK_KEY_Greek_LAMBDA = 1995;
  GDK_KEY_Greek_LAMDA = 1995;
  GDK_KEY_Greek_MU = 1996;
  GDK_KEY_Greek_NU = 1997;
  GDK_KEY_Greek_OMEGA = 2009;
  GDK_KEY_Greek_OMEGAaccent = 1963;
  GDK_KEY_Greek_OMICRON = 1999;
  GDK_KEY_Greek_OMICRONaccent = 1959;
  GDK_KEY_Greek_PHI = 2006;
  GDK_KEY_Greek_PI = 2000;
  GDK_KEY_Greek_PSI = 2008;
  GDK_KEY_Greek_RHO = 2001;
  GDK_KEY_Greek_SIGMA = 2002;
  GDK_KEY_Greek_TAU = 2004;
  GDK_KEY_Greek_THETA = 1992;
  GDK_KEY_Greek_UPSILON = 2005;
  GDK_KEY_Greek_UPSILONaccent = 1960;
  GDK_KEY_Greek_UPSILONdieresis = 1961;
  GDK_KEY_Greek_XI = 1998;
  GDK_KEY_Greek_ZETA = 1990;
  GDK_KEY_Greek_accentdieresis = 1966;
  GDK_KEY_Greek_alpha_ = 2017;
  GDK_KEY_Greek_alphaaccent_ = 1969;
  GDK_KEY_Greek_beta_ = 2018;
  GDK_KEY_Greek_chi_ = 2039;
  GDK_KEY_Greek_delta_ = 2020;
  GDK_KEY_Greek_epsilon_ = 2021;
  GDK_KEY_Greek_epsilonaccent_ = 1970;
  GDK_KEY_Greek_eta_ = 2023;
  GDK_KEY_Greek_etaaccent_ = 1971;
  GDK_KEY_Greek_finalsmallsigma = 2035;
  GDK_KEY_Greek_gamma_ = 2019;
  GDK_KEY_Greek_horizbar = 1967;
  GDK_KEY_Greek_iota_ = 2025;
  GDK_KEY_Greek_iotaaccent_ = 1972;
  GDK_KEY_Greek_iotaaccentdieresis = 1974;
  GDK_KEY_Greek_iotadieresis_ = 1973;
  GDK_KEY_Greek_kappa_ = 2026;
  GDK_KEY_Greek_lambda_ = 2027;
  GDK_KEY_Greek_lamda_ = 2027;
  GDK_KEY_Greek_mu_ = 2028;
  GDK_KEY_Greek_nu_ = 2029;
  GDK_KEY_Greek_omega_ = 2041;
  GDK_KEY_Greek_omegaaccent_ = 1979;
  GDK_KEY_Greek_omicron_ = 2031;
  GDK_KEY_Greek_omicronaccent_ = 1975;
  GDK_KEY_Greek_phi_ = 2038;
  GDK_KEY_Greek_pi_ = 2032;
  GDK_KEY_Greek_psi_ = 2040;
  GDK_KEY_Greek_rho_ = 2033;
  GDK_KEY_Greek_sigma_ = 2034;
  GDK_KEY_Greek_switch = 65406;
  GDK_KEY_Greek_tau_ = 2036;
  GDK_KEY_Greek_theta_ = 2024;
  GDK_KEY_Greek_upsilon_ = 2037;
  GDK_KEY_Greek_upsilonaccent_ = 1976;
  GDK_KEY_Greek_upsilonaccentdieresis = 1978;
  GDK_KEY_Greek_upsilondieresis_ = 1977;
  GDK_KEY_Greek_xi_ = 2030;
  GDK_KEY_Greek_zeta_ = 2022;
  GDK_KEY_Green = 269025188;
  GDK_KEY_H = 72;
  GDK_KEY_Hangul = 65329;
  GDK_KEY_Hangul_A = 3775;
  GDK_KEY_Hangul_AE = 3776;
  GDK_KEY_Hangul_AraeA = 3830;
  GDK_KEY_Hangul_AraeAE = 3831;
  GDK_KEY_Hangul_Banja = 65337;
  GDK_KEY_Hangul_Cieuc = 3770;
  GDK_KEY_Hangul_Codeinput = 65335;
  GDK_KEY_Hangul_Dikeud = 3751;
  GDK_KEY_Hangul_E = 3780;
  GDK_KEY_Hangul_EO = 3779;
  GDK_KEY_Hangul_EU = 3793;
  GDK_KEY_Hangul_End = 65331;
  GDK_KEY_Hangul_Hanja = 65332;
  GDK_KEY_Hangul_Hieuh = 3774;
  GDK_KEY_Hangul_I = 3795;
  GDK_KEY_Hangul_Ieung = 3767;
  GDK_KEY_Hangul_J_Cieuc = 3818;
  GDK_KEY_Hangul_J_Dikeud = 3802;
  GDK_KEY_Hangul_J_Hieuh = 3822;
  GDK_KEY_Hangul_J_Ieung = 3816;
  GDK_KEY_Hangul_J_Jieuj = 3817;
  GDK_KEY_Hangul_J_Khieuq = 3819;
  GDK_KEY_Hangul_J_Kiyeog = 3796;
  GDK_KEY_Hangul_J_KiyeogSios = 3798;
  GDK_KEY_Hangul_J_KkogjiDalrinIeung = 3833;
  GDK_KEY_Hangul_J_Mieum = 3811;
  GDK_KEY_Hangul_J_Nieun = 3799;
  GDK_KEY_Hangul_J_NieunHieuh = 3801;
  GDK_KEY_Hangul_J_NieunJieuj = 3800;
  GDK_KEY_Hangul_J_PanSios = 3832;
  GDK_KEY_Hangul_J_Phieuf = 3821;
  GDK_KEY_Hangul_J_Pieub = 3812;
  GDK_KEY_Hangul_J_PieubSios = 3813;
  GDK_KEY_Hangul_J_Rieul = 3803;
  GDK_KEY_Hangul_J_RieulHieuh = 3810;
  GDK_KEY_Hangul_J_RieulKiyeog = 3804;
  GDK_KEY_Hangul_J_RieulMieum = 3805;
  GDK_KEY_Hangul_J_RieulPhieuf = 3809;
  GDK_KEY_Hangul_J_RieulPieub = 3806;
  GDK_KEY_Hangul_J_RieulSios = 3807;
  GDK_KEY_Hangul_J_RieulTieut = 3808;
  GDK_KEY_Hangul_J_Sios = 3814;
  GDK_KEY_Hangul_J_SsangKiyeog = 3797;
  GDK_KEY_Hangul_J_SsangSios = 3815;
  GDK_KEY_Hangul_J_Tieut = 3820;
  GDK_KEY_Hangul_J_YeorinHieuh = 3834;
  GDK_KEY_Hangul_Jamo = 65333;
  GDK_KEY_Hangul_Jeonja = 65336;
  GDK_KEY_Hangul_Jieuj = 3768;
  GDK_KEY_Hangul_Khieuq = 3771;
  GDK_KEY_Hangul_Kiyeog = 3745;
  GDK_KEY_Hangul_KiyeogSios = 3747;
  GDK_KEY_Hangul_KkogjiDalrinIeung = 3827;
  GDK_KEY_Hangul_Mieum = 3761;
  GDK_KEY_Hangul_MultipleCandidate = 65341;
  GDK_KEY_Hangul_Nieun = 3748;
  GDK_KEY_Hangul_NieunHieuh = 3750;
  GDK_KEY_Hangul_NieunJieuj = 3749;
  GDK_KEY_Hangul_O = 3783;
  GDK_KEY_Hangul_OE = 3786;
  GDK_KEY_Hangul_PanSios = 3826;
  GDK_KEY_Hangul_Phieuf = 3773;
  GDK_KEY_Hangul_Pieub = 3762;
  GDK_KEY_Hangul_PieubSios = 3764;
  GDK_KEY_Hangul_PostHanja = 65339;
  GDK_KEY_Hangul_PreHanja = 65338;
  GDK_KEY_Hangul_PreviousCandidate = 65342;
  GDK_KEY_Hangul_Rieul = 3753;
  GDK_KEY_Hangul_RieulHieuh = 3760;
  GDK_KEY_Hangul_RieulKiyeog = 3754;
  GDK_KEY_Hangul_RieulMieum = 3755;
  GDK_KEY_Hangul_RieulPhieuf = 3759;
  GDK_KEY_Hangul_RieulPieub = 3756;
  GDK_KEY_Hangul_RieulSios = 3757;
  GDK_KEY_Hangul_RieulTieut = 3758;
  GDK_KEY_Hangul_RieulYeorinHieuh = 3823;
  GDK_KEY_Hangul_Romaja = 65334;
  GDK_KEY_Hangul_SingleCandidate = 65340;
  GDK_KEY_Hangul_Sios = 3765;
  GDK_KEY_Hangul_Special = 65343;
  GDK_KEY_Hangul_SsangDikeud = 3752;
  GDK_KEY_Hangul_SsangJieuj = 3769;
  GDK_KEY_Hangul_SsangKiyeog = 3746;
  GDK_KEY_Hangul_SsangPieub = 3763;
  GDK_KEY_Hangul_SsangSios = 3766;
  GDK_KEY_Hangul_Start = 65330;
  GDK_KEY_Hangul_SunkyeongeumMieum = 3824;
  GDK_KEY_Hangul_SunkyeongeumPhieuf = 3828;
  GDK_KEY_Hangul_SunkyeongeumPieub = 3825;
  GDK_KEY_Hangul_Tieut = 3772;
  GDK_KEY_Hangul_U = 3788;
  GDK_KEY_Hangul_WA = 3784;
  GDK_KEY_Hangul_WAE = 3785;
  GDK_KEY_Hangul_WE = 3790;
  GDK_KEY_Hangul_WEO = 3789;
  GDK_KEY_Hangul_WI = 3791;
  GDK_KEY_Hangul_YA = 3777;
  GDK_KEY_Hangul_YAE = 3778;
  GDK_KEY_Hangul_YE = 3782;
  GDK_KEY_Hangul_YEO = 3781;
  GDK_KEY_Hangul_YI = 3794;
  GDK_KEY_Hangul_YO = 3787;
  GDK_KEY_Hangul_YU = 3792;
  GDK_KEY_Hangul_YeorinHieuh = 3829;
  GDK_KEY_Hangul_switch = 65406;
  GDK_KEY_Hankaku = 65321;
  GDK_KEY_Hcircumflex = 678;
  GDK_KEY_Hebrew_switch = 65406;
  GDK_KEY_Help = 65386;
  GDK_KEY_Henkan = 65315;
  GDK_KEY_Henkan_Mode = 65315;
  GDK_KEY_Hibernate = 269025192;
  GDK_KEY_Hiragana = 65317;
  GDK_KEY_Hiragana_Katakana = 65319;
  GDK_KEY_History = 269025079;
  GDK_KEY_Home = 65360;
  GDK_KEY_HomePage = 269025048;
  GDK_KEY_HotLinks = 269025082;
  GDK_KEY_Hstroke = 673;
  GDK_KEY_Hyper_L = 65517;
  GDK_KEY_Hyper_R = 65518;
  GDK_KEY_I = 73;
  GDK_KEY_ISO_Center_Object = 65075;
  GDK_KEY_ISO_Continuous_Underline = 65072;
  GDK_KEY_ISO_Discontinuous_Underline = 65073;
  GDK_KEY_ISO_Emphasize = 65074;
  GDK_KEY_ISO_Enter = 65076;
  GDK_KEY_ISO_Fast_Cursor_Down = 65071;
  GDK_KEY_ISO_Fast_Cursor_Left = 65068;
  GDK_KEY_ISO_Fast_Cursor_Right = 65069;
  GDK_KEY_ISO_Fast_Cursor_Up = 65070;
  GDK_KEY_ISO_First_Group = 65036;
  GDK_KEY_ISO_First_Group_Lock = 65037;
  GDK_KEY_ISO_Group_Latch = 65030;
  GDK_KEY_ISO_Group_Lock = 65031;
  GDK_KEY_ISO_Group_Shift = 65406;
  GDK_KEY_ISO_Last_Group = 65038;
  GDK_KEY_ISO_Last_Group_Lock = 65039;
  GDK_KEY_ISO_Left_Tab = 65056;
  GDK_KEY_ISO_Level2_Latch = 65026;
  GDK_KEY_ISO_Level3_Latch = 65028;
  GDK_KEY_ISO_Level3_Lock = 65029;
  GDK_KEY_ISO_Level3_Shift = 65027;
  GDK_KEY_ISO_Level5_Latch = 65042;
  GDK_KEY_ISO_Level5_Lock = 65043;
  GDK_KEY_ISO_Level5_Shift = 65041;
  GDK_KEY_ISO_Lock = 65025;
  GDK_KEY_ISO_Move_Line_Down = 65058;
  GDK_KEY_ISO_Move_Line_Up = 65057;
  GDK_KEY_ISO_Next_Group = 65032;
  GDK_KEY_ISO_Next_Group_Lock = 65033;
  GDK_KEY_ISO_Partial_Line_Down = 65060;
  GDK_KEY_ISO_Partial_Line_Up = 65059;
  GDK_KEY_ISO_Partial_Space_Left = 65061;
  GDK_KEY_ISO_Partial_Space_Right = 65062;
  GDK_KEY_ISO_Prev_Group = 65034;
  GDK_KEY_ISO_Prev_Group_Lock = 65035;
  GDK_KEY_ISO_Release_Both_Margins = 65067;
  GDK_KEY_ISO_Release_Margin_Left = 65065;
  GDK_KEY_ISO_Release_Margin_Right = 65066;
  GDK_KEY_ISO_Set_Margin_Left = 65063;
  GDK_KEY_ISO_Set_Margin_Right = 65064;
  GDK_KEY_Iabovedot = 681;
  GDK_KEY_Iacute = 205;
  GDK_KEY_Ibelowdot = 16785098;
  GDK_KEY_Ibreve = 16777516;
  GDK_KEY_Icircumflex = 206;
  GDK_KEY_Idiaeresis = 207;
  GDK_KEY_Igrave = 204;
  GDK_KEY_Ihook = 16785096;
  GDK_KEY_Imacron = 975;
  GDK_KEY_Insert = 65379;
  GDK_KEY_Iogonek = 967;
  GDK_KEY_Itilde = 933;
  GDK_KEY_J = 74;
  GDK_KEY_Jcircumflex = 684;
  GDK_KEY_K = 75;
  GDK_KEY_KP_0 = 65456;
  GDK_KEY_KP_1 = 65457;
  GDK_KEY_KP_2 = 65458;
  GDK_KEY_KP_3 = 65459;
  GDK_KEY_KP_4 = 65460;
  GDK_KEY_KP_5 = 65461;
  GDK_KEY_KP_6 = 65462;
  GDK_KEY_KP_7 = 65463;
  GDK_KEY_KP_8 = 65464;
  GDK_KEY_KP_9 = 65465;
  GDK_KEY_KP_Add = 65451;
  GDK_KEY_KP_Begin = 65437;
  GDK_KEY_KP_Decimal = 65454;
  GDK_KEY_KP_Delete = 65439;
  GDK_KEY_KP_Divide = 65455;
  GDK_KEY_KP_Down = 65433;
  GDK_KEY_KP_End = 65436;
  GDK_KEY_KP_Enter = 65421;
  GDK_KEY_KP_Equal = 65469;
  GDK_KEY_KP_F1 = 65425;
  GDK_KEY_KP_F2 = 65426;
  GDK_KEY_KP_F3 = 65427;
  GDK_KEY_KP_F4 = 65428;
  GDK_KEY_KP_Home = 65429;
  GDK_KEY_KP_Insert = 65438;
  GDK_KEY_KP_Left = 65430;
  GDK_KEY_KP_Multiply = 65450;
  GDK_KEY_KP_Next = 65435;
  GDK_KEY_KP_Page_Down = 65435;
  GDK_KEY_KP_Page_Up = 65434;
  GDK_KEY_KP_Prior = 65434;
  GDK_KEY_KP_Right = 65432;
  GDK_KEY_KP_Separator = 65452;
  GDK_KEY_KP_Space = 65408;
  GDK_KEY_KP_Subtract = 65453;
  GDK_KEY_KP_Tab = 65417;
  GDK_KEY_KP_Up = 65431;
  GDK_KEY_Kana_Lock = 65325;
  GDK_KEY_Kana_Shift = 65326;
  GDK_KEY_Kanji = 65313;
  GDK_KEY_Kanji_Bangou = 65335;
  GDK_KEY_Katakana = 65318;
  GDK_KEY_KbdBrightnessDown = 269025030;
  GDK_KEY_KbdBrightnessUp = 269025029;
  GDK_KEY_KbdLightOnOff = 269025028;
  GDK_KEY_Kcedilla = 979;
  GDK_KEY_Keyboard = 269025203;
  GDK_KEY_Korean_Won = 3839;
  GDK_KEY_L = 76;
  GDK_KEY_L1 = 65480;
  GDK_KEY_L10 = 65489;
  GDK_KEY_L2 = 65481;
  GDK_KEY_L3 = 65482;
  GDK_KEY_L4 = 65483;
  GDK_KEY_L5 = 65484;
  GDK_KEY_L6 = 65485;
  GDK_KEY_L7 = 65486;
  GDK_KEY_L8 = 65487;
  GDK_KEY_L9 = 65488;
  GDK_KEY_Lacute = 453;
  GDK_KEY_Last_Virtual_Screen = 65236;
  GDK_KEY_Launch0 = 269025088;
  GDK_KEY_Launch1 = 269025089;
  GDK_KEY_Launch2 = 269025090;
  GDK_KEY_Launch3 = 269025091;
  GDK_KEY_Launch4 = 269025092;
  GDK_KEY_Launch5 = 269025093;
  GDK_KEY_Launch6 = 269025094;
  GDK_KEY_Launch7 = 269025095;
  GDK_KEY_Launch8 = 269025096;
  GDK_KEY_Launch9 = 269025097;
  GDK_KEY_LaunchA = 269025098;
  GDK_KEY_LaunchB = 269025099;
  GDK_KEY_LaunchC = 269025100;
  GDK_KEY_LaunchD = 269025101;
  GDK_KEY_LaunchE = 269025102;
  GDK_KEY_LaunchF = 269025103;
  GDK_KEY_Lbelowdot = 16784950;
  GDK_KEY_Lcaron = 421;
  GDK_KEY_Lcedilla = 934;
  GDK_KEY_Left = 65361;
  GDK_KEY_LightBulb = 269025077;
  GDK_KEY_Linefeed = 65290;
  GDK_KEY_LiraSign = 16785572;
  GDK_KEY_LogGrabInfo = 269024805;
  GDK_KEY_LogOff = 269025121;
  GDK_KEY_LogWindowTree = 269024804;
  GDK_KEY_Lstroke = 419;
  GDK_KEY_M = 77;
  GDK_KEY_Mabovedot = 16784960;
  GDK_KEY_Macedonia_DSE = 1717;
  GDK_KEY_Macedonia_GJE = 1714;
  GDK_KEY_Macedonia_KJE = 1724;
  GDK_KEY_Macedonia_dse_ = 1701;
  GDK_KEY_Macedonia_gje_ = 1698;
  GDK_KEY_Macedonia_kje_ = 1708;
  GDK_KEY_Mae_Koho = 65342;
  GDK_KEY_Mail = 269025049;
  GDK_KEY_MailForward = 269025168;
  GDK_KEY_Market = 269025122;
  GDK_KEY_Massyo = 65324;
  GDK_KEY_Meeting = 269025123;
  GDK_KEY_Memo = 269025054;
  GDK_KEY_Menu = 65383;
  GDK_KEY_MenuKB = 269025125;
  GDK_KEY_MenuPB = 269025126;
  GDK_KEY_Messenger = 269025166;
  GDK_KEY_Meta_L = 65511;
  GDK_KEY_Meta_R = 65512;
  GDK_KEY_MillSign = 16785573;
  GDK_KEY_ModeLock = 269025025;
  GDK_KEY_Mode_switch = 65406;
  GDK_KEY_MonBrightnessDown = 269025027;
  GDK_KEY_MonBrightnessUp = 269025026;
  GDK_KEY_MouseKeys_Accel_Enable = 65143;
  GDK_KEY_MouseKeys_Enable = 65142;
  GDK_KEY_Muhenkan = 65314;
  GDK_KEY_Multi_key = 65312;
  GDK_KEY_MultipleCandidate = 65341;
  GDK_KEY_Music = 269025170;
  GDK_KEY_MyComputer = 269025075;
  GDK_KEY_MySites = 269025127;
  GDK_KEY_N = 78;
  GDK_KEY_Nacute = 465;
  GDK_KEY_NairaSign = 16785574;
  GDK_KEY_Ncaron = 466;
  GDK_KEY_Ncedilla = 977;
  GDK_KEY_New = 269025128;
  GDK_KEY_NewSheqelSign = 16785578;
  GDK_KEY_News = 269025129;
  GDK_KEY_Next = 65366;
  GDK_KEY_Next_VMode = 269024802;
  GDK_KEY_Next_Virtual_Screen = 65234;
  GDK_KEY_Ntilde = 209;
  GDK_KEY_Num_Lock = 65407;
  GDK_KEY_O = 79;
  GDK_KEY_OE = 5052;
  GDK_KEY_Oacute = 211;
  GDK_KEY_Obarred = 16777631;
  GDK_KEY_Obelowdot = 16785100;
  GDK_KEY_Ocaron = 16777681;
  GDK_KEY_Ocircumflex = 212;
  GDK_KEY_Ocircumflexacute = 16785104;
  GDK_KEY_Ocircumflexbelowdot = 16785112;
  GDK_KEY_Ocircumflexgrave = 16785106;
  GDK_KEY_Ocircumflexhook = 16785108;
  GDK_KEY_Ocircumflextilde = 16785110;
  GDK_KEY_Odiaeresis = 214;
  GDK_KEY_Odoubleacute = 469;
  GDK_KEY_OfficeHome = 269025130;
  GDK_KEY_Ograve = 210;
  GDK_KEY_Ohook = 16785102;
  GDK_KEY_Ohorn = 16777632;
  GDK_KEY_Ohornacute = 16785114;
  GDK_KEY_Ohornbelowdot = 16785122;
  GDK_KEY_Ohorngrave = 16785116;
  GDK_KEY_Ohornhook = 16785118;
  GDK_KEY_Ohorntilde = 16785120;
  GDK_KEY_Omacron = 978;
  GDK_KEY_Ooblique = 216;
  GDK_KEY_Open = 269025131;
  GDK_KEY_OpenURL = 269025080;
  GDK_KEY_Option = 269025132;
  GDK_KEY_Oslash = 216;
  GDK_KEY_Otilde = 213;
  GDK_KEY_Overlay1_Enable = 65144;
  GDK_KEY_Overlay2_Enable = 65145;
  GDK_KEY_P = 80;
  GDK_KEY_Pabovedot = 16784982;
  GDK_KEY_Page_Down = 65366;
  GDK_KEY_Page_Up = 65365;
  GDK_KEY_Paste = 269025133;
  GDK_KEY_Pause = 65299;
  GDK_KEY_PesetaSign = 16785575;
  GDK_KEY_Phone = 269025134;
  GDK_KEY_Pictures = 269025169;
  GDK_KEY_Pointer_Accelerate = 65274;
  GDK_KEY_Pointer_Button1 = 65257;
  GDK_KEY_Pointer_Button2 = 65258;
  GDK_KEY_Pointer_Button3 = 65259;
  GDK_KEY_Pointer_Button4 = 65260;
  GDK_KEY_Pointer_Button5 = 65261;
  GDK_KEY_Pointer_Button_Dflt = 65256;
  GDK_KEY_Pointer_DblClick1 = 65263;
  GDK_KEY_Pointer_DblClick2 = 65264;
  GDK_KEY_Pointer_DblClick3 = 65265;
  GDK_KEY_Pointer_DblClick4 = 65266;
  GDK_KEY_Pointer_DblClick5 = 65267;
  GDK_KEY_Pointer_DblClick_Dflt = 65262;
  GDK_KEY_Pointer_DfltBtnNext = 65275;
  GDK_KEY_Pointer_DfltBtnPrev = 65276;
  GDK_KEY_Pointer_Down = 65251;
  GDK_KEY_Pointer_DownLeft = 65254;
  GDK_KEY_Pointer_DownRight = 65255;
  GDK_KEY_Pointer_Drag1 = 65269;
  GDK_KEY_Pointer_Drag2 = 65270;
  GDK_KEY_Pointer_Drag3 = 65271;
  GDK_KEY_Pointer_Drag4 = 65272;
  GDK_KEY_Pointer_Drag5 = 65277;
  GDK_KEY_Pointer_Drag_Dflt = 65268;
  GDK_KEY_Pointer_EnableKeys = 65273;
  GDK_KEY_Pointer_Left = 65248;
  GDK_KEY_Pointer_Right = 65249;
  GDK_KEY_Pointer_Up = 65250;
  GDK_KEY_Pointer_UpLeft = 65252;
  GDK_KEY_Pointer_UpRight = 65253;
  GDK_KEY_PowerDown = 269025057;
  GDK_KEY_PowerOff = 269025066;
  GDK_KEY_Prev_VMode = 269024803;
  GDK_KEY_Prev_Virtual_Screen = 65233;
  GDK_KEY_PreviousCandidate = 65342;
  GDK_KEY_Print = 65377;
  GDK_KEY_Prior = 65365;
  GDK_KEY_Q = 81;
  GDK_KEY_R = 82;
  GDK_KEY_R1 = 65490;
  GDK_KEY_R10 = 65499;
  GDK_KEY_R11 = 65500;
  GDK_KEY_R12 = 65501;
  GDK_KEY_R13 = 65502;
  GDK_KEY_R14 = 65503;
  GDK_KEY_R15 = 65504;
  GDK_KEY_R2 = 65491;
  GDK_KEY_R3 = 65492;
  GDK_KEY_R4 = 65493;
  GDK_KEY_R5 = 65494;
  GDK_KEY_R6 = 65495;
  GDK_KEY_R7 = 65496;
  GDK_KEY_R8 = 65497;
  GDK_KEY_R9 = 65498;
  GDK_KEY_RFKill = 269025205;
  GDK_KEY_Racute = 448;
  GDK_KEY_Rcaron = 472;
  GDK_KEY_Rcedilla = 931;
  GDK_KEY_Red = 269025187;
  GDK_KEY_Redo = 65382;
  GDK_KEY_Refresh = 269025065;
  GDK_KEY_Reload = 269025139;
  GDK_KEY_RepeatKeys_Enable = 65138;
  GDK_KEY_Reply = 269025138;
  GDK_KEY_Return = 65293;
  GDK_KEY_Right = 65363;
  GDK_KEY_RockerDown = 269025060;
  GDK_KEY_RockerEnter = 269025061;
  GDK_KEY_RockerUp = 269025059;
  GDK_KEY_Romaji = 65316;
  GDK_KEY_RotateWindows = 269025140;
  GDK_KEY_RotationKB = 269025142;
  GDK_KEY_RotationPB = 269025141;
  GDK_KEY_RupeeSign = 16785576;
  GDK_KEY_S = 83;
  GDK_KEY_SCHWA = 16777615;
  GDK_KEY_Sabovedot = 16784992;
  GDK_KEY_Sacute = 422;
  GDK_KEY_Save = 269025143;
  GDK_KEY_Scaron = 425;
  GDK_KEY_Scedilla = 426;
  GDK_KEY_Scircumflex = 734;
  GDK_KEY_ScreenSaver = 269025069;
  GDK_KEY_ScrollClick = 269025146;
  GDK_KEY_ScrollDown = 269025145;
  GDK_KEY_ScrollUp = 269025144;
  GDK_KEY_Scroll_Lock = 65300;
  GDK_KEY_Search = 269025051;
  GDK_KEY_Select = 65376;
  GDK_KEY_SelectButton = 269025184;
  GDK_KEY_Send = 269025147;
  GDK_KEY_Serbian_DJE = 1713;
  GDK_KEY_Serbian_DZE = 1727;
  GDK_KEY_Serbian_JE = 1720;
  GDK_KEY_Serbian_LJE = 1721;
  GDK_KEY_Serbian_NJE = 1722;
  GDK_KEY_Serbian_TSHE = 1723;
  GDK_KEY_Serbian_dje_ = 1697;
  GDK_KEY_Serbian_dze_ = 1711;
  GDK_KEY_Serbian_je_ = 1704;
  GDK_KEY_Serbian_lje_ = 1705;
  GDK_KEY_Serbian_nje_ = 1706;
  GDK_KEY_Serbian_tshe_ = 1707;
  GDK_KEY_Shift_L = 65505;
  GDK_KEY_Shift_Lock = 65510;
  GDK_KEY_Shift_R = 65506;
  GDK_KEY_Shop = 269025078;
  GDK_KEY_SingleCandidate = 65340;
  GDK_KEY_Sinh_a = 16780677;
  GDK_KEY_Sinh_aa = 16780678;
  GDK_KEY_Sinh_aa2 = 16780751;
  GDK_KEY_Sinh_ae = 16780679;
  GDK_KEY_Sinh_ae2 = 16780752;
  GDK_KEY_Sinh_aee = 16780680;
  GDK_KEY_Sinh_aee2 = 16780753;
  GDK_KEY_Sinh_ai = 16780691;
  GDK_KEY_Sinh_ai2 = 16780763;
  GDK_KEY_Sinh_al = 16780746;
  GDK_KEY_Sinh_au = 16780694;
  GDK_KEY_Sinh_au2 = 16780766;
  GDK_KEY_Sinh_ba = 16780726;
  GDK_KEY_Sinh_bha = 16780727;
  GDK_KEY_Sinh_ca = 16780704;
  GDK_KEY_Sinh_cha = 16780705;
  GDK_KEY_Sinh_dda = 16780713;
  GDK_KEY_Sinh_ddha = 16780714;
  GDK_KEY_Sinh_dha = 16780719;
  GDK_KEY_Sinh_dhha = 16780720;
  GDK_KEY_Sinh_e = 16780689;
  GDK_KEY_Sinh_e2 = 16780761;
  GDK_KEY_Sinh_ee = 16780690;
  GDK_KEY_Sinh_ee2 = 16780762;
  GDK_KEY_Sinh_fa = 16780742;
  GDK_KEY_Sinh_ga = 16780700;
  GDK_KEY_Sinh_gha = 16780701;
  GDK_KEY_Sinh_h2 = 16780675;
  GDK_KEY_Sinh_ha = 16780740;
  GDK_KEY_Sinh_i = 16780681;
  GDK_KEY_Sinh_i2 = 16780754;
  GDK_KEY_Sinh_ii = 16780682;
  GDK_KEY_Sinh_ii2 = 16780755;
  GDK_KEY_Sinh_ja = 16780706;
  GDK_KEY_Sinh_jha = 16780707;
  GDK_KEY_Sinh_jnya = 16780709;
  GDK_KEY_Sinh_ka = 16780698;
  GDK_KEY_Sinh_kha = 16780699;
  GDK_KEY_Sinh_kunddaliya = 16780788;
  GDK_KEY_Sinh_la = 16780733;
  GDK_KEY_Sinh_lla = 16780741;
  GDK_KEY_Sinh_lu = 16780687;
  GDK_KEY_Sinh_lu2 = 16780767;
  GDK_KEY_Sinh_luu = 16780688;
  GDK_KEY_Sinh_luu2 = 16780787;
  GDK_KEY_Sinh_ma = 16780728;
  GDK_KEY_Sinh_mba = 16780729;
  GDK_KEY_Sinh_na = 16780721;
  GDK_KEY_Sinh_ndda = 16780716;
  GDK_KEY_Sinh_ndha = 16780723;
  GDK_KEY_Sinh_ng = 16780674;
  GDK_KEY_Sinh_ng2 = 16780702;
  GDK_KEY_Sinh_nga = 16780703;
  GDK_KEY_Sinh_nja = 16780710;
  GDK_KEY_Sinh_nna = 16780715;
  GDK_KEY_Sinh_nya = 16780708;
  GDK_KEY_Sinh_o = 16780692;
  GDK_KEY_Sinh_o2 = 16780764;
  GDK_KEY_Sinh_oo = 16780693;
  GDK_KEY_Sinh_oo2 = 16780765;
  GDK_KEY_Sinh_pa = 16780724;
  GDK_KEY_Sinh_pha = 16780725;
  GDK_KEY_Sinh_ra = 16780731;
  GDK_KEY_Sinh_ri = 16780685;
  GDK_KEY_Sinh_rii = 16780686;
  GDK_KEY_Sinh_ru2 = 16780760;
  GDK_KEY_Sinh_ruu2 = 16780786;
  GDK_KEY_Sinh_sa = 16780739;
  GDK_KEY_Sinh_sha = 16780737;
  GDK_KEY_Sinh_ssha = 16780738;
  GDK_KEY_Sinh_tha = 16780717;
  GDK_KEY_Sinh_thha = 16780718;
  GDK_KEY_Sinh_tta = 16780711;
  GDK_KEY_Sinh_ttha = 16780712;
  GDK_KEY_Sinh_u = 16780683;
  GDK_KEY_Sinh_u2 = 16780756;
  GDK_KEY_Sinh_uu = 16780684;
  GDK_KEY_Sinh_uu2 = 16780758;
  GDK_KEY_Sinh_va = 16780736;
  GDK_KEY_Sinh_ya = 16780730;
  GDK_KEY_Sleep = 269025071;
  GDK_KEY_SlowKeys_Enable = 65139;
  GDK_KEY_Spell = 269025148;
  GDK_KEY_SplitScreen = 269025149;
  GDK_KEY_Standby = 269025040;
  GDK_KEY_Start = 269025050;
  GDK_KEY_StickyKeys_Enable = 65141;
  GDK_KEY_Stop = 269025064;
  GDK_KEY_Subtitle = 269025178;
  GDK_KEY_Super_L = 65515;
  GDK_KEY_Super_R = 65516;
  GDK_KEY_Support = 269025150;
  GDK_KEY_Suspend = 269025191;
  GDK_KEY_Switch_VT_1 = 269024769;
  GDK_KEY_Switch_VT_10 = 269024778;
  GDK_KEY_Switch_VT_11 = 269024779;
  GDK_KEY_Switch_VT_12 = 269024780;
  GDK_KEY_Switch_VT_2 = 269024770;
  GDK_KEY_Switch_VT_3 = 269024771;
  GDK_KEY_Switch_VT_4 = 269024772;
  GDK_KEY_Switch_VT_5 = 269024773;
  GDK_KEY_Switch_VT_6 = 269024774;
  GDK_KEY_Switch_VT_7 = 269024775;
  GDK_KEY_Switch_VT_8 = 269024776;
  GDK_KEY_Switch_VT_9 = 269024777;
  GDK_KEY_Sys_Req = 65301;
  GDK_KEY_T = 84;
  GDK_KEY_THORN = 222;
  GDK_KEY_Tab = 65289;
  GDK_KEY_Tabovedot = 16785002;
  GDK_KEY_TaskPane = 269025151;
  GDK_KEY_Tcaron = 427;
  GDK_KEY_Tcedilla = 478;
  GDK_KEY_Terminal = 269025152;
  GDK_KEY_Terminate_Server = 65237;
  GDK_KEY_Thai_baht = 3551;
  GDK_KEY_Thai_bobaimai = 3514;
  GDK_KEY_Thai_chochan = 3496;
  GDK_KEY_Thai_chochang = 3498;
  GDK_KEY_Thai_choching = 3497;
  GDK_KEY_Thai_chochoe = 3500;
  GDK_KEY_Thai_dochada = 3502;
  GDK_KEY_Thai_dodek = 3508;
  GDK_KEY_Thai_fofa = 3517;
  GDK_KEY_Thai_fofan = 3519;
  GDK_KEY_Thai_hohip = 3531;
  GDK_KEY_Thai_honokhuk = 3534;
  GDK_KEY_Thai_khokhai = 3490;
  GDK_KEY_Thai_khokhon = 3493;
  GDK_KEY_Thai_khokhuat = 3491;
  GDK_KEY_Thai_khokhwai = 3492;
  GDK_KEY_Thai_khorakhang = 3494;
  GDK_KEY_Thai_kokai = 3489;
  GDK_KEY_Thai_lakkhangyao = 3557;
  GDK_KEY_Thai_lekchet = 3575;
  GDK_KEY_Thai_lekha = 3573;
  GDK_KEY_Thai_lekhok = 3574;
  GDK_KEY_Thai_lekkao = 3577;
  GDK_KEY_Thai_leknung = 3569;
  GDK_KEY_Thai_lekpaet = 3576;
  GDK_KEY_Thai_leksam = 3571;
  GDK_KEY_Thai_leksi = 3572;
  GDK_KEY_Thai_leksong = 3570;
  GDK_KEY_Thai_leksun = 3568;
  GDK_KEY_Thai_lochula = 3532;
  GDK_KEY_Thai_loling = 3525;
  GDK_KEY_Thai_lu = 3526;
  GDK_KEY_Thai_maichattawa = 3563;
  GDK_KEY_Thai_maiek = 3560;
  GDK_KEY_Thai_maihanakat = 3537;
  GDK_KEY_Thai_maihanakat_maitho = 3550;
  GDK_KEY_Thai_maitaikhu = 3559;
  GDK_KEY_Thai_maitho = 3561;
  GDK_KEY_Thai_maitri = 3562;
  GDK_KEY_Thai_maiyamok = 3558;
  GDK_KEY_Thai_moma = 3521;
  GDK_KEY_Thai_ngongu = 3495;
  GDK_KEY_Thai_nikhahit = 3565;
  GDK_KEY_Thai_nonen = 3507;
  GDK_KEY_Thai_nonu = 3513;
  GDK_KEY_Thai_oang = 3533;
  GDK_KEY_Thai_paiyannoi = 3535;
  GDK_KEY_Thai_phinthu = 3546;
  GDK_KEY_Thai_phophan = 3518;
  GDK_KEY_Thai_phophung = 3516;
  GDK_KEY_Thai_phosamphao = 3520;
  GDK_KEY_Thai_popla = 3515;
  GDK_KEY_Thai_rorua = 3523;
  GDK_KEY_Thai_ru = 3524;
  GDK_KEY_Thai_saraa = 3536;
  GDK_KEY_Thai_saraaa = 3538;
  GDK_KEY_Thai_saraae = 3553;
  GDK_KEY_Thai_saraaimaimalai = 3556;
  GDK_KEY_Thai_saraaimaimuan = 3555;
  GDK_KEY_Thai_saraam = 3539;
  GDK_KEY_Thai_sarae = 3552;
  GDK_KEY_Thai_sarai = 3540;
  GDK_KEY_Thai_saraii = 3541;
  GDK_KEY_Thai_sarao = 3554;
  GDK_KEY_Thai_sarau = 3544;
  GDK_KEY_Thai_saraue = 3542;
  GDK_KEY_Thai_sarauee = 3543;
  GDK_KEY_Thai_sarauu = 3545;
  GDK_KEY_Thai_sorusi = 3529;
  GDK_KEY_Thai_sosala = 3528;
  GDK_KEY_Thai_soso = 3499;
  GDK_KEY_Thai_sosua = 3530;
  GDK_KEY_Thai_thanthakhat = 3564;
  GDK_KEY_Thai_thonangmontho = 3505;
  GDK_KEY_Thai_thophuthao = 3506;
  GDK_KEY_Thai_thothahan = 3511;
  GDK_KEY_Thai_thothan = 3504;
  GDK_KEY_Thai_thothong = 3512;
  GDK_KEY_Thai_thothung = 3510;
  GDK_KEY_Thai_topatak = 3503;
  GDK_KEY_Thai_totao = 3509;
  GDK_KEY_Thai_wowaen = 3527;
  GDK_KEY_Thai_yoyak = 3522;
  GDK_KEY_Thai_yoying = 3501;
  GDK_KEY_Thorn_ = 222;
  GDK_KEY_Time = 269025183;
  GDK_KEY_ToDoList = 269025055;
  GDK_KEY_Tools = 269025153;
  GDK_KEY_TopMenu = 269025186;
  GDK_KEY_TouchpadOff = 269025201;
  GDK_KEY_TouchpadOn = 269025200;
  GDK_KEY_TouchpadToggle = 269025193;
  GDK_KEY_Touroku = 65323;
  GDK_KEY_Travel = 269025154;
  GDK_KEY_Tslash = 940;
  GDK_KEY_U = 85;
  GDK_KEY_UWB = 269025174;
  GDK_KEY_Uacute = 218;
  GDK_KEY_Ubelowdot = 16785124;
  GDK_KEY_Ubreve = 733;
  GDK_KEY_Ucircumflex = 219;
  GDK_KEY_Udiaeresis = 220;
  GDK_KEY_Udoubleacute = 475;
  GDK_KEY_Ugrave = 217;
  GDK_KEY_Uhook = 16785126;
  GDK_KEY_Uhorn = 16777647;
  GDK_KEY_Uhornacute = 16785128;
  GDK_KEY_Uhornbelowdot = 16785136;
  GDK_KEY_Uhorngrave = 16785130;
  GDK_KEY_Uhornhook = 16785132;
  GDK_KEY_Uhorntilde = 16785134;
  GDK_KEY_Ukrainian_GHE_WITH_UPTURN = 1725;
  GDK_KEY_Ukrainian_I = 1718;
  GDK_KEY_Ukrainian_IE = 1716;
  GDK_KEY_Ukrainian_YI = 1719;
  GDK_KEY_Ukrainian_ghe_with_upturn_ = 1709;
  GDK_KEY_Ukrainian_i_ = 1702;
  GDK_KEY_Ukrainian_ie_ = 1700;
  GDK_KEY_Ukrainian_yi_ = 1703;
  GDK_KEY_Ukranian_I = 1718;
  GDK_KEY_Ukranian_JE = 1716;
  GDK_KEY_Ukranian_YI = 1719;
  GDK_KEY_Ukranian_i_ = 1702;
  GDK_KEY_Ukranian_je_ = 1700;
  GDK_KEY_Ukranian_yi_ = 1703;
  GDK_KEY_Umacron = 990;
  GDK_KEY_Undo = 65381;
  GDK_KEY_Ungrab = 269024800;
  GDK_KEY_Uogonek = 985;
  GDK_KEY_Up = 65362;
  GDK_KEY_Uring = 473;
  GDK_KEY_User1KB = 269025157;
  GDK_KEY_User2KB = 269025158;
  GDK_KEY_UserPB = 269025156;
  GDK_KEY_Utilde = 989;
  GDK_KEY_V = 86;
  GDK_KEY_VendorHome = 269025076;
  GDK_KEY_Video = 269025159;
  GDK_KEY_View = 269025185;
  GDK_KEY_VoidSymbol = 16777215;
  GDK_KEY_W = 87;
  GDK_KEY_WLAN = 269025173;
  GDK_KEY_WWAN = 269025204;
  GDK_KEY_WWW = 269025070;
  GDK_KEY_Wacute = 16785026;
  GDK_KEY_WakeUp = 269025067;
  GDK_KEY_Wcircumflex = 16777588;
  GDK_KEY_Wdiaeresis = 16785028;
  GDK_KEY_WebCam = 269025167;
  GDK_KEY_Wgrave = 16785024;
  GDK_KEY_WheelButton = 269025160;
  GDK_KEY_WindowClear = 269025109;
  GDK_KEY_WonSign = 16785577;
  GDK_KEY_Word = 269025161;
  GDK_KEY_X = 88;
  GDK_KEY_Xabovedot = 16785034;
  GDK_KEY_Xfer = 269025162;
  GDK_KEY_Y = 89;
  GDK_KEY_Yacute = 221;
  GDK_KEY_Ybelowdot = 16785140;
  GDK_KEY_Ycircumflex = 16777590;
  GDK_KEY_Ydiaeresis = 5054;
  GDK_KEY_Yellow = 269025189;
  GDK_KEY_Ygrave = 16785138;
  GDK_KEY_Yhook = 16785142;
  GDK_KEY_Ytilde = 16785144;
  GDK_KEY_Z = 90;
  GDK_KEY_Zabovedot = 431;
  GDK_KEY_Zacute = 428;
  GDK_KEY_Zcaron = 430;
  GDK_KEY_Zen_Koho = 65341;
  GDK_KEY_Zenkaku = 65320;
  GDK_KEY_Zenkaku_Hankaku = 65322;
  GDK_KEY_ZoomIn = 269025163;
  GDK_KEY_ZoomOut = 269025164;
  GDK_KEY_Zstroke = 16777653;
  GDK_KEY_a_ = 97;
  GDK_KEY_aacute_ = 225;
  GDK_KEY_abelowdot_ = 16785057;
  GDK_KEY_abovedot = 511;
  GDK_KEY_abreve_ = 483;
  GDK_KEY_abreveacute_ = 16785071;
  GDK_KEY_abrevebelowdot_ = 16785079;
  GDK_KEY_abrevegrave_ = 16785073;
  GDK_KEY_abrevehook_ = 16785075;
  GDK_KEY_abrevetilde_ = 16785077;
  GDK_KEY_acircumflex_ = 226;
  GDK_KEY_acircumflexacute_ = 16785061;
  GDK_KEY_acircumflexbelowdot_ = 16785069;
  GDK_KEY_acircumflexgrave_ = 16785063;
  GDK_KEY_acircumflexhook_ = 16785065;
  GDK_KEY_acircumflextilde_ = 16785067;
  GDK_KEY_acute = 180;
  GDK_KEY_adiaeresis_ = 228;
  GDK_KEY_ae_ = 230;
  GDK_KEY_agrave_ = 224;
  GDK_KEY_ahook_ = 16785059;
  GDK_KEY_amacron_ = 992;
  GDK_KEY_ampersand = 38;
  GDK_KEY_aogonek_ = 433;
  GDK_KEY_apostrophe = 39;
  GDK_KEY_approxeq = 16785992;
  GDK_KEY_approximate = 2248;
  GDK_KEY_aring_ = 229;
  GDK_KEY_asciicircum = 94;
  GDK_KEY_asciitilde = 126;
  GDK_KEY_asterisk = 42;
  GDK_KEY_at = 64;
  GDK_KEY_atilde_ = 227;
  GDK_KEY_b_ = 98;
  GDK_KEY_babovedot_ = 16784899;
  GDK_KEY_backslash = 92;
  GDK_KEY_ballotcross = 2804;
  GDK_KEY_bar = 124;
  GDK_KEY_because = 16785973;
  GDK_KEY_blank = 2527;
  GDK_KEY_botintegral = 2213;
  GDK_KEY_botleftparens = 2220;
  GDK_KEY_botleftsqbracket = 2216;
  GDK_KEY_botleftsummation = 2226;
  GDK_KEY_botrightparens = 2222;
  GDK_KEY_botrightsqbracket = 2218;
  GDK_KEY_botrightsummation = 2230;
  GDK_KEY_bott = 2550;
  GDK_KEY_botvertsummationconnector = 2228;
  GDK_KEY_braceleft = 123;
  GDK_KEY_braceright = 125;
  GDK_KEY_bracketleft = 91;
  GDK_KEY_bracketright = 93;
  GDK_KEY_braille_blank = 16787456;
  GDK_KEY_braille_dot_1 = 65521;
  GDK_KEY_braille_dot_10 = 65530;
  GDK_KEY_braille_dot_2 = 65522;
  GDK_KEY_braille_dot_3 = 65523;
  GDK_KEY_braille_dot_4 = 65524;
  GDK_KEY_braille_dot_5 = 65525;
  GDK_KEY_braille_dot_6 = 65526;
  GDK_KEY_braille_dot_7 = 65527;
  GDK_KEY_braille_dot_8 = 65528;
  GDK_KEY_braille_dot_9 = 65529;
  GDK_KEY_braille_dots_1 = 16787457;
  GDK_KEY_braille_dots_12 = 16787459;
  GDK_KEY_braille_dots_123 = 16787463;
  GDK_KEY_braille_dots_1234 = 16787471;
  GDK_KEY_braille_dots_12345 = 16787487;
  GDK_KEY_braille_dots_123456 = 16787519;
  GDK_KEY_braille_dots_1234567 = 16787583;
  GDK_KEY_braille_dots_12345678 = 16787711;
  GDK_KEY_braille_dots_1234568 = 16787647;
  GDK_KEY_braille_dots_123457 = 16787551;
  GDK_KEY_braille_dots_1234578 = 16787679;
  GDK_KEY_braille_dots_123458 = 16787615;
  GDK_KEY_braille_dots_12346 = 16787503;
  GDK_KEY_braille_dots_123467 = 16787567;
  GDK_KEY_braille_dots_1234678 = 16787695;
  GDK_KEY_braille_dots_123468 = 16787631;
  GDK_KEY_braille_dots_12347 = 16787535;
  GDK_KEY_braille_dots_123478 = 16787663;
  GDK_KEY_braille_dots_12348 = 16787599;
  GDK_KEY_braille_dots_1235 = 16787479;
  GDK_KEY_braille_dots_12356 = 16787511;
  GDK_KEY_braille_dots_123567 = 16787575;
  GDK_KEY_braille_dots_1235678 = 16787703;
  GDK_KEY_braille_dots_123568 = 16787639;
  GDK_KEY_braille_dots_12357 = 16787543;
  GDK_KEY_braille_dots_123578 = 16787671;
  GDK_KEY_braille_dots_12358 = 16787607;
  GDK_KEY_braille_dots_1236 = 16787495;
  GDK_KEY_braille_dots_12367 = 16787559;
  GDK_KEY_braille_dots_123678 = 16787687;
  GDK_KEY_braille_dots_12368 = 16787623;
  GDK_KEY_braille_dots_1237 = 16787527;
  GDK_KEY_braille_dots_12378 = 16787655;
  GDK_KEY_braille_dots_1238 = 16787591;
  GDK_KEY_braille_dots_124 = 16787467;
  GDK_KEY_braille_dots_1245 = 16787483;
  GDK_KEY_braille_dots_12456 = 16787515;
  GDK_KEY_braille_dots_124567 = 16787579;
  GDK_KEY_braille_dots_1245678 = 16787707;
  GDK_KEY_braille_dots_124568 = 16787643;
  GDK_KEY_braille_dots_12457 = 16787547;
  GDK_KEY_braille_dots_124578 = 16787675;
  GDK_KEY_braille_dots_12458 = 16787611;
  GDK_KEY_braille_dots_1246 = 16787499;
  GDK_KEY_braille_dots_12467 = 16787563;
  GDK_KEY_braille_dots_124678 = 16787691;
  GDK_KEY_braille_dots_12468 = 16787627;
  GDK_KEY_braille_dots_1247 = 16787531;
  GDK_KEY_braille_dots_12478 = 16787659;
  GDK_KEY_braille_dots_1248 = 16787595;
  GDK_KEY_braille_dots_125 = 16787475;
  GDK_KEY_braille_dots_1256 = 16787507;
  GDK_KEY_braille_dots_12567 = 16787571;
  GDK_KEY_braille_dots_125678 = 16787699;
  GDK_KEY_braille_dots_12568 = 16787635;
  GDK_KEY_braille_dots_1257 = 16787539;
  GDK_KEY_braille_dots_12578 = 16787667;
  GDK_KEY_braille_dots_1258 = 16787603;
  GDK_KEY_braille_dots_126 = 16787491;
  GDK_KEY_braille_dots_1267 = 16787555;
  GDK_KEY_braille_dots_12678 = 16787683;
  GDK_KEY_braille_dots_1268 = 16787619;
  GDK_KEY_braille_dots_127 = 16787523;
  GDK_KEY_braille_dots_1278 = 16787651;
  GDK_KEY_braille_dots_128 = 16787587;
  GDK_KEY_braille_dots_13 = 16787461;
  GDK_KEY_braille_dots_134 = 16787469;
  GDK_KEY_braille_dots_1345 = 16787485;
  GDK_KEY_braille_dots_13456 = 16787517;
  GDK_KEY_braille_dots_134567 = 16787581;
  GDK_KEY_braille_dots_1345678 = 16787709;
  GDK_KEY_braille_dots_134568 = 16787645;
  GDK_KEY_braille_dots_13457 = 16787549;
  GDK_KEY_braille_dots_134578 = 16787677;
  GDK_KEY_braille_dots_13458 = 16787613;
  GDK_KEY_braille_dots_1346 = 16787501;
  GDK_KEY_braille_dots_13467 = 16787565;
  GDK_KEY_braille_dots_134678 = 16787693;
  GDK_KEY_braille_dots_13468 = 16787629;
  GDK_KEY_braille_dots_1347 = 16787533;
  GDK_KEY_braille_dots_13478 = 16787661;
  GDK_KEY_braille_dots_1348 = 16787597;
  GDK_KEY_braille_dots_135 = 16787477;
  GDK_KEY_braille_dots_1356 = 16787509;
  GDK_KEY_braille_dots_13567 = 16787573;
  GDK_KEY_braille_dots_135678 = 16787701;
  GDK_KEY_braille_dots_13568 = 16787637;
  GDK_KEY_braille_dots_1357 = 16787541;
  GDK_KEY_braille_dots_13578 = 16787669;
  GDK_KEY_braille_dots_1358 = 16787605;
  GDK_KEY_braille_dots_136 = 16787493;
  GDK_KEY_braille_dots_1367 = 16787557;
  GDK_KEY_braille_dots_13678 = 16787685;
  GDK_KEY_braille_dots_1368 = 16787621;
  GDK_KEY_braille_dots_137 = 16787525;
  GDK_KEY_braille_dots_1378 = 16787653;
  GDK_KEY_braille_dots_138 = 16787589;
  GDK_KEY_braille_dots_14 = 16787465;
  GDK_KEY_braille_dots_145 = 16787481;
  GDK_KEY_braille_dots_1456 = 16787513;
  GDK_KEY_braille_dots_14567 = 16787577;
  GDK_KEY_braille_dots_145678 = 16787705;
  GDK_KEY_braille_dots_14568 = 16787641;
  GDK_KEY_braille_dots_1457 = 16787545;
  GDK_KEY_braille_dots_14578 = 16787673;
  GDK_KEY_braille_dots_1458 = 16787609;
  GDK_KEY_braille_dots_146 = 16787497;
  GDK_KEY_braille_dots_1467 = 16787561;
  GDK_KEY_braille_dots_14678 = 16787689;
  GDK_KEY_braille_dots_1468 = 16787625;
  GDK_KEY_braille_dots_147 = 16787529;
  GDK_KEY_braille_dots_1478 = 16787657;
  GDK_KEY_braille_dots_148 = 16787593;
  GDK_KEY_braille_dots_15 = 16787473;
  GDK_KEY_braille_dots_156 = 16787505;
  GDK_KEY_braille_dots_1567 = 16787569;
  GDK_KEY_braille_dots_15678 = 16787697;
  GDK_KEY_braille_dots_1568 = 16787633;
  GDK_KEY_braille_dots_157 = 16787537;
  GDK_KEY_braille_dots_1578 = 16787665;
  GDK_KEY_braille_dots_158 = 16787601;
  GDK_KEY_braille_dots_16 = 16787489;
  GDK_KEY_braille_dots_167 = 16787553;
  GDK_KEY_braille_dots_1678 = 16787681;
  GDK_KEY_braille_dots_168 = 16787617;
  GDK_KEY_braille_dots_17 = 16787521;
  GDK_KEY_braille_dots_178 = 16787649;
  GDK_KEY_braille_dots_18 = 16787585;
  GDK_KEY_braille_dots_2 = 16787458;
  GDK_KEY_braille_dots_23 = 16787462;
  GDK_KEY_braille_dots_234 = 16787470;
  GDK_KEY_braille_dots_2345 = 16787486;
  GDK_KEY_braille_dots_23456 = 16787518;
  GDK_KEY_braille_dots_234567 = 16787582;
  GDK_KEY_braille_dots_2345678 = 16787710;
  GDK_KEY_braille_dots_234568 = 16787646;
  GDK_KEY_braille_dots_23457 = 16787550;
  GDK_KEY_braille_dots_234578 = 16787678;
  GDK_KEY_braille_dots_23458 = 16787614;
  GDK_KEY_braille_dots_2346 = 16787502;
  GDK_KEY_braille_dots_23467 = 16787566;
  GDK_KEY_braille_dots_234678 = 16787694;
  GDK_KEY_braille_dots_23468 = 16787630;
  GDK_KEY_braille_dots_2347 = 16787534;
  GDK_KEY_braille_dots_23478 = 16787662;
  GDK_KEY_braille_dots_2348 = 16787598;
  GDK_KEY_braille_dots_235 = 16787478;
  GDK_KEY_braille_dots_2356 = 16787510;
  GDK_KEY_braille_dots_23567 = 16787574;
  GDK_KEY_braille_dots_235678 = 16787702;
  GDK_KEY_braille_dots_23568 = 16787638;
  GDK_KEY_braille_dots_2357 = 16787542;
  GDK_KEY_braille_dots_23578 = 16787670;
  GDK_KEY_braille_dots_2358 = 16787606;
  GDK_KEY_braille_dots_236 = 16787494;
  GDK_KEY_braille_dots_2367 = 16787558;
  GDK_KEY_braille_dots_23678 = 16787686;
  GDK_KEY_braille_dots_2368 = 16787622;
  GDK_KEY_braille_dots_237 = 16787526;
  GDK_KEY_braille_dots_2378 = 16787654;
  GDK_KEY_braille_dots_238 = 16787590;
  GDK_KEY_braille_dots_24 = 16787466;
  GDK_KEY_braille_dots_245 = 16787482;
  GDK_KEY_braille_dots_2456 = 16787514;
  GDK_KEY_braille_dots_24567 = 16787578;
  GDK_KEY_braille_dots_245678 = 16787706;
  GDK_KEY_braille_dots_24568 = 16787642;
  GDK_KEY_braille_dots_2457 = 16787546;
  GDK_KEY_braille_dots_24578 = 16787674;
  GDK_KEY_braille_dots_2458 = 16787610;
  GDK_KEY_braille_dots_246 = 16787498;
  GDK_KEY_braille_dots_2467 = 16787562;
  GDK_KEY_braille_dots_24678 = 16787690;
  GDK_KEY_braille_dots_2468 = 16787626;
  GDK_KEY_braille_dots_247 = 16787530;
  GDK_KEY_braille_dots_2478 = 16787658;
  GDK_KEY_braille_dots_248 = 16787594;
  GDK_KEY_braille_dots_25 = 16787474;
  GDK_KEY_braille_dots_256 = 16787506;
  GDK_KEY_braille_dots_2567 = 16787570;
  GDK_KEY_braille_dots_25678 = 16787698;
  GDK_KEY_braille_dots_2568 = 16787634;
  GDK_KEY_braille_dots_257 = 16787538;
  GDK_KEY_braille_dots_2578 = 16787666;
  GDK_KEY_braille_dots_258 = 16787602;
  GDK_KEY_braille_dots_26 = 16787490;
  GDK_KEY_braille_dots_267 = 16787554;
  GDK_KEY_braille_dots_2678 = 16787682;
  GDK_KEY_braille_dots_268 = 16787618;
  GDK_KEY_braille_dots_27 = 16787522;
  GDK_KEY_braille_dots_278 = 16787650;
  GDK_KEY_braille_dots_28 = 16787586;
  GDK_KEY_braille_dots_3 = 16787460;
  GDK_KEY_braille_dots_34 = 16787468;
  GDK_KEY_braille_dots_345 = 16787484;
  GDK_KEY_braille_dots_3456 = 16787516;
  GDK_KEY_braille_dots_34567 = 16787580;
  GDK_KEY_braille_dots_345678 = 16787708;
  GDK_KEY_braille_dots_34568 = 16787644;
  GDK_KEY_braille_dots_3457 = 16787548;
  GDK_KEY_braille_dots_34578 = 16787676;
  GDK_KEY_braille_dots_3458 = 16787612;
  GDK_KEY_braille_dots_346 = 16787500;
  GDK_KEY_braille_dots_3467 = 16787564;
  GDK_KEY_braille_dots_34678 = 16787692;
  GDK_KEY_braille_dots_3468 = 16787628;
  GDK_KEY_braille_dots_347 = 16787532;
  GDK_KEY_braille_dots_3478 = 16787660;
  GDK_KEY_braille_dots_348 = 16787596;
  GDK_KEY_braille_dots_35 = 16787476;
  GDK_KEY_braille_dots_356 = 16787508;
  GDK_KEY_braille_dots_3567 = 16787572;
  GDK_KEY_braille_dots_35678 = 16787700;
  GDK_KEY_braille_dots_3568 = 16787636;
  GDK_KEY_braille_dots_357 = 16787540;
  GDK_KEY_braille_dots_3578 = 16787668;
  GDK_KEY_braille_dots_358 = 16787604;
  GDK_KEY_braille_dots_36 = 16787492;
  GDK_KEY_braille_dots_367 = 16787556;
  GDK_KEY_braille_dots_3678 = 16787684;
  GDK_KEY_braille_dots_368 = 16787620;
  GDK_KEY_braille_dots_37 = 16787524;
  GDK_KEY_braille_dots_378 = 16787652;
  GDK_KEY_braille_dots_38 = 16787588;
  GDK_KEY_braille_dots_4 = 16787464;
  GDK_KEY_braille_dots_45 = 16787480;
  GDK_KEY_braille_dots_456 = 16787512;
  GDK_KEY_braille_dots_4567 = 16787576;
  GDK_KEY_braille_dots_45678 = 16787704;
  GDK_KEY_braille_dots_4568 = 16787640;
  GDK_KEY_braille_dots_457 = 16787544;
  GDK_KEY_braille_dots_4578 = 16787672;
  GDK_KEY_braille_dots_458 = 16787608;
  GDK_KEY_braille_dots_46 = 16787496;
  GDK_KEY_braille_dots_467 = 16787560;
  GDK_KEY_braille_dots_4678 = 16787688;
  GDK_KEY_braille_dots_468 = 16787624;
  GDK_KEY_braille_dots_47 = 16787528;
  GDK_KEY_braille_dots_478 = 16787656;
  GDK_KEY_braille_dots_48 = 16787592;
  GDK_KEY_braille_dots_5 = 16787472;
  GDK_KEY_braille_dots_56 = 16787504;
  GDK_KEY_braille_dots_567 = 16787568;
  GDK_KEY_braille_dots_5678 = 16787696;
  GDK_KEY_braille_dots_568 = 16787632;
  GDK_KEY_braille_dots_57 = 16787536;
  GDK_KEY_braille_dots_578 = 16787664;
  GDK_KEY_braille_dots_58 = 16787600;
  GDK_KEY_braille_dots_6 = 16787488;
  GDK_KEY_braille_dots_67 = 16787552;
  GDK_KEY_braille_dots_678 = 16787680;
  GDK_KEY_braille_dots_68 = 16787616;
  GDK_KEY_braille_dots_7 = 16787520;
  GDK_KEY_braille_dots_78 = 16787648;
  GDK_KEY_braille_dots_8 = 16787584;
  GDK_KEY_breve = 418;
  GDK_KEY_brokenbar = 166;
  GDK_KEY_c_ = 99;
  GDK_KEY_c_h__1 = 65187;
  GDK_KEY_cabovedot_ = 741;
  GDK_KEY_cacute_ = 486;
  GDK_KEY_careof = 2744;
  GDK_KEY_caret = 2812;
  GDK_KEY_caron = 439;
  GDK_KEY_ccaron_ = 488;
  GDK_KEY_ccedilla_ = 231;
  GDK_KEY_ccircumflex_ = 742;
  GDK_KEY_cedilla = 184;
  GDK_KEY_cent = 162;
  GDK_KEY_ch__1 = 65184;
  GDK_KEY_checkerboard = 2529;
  GDK_KEY_checkmark = 2803;
  GDK_KEY_circle = 3023;
  GDK_KEY_club = 2796;
  GDK_KEY_colon = 58;
  GDK_KEY_comma = 44;
  GDK_KEY_containsas = 16785931;
  GDK_KEY_copyright = 169;
  GDK_KEY_cr = 2532;
  GDK_KEY_crossinglines = 2542;
  GDK_KEY_cuberoot = 16785947;
  GDK_KEY_currency = 164;
  GDK_KEY_cursor = 2815;
  GDK_KEY_d_ = 100;
  GDK_KEY_dabovedot_ = 16784907;
  GDK_KEY_dagger = 2801;
  GDK_KEY_dcaron_ = 495;
  GDK_KEY_dead_A = 65153;
  GDK_KEY_dead_E = 65155;
  GDK_KEY_dead_I = 65157;
  GDK_KEY_dead_O = 65159;
  GDK_KEY_dead_U = 65161;
  GDK_KEY_dead_a_ = 65152;
  GDK_KEY_dead_abovecomma = 65124;
  GDK_KEY_dead_abovedot = 65110;
  GDK_KEY_dead_abovereversedcomma = 65125;
  GDK_KEY_dead_abovering = 65112;
  GDK_KEY_dead_aboveverticalline = 65169;
  GDK_KEY_dead_acute = 65105;
  GDK_KEY_dead_belowbreve = 65131;
  GDK_KEY_dead_belowcircumflex = 65129;
  GDK_KEY_dead_belowcomma = 65134;
  GDK_KEY_dead_belowdiaeresis = 65132;
  GDK_KEY_dead_belowdot = 65120;
  GDK_KEY_dead_belowmacron = 65128;
  GDK_KEY_dead_belowring = 65127;
  GDK_KEY_dead_belowtilde = 65130;
  GDK_KEY_dead_belowverticalline = 65170;
  GDK_KEY_dead_breve = 65109;
  GDK_KEY_dead_capital_schwa = 65163;
  GDK_KEY_dead_caron = 65114;
  GDK_KEY_dead_cedilla = 65115;
  GDK_KEY_dead_circumflex = 65106;
  GDK_KEY_dead_currency = 65135;
  GDK_KEY_dead_dasia = 65125;
  GDK_KEY_dead_diaeresis = 65111;
  GDK_KEY_dead_doubleacute = 65113;
  GDK_KEY_dead_doublegrave = 65126;
  GDK_KEY_dead_e_ = 65154;
  GDK_KEY_dead_grave = 65104;
  GDK_KEY_dead_greek = 65164;
  GDK_KEY_dead_hook = 65121;
  GDK_KEY_dead_horn = 65122;
  GDK_KEY_dead_i_ = 65156;
  GDK_KEY_dead_invertedbreve = 65133;
  GDK_KEY_dead_iota = 65117;
  GDK_KEY_dead_longsolidusoverlay = 65171;
  GDK_KEY_dead_lowline = 65168;
  GDK_KEY_dead_macron = 65108;
  GDK_KEY_dead_o_ = 65158;
  GDK_KEY_dead_ogonek = 65116;
  GDK_KEY_dead_perispomeni = 65107;
  GDK_KEY_dead_psili = 65124;
  GDK_KEY_dead_semivoiced_sound = 65119;
  GDK_KEY_dead_small_schwa = 65162;
  GDK_KEY_dead_stroke = 65123;
  GDK_KEY_dead_tilde = 65107;
  GDK_KEY_dead_u_ = 65160;
  GDK_KEY_dead_voiced_sound = 65118;
  GDK_KEY_decimalpoint = 2749;
  GDK_KEY_degree = 176;
  GDK_KEY_diaeresis = 168;
  GDK_KEY_diamond = 2797;
  GDK_KEY_digitspace = 2725;
  GDK_KEY_dintegral = 16785964;
  GDK_KEY_division = 247;
  GDK_KEY_dollar = 36;
  GDK_KEY_doubbaselinedot = 2735;
  GDK_KEY_doubleacute = 445;
  GDK_KEY_doubledagger = 2802;
  GDK_KEY_doublelowquotemark = 2814;
  GDK_KEY_downarrow = 2302;
  GDK_KEY_downcaret = 2984;
  GDK_KEY_downshoe = 3030;
  GDK_KEY_downstile = 3012;
  GDK_KEY_downtack = 3010;
  GDK_KEY_dstroke_ = 496;
  GDK_KEY_e_ = 101;
  GDK_KEY_eabovedot_ = 1004;
  GDK_KEY_eacute_ = 233;
  GDK_KEY_ebelowdot_ = 16785081;
  GDK_KEY_ecaron_ = 492;
  GDK_KEY_ecircumflex_ = 234;
  GDK_KEY_ecircumflexacute_ = 16785087;
  GDK_KEY_ecircumflexbelowdot_ = 16785095;
  GDK_KEY_ecircumflexgrave_ = 16785089;
  GDK_KEY_ecircumflexhook_ = 16785091;
  GDK_KEY_ecircumflextilde_ = 16785093;
  GDK_KEY_ediaeresis_ = 235;
  GDK_KEY_egrave_ = 232;
  GDK_KEY_ehook_ = 16785083;
  GDK_KEY_eightsubscript = 16785544;
  GDK_KEY_eightsuperior = 16785528;
  GDK_KEY_elementof = 16785928;
  GDK_KEY_ellipsis = 2734;
  GDK_KEY_em3space = 2723;
  GDK_KEY_em4space = 2724;
  GDK_KEY_emacron_ = 954;
  GDK_KEY_emdash = 2729;
  GDK_KEY_emfilledcircle = 2782;
  GDK_KEY_emfilledrect = 2783;
  GDK_KEY_emopencircle = 2766;
  GDK_KEY_emopenrectangle = 2767;
  GDK_KEY_emptyset = 16785925;
  GDK_KEY_emspace = 2721;
  GDK_KEY_endash = 2730;
  GDK_KEY_enfilledcircbullet = 2790;
  GDK_KEY_enfilledsqbullet = 2791;
  GDK_KEY_eng_ = 959;
  GDK_KEY_enopencircbullet = 2784;
  GDK_KEY_enopensquarebullet = 2785;
  GDK_KEY_enspace = 2722;
  GDK_KEY_eogonek_ = 490;
  GDK_KEY_equal = 61;
  GDK_KEY_eth__1 = 240;
  GDK_KEY_etilde_ = 16785085;
  GDK_KEY_exclam = 33;
  GDK_KEY_exclamdown = 161;
  GDK_KEY_ezh_ = 16777874;
  GDK_KEY_f_ = 102;
  GDK_KEY_fabovedot_ = 16784927;
  GDK_KEY_femalesymbol = 2808;
  GDK_KEY_ff = 2531;
  GDK_KEY_figdash = 2747;
  GDK_KEY_filledlefttribullet = 2780;
  GDK_KEY_filledrectbullet = 2779;
  GDK_KEY_filledrighttribullet = 2781;
  GDK_KEY_filledtribulletdown = 2793;
  GDK_KEY_filledtribulletup = 2792;
  GDK_KEY_fiveeighths = 2757;
  GDK_KEY_fivesixths = 2743;
  GDK_KEY_fivesubscript = 16785541;
  GDK_KEY_fivesuperior = 16785525;
  GDK_KEY_fourfifths = 2741;
  GDK_KEY_foursubscript = 16785540;
  GDK_KEY_foursuperior = 16785524;
  GDK_KEY_fourthroot = 16785948;
  GDK_KEY_function = 2294;
  GDK_KEY_g_ = 103;
  GDK_KEY_gabovedot_ = 757;
  GDK_KEY_gbreve_ = 699;
  GDK_KEY_gcaron_ = 16777703;
  GDK_KEY_gcedilla_ = 955;
  GDK_KEY_gcircumflex_ = 760;
  GDK_KEY_grave = 96;
  GDK_KEY_greater = 62;
  GDK_KEY_greaterthanequal = 2238;
  GDK_KEY_guillemotleft = 171;
  GDK_KEY_guillemotright = 187;
  GDK_KEY_h_ = 104;
  GDK_KEY_hairspace = 2728;
  GDK_KEY_hcircumflex_ = 694;
  GDK_KEY_heart = 2798;
  GDK_KEY_hebrew_aleph = 3296;
  GDK_KEY_hebrew_ayin = 3314;
  GDK_KEY_hebrew_bet = 3297;
  GDK_KEY_hebrew_beth = 3297;
  GDK_KEY_hebrew_chet = 3303;
  GDK_KEY_hebrew_dalet = 3299;
  GDK_KEY_hebrew_daleth = 3299;
  GDK_KEY_hebrew_doublelowline = 3295;
  GDK_KEY_hebrew_finalkaph = 3306;
  GDK_KEY_hebrew_finalmem = 3309;
  GDK_KEY_hebrew_finalnun = 3311;
  GDK_KEY_hebrew_finalpe = 3315;
  GDK_KEY_hebrew_finalzade = 3317;
  GDK_KEY_hebrew_finalzadi = 3317;
  GDK_KEY_hebrew_gimel = 3298;
  GDK_KEY_hebrew_gimmel = 3298;
  GDK_KEY_hebrew_he = 3300;
  GDK_KEY_hebrew_het = 3303;
  GDK_KEY_hebrew_kaph = 3307;
  GDK_KEY_hebrew_kuf = 3319;
  GDK_KEY_hebrew_lamed = 3308;
  GDK_KEY_hebrew_mem = 3310;
  GDK_KEY_hebrew_nun = 3312;
  GDK_KEY_hebrew_pe = 3316;
  GDK_KEY_hebrew_qoph = 3319;
  GDK_KEY_hebrew_resh = 3320;
  GDK_KEY_hebrew_samech = 3313;
  GDK_KEY_hebrew_samekh = 3313;
  GDK_KEY_hebrew_shin = 3321;
  GDK_KEY_hebrew_taf = 3322;
  GDK_KEY_hebrew_taw = 3322;
  GDK_KEY_hebrew_tet = 3304;
  GDK_KEY_hebrew_teth = 3304;
  GDK_KEY_hebrew_waw = 3301;
  GDK_KEY_hebrew_yod = 3305;
  GDK_KEY_hebrew_zade = 3318;
  GDK_KEY_hebrew_zadi = 3318;
  GDK_KEY_hebrew_zain = 3302;
  GDK_KEY_hebrew_zayin = 3302;
  GDK_KEY_hexagram = 2778;
  GDK_KEY_horizconnector = 2211;
  GDK_KEY_horizlinescan1 = 2543;
  GDK_KEY_horizlinescan3 = 2544;
  GDK_KEY_horizlinescan5 = 2545;
  GDK_KEY_horizlinescan7 = 2546;
  GDK_KEY_horizlinescan9 = 2547;
  GDK_KEY_hstroke_ = 689;
  GDK_KEY_ht = 2530;
  GDK_KEY_hyphen = 173;
  GDK_KEY_i_ = 105;
  GDK_KEY_iTouch = 269025120;
  GDK_KEY_iacute_ = 237;
  GDK_KEY_ibelowdot_ = 16785099;
  GDK_KEY_ibreve_ = 16777517;
  GDK_KEY_icircumflex_ = 238;
  GDK_KEY_identical = 2255;
  GDK_KEY_idiaeresis_ = 239;
  GDK_KEY_idotless = 697;
  GDK_KEY_ifonlyif = 2253;
  GDK_KEY_igrave_ = 236;
  GDK_KEY_ihook_ = 16785097;
  GDK_KEY_imacron_ = 1007;
  GDK_KEY_implies = 2254;
  GDK_KEY_includedin = 2266;
  GDK_KEY_includes = 2267;
  GDK_KEY_infinity = 2242;
  GDK_KEY_integral = 2239;
  GDK_KEY_intersection = 2268;
  GDK_KEY_iogonek_ = 999;
  GDK_KEY_itilde_ = 949;
  GDK_KEY_j_ = 106;
  GDK_KEY_jcircumflex_ = 700;
  GDK_KEY_jot = 3018;
  GDK_KEY_k_ = 107;
  GDK_KEY_kana_A = 1201;
  GDK_KEY_kana_CHI = 1217;
  GDK_KEY_kana_E = 1204;
  GDK_KEY_kana_FU = 1228;
  GDK_KEY_kana_HA = 1226;
  GDK_KEY_kana_HE = 1229;
  GDK_KEY_kana_HI = 1227;
  GDK_KEY_kana_HO = 1230;
  GDK_KEY_kana_HU = 1228;
  GDK_KEY_kana_I = 1202;
  GDK_KEY_kana_KA = 1206;
  GDK_KEY_kana_KE = 1209;
  GDK_KEY_kana_KI = 1207;
  GDK_KEY_kana_KO = 1210;
  GDK_KEY_kana_KU = 1208;
  GDK_KEY_kana_MA = 1231;
  GDK_KEY_kana_ME = 1234;
  GDK_KEY_kana_MI = 1232;
  GDK_KEY_kana_MO = 1235;
  GDK_KEY_kana_MU = 1233;
  GDK_KEY_kana_N = 1245;
  GDK_KEY_kana_NA = 1221;
  GDK_KEY_kana_NE = 1224;
  GDK_KEY_kana_NI = 1222;
  GDK_KEY_kana_NO = 1225;
  GDK_KEY_kana_NU = 1223;
  GDK_KEY_kana_O = 1205;
  GDK_KEY_kana_RA = 1239;
  GDK_KEY_kana_RE = 1242;
  GDK_KEY_kana_RI = 1240;
  GDK_KEY_kana_RO = 1243;
  GDK_KEY_kana_RU = 1241;
  GDK_KEY_kana_SA = 1211;
  GDK_KEY_kana_SE = 1214;
  GDK_KEY_kana_SHI = 1212;
  GDK_KEY_kana_SO = 1215;
  GDK_KEY_kana_SU = 1213;
  GDK_KEY_kana_TA = 1216;
  GDK_KEY_kana_TE = 1219;
  GDK_KEY_kana_TI = 1217;
  GDK_KEY_kana_TO = 1220;
  GDK_KEY_kana_TSU = 1218;
  GDK_KEY_kana_TU = 1218;
  GDK_KEY_kana_U = 1203;
  GDK_KEY_kana_WA = 1244;
  GDK_KEY_kana_WO = 1190;
  GDK_KEY_kana_YA = 1236;
  GDK_KEY_kana_YO = 1238;
  GDK_KEY_kana_YU = 1237;
  GDK_KEY_kana_a_ = 1191;
  GDK_KEY_kana_closingbracket = 1187;
  GDK_KEY_kana_comma = 1188;
  GDK_KEY_kana_conjunctive = 1189;
  GDK_KEY_kana_e_ = 1194;
  GDK_KEY_kana_fullstop = 1185;
  GDK_KEY_kana_i_ = 1192;
  GDK_KEY_kana_middledot = 1189;
  GDK_KEY_kana_o_ = 1195;
  GDK_KEY_kana_openingbracket = 1186;
  GDK_KEY_kana_switch = 65406;
  GDK_KEY_kana_tsu_ = 1199;
  GDK_KEY_kana_tu_ = 1199;
  GDK_KEY_kana_u_ = 1193;
  GDK_KEY_kana_ya_ = 1196;
  GDK_KEY_kana_yo_ = 1198;
  GDK_KEY_kana_yu_ = 1197;
  GDK_KEY_kappa = 930;
  GDK_KEY_kcedilla_ = 1011;
  GDK_KEY_kra = 930;
  GDK_KEY_l_ = 108;
  GDK_KEY_lacute_ = 485;
  GDK_KEY_latincross = 2777;
  GDK_KEY_lbelowdot_ = 16784951;
  GDK_KEY_lcaron_ = 437;
  GDK_KEY_lcedilla_ = 950;
  GDK_KEY_leftanglebracket = 2748;
  GDK_KEY_leftarrow = 2299;
  GDK_KEY_leftcaret = 2979;
  GDK_KEY_leftdoublequotemark = 2770;
  GDK_KEY_leftmiddlecurlybrace = 2223;
  GDK_KEY_leftopentriangle = 2764;
  GDK_KEY_leftpointer = 2794;
  GDK_KEY_leftradical = 2209;
  GDK_KEY_leftshoe = 3034;
  GDK_KEY_leftsinglequotemark = 2768;
  GDK_KEY_leftt = 2548;
  GDK_KEY_lefttack = 3036;
  GDK_KEY_less = 60;
  GDK_KEY_lessthanequal = 2236;
  GDK_KEY_lf = 2533;
  GDK_KEY_logicaland = 2270;
  GDK_KEY_logicalor = 2271;
  GDK_KEY_lowleftcorner = 2541;
  GDK_KEY_lowrightcorner = 2538;
  GDK_KEY_lstroke_ = 435;
  GDK_KEY_m_ = 109;
  GDK_KEY_mabovedot_ = 16784961;
  GDK_KEY_macron = 175;
  GDK_KEY_malesymbol = 2807;
  GDK_KEY_maltesecross = 2800;
  GDK_KEY_marker = 2751;
  GDK_KEY_masculine = 186;
  GDK_KEY_minus = 45;
  GDK_KEY_minutes = 2774;
  GDK_KEY_mu = 181;
  GDK_KEY_multiply = 215;
  GDK_KEY_musicalflat = 2806;
  GDK_KEY_musicalsharp = 2805;
  GDK_KEY_n_ = 110;
  GDK_KEY_nabla = 2245;
  GDK_KEY_nacute_ = 497;
  GDK_KEY_ncaron_ = 498;
  GDK_KEY_ncedilla_ = 1009;
  GDK_KEY_ninesubscript = 16785545;
  GDK_KEY_ninesuperior = 16785529;
  GDK_KEY_nl = 2536;
  GDK_KEY_nobreakspace = 160;
  GDK_KEY_notapproxeq = 16785991;
  GDK_KEY_notelementof = 16785929;
  GDK_KEY_notequal = 2237;
  GDK_KEY_notidentical = 16786018;
  GDK_KEY_notsign = 172;
  GDK_KEY_ntilde_ = 241;
  GDK_KEY_numbersign = 35;
  GDK_KEY_numerosign = 1712;
  GDK_KEY_o_ = 111;
  GDK_KEY_oacute_ = 243;
  GDK_KEY_obarred_ = 16777845;
  GDK_KEY_obelowdot_ = 16785101;
  GDK_KEY_ocaron_ = 16777682;
  GDK_KEY_ocircumflex_ = 244;
  GDK_KEY_ocircumflexacute_ = 16785105;
  GDK_KEY_ocircumflexbelowdot_ = 16785113;
  GDK_KEY_ocircumflexgrave_ = 16785107;
  GDK_KEY_ocircumflexhook_ = 16785109;
  GDK_KEY_ocircumflextilde_ = 16785111;
  GDK_KEY_odiaeresis_ = 246;
  GDK_KEY_odoubleacute_ = 501;
  GDK_KEY_oe_ = 5053;
  GDK_KEY_ogonek = 434;
  GDK_KEY_ograve_ = 242;
  GDK_KEY_ohook_ = 16785103;
  GDK_KEY_ohorn_ = 16777633;
  GDK_KEY_ohornacute_ = 16785115;
  GDK_KEY_ohornbelowdot_ = 16785123;
  GDK_KEY_ohorngrave_ = 16785117;
  GDK_KEY_ohornhook_ = 16785119;
  GDK_KEY_ohorntilde_ = 16785121;
  GDK_KEY_omacron_ = 1010;
  GDK_KEY_oneeighth = 2755;
  GDK_KEY_onefifth = 2738;
  GDK_KEY_onehalf = 189;
  GDK_KEY_onequarter = 188;
  GDK_KEY_onesixth = 2742;
  GDK_KEY_onesubscript = 16785537;
  GDK_KEY_onesuperior = 185;
  GDK_KEY_onethird = 2736;
  GDK_KEY_ooblique_ = 248;
  GDK_KEY_openrectbullet = 2786;
  GDK_KEY_openstar = 2789;
  GDK_KEY_opentribulletdown = 2788;
  GDK_KEY_opentribulletup = 2787;
  GDK_KEY_ordfeminine = 170;
  GDK_KEY_oslash_ = 248;
  GDK_KEY_otilde_ = 245;
  GDK_KEY_overbar = 3008;
  GDK_KEY_overline = 1150;
  GDK_KEY_p_ = 112;
  GDK_KEY_pabovedot_ = 16784983;
  GDK_KEY_paragraph = 182;
  GDK_KEY_parenleft = 40;
  GDK_KEY_parenright = 41;
  GDK_KEY_partdifferential = 16785922;
  GDK_KEY_partialderivative = 2287;
  GDK_KEY_percent = 37;
  GDK_KEY_period = 46;
  GDK_KEY_periodcentered = 183;
  GDK_KEY_permille = 2773;
  GDK_KEY_phonographcopyright = 2811;
  GDK_KEY_plus = 43;
  GDK_KEY_plusminus = 177;
  GDK_KEY_prescription = 2772;
  GDK_KEY_prolongedsound = 1200;
  GDK_KEY_punctspace = 2726;
  GDK_KEY_q_ = 113;
  GDK_KEY_quad = 3020;
  GDK_KEY_question = 63;
  GDK_KEY_questiondown = 191;
  GDK_KEY_quotedbl = 34;
  GDK_KEY_quoteleft = 96;
  GDK_KEY_quoteright = 39;
  GDK_KEY_r_ = 114;
  GDK_KEY_racute_ = 480;
  GDK_KEY_radical = 2262;
  GDK_KEY_rcaron_ = 504;
  GDK_KEY_rcedilla_ = 947;
  GDK_KEY_registered = 174;
  GDK_KEY_rightanglebracket = 2750;
  GDK_KEY_rightarrow = 2301;
  GDK_KEY_rightcaret = 2982;
  GDK_KEY_rightdoublequotemark = 2771;
  GDK_KEY_rightmiddlecurlybrace = 2224;
  GDK_KEY_rightmiddlesummation = 2231;
  GDK_KEY_rightopentriangle = 2765;
  GDK_KEY_rightpointer = 2795;
  GDK_KEY_rightshoe = 3032;
  GDK_KEY_rightsinglequotemark = 2769;
  GDK_KEY_rightt = 2549;
  GDK_KEY_righttack = 3068;
  GDK_KEY_s_ = 115;
  GDK_KEY_sabovedot_ = 16784993;
  GDK_KEY_sacute_ = 438;
  GDK_KEY_scaron_ = 441;
  GDK_KEY_scedilla_ = 442;
  GDK_KEY_schwa_ = 16777817;
  GDK_KEY_scircumflex_ = 766;
  GDK_KEY_script_switch = 65406;
  GDK_KEY_seconds = 2775;
  GDK_KEY_section = 167;
  GDK_KEY_semicolon = 59;
  GDK_KEY_semivoicedsound = 1247;
  GDK_KEY_seveneighths = 2758;
  GDK_KEY_sevensubscript = 16785543;
  GDK_KEY_sevensuperior = 16785527;
  GDK_KEY_signaturemark = 2762;
  GDK_KEY_signifblank = 2732;
  GDK_KEY_similarequal = 2249;
  GDK_KEY_singlelowquotemark = 2813;
  GDK_KEY_sixsubscript = 16785542;
  GDK_KEY_sixsuperior = 16785526;
  GDK_KEY_slash = 47;
  GDK_KEY_soliddiamond = 2528;
  GDK_KEY_space = 32;
  GDK_KEY_squareroot = 16785946;
  GDK_KEY_ssharp = 223;
  GDK_KEY_sterling = 163;
  GDK_KEY_stricteq = 16786019;
  GDK_KEY_t_ = 116;
  GDK_KEY_tabovedot_ = 16785003;
  GDK_KEY_tcaron_ = 443;
  GDK_KEY_tcedilla_ = 510;
  GDK_KEY_telephone = 2809;
  GDK_KEY_telephonerecorder = 2810;
  GDK_KEY_therefore = 2240;
  GDK_KEY_thinspace = 2727;
  GDK_KEY_thorn__1 = 254;
  GDK_KEY_threeeighths = 2756;
  GDK_KEY_threefifths = 2740;
  GDK_KEY_threequarters = 190;
  GDK_KEY_threesubscript = 16785539;
  GDK_KEY_threesuperior = 179;
  GDK_KEY_tintegral = 16785965;
  GDK_KEY_topintegral = 2212;
  GDK_KEY_topleftparens = 2219;
  GDK_KEY_topleftradical = 2210;
  GDK_KEY_topleftsqbracket = 2215;
  GDK_KEY_topleftsummation = 2225;
  GDK_KEY_toprightparens = 2221;
  GDK_KEY_toprightsqbracket = 2217;
  GDK_KEY_toprightsummation = 2229;
  GDK_KEY_topt = 2551;
  GDK_KEY_topvertsummationconnector = 2227;
  GDK_KEY_trademark = 2761;
  GDK_KEY_trademarkincircle = 2763;
  GDK_KEY_tslash_ = 956;
  GDK_KEY_twofifths = 2739;
  GDK_KEY_twosubscript = 16785538;
  GDK_KEY_twosuperior = 178;
  GDK_KEY_twothirds = 2737;
  GDK_KEY_u_ = 117;
  GDK_KEY_uacute_ = 250;
  GDK_KEY_ubelowdot_ = 16785125;
  GDK_KEY_ubreve_ = 765;
  GDK_KEY_ucircumflex_ = 251;
  GDK_KEY_udiaeresis_ = 252;
  GDK_KEY_udoubleacute_ = 507;
  GDK_KEY_ugrave_ = 249;
  GDK_KEY_uhook_ = 16785127;
  GDK_KEY_uhorn_ = 16777648;
  GDK_KEY_uhornacute_ = 16785129;
  GDK_KEY_uhornbelowdot_ = 16785137;
  GDK_KEY_uhorngrave_ = 16785131;
  GDK_KEY_uhornhook_ = 16785133;
  GDK_KEY_uhorntilde_ = 16785135;
  GDK_KEY_umacron_ = 1022;
  GDK_KEY_underbar = 3014;
  GDK_KEY_underscore = 95;
  GDK_KEY_union = 2269;
  GDK_KEY_uogonek_ = 1017;
  GDK_KEY_uparrow = 2300;
  GDK_KEY_upcaret = 2985;
  GDK_KEY_upleftcorner = 2540;
  GDK_KEY_uprightcorner = 2539;
  GDK_KEY_upshoe = 3011;
  GDK_KEY_upstile = 3027;
  GDK_KEY_uptack = 3022;
  GDK_KEY_uring_ = 505;
  GDK_KEY_utilde_ = 1021;
  GDK_KEY_v_ = 118;
  GDK_KEY_variation = 2241;
  GDK_KEY_vertbar = 2552;
  GDK_KEY_vertconnector = 2214;
  GDK_KEY_voicedsound = 1246;
  GDK_KEY_vt = 2537;
  GDK_KEY_w_ = 119;
  GDK_KEY_wacute_ = 16785027;
  GDK_KEY_wcircumflex_ = 16777589;
  GDK_KEY_wdiaeresis_ = 16785029;
  GDK_KEY_wgrave_ = 16785025;
  GDK_KEY_x_ = 120;
  GDK_KEY_xabovedot_ = 16785035;
  GDK_KEY_y_ = 121;
  GDK_KEY_yacute_ = 253;
  GDK_KEY_ybelowdot_ = 16785141;
  GDK_KEY_ycircumflex_ = 16777591;
  GDK_KEY_ydiaeresis_ = 255;
  GDK_KEY_yen = 165;
  GDK_KEY_ygrave_ = 16785139;
  GDK_KEY_yhook_ = 16785143;
  GDK_KEY_ytilde_ = 16785145;
  GDK_KEY_z_ = 122;
  GDK_KEY_zabovedot_ = 447;
  GDK_KEY_zacute_ = 444;
  GDK_KEY_zcaron_ = 446;
  GDK_KEY_zerosubscript = 16785536;
  GDK_KEY_zerosuperior = 16785520;
  GDK_KEY_zstroke_ = 16777654;
  GDK_MODIFIER_MASK = 469769999;
  GDK_PRIORITY_REDRAW = 120;

type
  TGdkAnchorHints = DWord;
const
  { GdkAnchorHints }
  GDK_ANCHOR_FLIP_X: TGdkAnchorHints = 1;
  GDK_ANCHOR_FLIP_Y: TGdkAnchorHints = 2;
  GDK_ANCHOR_SLIDE_X: TGdkAnchorHints = 4;
  GDK_ANCHOR_SLIDE_Y: TGdkAnchorHints = 8;
  GDK_ANCHOR_RESIZE_X: TGdkAnchorHints = 16;
  GDK_ANCHOR_RESIZE_Y: TGdkAnchorHints = 32;
  GDK_ANCHOR_FLIP: TGdkAnchorHints = 3;
  GDK_ANCHOR_SLIDE: TGdkAnchorHints = 12;
  GDK_ANCHOR_RESIZE: TGdkAnchorHints = 48;

type
  TGdkModifierType = DWord;
const
  { GdkModifierType }
  GDK_SHIFT_MASK: TGdkModifierType = 1;
  GDK_LOCK_MASK: TGdkModifierType = 2;
  GDK_CONTROL_MASK: TGdkModifierType = 4;
  GDK_ALT_MASK: TGdkModifierType = 8;
  GDK_BUTTON1_MASK: TGdkModifierType = 256;
  GDK_BUTTON2_MASK: TGdkModifierType = 512;
  GDK_BUTTON3_MASK: TGdkModifierType = 1024;
  GDK_BUTTON4_MASK: TGdkModifierType = 2048;
  GDK_BUTTON5_MASK: TGdkModifierType = 4096;
  GDK_SUPER_MASK: TGdkModifierType = 67108864;
  GDK_HYPER_MASK: TGdkModifierType = 134217728;
  GDK_META_MASK: TGdkModifierType = 268435456;

type
  TGdkAxisFlags = DWord;
const
  { GdkAxisFlags }
  GDK_AXIS_FLAG_X: TGdkAxisFlags = 2;
  GDK_AXIS_FLAG_Y: TGdkAxisFlags = 4;
  GDK_AXIS_FLAG_DELTA_X: TGdkAxisFlags = 8;
  GDK_AXIS_FLAG_DELTA_Y: TGdkAxisFlags = 16;
  GDK_AXIS_FLAG_PRESSURE: TGdkAxisFlags = 32;
  GDK_AXIS_FLAG_XTILT: TGdkAxisFlags = 64;
  GDK_AXIS_FLAG_YTILT: TGdkAxisFlags = 128;
  GDK_AXIS_FLAG_WHEEL: TGdkAxisFlags = 256;
  GDK_AXIS_FLAG_DISTANCE: TGdkAxisFlags = 512;
  GDK_AXIS_FLAG_ROTATION: TGdkAxisFlags = 1024;
  GDK_AXIS_FLAG_SLIDER: TGdkAxisFlags = 2048;

type
  TGdkAxisUse = DWord;
const
  { GdkAxisUse }
  GDK_AXIS_IGNORE: TGdkAxisUse = 0;
  GDK_AXIS_X: TGdkAxisUse = 1;
  GDK_AXIS_Y: TGdkAxisUse = 2;
  GDK_AXIS_DELTA_X: TGdkAxisUse = 3;
  GDK_AXIS_DELTA_Y: TGdkAxisUse = 4;
  GDK_AXIS_PRESSURE: TGdkAxisUse = 5;
  GDK_AXIS_XTILT: TGdkAxisUse = 6;
  GDK_AXIS_YTILT: TGdkAxisUse = 7;
  GDK_AXIS_WHEEL: TGdkAxisUse = 8;
  GDK_AXIS_DISTANCE: TGdkAxisUse = 9;
  GDK_AXIS_ROTATION: TGdkAxisUse = 10;
  GDK_AXIS_SLIDER: TGdkAxisUse = 11;
  GDK_AXIS_LAST: TGdkAxisUse = 12;

type
  TGdkNotifyType = DWord;
const
  { GdkNotifyType }
  GDK_NOTIFY_ANCESTOR: TGdkNotifyType = 0;
  GDK_NOTIFY_VIRTUAL: TGdkNotifyType = 1;
  GDK_NOTIFY_INFERIOR: TGdkNotifyType = 2;
  GDK_NOTIFY_NONLINEAR: TGdkNotifyType = 3;
  GDK_NOTIFY_NONLINEAR_VIRTUAL: TGdkNotifyType = 4;
  GDK_NOTIFY_UNKNOWN: TGdkNotifyType = 5;

type
  TGdkCrossingMode = DWord;
const
  { GdkCrossingMode }
  GDK_CROSSING_NORMAL: TGdkCrossingMode = 0;
  GDK_CROSSING_GRAB: TGdkCrossingMode = 1;
  GDK_CROSSING_UNGRAB: TGdkCrossingMode = 2;
  GDK_CROSSING_GTK_GRAB: TGdkCrossingMode = 3;
  GDK_CROSSING_GTK_UNGRAB: TGdkCrossingMode = 4;
  GDK_CROSSING_STATE_CHANGED: TGdkCrossingMode = 5;
  GDK_CROSSING_TOUCH_BEGIN: TGdkCrossingMode = 6;
  GDK_CROSSING_TOUCH_END: TGdkCrossingMode = 7;
  GDK_CROSSING_DEVICE_SWITCH: TGdkCrossingMode = 8;

type
  TGdkDragAction = DWord;
const
  { GdkDragAction }
  GDK_ACTION_COPY: TGdkDragAction = 1;
  GDK_ACTION_MOVE: TGdkDragAction = 2;
  GDK_ACTION_LINK: TGdkDragAction = 4;
  GDK_ACTION_ASK: TGdkDragAction = 8;

type
  TGdkSeatCapabilities = DWord;
const
  { GdkSeatCapabilities }
  GDK_SEAT_CAPABILITY_NONE: TGdkSeatCapabilities = 0;
  GDK_SEAT_CAPABILITY_POINTER: TGdkSeatCapabilities = 1;
  GDK_SEAT_CAPABILITY_TOUCH: TGdkSeatCapabilities = 2;
  GDK_SEAT_CAPABILITY_TABLET_STYLUS: TGdkSeatCapabilities = 4;
  GDK_SEAT_CAPABILITY_KEYBOARD: TGdkSeatCapabilities = 8;
  GDK_SEAT_CAPABILITY_TABLET_PAD: TGdkSeatCapabilities = 16;
  GDK_SEAT_CAPABILITY_ALL_POINTING: TGdkSeatCapabilities = 7;
  GDK_SEAT_CAPABILITY_ALL: TGdkSeatCapabilities = 15;

type
  TGdkInputSource = DWord;
const
  { GdkInputSource }
  GDK_SOURCE_MOUSE: TGdkInputSource = 0;
  GDK_SOURCE_PEN: TGdkInputSource = 1;
  GDK_SOURCE_KEYBOARD: TGdkInputSource = 2;
  GDK_SOURCE_TOUCHSCREEN: TGdkInputSource = 3;
  GDK_SOURCE_TOUCHPAD: TGdkInputSource = 4;
  GDK_SOURCE_TRACKPOINT: TGdkInputSource = 5;
  GDK_SOURCE_TABLET_PAD: TGdkInputSource = 6;

type
  TGdkDevicePadFeature = DWord;
const
  { GdkDevicePadFeature }
  GDK_DEVICE_PAD_FEATURE_BUTTON: TGdkDevicePadFeature = 0;
  GDK_DEVICE_PAD_FEATURE_RING: TGdkDevicePadFeature = 1;
  GDK_DEVICE_PAD_FEATURE_STRIP: TGdkDevicePadFeature = 2;

type
  TGdkDeviceToolType = DWord;
const
  { GdkDeviceToolType }
  GDK_DEVICE_TOOL_TYPE_UNKNOWN: TGdkDeviceToolType = 0;
  GDK_DEVICE_TOOL_TYPE_PEN: TGdkDeviceToolType = 1;
  GDK_DEVICE_TOOL_TYPE_ERASER: TGdkDeviceToolType = 2;
  GDK_DEVICE_TOOL_TYPE_BRUSH: TGdkDeviceToolType = 3;
  GDK_DEVICE_TOOL_TYPE_PENCIL: TGdkDeviceToolType = 4;
  GDK_DEVICE_TOOL_TYPE_AIRBRUSH: TGdkDeviceToolType = 5;
  GDK_DEVICE_TOOL_TYPE_MOUSE: TGdkDeviceToolType = 6;
  GDK_DEVICE_TOOL_TYPE_LENS: TGdkDeviceToolType = 7;

type
  TGdkGLAPI = DWord;
const
  { GdkGLAPI }
  GDK_GL_API_GL: TGdkGLAPI = 1;
  GDK_GL_API_GLES: TGdkGLAPI = 2;

type
  TGdkDragCancelReason = DWord;
const
  { GdkDragCancelReason }
  GDK_DRAG_CANCEL_NO_TARGET: TGdkDragCancelReason = 0;
  GDK_DRAG_CANCEL_USER_CANCELLED: TGdkDragCancelReason = 1;
  GDK_DRAG_CANCEL_ERROR: TGdkDragCancelReason = 2;

type
  TGdkEventType = DWord;
const
  { GdkEventType }
  GDK_DELETE: TGdkEventType = 0;
  GDK_MOTION_NOTIFY: TGdkEventType = 1;
  GDK_BUTTON_PRESS: TGdkEventType = 2;
  GDK_BUTTON_RELEASE: TGdkEventType = 3;
  GDK_KEY_PRESS: TGdkEventType = 4;
  GDK_KEY_RELEASE: TGdkEventType = 5;
  GDK_ENTER_NOTIFY: TGdkEventType = 6;
  GDK_LEAVE_NOTIFY: TGdkEventType = 7;
  GDK_FOCUS_CHANGE: TGdkEventType = 8;
  GDK_PROXIMITY_IN: TGdkEventType = 9;
  GDK_PROXIMITY_OUT: TGdkEventType = 10;
  GDK_DRAG_ENTER: TGdkEventType = 11;
  GDK_DRAG_LEAVE: TGdkEventType = 12;
  GDK_DRAG_MOTION_: TGdkEventType = 13;
  GDK_DROP_START: TGdkEventType = 14;
  GDK_SCROLL: TGdkEventType = 15;
  GDK_GRAB_BROKEN: TGdkEventType = 16;
  GDK_TOUCH_BEGIN: TGdkEventType = 17;
  GDK_TOUCH_UPDATE: TGdkEventType = 18;
  GDK_TOUCH_END: TGdkEventType = 19;
  GDK_TOUCH_CANCEL: TGdkEventType = 20;
  GDK_TOUCHPAD_SWIPE: TGdkEventType = 21;
  GDK_TOUCHPAD_PINCH: TGdkEventType = 22;
  GDK_PAD_BUTTON_PRESS: TGdkEventType = 23;
  GDK_PAD_BUTTON_RELEASE: TGdkEventType = 24;
  GDK_PAD_RING: TGdkEventType = 25;
  GDK_PAD_STRIP: TGdkEventType = 26;
  GDK_PAD_GROUP_MODE: TGdkEventType = 27;
  GDK_TOUCHPAD_HOLD: TGdkEventType = 28;
  GDK_EVENT_LAST: TGdkEventType = 29;

type
  TGdkFrameClockPhase = DWord;
const
  { GdkFrameClockPhase }
  GDK_FRAME_CLOCK_PHASE_NONE: TGdkFrameClockPhase = 0;
  GDK_FRAME_CLOCK_PHASE_FLUSH_EVENTS: TGdkFrameClockPhase = 1;
  GDK_FRAME_CLOCK_PHASE_BEFORE_PAINT: TGdkFrameClockPhase = 2;
  GDK_FRAME_CLOCK_PHASE_UPDATE: TGdkFrameClockPhase = 4;
  GDK_FRAME_CLOCK_PHASE_LAYOUT: TGdkFrameClockPhase = 8;
  GDK_FRAME_CLOCK_PHASE_PAINT: TGdkFrameClockPhase = 16;
  GDK_FRAME_CLOCK_PHASE_RESUME_EVENTS: TGdkFrameClockPhase = 32;
  GDK_FRAME_CLOCK_PHASE_AFTER_PAINT: TGdkFrameClockPhase = 64;

type
  TGdkFullscreenMode = DWord;
const
  { GdkFullscreenMode }
  GDK_FULLSCREEN_ON_CURRENT_MONITOR: TGdkFullscreenMode = 0;
  GDK_FULLSCREEN_ON_ALL_MONITORS: TGdkFullscreenMode = 1;

type
  TGdkGLError = DWord;
const
  { GdkGLError }
  GDK_GL_ERROR_NOT_AVAILABLE: TGdkGLError = 0;
  GDK_GL_ERROR_UNSUPPORTED_FORMAT: TGdkGLError = 1;
  GDK_GL_ERROR_UNSUPPORTED_PROFILE: TGdkGLError = 2;
  GDK_GL_ERROR_COMPILATION_FAILED: TGdkGLError = 3;
  GDK_GL_ERROR_LINK_FAILED: TGdkGLError = 4;

type
  TGdkPaintableFlags = DWord;
const
  { GdkPaintableFlags }
  GDK_PAINTABLE_STATIC_SIZE: TGdkPaintableFlags = 1;
  GDK_PAINTABLE_STATIC_CONTENTS: TGdkPaintableFlags = 2;

type
  TGdkGravity = DWord;
const
  { GdkGravity }
  GDK_GRAVITY_NORTH_WEST: TGdkGravity = 1;
  GDK_GRAVITY_NORTH: TGdkGravity = 2;
  GDK_GRAVITY_NORTH_EAST: TGdkGravity = 3;
  GDK_GRAVITY_WEST: TGdkGravity = 4;
  GDK_GRAVITY_CENTER: TGdkGravity = 5;
  GDK_GRAVITY_EAST: TGdkGravity = 6;
  GDK_GRAVITY_SOUTH_WEST: TGdkGravity = 7;
  GDK_GRAVITY_SOUTH: TGdkGravity = 8;
  GDK_GRAVITY_SOUTH_EAST: TGdkGravity = 9;
  GDK_GRAVITY_STATIC: TGdkGravity = 10;

type
  TGdkKeyMatch = DWord;
const
  { GdkKeyMatch }
  GDK_KEY_MATCH_NONE: TGdkKeyMatch = 0;
  GDK_KEY_MATCH_PARTIAL: TGdkKeyMatch = 1;
  GDK_KEY_MATCH_EXACT: TGdkKeyMatch = 2;

type
  TGdkMemoryFormat = DWord;
const
  { GdkMemoryFormat }
  GDK_MEMORY_B8G8R8A8_PREMULTIPLIED: TGdkMemoryFormat = 0;
  GDK_MEMORY_A8R8G8B8_PREMULTIPLIED: TGdkMemoryFormat = 1;
  GDK_MEMORY_R8G8B8A8_PREMULTIPLIED: TGdkMemoryFormat = 2;
  GDK_MEMORY_B8G8R8A8: TGdkMemoryFormat = 3;
  GDK_MEMORY_A8R8G8B8: TGdkMemoryFormat = 4;
  GDK_MEMORY_R8G8B8A8: TGdkMemoryFormat = 5;
  GDK_MEMORY_A8B8G8R8: TGdkMemoryFormat = 6;
  GDK_MEMORY_R8G8B8: TGdkMemoryFormat = 7;
  GDK_MEMORY_B8G8R8: TGdkMemoryFormat = 8;
  GDK_MEMORY_R16G16B16: TGdkMemoryFormat = 9;
  GDK_MEMORY_R16G16B16A16_PREMULTIPLIED: TGdkMemoryFormat = 10;
  GDK_MEMORY_R16G16B16A16: TGdkMemoryFormat = 11;
  GDK_MEMORY_R16G16B16_FLOAT: TGdkMemoryFormat = 12;
  GDK_MEMORY_R16G16B16A16_FLOAT_PREMULTIPLIED: TGdkMemoryFormat = 13;
  GDK_MEMORY_R16G16B16A16_FLOAT: TGdkMemoryFormat = 14;
  GDK_MEMORY_R32G32B32_FLOAT: TGdkMemoryFormat = 15;
  GDK_MEMORY_R32G32B32A32_FLOAT_PREMULTIPLIED: TGdkMemoryFormat = 16;
  GDK_MEMORY_R32G32B32A32_FLOAT: TGdkMemoryFormat = 17;
  GDK_MEMORY_N_FORMATS: TGdkMemoryFormat = 18;

type
  TGdkSubpixelLayout = DWord;
const
  { GdkSubpixelLayout }
  GDK_SUBPIXEL_LAYOUT_UNKNOWN: TGdkSubpixelLayout = 0;
  GDK_SUBPIXEL_LAYOUT_NONE: TGdkSubpixelLayout = 1;
  GDK_SUBPIXEL_LAYOUT_HORIZONTAL_RGB: TGdkSubpixelLayout = 2;
  GDK_SUBPIXEL_LAYOUT_HORIZONTAL_BGR: TGdkSubpixelLayout = 3;
  GDK_SUBPIXEL_LAYOUT_VERTICAL_RGB: TGdkSubpixelLayout = 4;
  GDK_SUBPIXEL_LAYOUT_VERTICAL_BGR: TGdkSubpixelLayout = 5;

type
  TGdkScrollDirection = DWord;
const
  { GdkScrollDirection }
  GDK_SCROLL_UP: TGdkScrollDirection = 0;
  GDK_SCROLL_DOWN: TGdkScrollDirection = 1;
  GDK_SCROLL_LEFT: TGdkScrollDirection = 2;
  GDK_SCROLL_RIGHT: TGdkScrollDirection = 3;
  GDK_SCROLL_SMOOTH: TGdkScrollDirection = 4;

type
  TGdkSurfaceEdge = DWord;
const
  { GdkSurfaceEdge }
  GDK_SURFACE_EDGE_NORTH_WEST: TGdkSurfaceEdge = 0;
  GDK_SURFACE_EDGE_NORTH: TGdkSurfaceEdge = 1;
  GDK_SURFACE_EDGE_NORTH_EAST: TGdkSurfaceEdge = 2;
  GDK_SURFACE_EDGE_WEST: TGdkSurfaceEdge = 3;
  GDK_SURFACE_EDGE_EAST: TGdkSurfaceEdge = 4;
  GDK_SURFACE_EDGE_SOUTH_WEST: TGdkSurfaceEdge = 5;
  GDK_SURFACE_EDGE_SOUTH: TGdkSurfaceEdge = 6;
  GDK_SURFACE_EDGE_SOUTH_EAST: TGdkSurfaceEdge = 7;

type
  TGdkTextureError = DWord;
const
  { GdkTextureError }
  GDK_TEXTURE_ERROR_TOO_LARGE: TGdkTextureError = 0;
  GDK_TEXTURE_ERROR_CORRUPT_IMAGE: TGdkTextureError = 1;
  GDK_TEXTURE_ERROR_UNSUPPORTED_CONTENT: TGdkTextureError = 2;
  GDK_TEXTURE_ERROR_UNSUPPORTED_FORMAT: TGdkTextureError = 3;

type
  TGdkTitlebarGesture = DWord;
const
  { GdkTitlebarGesture }
  GDK_TITLEBAR_GESTURE_DOUBLE_CLICK: TGdkTitlebarGesture = 1;
  GDK_TITLEBAR_GESTURE_RIGHT_CLICK: TGdkTitlebarGesture = 2;
  GDK_TITLEBAR_GESTURE_MIDDLE_CLICK: TGdkTitlebarGesture = 3;

type
  TGdkToplevelState = DWord;
const
  { GdkToplevelState }
  GDK_TOPLEVEL_STATE_MINIMIZED: TGdkToplevelState = 1;
  GDK_TOPLEVEL_STATE_MAXIMIZED: TGdkToplevelState = 2;
  GDK_TOPLEVEL_STATE_STICKY: TGdkToplevelState = 4;
  GDK_TOPLEVEL_STATE_FULLSCREEN: TGdkToplevelState = 8;
  GDK_TOPLEVEL_STATE_ABOVE: TGdkToplevelState = 16;
  GDK_TOPLEVEL_STATE_BELOW: TGdkToplevelState = 32;
  GDK_TOPLEVEL_STATE_FOCUSED: TGdkToplevelState = 64;
  GDK_TOPLEVEL_STATE_TILED: TGdkToplevelState = 128;
  GDK_TOPLEVEL_STATE_TOP_TILED: TGdkToplevelState = 256;
  GDK_TOPLEVEL_STATE_TOP_RESIZABLE: TGdkToplevelState = 512;
  GDK_TOPLEVEL_STATE_RIGHT_TILED: TGdkToplevelState = 1024;
  GDK_TOPLEVEL_STATE_RIGHT_RESIZABLE: TGdkToplevelState = 2048;
  GDK_TOPLEVEL_STATE_BOTTOM_TILED: TGdkToplevelState = 4096;
  GDK_TOPLEVEL_STATE_BOTTOM_RESIZABLE: TGdkToplevelState = 8192;
  GDK_TOPLEVEL_STATE_LEFT_TILED: TGdkToplevelState = 16384;
  GDK_TOPLEVEL_STATE_LEFT_RESIZABLE: TGdkToplevelState = 32768;

type
  TGdkTouchpadGesturePhase = DWord;
const
  { GdkTouchpadGesturePhase }
  GDK_TOUCHPAD_GESTURE_PHASE_BEGIN: TGdkTouchpadGesturePhase = 0;
  GDK_TOUCHPAD_GESTURE_PHASE_UPDATE: TGdkTouchpadGesturePhase = 1;
  GDK_TOUCHPAD_GESTURE_PHASE_END: TGdkTouchpadGesturePhase = 2;
  GDK_TOUCHPAD_GESTURE_PHASE_CANCEL: TGdkTouchpadGesturePhase = 3;

type
  TGdkVulkanError = DWord;
const
  { GdkVulkanError }
  GDK_VULKAN_ERROR_UNSUPPORTED: TGdkVulkanError = 0;
  GDK_VULKAN_ERROR_NOT_AVAILABLE: TGdkVulkanError = 1;
type

  PPGdkAnchorHints = ^PGdkAnchorHints;
  PGdkAnchorHints = ^TGdkAnchorHints;

  PPGdkDisplay = ^PGdkDisplay;
  PGdkDisplay = ^TGdkDisplay;

  PPGdkGLContext = ^PGdkGLContext;
  PGdkGLContext = ^TGdkGLContext;

  PPGdkDevice = ^PGdkDevice;
  PGdkDevice = ^TGdkDevice;

  PPGdkAppLaunchContext = ^PGdkAppLaunchContext;
  PGdkAppLaunchContext = ^TGdkAppLaunchContext;

  PPGdkClipboard = ^PGdkClipboard;
  PGdkClipboard = ^TGdkClipboard;

  PPGdkSeat = ^PGdkSeat;
  PGdkSeat = ^TGdkSeat;

  PPGdkMonitor = ^PGdkMonitor;
  PGdkMonitor = ^TGdkMonitor;

  PPGdkSurface = ^PGdkSurface;
  PGdkSurface = ^TGdkSurface;

  PPPGdkKeymapKey = ^PPGdkKeymapKey;
  PPGdkKeymapKey = ^PGdkKeymapKey;
  PGdkKeymapKey = ^TGdkKeymapKey;

  PPGdkEvent = ^PGdkEvent;
  PGdkEvent = ^TGdkEvent;

  PPGdkModifierType = ^PGdkModifierType;
  PGdkModifierType = ^TGdkModifierType;
  TGdkDisplay = object(TGObject)
    function get_default: PGdkDisplay; cdecl; inline; static;
    function open(display_name: Pgchar): PGdkDisplay; cdecl; inline; static;
    procedure beep; cdecl; inline;
    procedure close; cdecl; inline;
    function create_gl_context(error: PPGError): PGdkGLContext; cdecl; inline;
    function device_is_grabbed(device: PGdkDevice): gboolean; cdecl; inline;
    procedure flush; cdecl; inline;
    function get_app_launch_context: PGdkAppLaunchContext; cdecl; inline;
    function get_clipboard: PGdkClipboard; cdecl; inline;
    function get_default_seat: PGdkSeat; cdecl; inline;
    function get_monitor_at_surface(surface: PGdkSurface): PGdkMonitor; cdecl; inline;
    function get_monitors: PGListModel; cdecl; inline;
    function get_name: Pgchar; cdecl; inline;
    function get_primary_clipboard: PGdkClipboard; cdecl; inline;
    function get_setting(name: Pgchar; value: PGValue): gboolean; cdecl; inline;
    function get_startup_notification_id: Pgchar; cdecl; inline;
    function is_closed: gboolean; cdecl; inline;
    function is_composited: gboolean; cdecl; inline;
    function is_rgba: gboolean; cdecl; inline;
    function list_seats: PGList; cdecl; inline;
    function map_keycode(keycode: guint; keys: PPGdkKeymapKey; keyvals: PPguint; n_entries: Pgint): gboolean; cdecl; inline;
    function map_keyval(keyval: guint; keys: PPGdkKeymapKey; n_keys: Pgint): gboolean; cdecl; inline;
    procedure notify_startup_complete(startup_id: Pgchar); cdecl; inline;
    function prepare_gl(error: PPGError): gboolean; cdecl; inline;
    procedure put_event(event: PGdkEvent); cdecl; inline;
    function supports_input_shapes: gboolean; cdecl; inline;
    procedure sync; cdecl; inline;
    function translate_key(keycode: guint; state: TGdkModifierType; group: gint; keyval: Pguint; effective_group: Pgint; level: Pgint; consumed: PGdkModifierType): gboolean; cdecl; inline;
    //property composited: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_composited ;
    //property input_shapes: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_input_shapes ;
    //property rgba: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_rgba ;
  end;
  TGdkAppLaunchContext = object(TGAppLaunchContext)
    function get_display: PGdkDisplay; cdecl; inline;
    procedure set_desktop(desktop: gint); cdecl; inline;
    procedure set_icon(icon: PGIcon); cdecl; inline;
    procedure set_icon_name(icon_name: Pgchar); cdecl; inline;
    procedure set_timestamp(timestamp: guint32); cdecl; inline;
    property display: PGdkDisplay read get_display  { property is writeable but setter not declared } ;
  end;

  PPGdkAxisFlags = ^PGdkAxisFlags;
  PGdkAxisFlags = ^TGdkAxisFlags;

  PPGdkAxisUse = ^PGdkAxisUse;
  PGdkAxisUse = ^TGdkAxisUse;

  PPGdkButtonEvent = ^PGdkButtonEvent;
  PGdkButtonEvent = ^TGdkButtonEvent;
  TGdkButtonEvent = object
    function get_button: guint; cdecl; inline;
  end;

  PPGdkCairoContext = ^PGdkCairoContext;
  PGdkCairoContext = ^TGdkCairoContext;
  TGdkCairoContext = object
    function cairo_create: Pcairo_t; cdecl; inline;
  end;

  PPGdkContentProvider = ^PGdkContentProvider;
  PGdkContentProvider = ^TGdkContentProvider;

  PPGdkContentFormats = ^PGdkContentFormats;
  PGdkContentFormats = ^TGdkContentFormats;
  TGdkContentProvider = object(TGObject)
    function new_for_bytes(mime_type: Pgchar; bytes: PGBytes): PGdkContentProvider; cdecl; inline; static;
    function new_for_value(value: PGValue): PGdkContentProvider; cdecl; inline; static;
    //function new_typed(type_: TGType; args: array of const): PGdkContentProvider; cdecl; inline; static;
    function new_union(providers: PPGdkContentProvider; n_providers: gsize): PGdkContentProvider; cdecl; inline; static;
    procedure content_changed; cdecl; inline;
    function get_value(value: PGValue; error: PPGError): gboolean; cdecl; inline;
    function ref_formats: PGdkContentFormats; cdecl; inline;
    function ref_storable_formats: PGdkContentFormats; cdecl; inline;
    procedure write_mime_type_async(mime_type: Pgchar; stream: PGOutputStream; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl; inline;
    function write_mime_type_finish(result_: PGAsyncResult; error: PPGError): gboolean; cdecl; inline;
    //property formats: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_formats ;
    //property storable_formats: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_storable_formats ;
  end;

  PPGdkTexture = ^PGdkTexture;
  PGdkTexture = ^TGdkTexture;
  TGdkClipboard = object(TGObject)
    function get_content: PGdkContentProvider; cdecl; inline;
    function get_display: PGdkDisplay; cdecl; inline;
    function get_formats: PGdkContentFormats; cdecl; inline;
    function is_local: gboolean; cdecl; inline;
    procedure read_async(mime_types: PPgchar; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl; inline;
    function read_finish(result_: PGAsyncResult; out_mime_type: PPgchar; error: PPGError): PGInputStream; cdecl; inline;
    procedure read_text_async(cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl; inline;
    function read_text_finish(result_: PGAsyncResult; error: PPGError): Pgchar; cdecl; inline;
    procedure read_texture_async(cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl; inline;
    function read_texture_finish(result_: PGAsyncResult; error: PPGError): PGdkTexture; cdecl; inline;
    procedure read_value_async(type_: TGType; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl; inline;
    function read_value_finish(result_: PGAsyncResult; error: PPGError): PGValue; cdecl; inline;
    //procedure set_(type_: TGType; args: array of const); cdecl; inline;
    function set_content(provider: PGdkContentProvider): gboolean; cdecl; inline;
    procedure set_text(text: Pgchar); cdecl; inline;
    procedure set_texture(texture: PGdkTexture); cdecl; inline;
    //procedure set_valist(type_: TGType; args: Tva_list); cdecl; inline;
    procedure set_value(value: PGValue); cdecl; inline;
    procedure store_async(io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl; inline;
    function store_finish(result_: PGAsyncResult; error: PPGError): gboolean; cdecl; inline;
    property content: PGdkContentProvider read get_content ;
    property display: PGdkDisplay read get_display  { property is writeable but setter not declared } ;
    property formats: PGdkContentFormats read get_formats ;
    //property local: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_local ;
  end;
  TGdkContentFormats = object
    function new(mime_types: PPgchar; n_mime_types: guint): PGdkContentFormats; cdecl; inline; static;
    function new_for_gtype(type_: TGType): PGdkContentFormats; cdecl; inline; static;
    function contain_gtype(type_: TGType): gboolean; cdecl; inline;
    function contain_mime_type(mime_type: Pgchar): gboolean; cdecl; inline;
    function get_gtypes(n_gtypes: Pgsize): PGType; cdecl; inline;
    function get_mime_types(n_mime_types: Pgsize): PPgchar; cdecl; inline;
    function match(second: PGdkContentFormats): gboolean; cdecl; inline;
    function match_gtype(second: PGdkContentFormats): TGType; cdecl; inline;
    function match_mime_type(second: PGdkContentFormats): Pgchar; cdecl; inline;
    procedure print(string_: PGString); cdecl; inline;
    function ref: PGdkContentFormats; cdecl; inline;
    function to_string: Pgchar; cdecl; inline;
    function union(second: PGdkContentFormats): PGdkContentFormats; cdecl; inline;
    function union_deserialize_gtypes: PGdkContentFormats; cdecl; inline;
    function union_deserialize_mime_types: PGdkContentFormats; cdecl; inline;
    function union_serialize_gtypes: PGdkContentFormats; cdecl; inline;
    function union_serialize_mime_types: PGdkContentFormats; cdecl; inline;
    procedure unref; cdecl; inline;
    function parse(string_: Pgchar): PGdkContentFormats; cdecl; inline; static;
  end;
  TGdkTexture = object(TGObject)
    function new_for_pixbuf(pixbuf: PGdkPixbuf): PGdkTexture; cdecl; inline; static;
    function new_from_bytes(bytes: PGBytes; error: PPGError): PGdkTexture; cdecl; inline; static;
    function new_from_file(file_: PGFile; error: PPGError): PGdkTexture; cdecl; inline; static;
    function new_from_filename(path: Pgchar; error: PPGError): PGdkTexture; cdecl; inline; static;
    function new_from_resource(resource_path: Pgchar): PGdkTexture; cdecl; inline; static;
    procedure download(data: Pguint8; stride: gsize); cdecl; inline;
    function get_height: gint; cdecl; inline;
    function get_width: gint; cdecl; inline;
    function save_to_png(filename: Pgchar): gboolean; cdecl; inline;
    function save_to_png_bytes: PGBytes; cdecl; inline;
    function save_to_tiff(filename: Pgchar): gboolean; cdecl; inline;
    function save_to_tiff_bytes: PGBytes; cdecl; inline;
    property height: gint read get_height  { property is writeable but setter not declared } ;
    property width: gint read get_width  { property is writeable but setter not declared } ;
  end;

  PPGdkContentDeserializer = ^PGdkContentDeserializer;
  PGdkContentDeserializer = ^TGdkContentDeserializer;
  TGdkContentDeserializer = object(TGObject)
    function get_cancellable: PGCancellable; cdecl; inline;
    function get_gtype: TGType; cdecl; inline;
    function get_input_stream: PGInputStream; cdecl; inline;
    function get_mime_type: Pgchar; cdecl; inline;
    function get_priority: gint; cdecl; inline;
    function get_task_data: gpointer; cdecl; inline;
    function get_user_data: gpointer; cdecl; inline;
    function get_value: PGValue; cdecl; inline;
    procedure return_error(error: PGError); cdecl; inline;
    procedure return_success; cdecl; inline;
    procedure set_task_data(data: gpointer; notify: TGDestroyNotify); cdecl; inline;
  end;
  TGdkContentDeserializeFunc = procedure(deserializer: PGdkContentDeserializer); cdecl;

  PPGdkContentFormatsBuilder = ^PGdkContentFormatsBuilder;
  PGdkContentFormatsBuilder = ^TGdkContentFormatsBuilder;
  TGdkContentFormatsBuilder = object
    function new: PGdkContentFormatsBuilder; cdecl; inline; static;
    procedure add_formats(formats: PGdkContentFormats); cdecl; inline;
    procedure add_gtype(type_: TGType); cdecl; inline;
    procedure add_mime_type(mime_type: Pgchar); cdecl; inline;
    function free_to_formats: PGdkContentFormats; cdecl; inline;
    function ref: PGdkContentFormatsBuilder; cdecl; inline;
    function to_formats: PGdkContentFormats; cdecl; inline;
    procedure unref; cdecl; inline;
  end;

  PPGdkContentProviderClass = ^PGdkContentProviderClass;
  PGdkContentProviderClass = ^TGdkContentProviderClass;
  TGdkContentProviderClass = object
    parent_class: TGObjectClass;
    content_changed: procedure(provider: PGdkContentProvider); cdecl;
    attach_clipboard: procedure(provider: PGdkContentProvider; clipboard: PGdkClipboard); cdecl;
    detach_clipboard: procedure(provider: PGdkContentProvider; clipboard: PGdkClipboard); cdecl;
    ref_formats: function(provider: PGdkContentProvider): PGdkContentFormats; cdecl;
    ref_storable_formats: function(provider: PGdkContentProvider): PGdkContentFormats; cdecl;
    write_mime_type_async: procedure(provider: PGdkContentProvider; mime_type: Pgchar; stream: PGOutputStream; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
    write_mime_type_finish: function(provider: PGdkContentProvider; result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
    get_value: function(provider: PGdkContentProvider; value: PGValue; error: PPGError): gboolean; cdecl;
    padding: array [0..7] of gpointer;
  end;

  PPGdkContentSerializer = ^PGdkContentSerializer;
  PGdkContentSerializer = ^TGdkContentSerializer;
  TGdkContentSerializer = object(TGObject)
    function get_cancellable: PGCancellable; cdecl; inline;
    function get_gtype: TGType; cdecl; inline;
    function get_mime_type: Pgchar; cdecl; inline;
    function get_output_stream: PGOutputStream; cdecl; inline;
    function get_priority: gint; cdecl; inline;
    function get_task_data: gpointer; cdecl; inline;
    function get_user_data: gpointer; cdecl; inline;
    function get_value: PGValue; cdecl; inline;
    procedure return_error(error: PGError); cdecl; inline;
    procedure return_success; cdecl; inline;
    procedure set_task_data(data: gpointer; notify: TGDestroyNotify); cdecl; inline;
  end;
  TGdkContentSerializeFunc = procedure(serializer: PGdkContentSerializer); cdecl;

  PPGdkNotifyType = ^PGdkNotifyType;
  PGdkNotifyType = ^TGdkNotifyType;

  PPGdkCrossingEvent = ^PGdkCrossingEvent;
  PGdkCrossingEvent = ^TGdkCrossingEvent;

  PPGdkCrossingMode = ^PGdkCrossingMode;
  PGdkCrossingMode = ^TGdkCrossingMode;
  TGdkCrossingEvent = object
    function get_detail: TGdkNotifyType; cdecl; inline;
    function get_focus: gboolean; cdecl; inline;
    function get_mode: TGdkCrossingMode; cdecl; inline;
  end;

  PPGdkCursor = ^PGdkCursor;
  PGdkCursor = ^TGdkCursor;
  TGdkCursor = object(TGObject)
    function new_from_name(name: Pgchar; fallback: PGdkCursor): PGdkCursor; cdecl; inline; static;
    function new_from_texture(texture: PGdkTexture; hotspot_x: gint; hotspot_y: gint; fallback: PGdkCursor): PGdkCursor; cdecl; inline; static;
    function get_fallback: PGdkCursor; cdecl; inline;
    function get_hotspot_x: gint; cdecl; inline;
    function get_hotspot_y: gint; cdecl; inline;
    function get_name: Pgchar; cdecl; inline;
    function get_texture: PGdkTexture; cdecl; inline;
    property fallback: PGdkCursor read get_fallback  { property is writeable but setter not declared } ;
    property hotspot_x: gint read get_hotspot_x  { property is writeable but setter not declared } ;
    property hotspot_y: gint read get_hotspot_y  { property is writeable but setter not declared } ;
    property name: Pgchar read get_name  { property is writeable but setter not declared } ;
    property texture: PGdkTexture read get_texture  { property is writeable but setter not declared } ;
  end;

  PPGdkDrop = ^PGdkDrop;
  PGdkDrop = ^TGdkDrop;

  PPGdkDragAction = ^PGdkDragAction;
  PGdkDragAction = ^TGdkDragAction;

  PPGdkDrag = ^PGdkDrag;
  PGdkDrag = ^TGdkDrag;
  TGdkDrop = object(TGObject)
    procedure finish(action: TGdkDragAction); cdecl; inline;
    function get_actions: TGdkDragAction; cdecl; inline;
    function get_device: PGdkDevice; cdecl; inline;
    function get_display: PGdkDisplay; cdecl; inline;
    function get_drag: PGdkDrag; cdecl; inline;
    function get_formats: PGdkContentFormats; cdecl; inline;
    function get_surface: PGdkSurface; cdecl; inline;
    procedure read_async(mime_types: PPgchar; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl; inline;
    function read_finish(result_: PGAsyncResult; out_mime_type: PPgchar; error: PPGError): PGInputStream; cdecl; inline;
    procedure read_value_async(type_: TGType; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl; inline;
    function read_value_finish(result_: PGAsyncResult; error: PPGError): PGValue; cdecl; inline;
    procedure status(actions: TGdkDragAction; preferred: TGdkDragAction); cdecl; inline;
    property actions: TGdkDragAction read get_actions  { property is writeable but setter not declared } ;
    property device: PGdkDevice read get_device  { property is writeable but setter not declared } ;
    property display: PGdkDisplay read get_display ;
    property drag: PGdkDrag read get_drag  { property is writeable but setter not declared } ;
    property formats: PGdkContentFormats read get_formats  { property is writeable but setter not declared } ;
    property surface: PGdkSurface read get_surface  { property is writeable but setter not declared } ;
  end;

  PPGdkDNDEvent = ^PGdkDNDEvent;
  PGdkDNDEvent = ^TGdkDNDEvent;
  TGdkDNDEvent = object
    function get_drop: PGdkDrop; cdecl; inline;
  end;

  PPGdkDeleteEvent = ^PGdkDeleteEvent;
  PGdkDeleteEvent = ^TGdkDeleteEvent;
  TGdkDeleteEvent = object
  end;

  PPGdkDeviceTool = ^PGdkDeviceTool;
  PGdkDeviceTool = ^TGdkDeviceTool;

  PPGdkInputSource = ^PGdkInputSource;
  PGdkInputSource = ^TGdkInputSource;
  TGdkDevice = object(TGObject)
    function get_caps_lock_state: gboolean; cdecl; inline;
    function get_device_tool: PGdkDeviceTool; cdecl; inline;
    function get_direction: TPangoDirection; cdecl; inline;
    function get_display: PGdkDisplay; cdecl; inline;
    function get_has_cursor: gboolean; cdecl; inline;
    function get_modifier_state: TGdkModifierType; cdecl; inline;
    function get_name: Pgchar; cdecl; inline;
    function get_num_lock_state: gboolean; cdecl; inline;
    function get_num_touches: guint; cdecl; inline;
    function get_product_id: Pgchar; cdecl; inline;
    function get_scroll_lock_state: gboolean; cdecl; inline;
    function get_seat: PGdkSeat; cdecl; inline;
    function get_source: TGdkInputSource; cdecl; inline;
    function get_surface_at_position(win_x: Pgdouble; win_y: Pgdouble): PGdkSurface; cdecl; inline;
    function get_timestamp: guint32; cdecl; inline;
    function get_vendor_id: Pgchar; cdecl; inline;
    function has_bidi_layouts: gboolean; cdecl; inline;
    property caps_lock_state: gboolean read get_caps_lock_state ;
    property direction: TPangoDirection read get_direction ;
    property display: PGdkDisplay read get_display  { property is writeable but setter not declared } ;
    //property has_bidi_layouts1: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_has_bidi_layouts ;
    property has_cursor: gboolean read get_has_cursor  { property is writeable but setter not declared } ;
    property modifier_state: TGdkModifierType read get_modifier_state ;
    //property n_axes: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_n_axes ;
    property name: Pgchar read get_name  { property is writeable but setter not declared } ;
    property num_lock_state: gboolean read get_num_lock_state ;
    property num_touches: guint read get_num_touches  { property is writeable but setter not declared } ;
    property product_id: Pgchar read get_product_id  { property is writeable but setter not declared } ;
    property scroll_lock_state: gboolean read get_scroll_lock_state ;
    property seat: PGdkSeat read get_seat  { property is writeable but setter not declared } ;
    property source: TGdkInputSource read get_source  { property is writeable but setter not declared } ;
    //property tool: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_tool ;
    property vendor_id: Pgchar read get_vendor_id  { property is writeable but setter not declared } ;
  end;

  PPGdkDeviceToolType = ^PGdkDeviceToolType;
  PGdkDeviceToolType = ^TGdkDeviceToolType;
  TGdkDeviceTool = object(TGObject)
    function get_axes: TGdkAxisFlags; cdecl; inline;
    function get_hardware_id: guint64; cdecl; inline;
    function get_serial: guint64; cdecl; inline;
    function get_tool_type: TGdkDeviceToolType; cdecl; inline;
    property axes: TGdkAxisFlags read get_axes  { property is writeable but setter not declared } ;
    property hardware_id: guint64 read get_hardware_id  { property is writeable but setter not declared } ;
    property serial: guint64 read get_serial  { property is writeable but setter not declared } ;
    property tool_type: TGdkDeviceToolType read get_tool_type  { property is writeable but setter not declared } ;
  end;

  PPGdkSeatCapabilities = ^PGdkSeatCapabilities;
  PGdkSeatCapabilities = ^TGdkSeatCapabilities;
  TGdkSeat = object(TGObject)
    function get_capabilities: TGdkSeatCapabilities; cdecl; inline;
    function get_devices(capabilities: TGdkSeatCapabilities): PGList; cdecl; inline;
    function get_display: PGdkDisplay; cdecl; inline;
    function get_keyboard: PGdkDevice; cdecl; inline;
    function get_pointer: PGdkDevice; cdecl; inline;
    function get_tools: PGList; cdecl; inline;
    property display: PGdkDisplay read get_display  { property is writeable but setter not declared } ;
  end;

  PPGdkVulkanContext = ^PGdkVulkanContext;
  PGdkVulkanContext = ^TGdkVulkanContext;

  PPGdkFrameClock = ^PGdkFrameClock;
  PGdkFrameClock = ^TGdkFrameClock;
  TGdkSurface = object(TGObject)
    function new_popup(parent: PGdkSurface; autohide: gboolean): PGdkSurface; cdecl; inline; static;
    function new_toplevel(display: PGdkDisplay): PGdkSurface; cdecl; inline; static;
    procedure beep; cdecl; inline;
    function create_cairo_context: PGdkCairoContext; cdecl; inline;
    function create_gl_context(error: PPGError): PGdkGLContext; cdecl; inline;
    function create_similar_surface(content: Tcairo_content_t; width: gint; height: gint): Pcairo_surface_t; cdecl; inline;
    function create_vulkan_context(error: PPGError): PGdkVulkanContext; cdecl; inline;
    procedure destroy_; cdecl; inline;
    function get_cursor: PGdkCursor; cdecl; inline;
    function get_device_cursor(device: PGdkDevice): PGdkCursor; cdecl; inline;
    function get_device_position(device: PGdkDevice; x: Pgdouble; y: Pgdouble; mask: PGdkModifierType): gboolean; cdecl; inline;
    function get_display: PGdkDisplay; cdecl; inline;
    function get_frame_clock: PGdkFrameClock; cdecl; inline;
    function get_height: gint; cdecl; inline;
    function get_mapped: gboolean; cdecl; inline;
    function get_scale_factor: gint; cdecl; inline;
    function get_width: gint; cdecl; inline;
    procedure hide; cdecl; inline;
    function is_destroyed: gboolean; cdecl; inline;
    procedure queue_render; cdecl; inline;
    procedure request_layout; cdecl; inline;
    procedure set_cursor(cursor: PGdkCursor); cdecl; inline;
    procedure set_device_cursor(device: PGdkDevice; cursor: PGdkCursor); cdecl; inline;
    procedure set_input_region(region: Pcairo_region_t); cdecl; inline;
    procedure set_opaque_region(region: Pcairo_region_t); cdecl; inline;
    function translate_coordinates(to_: PGdkSurface; x: Pgdouble; y: Pgdouble): gboolean; cdecl; inline;
    property cursor: PGdkCursor read get_cursor write set_cursor;
    property display: PGdkDisplay read get_display  { property is writeable but setter not declared } ;
    property frame_clock: PGdkFrameClock read get_frame_clock  { property is writeable but setter not declared } ;
    property height: gint read get_height ;
    property mapped: gboolean read get_mapped ;
    property scale_factor: gint read get_scale_factor ;
    property width: gint read get_width ;
  end;

  PPGdkDevicePad = ^PGdkDevicePad;
  PGdkDevicePad = ^TGdkDevicePad;

  PPGdkDevicePadFeature = ^PGdkDevicePadFeature;
  PGdkDevicePadFeature = ^TGdkDevicePadFeature;
  TGdkDevicePad = object
    function get_feature_group(feature: TGdkDevicePadFeature; feature_idx: gint): gint; cdecl; inline;
    function get_group_n_modes(group_idx: gint): gint; cdecl; inline;
    function get_n_features(feature: TGdkDevicePadFeature): gint; cdecl; inline;
    function get_n_groups: gint; cdecl; inline;
  end;

  PPGdkDevicePadInterface = ^PGdkDevicePadInterface;
  PGdkDevicePadInterface = ^TGdkDevicePadInterface;
  TGdkDevicePadInterface = object
  end;

  PPGdkDrawContext = ^PGdkDrawContext;
  PGdkDrawContext = ^TGdkDrawContext;
  TGdkDrawContext = object(TGObject)
    procedure begin_frame(region: Pcairo_region_t); cdecl; inline;
    procedure end_frame; cdecl; inline;
    function get_display: PGdkDisplay; cdecl; inline;
    function get_frame_region: Pcairo_region_t; cdecl; inline;
    function get_surface: PGdkSurface; cdecl; inline;
    function is_in_frame: gboolean; cdecl; inline;
    property display: PGdkDisplay read get_display  { property is writeable but setter not declared } ;
    property surface: PGdkSurface read get_surface  { property is writeable but setter not declared } ;
  end;

  PPGdkGLAPI = ^PGdkGLAPI;
  PGdkGLAPI = ^TGdkGLAPI;
  TGdkGLContext = object(TGdkDrawContext)
    procedure clear_current; cdecl; inline; static;
    function get_current: PGdkGLContext; cdecl; inline; static;
    function get_allowed_apis: TGdkGLAPI; cdecl; inline;
    function get_api: TGdkGLAPI; cdecl; inline;
    function get_debug_enabled: gboolean; cdecl; inline;
    function get_display: PGdkDisplay; cdecl; inline;
    function get_forward_compatible: gboolean; cdecl; inline;
    procedure get_required_version(major: Pgint; minor: Pgint); cdecl; inline;
    function get_surface: PGdkSurface; cdecl; inline;
    function get_use_es: gboolean; cdecl; inline;
    procedure get_version(major: Pgint; minor: Pgint); cdecl; inline;
    function is_legacy: gboolean; cdecl; inline;
    function is_shared(other: PGdkGLContext): gboolean; cdecl; inline;
    procedure make_current; cdecl; inline;
    function realize(error: PPGError): gboolean; cdecl; inline;
    procedure set_allowed_apis(apis: TGdkGLAPI); cdecl; inline;
    procedure set_debug_enabled(enabled: gboolean); cdecl; inline;
    procedure set_forward_compatible(compatible: gboolean); cdecl; inline;
    procedure set_required_version(major: gint; minor: gint); cdecl; inline;
    procedure set_use_es(use_es: gint); cdecl; inline;
    property allowed_apis: TGdkGLAPI read get_allowed_apis write set_allowed_apis;
    property api: TGdkGLAPI read get_api ;
  end;

  PPGdkRectangle = ^PGdkRectangle;
  PGdkRectangle = ^TGdkRectangle;

  PPGdkSubpixelLayout = ^PGdkSubpixelLayout;
  PGdkSubpixelLayout = ^TGdkSubpixelLayout;
  TGdkMonitor = object(TGObject)
    function get_connector: Pgchar; cdecl; inline;
    function get_display: PGdkDisplay; cdecl; inline;
    procedure get_geometry(geometry: PGdkRectangle); cdecl; inline;
    function get_height_mm: gint; cdecl; inline;
    function get_manufacturer: Pgchar; cdecl; inline;
    function get_model: Pgchar; cdecl; inline;
    function get_refresh_rate: gint; cdecl; inline;
    function get_scale_factor: gint; cdecl; inline;
    function get_subpixel_layout: TGdkSubpixelLayout; cdecl; inline;
    function get_width_mm: gint; cdecl; inline;
    function is_valid: gboolean; cdecl; inline;
    property connector: Pgchar read get_connector ;
    property display: PGdkDisplay read get_display  { property is writeable but setter not declared } ;
    //property geometry: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_geometry ;
    property height_mm: gint read get_height_mm ;
    property manufacturer: Pgchar read get_manufacturer ;
    property model: Pgchar read get_model ;
    property refresh_rate: gint read get_refresh_rate ;
    property scale_factor: gint read get_scale_factor ;
    property subpixel_layout: TGdkSubpixelLayout read get_subpixel_layout ;
    //property valid: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_valid ;
    property width_mm: gint read get_width_mm ;
  end;

  TGdkKeymapKey = record
    keycode: guint;
    group: gint;
    level: gint;
  end;



  PPGdkEventSequence = ^PGdkEventSequence;
  PGdkEventSequence = ^TGdkEventSequence;

  PPGdkEventType = ^PGdkEventType;
  PGdkEventType = ^TGdkEventType;

  PPGdkTimeCoord = ^PGdkTimeCoord;
  PGdkTimeCoord = ^TGdkTimeCoord;
  TGdkEvent = object
    function _get_angle(event2: PGdkEvent; angle: Pgdouble): gboolean; cdecl; inline;
    function _get_center(event2: PGdkEvent; x: Pgdouble; y: Pgdouble): gboolean; cdecl; inline;
    function _get_distance(event2: PGdkEvent; distance: Pgdouble): gboolean; cdecl; inline;
    function get_axes(axes: PPgdouble; n_axes: Pguint): gboolean; cdecl; inline;
    function get_axis(axis_use: TGdkAxisUse; value: Pgdouble): gboolean; cdecl; inline;
    function get_device: PGdkDevice; cdecl; inline;
    function get_device_tool: PGdkDeviceTool; cdecl; inline;
    function get_display: PGdkDisplay; cdecl; inline;
    function get_event_sequence: PGdkEventSequence; cdecl; inline;
    function get_event_type: TGdkEventType; cdecl; inline;
    function get_history(out_n_coords: Pguint): PGdkTimeCoord; cdecl; inline;
    function get_modifier_state: TGdkModifierType; cdecl; inline;
    function get_pointer_emulated: gboolean; cdecl; inline;
    function get_position(x: Pgdouble; y: Pgdouble): gboolean; cdecl; inline;
    function get_seat: PGdkSeat; cdecl; inline;
    function get_surface: PGdkSurface; cdecl; inline;
    function get_time: guint32; cdecl; inline;
    function ref: PGdkEvent; cdecl; inline;
    function triggers_context_menu: gboolean; cdecl; inline;
    procedure unref; cdecl; inline;
  end;

  PPGdkDisplayManager = ^PGdkDisplayManager;
  PGdkDisplayManager = ^TGdkDisplayManager;
  TGdkDisplayManager = object(TGObject)
    function get: PGdkDisplayManager; cdecl; inline; static;
    function get_default_display: PGdkDisplay; cdecl; inline;
    function list_displays: PGSList; cdecl; inline;
    function open_display(name: Pgchar): PGdkDisplay; cdecl; inline;
    procedure set_default_display(display: PGdkDisplay); cdecl; inline;
    property default_display: PGdkDisplay read get_default_display write set_default_display;
  end;
  TGdkDrag = object(TGObject)
    function begin_(surface: PGdkSurface; device: PGdkDevice; content: PGdkContentProvider; actions: TGdkDragAction; dx: gdouble; dy: gdouble): PGdkDrag; cdecl; inline; static;
    procedure drop_done(success: gboolean); cdecl; inline;
    function get_actions: TGdkDragAction; cdecl; inline;
    function get_content: PGdkContentProvider; cdecl; inline;
    function get_device: PGdkDevice; cdecl; inline;
    function get_display: PGdkDisplay; cdecl; inline;
    function get_drag_surface: PGdkSurface; cdecl; inline;
    function get_formats: PGdkContentFormats; cdecl; inline;
    function get_selected_action: TGdkDragAction; cdecl; inline;
    function get_surface: PGdkSurface; cdecl; inline;
    procedure set_hotspot(hot_x: gint; hot_y: gint); cdecl; inline;
    property actions: TGdkDragAction read get_actions  { property is writeable but setter not declared } ;
    property content: PGdkContentProvider read get_content  { property is writeable but setter not declared } ;
    property device: PGdkDevice read get_device  { property is writeable but setter not declared } ;
    property display: PGdkDisplay read get_display ;
    property formats: PGdkContentFormats read get_formats  { property is writeable but setter not declared } ;
    property selected_action: TGdkDragAction read get_selected_action  { property is writeable but setter not declared } ;
    property surface: PGdkSurface read get_surface  { property is writeable but setter not declared } ;
  end;

  PPGdkDragCancelReason = ^PGdkDragCancelReason;
  PGdkDragCancelReason = ^TGdkDragCancelReason;

  PPGdkDragSurface = ^PGdkDragSurface;
  PGdkDragSurface = ^TGdkDragSurface;
  TGdkDragSurface = object
    function present(width: gint; height: gint): gboolean; cdecl; inline;
  end;

  PPGdkDragSurfaceInterface = ^PGdkDragSurfaceInterface;
  PGdkDragSurfaceInterface = ^TGdkDragSurfaceInterface;
  TGdkDragSurfaceInterface = object
  end;
  TGdkEventSequence = object
  end;

  TGdkTimeCoord = record
    time: guint32;
    flags: TGdkAxisFlags;
    axes: array [0..11] of gdouble;
  end;



  PPGdkFileList = ^PGdkFileList;
  PGdkFileList = ^TGdkFileList;
  TGdkFileList = object
    function get_files: PGSList; cdecl; inline;
  end;

  PPGdkFocusEvent = ^PGdkFocusEvent;
  PGdkFocusEvent = ^TGdkFocusEvent;
  TGdkFocusEvent = object(TGdkEvent)
    function get_in: gboolean; cdecl; inline;
  end;

  PPGdkFrameTimings = ^PGdkFrameTimings;
  PGdkFrameTimings = ^TGdkFrameTimings;

  PPGdkFrameClockPhase = ^PGdkFrameClockPhase;
  PGdkFrameClockPhase = ^TGdkFrameClockPhase;
  TGdkFrameClock = object(TGObject)
    procedure begin_updating; cdecl; inline;
    procedure end_updating; cdecl; inline;
    function get_current_timings: PGdkFrameTimings; cdecl; inline;
    function get_fps: gdouble; cdecl; inline;
    function get_frame_counter: gint64; cdecl; inline;
    function get_frame_time: gint64; cdecl; inline;
    function get_history_start: gint64; cdecl; inline;
    procedure get_refresh_info(base_time: gint64; refresh_interval_return: Pgint64; presentation_time_return: Pgint64); cdecl; inline;
    function get_timings(frame_counter: gint64): PGdkFrameTimings; cdecl; inline;
    procedure request_phase(phase: TGdkFrameClockPhase); cdecl; inline;
  end;
  TGdkFrameTimings = object
    function get_complete: gboolean; cdecl; inline;
    function get_frame_counter: gint64; cdecl; inline;
    function get_frame_time: gint64; cdecl; inline;
    function get_predicted_presentation_time: gint64; cdecl; inline;
    function get_presentation_time: gint64; cdecl; inline;
    function get_refresh_interval: gint64; cdecl; inline;
    function ref: PGdkFrameTimings; cdecl; inline;
    procedure unref; cdecl; inline;
  end;

  PPGdkFrameClockClass = ^PGdkFrameClockClass;
  PGdkFrameClockClass = ^TGdkFrameClockClass;
  TGdkFrameClockClass = object
  end;

  PPGdkFrameClockPrivate = ^PGdkFrameClockPrivate;
  PGdkFrameClockPrivate = ^TGdkFrameClockPrivate;

  TGdkFrameClockPrivate = record
  end;



  PPGdkFullscreenMode = ^PGdkFullscreenMode;
  PGdkFullscreenMode = ^TGdkFullscreenMode;

  PPGdkGLError = ^PGdkGLError;
  PGdkGLError = ^TGdkGLError;

  PPGdkPaintable = ^PGdkPaintable;
  PGdkPaintable = ^TGdkPaintable;

  PPGdkPaintableFlags = ^PGdkPaintableFlags;
  PGdkPaintableFlags = ^TGdkPaintableFlags;

  PPGdkSnapshot = ^PGdkSnapshot;
  PGdkSnapshot = ^TGdkSnapshot;
  TGdkPaintable = object
    invalidate_contents1: procedure; cdecl;
    invalidate_size1: procedure; cdecl;
    function new_empty(intrinsic_width: gint; intrinsic_height: gint): PGdkPaintable; cdecl; inline; static;
    procedure compute_concrete_size(specified_width: gdouble; specified_height: gdouble; default_width: gdouble; default_height: gdouble; concrete_width: Pgdouble; concrete_height: Pgdouble); cdecl; inline;
    function get_current_image: PGdkPaintable; cdecl; inline;
    function get_flags: TGdkPaintableFlags; cdecl; inline;
    function get_intrinsic_aspect_ratio: gdouble; cdecl; inline;
    function get_intrinsic_height: gint; cdecl; inline;
    function get_intrinsic_width: gint; cdecl; inline;
    procedure invalidate_contents; cdecl; inline;
    procedure invalidate_size; cdecl; inline;
    procedure snapshot(snapshot: PGdkSnapshot; width: gdouble; height: gdouble); cdecl; inline;
  end;

  PPGdkGLTexture = ^PGdkGLTexture;
  PGdkGLTexture = ^TGdkGLTexture;
  TGdkGLTexture = object(TGdkTexture)
    function new(context: PGdkGLContext; id: guint; width: gint; height: gint; destroy_: TGDestroyNotify; data: gpointer): PGdkGLTexture; cdecl; inline; static;
    procedure release; cdecl; inline;
  end;

  PPGdkGLTextureClass = ^PGdkGLTextureClass;
  PGdkGLTextureClass = ^TGdkGLTextureClass;
  TGdkGLTextureClass = object
  end;

  PPGdkGrabBrokenEvent = ^PGdkGrabBrokenEvent;
  PGdkGrabBrokenEvent = ^TGdkGrabBrokenEvent;
  TGdkGrabBrokenEvent = object(TGdkEvent)
    function get_grab_surface: PGdkSurface; cdecl; inline;
    function get_implicit: gboolean; cdecl; inline;
  end;

  PPGdkGravity = ^PGdkGravity;
  PGdkGravity = ^TGdkGravity;

  PPGdkKeyEvent = ^PGdkKeyEvent;
  PGdkKeyEvent = ^TGdkKeyEvent;

  PPGdkKeyMatch = ^PGdkKeyMatch;
  PGdkKeyMatch = ^TGdkKeyMatch;
  TGdkKeyEvent = object(TGdkEvent)
    function get_consumed_modifiers: TGdkModifierType; cdecl; inline;
    function get_keycode: guint; cdecl; inline;
    function get_keyval: guint; cdecl; inline;
    function get_layout: guint; cdecl; inline;
    function get_level: guint; cdecl; inline;
    function get_match(keyval: Pguint; modifiers: PGdkModifierType): gboolean; cdecl; inline;
    function is_modifier: gboolean; cdecl; inline;
    function matches(keyval: guint; modifiers: TGdkModifierType): TGdkKeyMatch; cdecl; inline;
  end;

  PPGdkMemoryFormat = ^PGdkMemoryFormat;
  PGdkMemoryFormat = ^TGdkMemoryFormat;

  PPGdkMemoryTexture = ^PGdkMemoryTexture;
  PGdkMemoryTexture = ^TGdkMemoryTexture;
  TGdkMemoryTexture = object(TGdkTexture)
    function new(width: gint; height: gint; format: TGdkMemoryFormat; bytes: PGBytes; stride: gsize): PGdkMemoryTexture; cdecl; inline; static;
  end;

  PPGdkMemoryTextureClass = ^PGdkMemoryTextureClass;
  PGdkMemoryTextureClass = ^TGdkMemoryTextureClass;
  TGdkMemoryTextureClass = object
  end;
  TGdkRectangle = object
    x: gint;
    y: gint;
    width: gint;
    height: gint;
    function contains_point(x: gint; y: gint): gboolean; cdecl; inline;
    function equal(rect2: PGdkRectangle): gboolean; cdecl; inline;
    function intersect(src2: PGdkRectangle; dest: PGdkRectangle): gboolean; cdecl; inline;
    procedure union(src2: PGdkRectangle; dest: PGdkRectangle); cdecl; inline;
  end;

  PPGdkMonitorClass = ^PGdkMonitorClass;
  PGdkMonitorClass = ^TGdkMonitorClass;
  TGdkMonitorClass = object
  end;

  PPGdkMotionEvent = ^PGdkMotionEvent;
  PGdkMotionEvent = ^TGdkMotionEvent;
  TGdkMotionEvent = object(TGdkEvent)
  end;

  PPGdkPadEvent = ^PGdkPadEvent;
  PGdkPadEvent = ^TGdkPadEvent;
  TGdkPadEvent = object(TGdkEvent)
    procedure get_axis_value(index: Pguint; value: Pgdouble); cdecl; inline;
    function get_button: guint; cdecl; inline;
    procedure get_group_mode(group: Pguint; mode: Pguint); cdecl; inline;
  end;
  TGdkSnapshot = object(TGObject)
  end;

  PPGdkPaintableInterface = ^PGdkPaintableInterface;
  PGdkPaintableInterface = ^TGdkPaintableInterface;
  TGdkPaintableInterface = object
    g_iface: TGTypeInterface;
    snapshot: procedure(paintable: PGdkPaintable; snapshot: PGdkSnapshot; width: gdouble; height: gdouble); cdecl;
    get_current_image: function(paintable: PGdkPaintable): PGdkPaintable; cdecl;
    get_flags: function(paintable: PGdkPaintable): TGdkPaintableFlags; cdecl;
    get_intrinsic_width: function(paintable: PGdkPaintable): gint; cdecl;
    get_intrinsic_height: function(paintable: PGdkPaintable): gint; cdecl;
    get_intrinsic_aspect_ratio: function(paintable: PGdkPaintable): gdouble; cdecl;
  end;

  PPGdkPopup = ^PGdkPopup;
  PGdkPopup = ^TGdkPopup;

  PPGdkPopupLayout = ^PGdkPopupLayout;
  PGdkPopupLayout = ^TGdkPopupLayout;
  TGdkPopup = object
    function get_autohide: gboolean; cdecl; inline;
    function get_parent: PGdkSurface; cdecl; inline;
    function get_position_x: gint; cdecl; inline;
    function get_position_y: gint; cdecl; inline;
    function get_rect_anchor: TGdkGravity; cdecl; inline;
    function get_surface_anchor: TGdkGravity; cdecl; inline;
    function present(width: gint; height: gint; layout: PGdkPopupLayout): gboolean; cdecl; inline;
    property autohide: gboolean read get_autohide  { property is writeable but setter not declared } ;
    property parent: PGdkSurface read get_parent  { property is writeable but setter not declared } ;
  end;
  TGdkPopupLayout = object
    function new(anchor_rect: PGdkRectangle; rect_anchor: TGdkGravity; surface_anchor: TGdkGravity): PGdkPopupLayout; cdecl; inline; static;
    function copy: PGdkPopupLayout; cdecl; inline;
    function equal(other: PGdkPopupLayout): gboolean; cdecl; inline;
    function get_anchor_hints: TGdkAnchorHints; cdecl; inline;
    function get_anchor_rect: PGdkRectangle; cdecl; inline;
    procedure get_offset(dx: Pgint; dy: Pgint); cdecl; inline;
    function get_rect_anchor: TGdkGravity; cdecl; inline;
    procedure get_shadow_width(left: Pgint; right: Pgint; top: Pgint; bottom: Pgint); cdecl; inline;
    function get_surface_anchor: TGdkGravity; cdecl; inline;
    function ref: PGdkPopupLayout; cdecl; inline;
    procedure set_anchor_hints(anchor_hints: TGdkAnchorHints); cdecl; inline;
    procedure set_anchor_rect(anchor_rect: PGdkRectangle); cdecl; inline;
    procedure set_offset(dx: gint; dy: gint); cdecl; inline;
    procedure set_rect_anchor(anchor: TGdkGravity); cdecl; inline;
    procedure set_shadow_width(left: gint; right: gint; top: gint; bottom: gint); cdecl; inline;
    procedure set_surface_anchor(anchor: TGdkGravity); cdecl; inline;
    procedure unref; cdecl; inline;
  end;

  PPGdkPopupInterface = ^PGdkPopupInterface;
  PGdkPopupInterface = ^TGdkPopupInterface;
  TGdkPopupInterface = object
  end;

  PPGdkProximityEvent = ^PGdkProximityEvent;
  PGdkProximityEvent = ^TGdkProximityEvent;
  TGdkProximityEvent = object(TGdkEvent)
  end;

  PPPGdkRGBA = ^PPGdkRGBA;
  PPGdkRGBA = ^PGdkRGBA;
  PGdkRGBA = ^TGdkRGBA;
  TGdkRGBA = object
    red: gfloat;
    green: gfloat;
    blue: gfloat;
    alpha: gfloat;
    function copy: PGdkRGBA; cdecl; inline;
    function equal(p2: PGdkRGBA): gboolean; cdecl; inline;
    procedure free; cdecl; inline;
    function hash: guint; cdecl; inline;
    function is_clear: gboolean; cdecl; inline;
    function is_opaque: gboolean; cdecl; inline;
    function parse(spec: Pgchar): gboolean; cdecl; inline;
    function to_string: Pgchar; cdecl; inline;
  end;

  PPGdkScrollDirection = ^PGdkScrollDirection;
  PGdkScrollDirection = ^TGdkScrollDirection;

  PPGdkScrollEvent = ^PGdkScrollEvent;
  PGdkScrollEvent = ^TGdkScrollEvent;
  TGdkScrollEvent = object(TGdkEvent)
    procedure get_deltas(delta_x: Pgdouble; delta_y: Pgdouble); cdecl; inline;
    function get_direction: TGdkScrollDirection; cdecl; inline;
    function is_stop: gboolean; cdecl; inline;
  end;

  PPGdkSnapshotClass = ^PGdkSnapshotClass;
  PGdkSnapshotClass = ^TGdkSnapshotClass;
  TGdkSnapshotClass = object
  end;
  TGdkVulkanContext = object(TGdkDrawContext)
  end;

  PPGdkSurfaceClass = ^PGdkSurfaceClass;
  PGdkSurfaceClass = ^TGdkSurfaceClass;
  TGdkSurfaceClass = object
  end;

  PPGdkSurfaceEdge = ^PGdkSurfaceEdge;
  PGdkSurfaceEdge = ^TGdkSurfaceEdge;

  PPGdkTextureClass = ^PGdkTextureClass;
  PGdkTextureClass = ^TGdkTextureClass;
  TGdkTextureClass = object
  end;

  PPGdkTextureError = ^PGdkTextureError;
  PGdkTextureError = ^TGdkTextureError;

  PPGdkTitlebarGesture = ^PGdkTitlebarGesture;
  PGdkTitlebarGesture = ^TGdkTitlebarGesture;

  PPGdkToplevel = ^PGdkToplevel;
  PGdkToplevel = ^TGdkToplevel;

  PPGdkToplevelState = ^PGdkToplevelState;
  PGdkToplevelState = ^TGdkToplevelState;

  PPGdkToplevelLayout = ^PGdkToplevelLayout;
  PGdkToplevelLayout = ^TGdkToplevelLayout;

  PPGdkToplevelSize = ^PGdkToplevelSize;
  PGdkToplevelSize = ^TGdkToplevelSize;
  TGdkToplevel = object
    compute_size: procedure(size: PGdkToplevelSize); cdecl;
    procedure begin_move(device: PGdkDevice; button: gint; x: gdouble; y: gdouble; timestamp: guint32); cdecl; inline;
    procedure begin_resize(edge: TGdkSurfaceEdge; device: PGdkDevice; button: gint; x: gdouble; y: gdouble; timestamp: guint32); cdecl; inline;
    procedure focus(timestamp: guint32); cdecl; inline;
    function get_state: TGdkToplevelState; cdecl; inline;
    procedure inhibit_system_shortcuts(event: PGdkEvent); cdecl; inline;
    function lower: gboolean; cdecl; inline;
    function minimize: gboolean; cdecl; inline;
    procedure present(layout: PGdkToplevelLayout); cdecl; inline;
    procedure restore_system_shortcuts; cdecl; inline;
    procedure set_decorated(decorated: gboolean); cdecl; inline;
    procedure set_deletable(deletable: gboolean); cdecl; inline;
    procedure set_icon_list(surfaces: PGList); cdecl; inline;
    procedure set_modal(modal: gboolean); cdecl; inline;
    procedure set_startup_id(startup_id: Pgchar); cdecl; inline;
    procedure set_title(title: Pgchar); cdecl; inline;
    procedure set_transient_for(parent: PGdkSurface); cdecl; inline;
    function show_window_menu(event: PGdkEvent): gboolean; cdecl; inline;
    function supports_edge_constraints: gboolean; cdecl; inline;
    function titlebar_gesture(gesture: TGdkTitlebarGesture): gboolean; cdecl; inline;
    //property decorated: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_decorated  { property is writeable but setter not declared } ;
    //property deletable: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_deletable  { property is writeable but setter not declared } ;
    //property fullscreen_mode: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_fullscreen_mode  { property is writeable but setter not declared } ;
    //property icon_list: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_icon_list  { property is writeable but setter not declared } ;
    //property modal: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_modal  { property is writeable but setter not declared } ;
    //property shortcuts_inhibited: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_shortcuts_inhibited ;
    //property startup_id: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_startup_id  { property is writeable but setter not declared } ;
    property state: TGdkToplevelState read get_state ;
    //property title: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_title  { property is writeable but setter not declared } ;
    //property transient_for: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_transient_for  { property is writeable but setter not declared } ;
  end;
  TGdkToplevelLayout = object
    function new: PGdkToplevelLayout; cdecl; inline; static;
    function copy: PGdkToplevelLayout; cdecl; inline;
    function equal(other: PGdkToplevelLayout): gboolean; cdecl; inline;
    function get_fullscreen(fullscreen: Pgboolean): gboolean; cdecl; inline;
    function get_fullscreen_monitor: PGdkMonitor; cdecl; inline;
    function get_maximized(maximized: Pgboolean): gboolean; cdecl; inline;
    function get_resizable: gboolean; cdecl; inline;
    function ref: PGdkToplevelLayout; cdecl; inline;
    procedure set_fullscreen(fullscreen: gboolean; monitor: PGdkMonitor); cdecl; inline;
    procedure set_maximized(maximized: gboolean); cdecl; inline;
    procedure set_resizable(resizable: gboolean); cdecl; inline;
    procedure unref; cdecl; inline;
  end;
  TGdkToplevelSize = object
    procedure get_bounds(bounds_width: Pgint; bounds_height: Pgint); cdecl; inline;
    procedure set_min_size(min_width: gint; min_height: gint); cdecl; inline;
    procedure set_shadow_width(left: gint; right: gint; top: gint; bottom: gint); cdecl; inline;
    procedure set_size(width: gint; height: gint); cdecl; inline;
  end;

  PPGdkToplevelInterface = ^PGdkToplevelInterface;
  PGdkToplevelInterface = ^TGdkToplevelInterface;
  TGdkToplevelInterface = object
  end;

  PPGdkTouchEvent = ^PGdkTouchEvent;
  PGdkTouchEvent = ^TGdkTouchEvent;
  TGdkTouchEvent = object(TGdkEvent)
    function get_emulating_pointer: gboolean; cdecl; inline;
  end;

  PPGdkTouchpadEvent = ^PGdkTouchpadEvent;
  PGdkTouchpadEvent = ^TGdkTouchpadEvent;

  PPGdkTouchpadGesturePhase = ^PGdkTouchpadGesturePhase;
  PGdkTouchpadGesturePhase = ^TGdkTouchpadGesturePhase;
  TGdkTouchpadEvent = object(TGdkEvent)
    procedure get_deltas(dx: Pgdouble; dy: Pgdouble); cdecl; inline;
    function get_gesture_phase: TGdkTouchpadGesturePhase; cdecl; inline;
    function get_n_fingers: guint; cdecl; inline;
    function get_pinch_angle_delta: gdouble; cdecl; inline;
    function get_pinch_scale: gdouble; cdecl; inline;
  end;

  PPGdkVulkanError = ^PGdkVulkanError;
  PGdkVulkanError = ^TGdkVulkanError;

function gdk_app_launch_context_get_display(context: PGdkAppLaunchContext): PGdkDisplay; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_app_launch_context_get_display'{$endif};
function gdk_app_launch_context_get_type: TGType; cdecl; external {$ifdef MSWindows} Gdk4_library name 'gdk_app_launch_context_get_type' {$endif};
function gdk_button_event_get_button(event: PGdkButtonEvent): guint; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_button_event_get_button'{$endif};
function gdk_button_event_get_type: TGType; cdecl; external {$ifdef MSWindows} Gdk4_library name 'gdk_button_event_get_type' {$endif};
function gdk_cairo_context_cairo_create(self: PGdkCairoContext): Pcairo_t; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_cairo_context_cairo_create'{$endif};
function gdk_cairo_context_get_type: TGType; cdecl; external {$ifdef MSWindows} Gdk4_library name 'gdk_cairo_context_get_type' {$endif};
function gdk_cairo_region_create_from_surface(surface: Pcairo_surface_t): Pcairo_region_t; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_cairo_region_create_from_surface'{$endif};
function gdk_clipboard_get_content(clipboard: PGdkClipboard): PGdkContentProvider; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_clipboard_get_content'{$endif};
function gdk_clipboard_get_display(clipboard: PGdkClipboard): PGdkDisplay; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_clipboard_get_display'{$endif};
function gdk_clipboard_get_formats(clipboard: PGdkClipboard): PGdkContentFormats; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_clipboard_get_formats'{$endif};
function gdk_clipboard_get_type: TGType; cdecl; external {$ifdef MSWindows} Gdk4_library name 'gdk_clipboard_get_type' {$endif};
function gdk_clipboard_is_local(clipboard: PGdkClipboard): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_clipboard_is_local'{$endif};
function gdk_clipboard_read_finish(clipboard: PGdkClipboard; result_: PGAsyncResult; out_mime_type: PPgchar; error: PPGError): PGInputStream; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_clipboard_read_finish'{$endif};
function gdk_clipboard_read_text_finish(clipboard: PGdkClipboard; result_: PGAsyncResult; error: PPGError): Pgchar; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_clipboard_read_text_finish'{$endif};
function gdk_clipboard_read_texture_finish(clipboard: PGdkClipboard; result_: PGAsyncResult; error: PPGError): PGdkTexture; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_clipboard_read_texture_finish'{$endif};
function gdk_clipboard_read_value_finish(clipboard: PGdkClipboard; result_: PGAsyncResult; error: PPGError): PGValue; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_clipboard_read_value_finish'{$endif};
function gdk_clipboard_set_content(clipboard: PGdkClipboard; provider: PGdkContentProvider): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_clipboard_set_content'{$endif};
function gdk_clipboard_store_finish(clipboard: PGdkClipboard; result_: PGAsyncResult; error: PPGError): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_clipboard_store_finish'{$endif};
function gdk_content_deserialize_finish(result_: PGAsyncResult; value: PGValue; error: PPGError): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_deserialize_finish'{$endif};
function gdk_content_deserializer_get_cancellable(deserializer: PGdkContentDeserializer): PGCancellable; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_deserializer_get_cancellable'{$endif};
function gdk_content_deserializer_get_gtype(deserializer: PGdkContentDeserializer): TGType; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_deserializer_get_gtype'{$endif};
function gdk_content_deserializer_get_input_stream(deserializer: PGdkContentDeserializer): PGInputStream; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_deserializer_get_input_stream'{$endif};
function gdk_content_deserializer_get_mime_type(deserializer: PGdkContentDeserializer): Pgchar; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_deserializer_get_mime_type'{$endif};
function gdk_content_deserializer_get_priority(deserializer: PGdkContentDeserializer): gint; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_deserializer_get_priority'{$endif};
function gdk_content_deserializer_get_task_data(deserializer: PGdkContentDeserializer): gpointer; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_deserializer_get_task_data'{$endif};
function gdk_content_deserializer_get_type: TGType; cdecl; external {$ifdef MSWindows} Gdk4_library name 'gdk_content_deserializer_get_type' {$endif};
function gdk_content_deserializer_get_user_data(deserializer: PGdkContentDeserializer): gpointer; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_deserializer_get_user_data'{$endif};
function gdk_content_deserializer_get_value(deserializer: PGdkContentDeserializer): PGValue; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_deserializer_get_value'{$endif};
function gdk_content_formats_builder_free_to_formats(builder: PGdkContentFormatsBuilder): PGdkContentFormats; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_formats_builder_free_to_formats'{$endif};
function gdk_content_formats_builder_get_type: TGType; cdecl; external {$ifdef MSWindows} Gdk4_library name 'gdk_content_formats_builder_get_type' {$endif};
function gdk_content_formats_builder_new: PGdkContentFormatsBuilder; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_formats_builder_new'{$endif};
function gdk_content_formats_builder_ref(builder: PGdkContentFormatsBuilder): PGdkContentFormatsBuilder; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_formats_builder_ref'{$endif};
function gdk_content_formats_builder_to_formats(builder: PGdkContentFormatsBuilder): PGdkContentFormats; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_formats_builder_to_formats'{$endif};
function gdk_content_formats_contain_gtype(formats: PGdkContentFormats; type_: TGType): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_formats_contain_gtype'{$endif};
function gdk_content_formats_contain_mime_type(formats: PGdkContentFormats; mime_type: Pgchar): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_formats_contain_mime_type'{$endif};
function gdk_content_formats_get_gtypes(formats: PGdkContentFormats; n_gtypes: Pgsize): PGType; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_formats_get_gtypes'{$endif};
function gdk_content_formats_get_mime_types(formats: PGdkContentFormats; n_mime_types: Pgsize): PPgchar; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_formats_get_mime_types'{$endif};
function gdk_content_formats_get_type: TGType; cdecl; external {$ifdef MSWindows} Gdk4_library name 'gdk_content_formats_get_type' {$endif};
function gdk_content_formats_match(first: PGdkContentFormats; second: PGdkContentFormats): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_formats_match'{$endif};
function gdk_content_formats_match_gtype(first: PGdkContentFormats; second: PGdkContentFormats): TGType; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_formats_match_gtype'{$endif};
function gdk_content_formats_match_mime_type(first: PGdkContentFormats; second: PGdkContentFormats): Pgchar; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_formats_match_mime_type'{$endif};
function gdk_content_formats_new(mime_types: PPgchar; n_mime_types: guint): PGdkContentFormats; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_formats_new'{$endif};
function gdk_content_formats_new_for_gtype(type_: TGType): PGdkContentFormats; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_formats_new_for_gtype'{$endif};
function gdk_content_formats_parse(string_: Pgchar): PGdkContentFormats; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_formats_parse'{$endif};
function gdk_content_formats_ref(formats: PGdkContentFormats): PGdkContentFormats; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_formats_ref'{$endif};
function gdk_content_formats_to_string(formats: PGdkContentFormats): Pgchar; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_formats_to_string'{$endif};
function gdk_content_formats_union(first: PGdkContentFormats; second: PGdkContentFormats): PGdkContentFormats; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_formats_union'{$endif};
function gdk_content_formats_union_deserialize_gtypes(formats: PGdkContentFormats): PGdkContentFormats; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_formats_union_deserialize_gtypes'{$endif};
function gdk_content_formats_union_deserialize_mime_types(formats: PGdkContentFormats): PGdkContentFormats; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_formats_union_deserialize_mime_types'{$endif};
function gdk_content_formats_union_serialize_gtypes(formats: PGdkContentFormats): PGdkContentFormats; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_formats_union_serialize_gtypes'{$endif};
function gdk_content_formats_union_serialize_mime_types(formats: PGdkContentFormats): PGdkContentFormats; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_formats_union_serialize_mime_types'{$endif};
function gdk_content_provider_get_type: TGType; cdecl; external {$ifdef MSWindows} Gdk4_library name 'gdk_content_provider_get_type' {$endif};
function gdk_content_provider_get_value(provider: PGdkContentProvider; value: PGValue; error: PPGError): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_provider_get_value'{$endif};
function gdk_content_provider_new_for_bytes(mime_type: Pgchar; bytes: PGBytes): PGdkContentProvider; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_provider_new_for_bytes'{$endif};
function gdk_content_provider_new_for_value(value: PGValue): PGdkContentProvider; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_provider_new_for_value'{$endif};
function gdk_content_provider_new_typed(type_: TGType; args: array of const): PGdkContentProvider; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_provider_new_typed'{$endif};
function gdk_content_provider_new_union(providers: PPGdkContentProvider; n_providers: gsize): PGdkContentProvider; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_provider_new_union'{$endif};
function gdk_content_provider_ref_formats(provider: PGdkContentProvider): PGdkContentFormats; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_provider_ref_formats'{$endif};
function gdk_content_provider_ref_storable_formats(provider: PGdkContentProvider): PGdkContentFormats; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_provider_ref_storable_formats'{$endif};
function gdk_content_provider_write_mime_type_finish(provider: PGdkContentProvider; result_: PGAsyncResult; error: PPGError): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_provider_write_mime_type_finish'{$endif};
function gdk_content_serialize_finish(result_: PGAsyncResult; error: PPGError): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_serialize_finish'{$endif};
function gdk_content_serializer_get_cancellable(serializer: PGdkContentSerializer): PGCancellable; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_serializer_get_cancellable'{$endif};
function gdk_content_serializer_get_gtype(serializer: PGdkContentSerializer): TGType; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_serializer_get_gtype'{$endif};
function gdk_content_serializer_get_mime_type(serializer: PGdkContentSerializer): Pgchar; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_serializer_get_mime_type'{$endif};
function gdk_content_serializer_get_output_stream(serializer: PGdkContentSerializer): PGOutputStream; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_serializer_get_output_stream'{$endif};
function gdk_content_serializer_get_priority(serializer: PGdkContentSerializer): gint; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_serializer_get_priority'{$endif};
function gdk_content_serializer_get_task_data(serializer: PGdkContentSerializer): gpointer; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_serializer_get_task_data'{$endif};
function gdk_content_serializer_get_type: TGType; cdecl; external {$ifdef MSWindows} Gdk4_library name 'gdk_content_serializer_get_type' {$endif};
function gdk_content_serializer_get_user_data(serializer: PGdkContentSerializer): gpointer; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_serializer_get_user_data'{$endif};
function gdk_content_serializer_get_value(serializer: PGdkContentSerializer): PGValue; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_serializer_get_value'{$endif};
function gdk_crossing_event_get_detail(event: PGdkCrossingEvent): TGdkNotifyType; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_crossing_event_get_detail'{$endif};
function gdk_crossing_event_get_focus(event: PGdkCrossingEvent): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_crossing_event_get_focus'{$endif};
function gdk_crossing_event_get_mode(event: PGdkCrossingEvent): TGdkCrossingMode; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_crossing_event_get_mode'{$endif};
function gdk_crossing_event_get_type: TGType; cdecl; external {$ifdef MSWindows} Gdk4_library name 'gdk_crossing_event_get_type' {$endif};
function gdk_cursor_get_fallback(cursor: PGdkCursor): PGdkCursor; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_cursor_get_fallback'{$endif};
function gdk_cursor_get_hotspot_x(cursor: PGdkCursor): gint; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_cursor_get_hotspot_x'{$endif};
function gdk_cursor_get_hotspot_y(cursor: PGdkCursor): gint; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_cursor_get_hotspot_y'{$endif};
function gdk_cursor_get_name(cursor: PGdkCursor): Pgchar; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_cursor_get_name'{$endif};
function gdk_cursor_get_texture(cursor: PGdkCursor): PGdkTexture; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_cursor_get_texture'{$endif};
function gdk_cursor_get_type: TGType; cdecl; external {$ifdef MSWindows} Gdk4_library name 'gdk_cursor_get_type' {$endif};
function gdk_cursor_new_from_name(name: Pgchar; fallback: PGdkCursor): PGdkCursor; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_cursor_new_from_name'{$endif};
function gdk_cursor_new_from_texture(texture: PGdkTexture; hotspot_x: gint; hotspot_y: gint; fallback: PGdkCursor): PGdkCursor; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_cursor_new_from_texture'{$endif};
function gdk_delete_event_get_type: TGType; cdecl; external {$ifdef MSWindows} Gdk4_library name 'gdk_delete_event_get_type' {$endif};
function gdk_device_get_caps_lock_state(device: PGdkDevice): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_device_get_caps_lock_state'{$endif};
function gdk_device_get_device_tool(device: PGdkDevice): PGdkDeviceTool; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_device_get_device_tool'{$endif};
function gdk_device_get_direction(device: PGdkDevice): TPangoDirection; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_device_get_direction'{$endif};
function gdk_device_get_display(device: PGdkDevice): PGdkDisplay; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_device_get_display'{$endif};
function gdk_device_get_has_cursor(device: PGdkDevice): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_device_get_has_cursor'{$endif};
function gdk_device_get_modifier_state(device: PGdkDevice): TGdkModifierType; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_device_get_modifier_state'{$endif};
function gdk_device_get_name(device: PGdkDevice): Pgchar; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_device_get_name'{$endif};
function gdk_device_get_num_lock_state(device: PGdkDevice): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_device_get_num_lock_state'{$endif};
function gdk_device_get_num_touches(device: PGdkDevice): guint; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_device_get_num_touches'{$endif};
function gdk_device_get_product_id(device: PGdkDevice): Pgchar; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_device_get_product_id'{$endif};
function gdk_device_get_scroll_lock_state(device: PGdkDevice): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_device_get_scroll_lock_state'{$endif};
function gdk_device_get_seat(device: PGdkDevice): PGdkSeat; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_device_get_seat'{$endif};
function gdk_device_get_source(device: PGdkDevice): TGdkInputSource; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_device_get_source'{$endif};
function gdk_device_get_surface_at_position(device: PGdkDevice; win_x: Pgdouble; win_y: Pgdouble): PGdkSurface; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_device_get_surface_at_position'{$endif};
function gdk_device_get_timestamp(device: PGdkDevice): guint32; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_device_get_timestamp'{$endif};
function gdk_device_get_type: TGType; cdecl; external {$ifdef MSWindows} Gdk4_library name 'gdk_device_get_type' {$endif};
function gdk_device_get_vendor_id(device: PGdkDevice): Pgchar; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_device_get_vendor_id'{$endif};
function gdk_device_has_bidi_layouts(device: PGdkDevice): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_device_has_bidi_layouts'{$endif};
function gdk_device_pad_get_feature_group(pad: PGdkDevicePad; feature: TGdkDevicePadFeature; feature_idx: gint): gint; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_device_pad_get_feature_group'{$endif};
function gdk_device_pad_get_group_n_modes(pad: PGdkDevicePad; group_idx: gint): gint; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_device_pad_get_group_n_modes'{$endif};
function gdk_device_pad_get_n_features(pad: PGdkDevicePad; feature: TGdkDevicePadFeature): gint; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_device_pad_get_n_features'{$endif};
function gdk_device_pad_get_n_groups(pad: PGdkDevicePad): gint; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_device_pad_get_n_groups'{$endif};
function gdk_device_pad_get_type: TGType; cdecl; external {$ifdef MSWindows} Gdk4_library name 'gdk_device_pad_get_type' {$endif};
function gdk_device_tool_get_axes(tool: PGdkDeviceTool): TGdkAxisFlags; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_device_tool_get_axes'{$endif};
function gdk_device_tool_get_hardware_id(tool: PGdkDeviceTool): guint64; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_device_tool_get_hardware_id'{$endif};
function gdk_device_tool_get_serial(tool: PGdkDeviceTool): guint64; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_device_tool_get_serial'{$endif};
function gdk_device_tool_get_tool_type(tool: PGdkDeviceTool): TGdkDeviceToolType; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_device_tool_get_tool_type'{$endif};
function gdk_device_tool_get_type: TGType; cdecl; external {$ifdef MSWindows} Gdk4_library name 'gdk_device_tool_get_type' {$endif};
function gdk_display_create_gl_context(self: PGdkDisplay; error: PPGError): PGdkGLContext; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_display_create_gl_context'{$endif};
function gdk_display_device_is_grabbed(display: PGdkDisplay; device: PGdkDevice): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_display_device_is_grabbed'{$endif};
function gdk_display_get_app_launch_context(display: PGdkDisplay): PGdkAppLaunchContext; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_display_get_app_launch_context'{$endif};
function gdk_display_get_clipboard(display: PGdkDisplay): PGdkClipboard; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_display_get_clipboard'{$endif};
function gdk_display_get_default: PGdkDisplay; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_display_get_default'{$endif};
function gdk_display_get_default_seat(display: PGdkDisplay): PGdkSeat; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_display_get_default_seat'{$endif};
function gdk_display_get_monitor_at_surface(display: PGdkDisplay; surface: PGdkSurface): PGdkMonitor; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_display_get_monitor_at_surface'{$endif};
function gdk_display_get_monitors(self: PGdkDisplay): PGListModel; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_display_get_monitors'{$endif};
function gdk_display_get_name(display: PGdkDisplay): Pgchar; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_display_get_name'{$endif};
function gdk_display_get_primary_clipboard(display: PGdkDisplay): PGdkClipboard; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_display_get_primary_clipboard'{$endif};
function gdk_display_get_setting(display: PGdkDisplay; name: Pgchar; value: PGValue): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_display_get_setting'{$endif};
function gdk_display_get_startup_notification_id(display: PGdkDisplay): Pgchar; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_display_get_startup_notification_id'{$endif};
function gdk_display_get_type: TGType; cdecl; external {$ifdef MSWindows} Gdk4_library name 'gdk_display_get_type' {$endif};
function gdk_display_is_closed(display: PGdkDisplay): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_display_is_closed'{$endif};
function gdk_display_is_composited(display: PGdkDisplay): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_display_is_composited'{$endif};
function gdk_display_is_rgba(display: PGdkDisplay): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_display_is_rgba'{$endif};
function gdk_display_list_seats(display: PGdkDisplay): PGList; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_display_list_seats'{$endif};
function gdk_display_manager_get: PGdkDisplayManager; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_display_manager_get'{$endif};
function gdk_display_manager_get_default_display(manager: PGdkDisplayManager): PGdkDisplay; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_display_manager_get_default_display'{$endif};
function gdk_display_manager_get_type: TGType; cdecl; external {$ifdef MSWindows} Gdk4_library name 'gdk_display_manager_get_type' {$endif};
function gdk_display_manager_list_displays(manager: PGdkDisplayManager): PGSList; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_display_manager_list_displays'{$endif};
function gdk_display_manager_open_display(manager: PGdkDisplayManager; name: Pgchar): PGdkDisplay; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_display_manager_open_display'{$endif};
function gdk_display_map_keycode(display: PGdkDisplay; keycode: guint; keys: PPGdkKeymapKey; keyvals: PPguint; n_entries: Pgint): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_display_map_keycode'{$endif};
function gdk_display_map_keyval(display: PGdkDisplay; keyval: guint; keys: PPGdkKeymapKey; n_keys: Pgint): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_display_map_keyval'{$endif};
function gdk_display_open(display_name: Pgchar): PGdkDisplay; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_display_open'{$endif};
function gdk_display_prepare_gl(self: PGdkDisplay; error: PPGError): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_display_prepare_gl'{$endif};
function gdk_display_supports_input_shapes(display: PGdkDisplay): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_display_supports_input_shapes'{$endif};
function gdk_display_translate_key(display: PGdkDisplay; keycode: guint; state: TGdkModifierType; group: gint; keyval: Pguint; effective_group: Pgint; level: Pgint; consumed: PGdkModifierType): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_display_translate_key'{$endif};
function gdk_dnd_event_get_drop(event: PGdkDNDEvent): PGdkDrop; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_dnd_event_get_drop'{$endif};
function gdk_dnd_event_get_type: TGType; cdecl; external {$ifdef MSWindows} Gdk4_library name 'gdk_dnd_event_get_type' {$endif};
function gdk_drag_action_is_unique(action: TGdkDragAction): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_drag_action_is_unique'{$endif};
function gdk_drag_begin(surface: PGdkSurface; device: PGdkDevice; content: PGdkContentProvider; actions: TGdkDragAction; dx: gdouble; dy: gdouble): PGdkDrag; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_drag_begin'{$endif};
function gdk_drag_get_actions(drag: PGdkDrag): TGdkDragAction; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_drag_get_actions'{$endif};
function gdk_drag_get_content(drag: PGdkDrag): PGdkContentProvider; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_drag_get_content'{$endif};
function gdk_drag_get_device(drag: PGdkDrag): PGdkDevice; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_drag_get_device'{$endif};
function gdk_drag_get_display(drag: PGdkDrag): PGdkDisplay; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_drag_get_display'{$endif};
function gdk_drag_get_drag_surface(drag: PGdkDrag): PGdkSurface; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_drag_get_drag_surface'{$endif};
function gdk_drag_get_formats(drag: PGdkDrag): PGdkContentFormats; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_drag_get_formats'{$endif};
function gdk_drag_get_selected_action(drag: PGdkDrag): TGdkDragAction; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_drag_get_selected_action'{$endif};
function gdk_drag_get_surface(drag: PGdkDrag): PGdkSurface; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_drag_get_surface'{$endif};
function gdk_drag_get_type: TGType; cdecl; external {$ifdef MSWindows} Gdk4_library name 'gdk_drag_get_type' {$endif};
function gdk_drag_surface_get_type: TGType; cdecl; external {$ifdef MSWindows} Gdk4_library name 'gdk_drag_surface_get_type' {$endif};
function gdk_drag_surface_present(drag_surface: PGdkDragSurface; width: gint; height: gint): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_drag_surface_present'{$endif};
function gdk_draw_context_get_display(context: PGdkDrawContext): PGdkDisplay; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_draw_context_get_display'{$endif};
function gdk_draw_context_get_frame_region(context: PGdkDrawContext): Pcairo_region_t; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_draw_context_get_frame_region'{$endif};
function gdk_draw_context_get_surface(context: PGdkDrawContext): PGdkSurface; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_draw_context_get_surface'{$endif};
function gdk_draw_context_get_type: TGType; cdecl; external {$ifdef MSWindows} Gdk4_library name 'gdk_draw_context_get_type' {$endif};
function gdk_draw_context_is_in_frame(context: PGdkDrawContext): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_draw_context_is_in_frame'{$endif};
function gdk_drop_get_actions(self: PGdkDrop): TGdkDragAction; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_drop_get_actions'{$endif};
function gdk_drop_get_device(self: PGdkDrop): PGdkDevice; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_drop_get_device'{$endif};
function gdk_drop_get_display(self: PGdkDrop): PGdkDisplay; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_drop_get_display'{$endif};
function gdk_drop_get_drag(self: PGdkDrop): PGdkDrag; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_drop_get_drag'{$endif};
function gdk_drop_get_formats(self: PGdkDrop): PGdkContentFormats; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_drop_get_formats'{$endif};
function gdk_drop_get_surface(self: PGdkDrop): PGdkSurface; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_drop_get_surface'{$endif};
function gdk_drop_get_type: TGType; cdecl; external {$ifdef MSWindows} Gdk4_library name 'gdk_drop_get_type' {$endif};
function gdk_drop_read_finish(self: PGdkDrop; result_: PGAsyncResult; out_mime_type: PPgchar; error: PPGError): PGInputStream; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_drop_read_finish'{$endif};
function gdk_drop_read_value_finish(self: PGdkDrop; result_: PGAsyncResult; error: PPGError): PGValue; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_drop_read_value_finish'{$endif};
function gdk_event_get_axes(event: PGdkEvent; axes: PPgdouble; n_axes: Pguint): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_event_get_axes'{$endif};
function gdk_event_get_axis(event: PGdkEvent; axis_use: TGdkAxisUse; value: Pgdouble): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_event_get_axis'{$endif};
function gdk_event_get_device(event: PGdkEvent): PGdkDevice; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_event_get_device'{$endif};
function gdk_event_get_device_tool(event: PGdkEvent): PGdkDeviceTool; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_event_get_device_tool'{$endif};
function gdk_event_get_display(event: PGdkEvent): PGdkDisplay; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_event_get_display'{$endif};
function gdk_event_get_event_sequence(event: PGdkEvent): PGdkEventSequence; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_event_get_event_sequence'{$endif};
function gdk_event_get_event_type(event: PGdkEvent): TGdkEventType; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_event_get_event_type'{$endif};
function gdk_event_get_history(event: PGdkEvent; out_n_coords: Pguint): PGdkTimeCoord; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_event_get_history'{$endif};
function gdk_event_get_modifier_state(event: PGdkEvent): TGdkModifierType; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_event_get_modifier_state'{$endif};
function gdk_event_get_pointer_emulated(event: PGdkEvent): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_event_get_pointer_emulated'{$endif};
function gdk_event_get_position(event: PGdkEvent; x: Pgdouble; y: Pgdouble): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_event_get_position'{$endif};
function gdk_event_get_seat(event: PGdkEvent): PGdkSeat; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_event_get_seat'{$endif};
function gdk_event_get_surface(event: PGdkEvent): PGdkSurface; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_event_get_surface'{$endif};
function gdk_event_get_time(event: PGdkEvent): guint32; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_event_get_time'{$endif};
function gdk_event_get_type: TGType; cdecl; external {$ifdef MSWindows} Gdk4_library name 'gdk_event_get_type' {$endif};
function gdk_event_ref(event: PGdkEvent): PGdkEvent; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_event_ref'{$endif};
function gdk_event_sequence_get_type: TGType; cdecl; external {$ifdef MSWindows} Gdk4_library name 'gdk_event_sequence_get_type' {$endif};
function gdk_event_triggers_context_menu(event: PGdkEvent): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_event_triggers_context_menu'{$endif};
function gdk_events_get_angle(event1: PGdkEvent; event2: PGdkEvent; angle: Pgdouble): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_events_get_angle'{$endif};
function gdk_events_get_center(event1: PGdkEvent; event2: PGdkEvent; x: Pgdouble; y: Pgdouble): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_events_get_center'{$endif};
function gdk_events_get_distance(event1: PGdkEvent; event2: PGdkEvent; distance: Pgdouble): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_events_get_distance'{$endif};
function gdk_file_list_get_files(file_list: PGdkFileList): PGSList; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_file_list_get_files'{$endif};
function gdk_file_list_get_type: TGType; cdecl; external {$ifdef MSWindows} Gdk4_library name 'gdk_file_list_get_type' {$endif};
function gdk_focus_event_get_in(event: PGdkFocusEvent): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_focus_event_get_in'{$endif};
function gdk_focus_event_get_type: TGType; cdecl; external {$ifdef MSWindows} Gdk4_library name 'gdk_focus_event_get_type' {$endif};
function gdk_frame_clock_get_current_timings(frame_clock: PGdkFrameClock): PGdkFrameTimings; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_frame_clock_get_current_timings'{$endif};
function gdk_frame_clock_get_fps(frame_clock: PGdkFrameClock): gdouble; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_frame_clock_get_fps'{$endif};
function gdk_frame_clock_get_frame_counter(frame_clock: PGdkFrameClock): gint64; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_frame_clock_get_frame_counter'{$endif};
function gdk_frame_clock_get_frame_time(frame_clock: PGdkFrameClock): gint64; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_frame_clock_get_frame_time'{$endif};
function gdk_frame_clock_get_history_start(frame_clock: PGdkFrameClock): gint64; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_frame_clock_get_history_start'{$endif};
function gdk_frame_clock_get_timings(frame_clock: PGdkFrameClock; frame_counter: gint64): PGdkFrameTimings; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_frame_clock_get_timings'{$endif};
function gdk_frame_clock_get_type: TGType; cdecl; external {$ifdef MSWindows} Gdk4_library name 'gdk_frame_clock_get_type' {$endif};
function gdk_frame_timings_get_complete(timings: PGdkFrameTimings): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_frame_timings_get_complete'{$endif};
function gdk_frame_timings_get_frame_counter(timings: PGdkFrameTimings): gint64; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_frame_timings_get_frame_counter'{$endif};
function gdk_frame_timings_get_frame_time(timings: PGdkFrameTimings): gint64; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_frame_timings_get_frame_time'{$endif};
function gdk_frame_timings_get_predicted_presentation_time(timings: PGdkFrameTimings): gint64; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_frame_timings_get_predicted_presentation_time'{$endif};
function gdk_frame_timings_get_presentation_time(timings: PGdkFrameTimings): gint64; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_frame_timings_get_presentation_time'{$endif};
function gdk_frame_timings_get_refresh_interval(timings: PGdkFrameTimings): gint64; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_frame_timings_get_refresh_interval'{$endif};
function gdk_frame_timings_get_type: TGType; cdecl; external {$ifdef MSWindows} Gdk4_library name 'gdk_frame_timings_get_type' {$endif};
function gdk_frame_timings_ref(timings: PGdkFrameTimings): PGdkFrameTimings; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_frame_timings_ref'{$endif};
function gdk_gl_context_get_allowed_apis(self: PGdkGLContext): TGdkGLAPI; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_gl_context_get_allowed_apis'{$endif};
function gdk_gl_context_get_api(self: PGdkGLContext): TGdkGLAPI; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_gl_context_get_api'{$endif};
function gdk_gl_context_get_current: PGdkGLContext; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_gl_context_get_current'{$endif};
function gdk_gl_context_get_debug_enabled(context: PGdkGLContext): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_gl_context_get_debug_enabled'{$endif};
function gdk_gl_context_get_display(context: PGdkGLContext): PGdkDisplay; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_gl_context_get_display'{$endif};
function gdk_gl_context_get_forward_compatible(context: PGdkGLContext): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_gl_context_get_forward_compatible'{$endif};
function gdk_gl_context_get_surface(context: PGdkGLContext): PGdkSurface; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_gl_context_get_surface'{$endif};
function gdk_gl_context_get_type: TGType; cdecl; external {$ifdef MSWindows} Gdk4_library name 'gdk_gl_context_get_type' {$endif};
function gdk_gl_context_get_use_es(context: PGdkGLContext): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_gl_context_get_use_es'{$endif};
function gdk_gl_context_is_legacy(context: PGdkGLContext): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_gl_context_is_legacy'{$endif};
function gdk_gl_context_is_shared(self: PGdkGLContext; other: PGdkGLContext): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_gl_context_is_shared'{$endif};
function gdk_gl_context_realize(context: PGdkGLContext; error: PPGError): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_gl_context_realize'{$endif};
function gdk_gl_error_quark: TGQuark; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_gl_error_quark'{$endif};
function gdk_gl_texture_get_type: TGType; cdecl; external {$ifdef MSWindows} Gdk4_library name 'gdk_gl_texture_get_type' {$endif};
function gdk_gl_texture_new(context: PGdkGLContext; id: guint; width: gint; height: gint; destroy_: TGDestroyNotify; data: gpointer): PGdkGLTexture; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_gl_texture_new'{$endif};
function gdk_grab_broken_event_get_grab_surface(event: PGdkGrabBrokenEvent): PGdkSurface; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_grab_broken_event_get_grab_surface'{$endif};
function gdk_grab_broken_event_get_implicit(event: PGdkGrabBrokenEvent): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_grab_broken_event_get_implicit'{$endif};
function gdk_grab_broken_event_get_type: TGType; cdecl; external {$ifdef MSWindows} Gdk4_library name 'gdk_grab_broken_event_get_type' {$endif};
function gdk_intern_mime_type(string_: Pgchar): Pgchar; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_intern_mime_type'{$endif};
function gdk_key_event_get_consumed_modifiers(event: PGdkKeyEvent): TGdkModifierType; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_key_event_get_consumed_modifiers'{$endif};
function gdk_key_event_get_keycode(event: PGdkKeyEvent): guint; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_key_event_get_keycode'{$endif};
function gdk_key_event_get_keyval(event: PGdkKeyEvent): guint; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_key_event_get_keyval'{$endif};
function gdk_key_event_get_layout(event: PGdkKeyEvent): guint; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_key_event_get_layout'{$endif};
function gdk_key_event_get_level(event: PGdkKeyEvent): guint; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_key_event_get_level'{$endif};
function gdk_key_event_get_match(event: PGdkKeyEvent; keyval: Pguint; modifiers: PGdkModifierType): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_key_event_get_match'{$endif};
function gdk_key_event_get_type: TGType; cdecl; external {$ifdef MSWindows} Gdk4_library name 'gdk_key_event_get_type' {$endif};
function gdk_key_event_is_modifier(event: PGdkKeyEvent): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_key_event_is_modifier'{$endif};
function gdk_key_event_matches(event: PGdkKeyEvent; keyval: guint; modifiers: TGdkModifierType): TGdkKeyMatch; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_key_event_matches'{$endif};
function gdk_keyval_from_name(keyval_name: Pgchar): guint; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_keyval_from_name'{$endif};
function gdk_keyval_is_lower(keyval: guint): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_keyval_is_lower'{$endif};
function gdk_keyval_is_upper(keyval: guint): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_keyval_is_upper'{$endif};
function gdk_keyval_name(keyval: guint): Pgchar; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_keyval_name'{$endif};
function gdk_keyval_to_lower(keyval: guint): guint; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_keyval_to_lower'{$endif};
function gdk_keyval_to_unicode(keyval: guint): guint32; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_keyval_to_unicode'{$endif};
function gdk_keyval_to_upper(keyval: guint): guint; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_keyval_to_upper'{$endif};
function gdk_memory_texture_get_type: TGType; cdecl; external {$ifdef MSWindows} Gdk4_library name 'gdk_memory_texture_get_type' {$endif};
function gdk_memory_texture_new(width: gint; height: gint; format: TGdkMemoryFormat; bytes: PGBytes; stride: gsize): PGdkMemoryTexture; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_memory_texture_new'{$endif};
function gdk_monitor_get_connector(monitor: PGdkMonitor): Pgchar; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_monitor_get_connector'{$endif};
function gdk_monitor_get_display(monitor: PGdkMonitor): PGdkDisplay; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_monitor_get_display'{$endif};
function gdk_monitor_get_height_mm(monitor: PGdkMonitor): gint; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_monitor_get_height_mm'{$endif};
function gdk_monitor_get_manufacturer(monitor: PGdkMonitor): Pgchar; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_monitor_get_manufacturer'{$endif};
function gdk_monitor_get_model(monitor: PGdkMonitor): Pgchar; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_monitor_get_model'{$endif};
function gdk_monitor_get_refresh_rate(monitor: PGdkMonitor): gint; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_monitor_get_refresh_rate'{$endif};
function gdk_monitor_get_scale_factor(monitor: PGdkMonitor): gint; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_monitor_get_scale_factor'{$endif};
function gdk_monitor_get_subpixel_layout(monitor: PGdkMonitor): TGdkSubpixelLayout; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_monitor_get_subpixel_layout'{$endif};
function gdk_monitor_get_type: TGType; cdecl; external {$ifdef MSWindows} Gdk4_library name 'gdk_monitor_get_type' {$endif};
function gdk_monitor_get_width_mm(monitor: PGdkMonitor): gint; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_monitor_get_width_mm'{$endif};
function gdk_monitor_is_valid(monitor: PGdkMonitor): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_monitor_is_valid'{$endif};
function gdk_motion_event_get_type: TGType; cdecl; external {$ifdef MSWindows} Gdk4_library name 'gdk_motion_event_get_type' {$endif};
function gdk_pad_event_get_button(event: PGdkPadEvent): guint; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_pad_event_get_button'{$endif};
function gdk_pad_event_get_type: TGType; cdecl; external {$ifdef MSWindows} Gdk4_library name 'gdk_pad_event_get_type' {$endif};
function gdk_paintable_get_current_image(paintable: PGdkPaintable): PGdkPaintable; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_paintable_get_current_image'{$endif};
function gdk_paintable_get_flags(paintable: PGdkPaintable): TGdkPaintableFlags; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_paintable_get_flags'{$endif};
function gdk_paintable_get_intrinsic_aspect_ratio(paintable: PGdkPaintable): gdouble; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_paintable_get_intrinsic_aspect_ratio'{$endif};
function gdk_paintable_get_intrinsic_height(paintable: PGdkPaintable): gint; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_paintable_get_intrinsic_height'{$endif};
function gdk_paintable_get_intrinsic_width(paintable: PGdkPaintable): gint; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_paintable_get_intrinsic_width'{$endif};
function gdk_paintable_get_type: TGType; cdecl; external {$ifdef MSWindows} Gdk4_library name 'gdk_paintable_get_type' {$endif};
function gdk_paintable_new_empty(intrinsic_width: gint; intrinsic_height: gint): PGdkPaintable; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_paintable_new_empty'{$endif};
function gdk_pango_layout_get_clip_region(layout: PPangoLayout; x_origin: gint; y_origin: gint; index_ranges: Pgint; n_ranges: gint): Pcairo_region_t; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_pango_layout_get_clip_region'{$endif};
function gdk_pango_layout_line_get_clip_region(line: PPangoLayoutLine; x_origin: gint; y_origin: gint; index_ranges: Pgint; n_ranges: gint): Pcairo_region_t; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_pango_layout_line_get_clip_region'{$endif};
function gdk_pixbuf_get_from_surface(surface: Pcairo_surface_t; src_x: gint; src_y: gint; width: gint; height: gint): PGdkPixbuf; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_pixbuf_get_from_surface'{$endif};
function gdk_pixbuf_get_from_texture(texture: PGdkTexture): PGdkPixbuf; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_pixbuf_get_from_texture'{$endif};
function gdk_popup_get_autohide(popup: PGdkPopup): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_popup_get_autohide'{$endif};
function gdk_popup_get_parent(popup: PGdkPopup): PGdkSurface; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_popup_get_parent'{$endif};
function gdk_popup_get_position_x(popup: PGdkPopup): gint; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_popup_get_position_x'{$endif};
function gdk_popup_get_position_y(popup: PGdkPopup): gint; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_popup_get_position_y'{$endif};
function gdk_popup_get_rect_anchor(popup: PGdkPopup): TGdkGravity; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_popup_get_rect_anchor'{$endif};
function gdk_popup_get_surface_anchor(popup: PGdkPopup): TGdkGravity; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_popup_get_surface_anchor'{$endif};
function gdk_popup_get_type: TGType; cdecl; external {$ifdef MSWindows} Gdk4_library name 'gdk_popup_get_type' {$endif};
function gdk_popup_layout_copy(layout: PGdkPopupLayout): PGdkPopupLayout; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_popup_layout_copy'{$endif};
function gdk_popup_layout_equal(layout: PGdkPopupLayout; other: PGdkPopupLayout): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_popup_layout_equal'{$endif};
function gdk_popup_layout_get_anchor_hints(layout: PGdkPopupLayout): TGdkAnchorHints; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_popup_layout_get_anchor_hints'{$endif};
function gdk_popup_layout_get_anchor_rect(layout: PGdkPopupLayout): PGdkRectangle; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_popup_layout_get_anchor_rect'{$endif};
function gdk_popup_layout_get_rect_anchor(layout: PGdkPopupLayout): TGdkGravity; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_popup_layout_get_rect_anchor'{$endif};
function gdk_popup_layout_get_surface_anchor(layout: PGdkPopupLayout): TGdkGravity; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_popup_layout_get_surface_anchor'{$endif};
function gdk_popup_layout_get_type: TGType; cdecl; external {$ifdef MSWindows} Gdk4_library name 'gdk_popup_layout_get_type' {$endif};
function gdk_popup_layout_new(anchor_rect: PGdkRectangle; rect_anchor: TGdkGravity; surface_anchor: TGdkGravity): PGdkPopupLayout; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_popup_layout_new'{$endif};
function gdk_popup_layout_ref(layout: PGdkPopupLayout): PGdkPopupLayout; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_popup_layout_ref'{$endif};
function gdk_popup_present(popup: PGdkPopup; width: gint; height: gint; layout: PGdkPopupLayout): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_popup_present'{$endif};
function gdk_proximity_event_get_type: TGType; cdecl; external {$ifdef MSWindows} Gdk4_library name 'gdk_proximity_event_get_type' {$endif};
function gdk_rectangle_contains_point(rect: PGdkRectangle; x: gint; y: gint): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_rectangle_contains_point'{$endif};
function gdk_rectangle_equal(rect1: PGdkRectangle; rect2: PGdkRectangle): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_rectangle_equal'{$endif};
function gdk_rectangle_get_type: TGType; cdecl; external {$ifdef MSWindows} Gdk4_library name 'gdk_rectangle_get_type' {$endif};
function gdk_rectangle_intersect(src1: PGdkRectangle; src2: PGdkRectangle; dest: PGdkRectangle): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_rectangle_intersect'{$endif};
function gdk_rgba_copy(rgba: PGdkRGBA): PGdkRGBA; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_rgba_copy'{$endif};
function gdk_rgba_equal(p1: PGdkRGBA; p2: PGdkRGBA): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_rgba_equal'{$endif};
function gdk_rgba_get_type: TGType; cdecl; external {$ifdef MSWindows} Gdk4_library name 'gdk_rgba_get_type' {$endif};
function gdk_rgba_hash(p: PGdkRGBA): guint; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_rgba_hash'{$endif};
function gdk_rgba_is_clear(rgba: PGdkRGBA): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_rgba_is_clear'{$endif};
function gdk_rgba_is_opaque(rgba: PGdkRGBA): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_rgba_is_opaque'{$endif};
function gdk_rgba_parse(rgba: PGdkRGBA; spec: Pgchar): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_rgba_parse'{$endif};
function gdk_rgba_to_string(rgba: PGdkRGBA): Pgchar; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_rgba_to_string'{$endif};
function gdk_scroll_event_get_direction(event: PGdkScrollEvent): TGdkScrollDirection; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_scroll_event_get_direction'{$endif};
function gdk_scroll_event_get_type: TGType; cdecl; external {$ifdef MSWindows} Gdk4_library name 'gdk_scroll_event_get_type' {$endif};
function gdk_scroll_event_is_stop(event: PGdkScrollEvent): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_scroll_event_is_stop'{$endif};
function gdk_seat_get_capabilities(seat: PGdkSeat): TGdkSeatCapabilities; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_seat_get_capabilities'{$endif};
function gdk_seat_get_devices(seat: PGdkSeat; capabilities: TGdkSeatCapabilities): PGList; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_seat_get_devices'{$endif};
function gdk_seat_get_display(seat: PGdkSeat): PGdkDisplay; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_seat_get_display'{$endif};
function gdk_seat_get_keyboard(seat: PGdkSeat): PGdkDevice; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_seat_get_keyboard'{$endif};
function gdk_seat_get_pointer(seat: PGdkSeat): PGdkDevice; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_seat_get_pointer'{$endif};
function gdk_seat_get_tools(seat: PGdkSeat): PGList; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_seat_get_tools'{$endif};
function gdk_seat_get_type: TGType; cdecl; external {$ifdef MSWindows} Gdk4_library name 'gdk_seat_get_type' {$endif};
function gdk_snapshot_get_type: TGType; cdecl; external {$ifdef MSWindows} Gdk4_library name 'gdk_snapshot_get_type' {$endif};
function gdk_surface_create_cairo_context(surface: PGdkSurface): PGdkCairoContext; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_surface_create_cairo_context'{$endif};
function gdk_surface_create_gl_context(surface: PGdkSurface; error: PPGError): PGdkGLContext; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_surface_create_gl_context'{$endif};
function gdk_surface_create_similar_surface(surface: PGdkSurface; content: Tcairo_content_t; width: gint; height: gint): Pcairo_surface_t; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_surface_create_similar_surface'{$endif};
function gdk_surface_create_vulkan_context(surface: PGdkSurface; error: PPGError): PGdkVulkanContext; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_surface_create_vulkan_context'{$endif};
function gdk_surface_get_cursor(surface: PGdkSurface): PGdkCursor; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_surface_get_cursor'{$endif};
function gdk_surface_get_device_cursor(surface: PGdkSurface; device: PGdkDevice): PGdkCursor; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_surface_get_device_cursor'{$endif};
function gdk_surface_get_device_position(surface: PGdkSurface; device: PGdkDevice; x: Pgdouble; y: Pgdouble; mask: PGdkModifierType): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_surface_get_device_position'{$endif};
function gdk_surface_get_display(surface: PGdkSurface): PGdkDisplay; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_surface_get_display'{$endif};
function gdk_surface_get_frame_clock(surface: PGdkSurface): PGdkFrameClock; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_surface_get_frame_clock'{$endif};
function gdk_surface_get_height(surface: PGdkSurface): gint; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_surface_get_height'{$endif};
function gdk_surface_get_mapped(surface: PGdkSurface): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_surface_get_mapped'{$endif};
function gdk_surface_get_scale_factor(surface: PGdkSurface): gint; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_surface_get_scale_factor'{$endif};
function gdk_surface_get_type: TGType; cdecl; external {$ifdef MSWindows} Gdk4_library name 'gdk_surface_get_type' {$endif};
function gdk_surface_get_width(surface: PGdkSurface): gint; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_surface_get_width'{$endif};
function gdk_surface_is_destroyed(surface: PGdkSurface): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_surface_is_destroyed'{$endif};
function gdk_surface_new_popup(parent: PGdkSurface; autohide: gboolean): PGdkSurface; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_surface_new_popup'{$endif};
function gdk_surface_new_toplevel(display: PGdkDisplay): PGdkSurface; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_surface_new_toplevel'{$endif};
function gdk_surface_translate_coordinates(from: PGdkSurface; to_: PGdkSurface; x: Pgdouble; y: Pgdouble): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_surface_translate_coordinates'{$endif};
function gdk_texture_error_quark: TGQuark; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_texture_error_quark'{$endif};
function gdk_texture_get_height(texture: PGdkTexture): gint; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_texture_get_height'{$endif};
function gdk_texture_get_type: TGType; cdecl; external {$ifdef MSWindows} Gdk4_library name 'gdk_texture_get_type' {$endif};
function gdk_texture_get_width(texture: PGdkTexture): gint; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_texture_get_width'{$endif};
function gdk_texture_new_for_pixbuf(pixbuf: PGdkPixbuf): PGdkTexture; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_texture_new_for_pixbuf'{$endif};
function gdk_texture_new_from_bytes(bytes: PGBytes; error: PPGError): PGdkTexture; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_texture_new_from_bytes'{$endif};
function gdk_texture_new_from_file(file_: PGFile; error: PPGError): PGdkTexture; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_texture_new_from_file'{$endif};
function gdk_texture_new_from_filename(path: Pgchar; error: PPGError): PGdkTexture; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_texture_new_from_filename'{$endif};
function gdk_texture_new_from_resource(resource_path: Pgchar): PGdkTexture; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_texture_new_from_resource'{$endif};
function gdk_texture_save_to_png(texture: PGdkTexture; filename: Pgchar): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_texture_save_to_png'{$endif};
function gdk_texture_save_to_png_bytes(texture: PGdkTexture): PGBytes; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_texture_save_to_png_bytes'{$endif};
function gdk_texture_save_to_tiff(texture: PGdkTexture; filename: Pgchar): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_texture_save_to_tiff'{$endif};
function gdk_texture_save_to_tiff_bytes(texture: PGdkTexture): PGBytes; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_texture_save_to_tiff_bytes'{$endif};
function gdk_toplevel_get_state(toplevel: PGdkToplevel): TGdkToplevelState; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_toplevel_get_state'{$endif};
function gdk_toplevel_get_type: TGType; cdecl; external {$ifdef MSWindows} Gdk4_library name 'gdk_toplevel_get_type' {$endif};
function gdk_toplevel_layout_copy(layout: PGdkToplevelLayout): PGdkToplevelLayout; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_toplevel_layout_copy'{$endif};
function gdk_toplevel_layout_equal(layout: PGdkToplevelLayout; other: PGdkToplevelLayout): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_toplevel_layout_equal'{$endif};
function gdk_toplevel_layout_get_fullscreen(layout: PGdkToplevelLayout; fullscreen: Pgboolean): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_toplevel_layout_get_fullscreen'{$endif};
function gdk_toplevel_layout_get_fullscreen_monitor(layout: PGdkToplevelLayout): PGdkMonitor; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_toplevel_layout_get_fullscreen_monitor'{$endif};
function gdk_toplevel_layout_get_maximized(layout: PGdkToplevelLayout; maximized: Pgboolean): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_toplevel_layout_get_maximized'{$endif};
function gdk_toplevel_layout_get_resizable(layout: PGdkToplevelLayout): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_toplevel_layout_get_resizable'{$endif};
function gdk_toplevel_layout_get_type: TGType; cdecl; external {$ifdef MSWindows} Gdk4_library name 'gdk_toplevel_layout_get_type' {$endif};
function gdk_toplevel_layout_new: PGdkToplevelLayout; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_toplevel_layout_new'{$endif};
function gdk_toplevel_layout_ref(layout: PGdkToplevelLayout): PGdkToplevelLayout; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_toplevel_layout_ref'{$endif};
function gdk_toplevel_lower(toplevel: PGdkToplevel): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_toplevel_lower'{$endif};
function gdk_toplevel_minimize(toplevel: PGdkToplevel): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_toplevel_minimize'{$endif};
function gdk_toplevel_show_window_menu(toplevel: PGdkToplevel; event: PGdkEvent): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_toplevel_show_window_menu'{$endif};
function gdk_toplevel_size_get_type: TGType; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_toplevel_size_get_type'{$endif};
function gdk_toplevel_supports_edge_constraints(toplevel: PGdkToplevel): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_toplevel_supports_edge_constraints'{$endif};
function gdk_toplevel_titlebar_gesture(toplevel: PGdkToplevel; gesture: TGdkTitlebarGesture): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_toplevel_titlebar_gesture'{$endif};
function gdk_touch_event_get_emulating_pointer(event: PGdkTouchEvent): gboolean; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_touch_event_get_emulating_pointer'{$endif};
function gdk_touch_event_get_type: TGType; cdecl; external {$ifdef MSWindows} Gdk4_library name 'gdk_touch_event_get_type' {$endif};
function gdk_touchpad_event_get_gesture_phase(event: PGdkTouchpadEvent): TGdkTouchpadGesturePhase; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_touchpad_event_get_gesture_phase'{$endif};
function gdk_touchpad_event_get_n_fingers(event: PGdkTouchpadEvent): guint; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_touchpad_event_get_n_fingers'{$endif};
function gdk_touchpad_event_get_pinch_angle_delta(event: PGdkTouchpadEvent): gdouble; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_touchpad_event_get_pinch_angle_delta'{$endif};
function gdk_touchpad_event_get_pinch_scale(event: PGdkTouchpadEvent): gdouble; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_touchpad_event_get_pinch_scale'{$endif};
function gdk_touchpad_event_get_type: TGType; cdecl; external {$ifdef MSWindows} Gdk4_library name 'gdk_touchpad_event_get_type' {$endif};
function gdk_unicode_to_keyval(wc: guint32): guint; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_unicode_to_keyval'{$endif};
function gdk_vulkan_context_get_type: TGType; cdecl; external {$ifdef MSWindows} Gdk4_library name 'gdk_vulkan_context_get_type' {$endif};
function gdk_vulkan_error_quark: TGQuark; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_vulkan_error_quark'{$endif};
procedure gdk_app_launch_context_set_desktop(context: PGdkAppLaunchContext; desktop: gint); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_app_launch_context_set_desktop'{$endif};
procedure gdk_app_launch_context_set_icon(context: PGdkAppLaunchContext; icon: PGIcon); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_app_launch_context_set_icon'{$endif};
procedure gdk_app_launch_context_set_icon_name(context: PGdkAppLaunchContext; icon_name: Pgchar); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_app_launch_context_set_icon_name'{$endif};
procedure gdk_app_launch_context_set_timestamp(context: PGdkAppLaunchContext; timestamp: guint32); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_app_launch_context_set_timestamp'{$endif};
procedure gdk_cairo_rectangle(cr: Pcairo_t; rectangle: PGdkRectangle); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_cairo_rectangle'{$endif};
procedure gdk_cairo_region(cr: Pcairo_t; region: Pcairo_region_t); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_cairo_region'{$endif};
procedure gdk_cairo_set_source_pixbuf(cr: Pcairo_t; pixbuf: PGdkPixbuf; pixbuf_x: gdouble; pixbuf_y: gdouble); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_cairo_set_source_pixbuf'{$endif};
procedure gdk_cairo_set_source_rgba(cr: Pcairo_t; rgba: PGdkRGBA); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_cairo_set_source_rgba'{$endif};
procedure gdk_clipboard_read_async(clipboard: PGdkClipboard; mime_types: PPgchar; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_clipboard_read_async'{$endif};
procedure gdk_clipboard_read_text_async(clipboard: PGdkClipboard; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_clipboard_read_text_async'{$endif};
procedure gdk_clipboard_read_texture_async(clipboard: PGdkClipboard; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_clipboard_read_texture_async'{$endif};
procedure gdk_clipboard_read_value_async(clipboard: PGdkClipboard; type_: TGType; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_clipboard_read_value_async'{$endif};
procedure gdk_clipboard_set(clipboard: PGdkClipboard; type_: TGType; args: array of const); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_clipboard_set'{$endif};
procedure gdk_clipboard_set_text(clipboard: PGdkClipboard; text: Pgchar); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_clipboard_set_text'{$endif};
procedure gdk_clipboard_set_texture(clipboard: PGdkClipboard; texture: PGdkTexture); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_clipboard_set_texture'{$endif};
procedure gdk_clipboard_set_valist(clipboard: PGdkClipboard; type_: TGType; args: Tva_list); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_clipboard_set_valist'{$endif};
procedure gdk_clipboard_set_value(clipboard: PGdkClipboard; value: PGValue); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_clipboard_set_value'{$endif};
procedure gdk_clipboard_store_async(clipboard: PGdkClipboard; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_clipboard_store_async'{$endif};
procedure gdk_content_deserialize_async(stream: PGInputStream; mime_type: Pgchar; type_: TGType; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_deserialize_async'{$endif};
procedure gdk_content_deserializer_return_error(deserializer: PGdkContentDeserializer; error: PGError); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_deserializer_return_error'{$endif};
procedure gdk_content_deserializer_return_success(deserializer: PGdkContentDeserializer); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_deserializer_return_success'{$endif};
procedure gdk_content_deserializer_set_task_data(deserializer: PGdkContentDeserializer; data: gpointer; notify: TGDestroyNotify); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_deserializer_set_task_data'{$endif};
procedure gdk_content_formats_builder_add_formats(builder: PGdkContentFormatsBuilder; formats: PGdkContentFormats); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_formats_builder_add_formats'{$endif};
procedure gdk_content_formats_builder_add_gtype(builder: PGdkContentFormatsBuilder; type_: TGType); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_formats_builder_add_gtype'{$endif};
procedure gdk_content_formats_builder_add_mime_type(builder: PGdkContentFormatsBuilder; mime_type: Pgchar); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_formats_builder_add_mime_type'{$endif};
procedure gdk_content_formats_builder_unref(builder: PGdkContentFormatsBuilder); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_formats_builder_unref'{$endif};
procedure gdk_content_formats_print(formats: PGdkContentFormats; string_: PGString); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_formats_print'{$endif};
procedure gdk_content_formats_unref(formats: PGdkContentFormats); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_formats_unref'{$endif};
procedure gdk_content_provider_content_changed(provider: PGdkContentProvider); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_provider_content_changed'{$endif};
procedure gdk_content_provider_write_mime_type_async(provider: PGdkContentProvider; mime_type: Pgchar; stream: PGOutputStream; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_provider_write_mime_type_async'{$endif};
procedure gdk_content_register_deserializer(mime_type: Pgchar; type_: TGType; deserialize: TGdkContentDeserializeFunc; data: gpointer; notify: TGDestroyNotify); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_register_deserializer'{$endif};
procedure gdk_content_register_serializer(type_: TGType; mime_type: Pgchar; serialize: TGdkContentSerializeFunc; data: gpointer; notify: TGDestroyNotify); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_register_serializer'{$endif};
procedure gdk_content_serialize_async(stream: PGOutputStream; mime_type: Pgchar; value: PGValue; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_serialize_async'{$endif};
procedure gdk_content_serializer_return_error(serializer: PGdkContentSerializer; error: PGError); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_serializer_return_error'{$endif};
procedure gdk_content_serializer_return_success(serializer: PGdkContentSerializer); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_serializer_return_success'{$endif};
procedure gdk_content_serializer_set_task_data(serializer: PGdkContentSerializer; data: gpointer; notify: TGDestroyNotify); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_content_serializer_set_task_data'{$endif};
procedure gdk_display_beep(display: PGdkDisplay); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_display_beep'{$endif};
procedure gdk_display_close(display: PGdkDisplay); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_display_close'{$endif};
procedure gdk_display_flush(display: PGdkDisplay); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_display_flush'{$endif};
procedure gdk_display_manager_set_default_display(manager: PGdkDisplayManager; display: PGdkDisplay); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_display_manager_set_default_display'{$endif};
procedure gdk_display_notify_startup_complete(display: PGdkDisplay; startup_id: Pgchar); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_display_notify_startup_complete'{$endif};
procedure gdk_display_put_event(display: PGdkDisplay; event: PGdkEvent); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_display_put_event'{$endif};
procedure gdk_display_sync(display: PGdkDisplay); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_display_sync'{$endif};
procedure gdk_drag_drop_done(drag: PGdkDrag; success: gboolean); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_drag_drop_done'{$endif};
procedure gdk_drag_set_hotspot(drag: PGdkDrag; hot_x: gint; hot_y: gint); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_drag_set_hotspot'{$endif};
procedure gdk_draw_context_begin_frame(context: PGdkDrawContext; region: Pcairo_region_t); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_draw_context_begin_frame'{$endif};
procedure gdk_draw_context_end_frame(context: PGdkDrawContext); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_draw_context_end_frame'{$endif};
procedure gdk_drop_finish(self: PGdkDrop; action: TGdkDragAction); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_drop_finish'{$endif};
procedure gdk_drop_read_async(self: PGdkDrop; mime_types: PPgchar; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_drop_read_async'{$endif};
procedure gdk_drop_read_value_async(self: PGdkDrop; type_: TGType; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_drop_read_value_async'{$endif};
procedure gdk_drop_status(self: PGdkDrop; actions: TGdkDragAction; preferred: TGdkDragAction); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_drop_status'{$endif};
procedure gdk_event_unref(event: PGdkEvent); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_event_unref'{$endif};
procedure gdk_frame_clock_begin_updating(frame_clock: PGdkFrameClock); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_frame_clock_begin_updating'{$endif};
procedure gdk_frame_clock_end_updating(frame_clock: PGdkFrameClock); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_frame_clock_end_updating'{$endif};
procedure gdk_frame_clock_get_refresh_info(frame_clock: PGdkFrameClock; base_time: gint64; refresh_interval_return: Pgint64; presentation_time_return: Pgint64); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_frame_clock_get_refresh_info'{$endif};
procedure gdk_frame_clock_request_phase(frame_clock: PGdkFrameClock; phase: TGdkFrameClockPhase); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_frame_clock_request_phase'{$endif};
procedure gdk_frame_timings_unref(timings: PGdkFrameTimings); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_frame_timings_unref'{$endif};
procedure gdk_gl_context_clear_current; cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_gl_context_clear_current'{$endif};
procedure gdk_gl_context_get_required_version(context: PGdkGLContext; major: Pgint; minor: Pgint); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_gl_context_get_required_version'{$endif};
procedure gdk_gl_context_get_version(context: PGdkGLContext; major: Pgint; minor: Pgint); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_gl_context_get_version'{$endif};
procedure gdk_gl_context_make_current(context: PGdkGLContext); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_gl_context_make_current'{$endif};
procedure gdk_gl_context_set_allowed_apis(self: PGdkGLContext; apis: TGdkGLAPI); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_gl_context_set_allowed_apis'{$endif};
procedure gdk_gl_context_set_debug_enabled(context: PGdkGLContext; enabled: gboolean); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_gl_context_set_debug_enabled'{$endif};
procedure gdk_gl_context_set_forward_compatible(context: PGdkGLContext; compatible: gboolean); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_gl_context_set_forward_compatible'{$endif};
procedure gdk_gl_context_set_required_version(context: PGdkGLContext; major: gint; minor: gint); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_gl_context_set_required_version'{$endif};
procedure gdk_gl_context_set_use_es(context: PGdkGLContext; use_es: gint); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_gl_context_set_use_es'{$endif};
procedure gdk_gl_texture_release(self: PGdkGLTexture); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_gl_texture_release'{$endif};
procedure gdk_keyval_convert_case(symbol: guint; lower: Pguint; upper: Pguint); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_keyval_convert_case'{$endif};
procedure gdk_monitor_get_geometry(monitor: PGdkMonitor; geometry: PGdkRectangle); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_monitor_get_geometry'{$endif};
procedure gdk_pad_event_get_axis_value(event: PGdkPadEvent; index: Pguint; value: Pgdouble); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_pad_event_get_axis_value'{$endif};
procedure gdk_pad_event_get_group_mode(event: PGdkPadEvent; group: Pguint; mode: Pguint); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_pad_event_get_group_mode'{$endif};
procedure gdk_paintable_compute_concrete_size(paintable: PGdkPaintable; specified_width: gdouble; specified_height: gdouble; default_width: gdouble; default_height: gdouble; concrete_width: Pgdouble; concrete_height: Pgdouble); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_paintable_compute_concrete_size'{$endif};
procedure gdk_paintable_invalidate_contents(paintable: PGdkPaintable); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_paintable_invalidate_contents'{$endif};
procedure gdk_paintable_invalidate_size(paintable: PGdkPaintable); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_paintable_invalidate_size'{$endif};
procedure gdk_paintable_snapshot(paintable: PGdkPaintable; snapshot: PGdkSnapshot; width: gdouble; height: gdouble); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_paintable_snapshot'{$endif};
procedure gdk_popup_layout_get_offset(layout: PGdkPopupLayout; dx: Pgint; dy: Pgint); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_popup_layout_get_offset'{$endif};
procedure gdk_popup_layout_get_shadow_width(layout: PGdkPopupLayout; left: Pgint; right: Pgint; top: Pgint; bottom: Pgint); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_popup_layout_get_shadow_width'{$endif};
procedure gdk_popup_layout_set_anchor_hints(layout: PGdkPopupLayout; anchor_hints: TGdkAnchorHints); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_popup_layout_set_anchor_hints'{$endif};
procedure gdk_popup_layout_set_anchor_rect(layout: PGdkPopupLayout; anchor_rect: PGdkRectangle); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_popup_layout_set_anchor_rect'{$endif};
procedure gdk_popup_layout_set_offset(layout: PGdkPopupLayout; dx: gint; dy: gint); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_popup_layout_set_offset'{$endif};
procedure gdk_popup_layout_set_rect_anchor(layout: PGdkPopupLayout; anchor: TGdkGravity); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_popup_layout_set_rect_anchor'{$endif};
procedure gdk_popup_layout_set_shadow_width(layout: PGdkPopupLayout; left: gint; right: gint; top: gint; bottom: gint); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_popup_layout_set_shadow_width'{$endif};
procedure gdk_popup_layout_set_surface_anchor(layout: PGdkPopupLayout; anchor: TGdkGravity); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_popup_layout_set_surface_anchor'{$endif};
procedure gdk_popup_layout_unref(layout: PGdkPopupLayout); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_popup_layout_unref'{$endif};
procedure gdk_rectangle_union(src1: PGdkRectangle; src2: PGdkRectangle; dest: PGdkRectangle); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_rectangle_union'{$endif};
procedure gdk_rgba_free(rgba: PGdkRGBA); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_rgba_free'{$endif};
procedure gdk_scroll_event_get_deltas(event: PGdkScrollEvent; delta_x: Pgdouble; delta_y: Pgdouble); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_scroll_event_get_deltas'{$endif};
procedure gdk_set_allowed_backends(backends: Pgchar); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_set_allowed_backends'{$endif};
procedure gdk_surface_beep(surface: PGdkSurface); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_surface_beep'{$endif};
procedure gdk_surface_destroy(surface: PGdkSurface); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_surface_destroy'{$endif};
procedure gdk_surface_hide(surface: PGdkSurface); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_surface_hide'{$endif};
procedure gdk_surface_queue_render(surface: PGdkSurface); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_surface_queue_render'{$endif};
procedure gdk_surface_request_layout(surface: PGdkSurface); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_surface_request_layout'{$endif};
procedure gdk_surface_set_cursor(surface: PGdkSurface; cursor: PGdkCursor); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_surface_set_cursor'{$endif};
procedure gdk_surface_set_device_cursor(surface: PGdkSurface; device: PGdkDevice; cursor: PGdkCursor); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_surface_set_device_cursor'{$endif};
procedure gdk_surface_set_input_region(surface: PGdkSurface; region: Pcairo_region_t); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_surface_set_input_region'{$endif};
procedure gdk_surface_set_opaque_region(surface: PGdkSurface; region: Pcairo_region_t); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_surface_set_opaque_region'{$endif};
procedure gdk_texture_download(texture: PGdkTexture; data: Pguint8; stride: gsize); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_texture_download'{$endif};
procedure gdk_toplevel_begin_move(toplevel: PGdkToplevel; device: PGdkDevice; button: gint; x: gdouble; y: gdouble; timestamp: guint32); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_toplevel_begin_move'{$endif};
procedure gdk_toplevel_begin_resize(toplevel: PGdkToplevel; edge: TGdkSurfaceEdge; device: PGdkDevice; button: gint; x: gdouble; y: gdouble; timestamp: guint32); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_toplevel_begin_resize'{$endif};
procedure gdk_toplevel_focus(toplevel: PGdkToplevel; timestamp: guint32); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_toplevel_focus'{$endif};
procedure gdk_toplevel_inhibit_system_shortcuts(toplevel: PGdkToplevel; event: PGdkEvent); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_toplevel_inhibit_system_shortcuts'{$endif};
procedure gdk_toplevel_layout_set_fullscreen(layout: PGdkToplevelLayout; fullscreen: gboolean; monitor: PGdkMonitor); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_toplevel_layout_set_fullscreen'{$endif};
procedure gdk_toplevel_layout_set_maximized(layout: PGdkToplevelLayout; maximized: gboolean); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_toplevel_layout_set_maximized'{$endif};
procedure gdk_toplevel_layout_set_resizable(layout: PGdkToplevelLayout; resizable: gboolean); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_toplevel_layout_set_resizable'{$endif};
procedure gdk_toplevel_layout_unref(layout: PGdkToplevelLayout); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_toplevel_layout_unref'{$endif};
procedure gdk_toplevel_present(toplevel: PGdkToplevel; layout: PGdkToplevelLayout); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_toplevel_present'{$endif};
procedure gdk_toplevel_restore_system_shortcuts(toplevel: PGdkToplevel); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_toplevel_restore_system_shortcuts'{$endif};
procedure gdk_toplevel_set_decorated(toplevel: PGdkToplevel; decorated: gboolean); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_toplevel_set_decorated'{$endif};
procedure gdk_toplevel_set_deletable(toplevel: PGdkToplevel; deletable: gboolean); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_toplevel_set_deletable'{$endif};
procedure gdk_toplevel_set_icon_list(toplevel: PGdkToplevel; surfaces: PGList); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_toplevel_set_icon_list'{$endif};
procedure gdk_toplevel_set_modal(toplevel: PGdkToplevel; modal: gboolean); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_toplevel_set_modal'{$endif};
procedure gdk_toplevel_set_startup_id(toplevel: PGdkToplevel; startup_id: Pgchar); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_toplevel_set_startup_id'{$endif};
procedure gdk_toplevel_set_title(toplevel: PGdkToplevel; title: Pgchar); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_toplevel_set_title'{$endif};
procedure gdk_toplevel_set_transient_for(toplevel: PGdkToplevel; parent: PGdkSurface); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_toplevel_set_transient_for'{$endif};
procedure gdk_toplevel_size_get_bounds(size: PGdkToplevelSize; bounds_width: Pgint; bounds_height: Pgint); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_toplevel_size_get_bounds'{$endif};
procedure gdk_toplevel_size_set_min_size(size: PGdkToplevelSize; min_width: gint; min_height: gint); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_toplevel_size_set_min_size'{$endif};
procedure gdk_toplevel_size_set_shadow_width(size: PGdkToplevelSize; left: gint; right: gint; top: gint; bottom: gint); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_toplevel_size_set_shadow_width'{$endif};
procedure gdk_toplevel_size_set_size(size: PGdkToplevelSize; width: gint; height: gint); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_toplevel_size_set_size'{$endif};
procedure gdk_touchpad_event_get_deltas(event: PGdkTouchpadEvent; dx: Pgdouble; dy: Pgdouble); cdecl; external {$ifdef Mswindows}Gdk4_library  name 'gdk_touchpad_event_get_deltas'{$endif};
implementation
function TGdkDisplay.get_default: PGdkDisplay; cdecl;
begin
  Result := Gdk4.gdk_display_get_default();
end;

function TGdkDisplay.open(display_name: Pgchar): PGdkDisplay; cdecl;
begin
  Result := Gdk4.gdk_display_open(display_name);
end;

procedure TGdkDisplay.beep; cdecl;
begin
  Gdk4.gdk_display_beep(@self);
end;

procedure TGdkDisplay.close; cdecl;
begin
  Gdk4.gdk_display_close(@self);
end;

function TGdkDisplay.create_gl_context(error: PPGError): PGdkGLContext; cdecl;
begin
  Result := Gdk4.gdk_display_create_gl_context(@self, error);
end;

function TGdkDisplay.device_is_grabbed(device: PGdkDevice): gboolean; cdecl;
begin
  Result := Gdk4.gdk_display_device_is_grabbed(@self, device);
end;

procedure TGdkDisplay.flush; cdecl;
begin
  Gdk4.gdk_display_flush(@self);
end;

function TGdkDisplay.get_app_launch_context: PGdkAppLaunchContext; cdecl;
begin
  Result := Gdk4.gdk_display_get_app_launch_context(@self);
end;

function TGdkDisplay.get_clipboard: PGdkClipboard; cdecl;
begin
  Result := Gdk4.gdk_display_get_clipboard(@self);
end;

function TGdkDisplay.get_default_seat: PGdkSeat; cdecl;
begin
  Result := Gdk4.gdk_display_get_default_seat(@self);
end;

function TGdkDisplay.get_monitor_at_surface(surface: PGdkSurface): PGdkMonitor; cdecl;
begin
  Result := Gdk4.gdk_display_get_monitor_at_surface(@self, surface);
end;

function TGdkDisplay.get_monitors: PGListModel; cdecl;
begin
  Result := Gdk4.gdk_display_get_monitors(@self);
end;

function TGdkDisplay.get_name: Pgchar; cdecl;
begin
  Result := Gdk4.gdk_display_get_name(@self);
end;

function TGdkDisplay.get_primary_clipboard: PGdkClipboard; cdecl;
begin
  Result := Gdk4.gdk_display_get_primary_clipboard(@self);
end;

function TGdkDisplay.get_setting(name: Pgchar; value: PGValue): gboolean; cdecl;
begin
  Result := Gdk4.gdk_display_get_setting(@self, name, value);
end;

function TGdkDisplay.get_startup_notification_id: Pgchar; cdecl;
begin
  Result := Gdk4.gdk_display_get_startup_notification_id(@self);
end;

function TGdkDisplay.is_closed: gboolean; cdecl;
begin
  Result := Gdk4.gdk_display_is_closed(@self);
end;

function TGdkDisplay.is_composited: gboolean; cdecl;
begin
  Result := Gdk4.gdk_display_is_composited(@self);
end;

function TGdkDisplay.is_rgba: gboolean; cdecl;
begin
  Result := Gdk4.gdk_display_is_rgba(@self);
end;

function TGdkDisplay.list_seats: PGList; cdecl;
begin
  Result := Gdk4.gdk_display_list_seats(@self);
end;

function TGdkDisplay.map_keycode(keycode: guint; keys: PPGdkKeymapKey; keyvals: PPguint; n_entries: Pgint): gboolean; cdecl;
begin
  Result := Gdk4.gdk_display_map_keycode(@self, keycode, keys, keyvals, n_entries);
end;

function TGdkDisplay.map_keyval(keyval: guint; keys: PPGdkKeymapKey; n_keys: Pgint): gboolean; cdecl;
begin
  Result := Gdk4.gdk_display_map_keyval(@self, keyval, keys, n_keys);
end;

procedure TGdkDisplay.notify_startup_complete(startup_id: Pgchar); cdecl;
begin
  Gdk4.gdk_display_notify_startup_complete(@self, startup_id);
end;

function TGdkDisplay.prepare_gl(error: PPGError): gboolean; cdecl;
begin
  Result := Gdk4.gdk_display_prepare_gl(@self, error);
end;

procedure TGdkDisplay.put_event(event: PGdkEvent); cdecl;
begin
  Gdk4.gdk_display_put_event(@self, event);
end;

function TGdkDisplay.supports_input_shapes: gboolean; cdecl;
begin
  Result := Gdk4.gdk_display_supports_input_shapes(@self);
end;

procedure TGdkDisplay.sync; cdecl;
begin
  Gdk4.gdk_display_sync(@self);
end;

function TGdkDisplay.translate_key(keycode: guint; state: TGdkModifierType; group: gint; keyval: Pguint; effective_group: Pgint; level: Pgint; consumed: PGdkModifierType): gboolean; cdecl;
begin
  Result := Gdk4.gdk_display_translate_key(@self, keycode, state, group, keyval, effective_group, level, consumed);
end;

function TGdkAppLaunchContext.get_display: PGdkDisplay; cdecl;
begin
  Result := Gdk4.gdk_app_launch_context_get_display(@self);
end;

procedure TGdkAppLaunchContext.set_desktop(desktop: gint); cdecl;
begin
  Gdk4.gdk_app_launch_context_set_desktop(@self, desktop);
end;

procedure TGdkAppLaunchContext.set_icon(icon: PGIcon); cdecl;
begin
  Gdk4.gdk_app_launch_context_set_icon(@self, icon);
end;

procedure TGdkAppLaunchContext.set_icon_name(icon_name: Pgchar); cdecl;
begin
  Gdk4.gdk_app_launch_context_set_icon_name(@self, icon_name);
end;

procedure TGdkAppLaunchContext.set_timestamp(timestamp: guint32); cdecl;
begin
  Gdk4.gdk_app_launch_context_set_timestamp(@self, timestamp);
end;

function TGdkButtonEvent.get_button: guint; cdecl;
begin
  Result := Gdk4.gdk_button_event_get_button(@self);
end;

function TGdkCairoContext.cairo_create: Pcairo_t; cdecl;
begin
  Result := Gdk4.gdk_cairo_context_cairo_create(@self);
end;

function TGdkContentProvider.new_for_bytes(mime_type: Pgchar; bytes: PGBytes): PGdkContentProvider; cdecl;
begin
  Result := Gdk4.gdk_content_provider_new_for_bytes(mime_type, bytes);
end;

function TGdkContentProvider.new_for_value(value: PGValue): PGdkContentProvider; cdecl;
begin
  Result := Gdk4.gdk_content_provider_new_for_value(value);
end;

function TGdkContentProvider.new_union(providers: PPGdkContentProvider; n_providers: gsize): PGdkContentProvider; cdecl;
begin
  Result := Gdk4.gdk_content_provider_new_union(providers, n_providers);
end;

procedure TGdkContentProvider.content_changed; cdecl;
begin
  Gdk4.gdk_content_provider_content_changed(@self);
end;

function TGdkContentProvider.get_value(value: PGValue; error: PPGError): gboolean; cdecl;
begin
  Result := Gdk4.gdk_content_provider_get_value(@self, value, error);
end;

function TGdkContentProvider.ref_formats: PGdkContentFormats; cdecl;
begin
  Result := Gdk4.gdk_content_provider_ref_formats(@self);
end;

function TGdkContentProvider.ref_storable_formats: PGdkContentFormats; cdecl;
begin
  Result := Gdk4.gdk_content_provider_ref_storable_formats(@self);
end;

procedure TGdkContentProvider.write_mime_type_async(mime_type: Pgchar; stream: PGOutputStream; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
begin
  Gdk4.gdk_content_provider_write_mime_type_async(@self, mime_type, stream, io_priority, cancellable, callback, user_data);
end;

function TGdkContentProvider.write_mime_type_finish(result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
begin
  Result := Gdk4.gdk_content_provider_write_mime_type_finish(@self, result_, error);
end;

function TGdkClipboard.get_content: PGdkContentProvider; cdecl;
begin
  Result := Gdk4.gdk_clipboard_get_content(@self);
end;

function TGdkClipboard.get_display: PGdkDisplay; cdecl;
begin
  Result := Gdk4.gdk_clipboard_get_display(@self);
end;

function TGdkClipboard.get_formats: PGdkContentFormats; cdecl;
begin
  Result := Gdk4.gdk_clipboard_get_formats(@self);
end;

function TGdkClipboard.is_local: gboolean; cdecl;
begin
  Result := Gdk4.gdk_clipboard_is_local(@self);
end;

procedure TGdkClipboard.read_async(mime_types: PPgchar; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
begin
  Gdk4.gdk_clipboard_read_async(@self, mime_types, io_priority, cancellable, callback, user_data);
end;

function TGdkClipboard.read_finish(result_: PGAsyncResult; out_mime_type: PPgchar; error: PPGError): PGInputStream; cdecl;
begin
  Result := Gdk4.gdk_clipboard_read_finish(@self, result_, out_mime_type, error);
end;

procedure TGdkClipboard.read_text_async(cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
begin
  Gdk4.gdk_clipboard_read_text_async(@self, cancellable, callback, user_data);
end;

function TGdkClipboard.read_text_finish(result_: PGAsyncResult; error: PPGError): Pgchar; cdecl;
begin
  Result := Gdk4.gdk_clipboard_read_text_finish(@self, result_, error);
end;

procedure TGdkClipboard.read_texture_async(cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
begin
  Gdk4.gdk_clipboard_read_texture_async(@self, cancellable, callback, user_data);
end;

function TGdkClipboard.read_texture_finish(result_: PGAsyncResult; error: PPGError): PGdkTexture; cdecl;
begin
  Result := Gdk4.gdk_clipboard_read_texture_finish(@self, result_, error);
end;

procedure TGdkClipboard.read_value_async(type_: TGType; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
begin
  Gdk4.gdk_clipboard_read_value_async(@self, type_, io_priority, cancellable, callback, user_data);
end;

function TGdkClipboard.read_value_finish(result_: PGAsyncResult; error: PPGError): PGValue; cdecl;
begin
  Result := Gdk4.gdk_clipboard_read_value_finish(@self, result_, error);
end;

function TGdkClipboard.set_content(provider: PGdkContentProvider): gboolean; cdecl;
begin
  Result := Gdk4.gdk_clipboard_set_content(@self, provider);
end;

procedure TGdkClipboard.set_text(text: Pgchar); cdecl;
begin
  Gdk4.gdk_clipboard_set_text(@self, text);
end;

procedure TGdkClipboard.set_texture(texture: PGdkTexture); cdecl;
begin
  Gdk4.gdk_clipboard_set_texture(@self, texture);
end;

procedure TGdkClipboard.set_value(value: PGValue); cdecl;
begin
  Gdk4.gdk_clipboard_set_value(@self, value);
end;

procedure TGdkClipboard.store_async(io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
begin
  Gdk4.gdk_clipboard_store_async(@self, io_priority, cancellable, callback, user_data);
end;

function TGdkClipboard.store_finish(result_: PGAsyncResult; error: PPGError): gboolean; cdecl;
begin
  Result := Gdk4.gdk_clipboard_store_finish(@self, result_, error);
end;

function TGdkContentFormats.new(mime_types: PPgchar; n_mime_types: guint): PGdkContentFormats; cdecl;
begin
  Result := Gdk4.gdk_content_formats_new(mime_types, n_mime_types);
end;

function TGdkContentFormats.new_for_gtype(type_: TGType): PGdkContentFormats; cdecl;
begin
  Result := Gdk4.gdk_content_formats_new_for_gtype(type_);
end;

function TGdkContentFormats.contain_gtype(type_: TGType): gboolean; cdecl;
begin
  Result := Gdk4.gdk_content_formats_contain_gtype(@self, type_);
end;

function TGdkContentFormats.contain_mime_type(mime_type: Pgchar): gboolean; cdecl;
begin
  Result := Gdk4.gdk_content_formats_contain_mime_type(@self, mime_type);
end;

function TGdkContentFormats.get_gtypes(n_gtypes: Pgsize): PGType; cdecl;
begin
  Result := Gdk4.gdk_content_formats_get_gtypes(@self, n_gtypes);
end;

function TGdkContentFormats.get_mime_types(n_mime_types: Pgsize): PPgchar; cdecl;
begin
  Result := Gdk4.gdk_content_formats_get_mime_types(@self, n_mime_types);
end;

function TGdkContentFormats.match(second: PGdkContentFormats): gboolean; cdecl;
begin
  Result := Gdk4.gdk_content_formats_match(@self, second);
end;

function TGdkContentFormats.match_gtype(second: PGdkContentFormats): TGType; cdecl;
begin
  Result := Gdk4.gdk_content_formats_match_gtype(@self, second);
end;

function TGdkContentFormats.match_mime_type(second: PGdkContentFormats): Pgchar; cdecl;
begin
  Result := Gdk4.gdk_content_formats_match_mime_type(@self, second);
end;

procedure TGdkContentFormats.print(string_: PGString); cdecl;
begin
  Gdk4.gdk_content_formats_print(@self, string_);
end;

function TGdkContentFormats.ref: PGdkContentFormats; cdecl;
begin
  Result := Gdk4.gdk_content_formats_ref(@self);
end;

function TGdkContentFormats.to_string: Pgchar; cdecl;
begin
  Result := Gdk4.gdk_content_formats_to_string(@self);
end;

function TGdkContentFormats.union(second: PGdkContentFormats): PGdkContentFormats; cdecl;
begin
  Result := Gdk4.gdk_content_formats_union(@self, second);
end;

function TGdkContentFormats.union_deserialize_gtypes: PGdkContentFormats; cdecl;
begin
  Result := Gdk4.gdk_content_formats_union_deserialize_gtypes(@self);
end;

function TGdkContentFormats.union_deserialize_mime_types: PGdkContentFormats; cdecl;
begin
  Result := Gdk4.gdk_content_formats_union_deserialize_mime_types(@self);
end;

function TGdkContentFormats.union_serialize_gtypes: PGdkContentFormats; cdecl;
begin
  Result := Gdk4.gdk_content_formats_union_serialize_gtypes(@self);
end;

function TGdkContentFormats.union_serialize_mime_types: PGdkContentFormats; cdecl;
begin
  Result := Gdk4.gdk_content_formats_union_serialize_mime_types(@self);
end;

procedure TGdkContentFormats.unref; cdecl;
begin
  Gdk4.gdk_content_formats_unref(@self);
end;

function TGdkContentFormats.parse(string_: Pgchar): PGdkContentFormats; cdecl;
begin
  Result := Gdk4.gdk_content_formats_parse(string_);
end;

function TGdkTexture.new_for_pixbuf(pixbuf: PGdkPixbuf): PGdkTexture; cdecl;
begin
  Result := Gdk4.gdk_texture_new_for_pixbuf(pixbuf);
end;

function TGdkTexture.new_from_bytes(bytes: PGBytes; error: PPGError): PGdkTexture; cdecl;
begin
  Result := Gdk4.gdk_texture_new_from_bytes(bytes, error);
end;

function TGdkTexture.new_from_file(file_: PGFile; error: PPGError): PGdkTexture; cdecl;
begin
  Result := Gdk4.gdk_texture_new_from_file(file_, error);
end;

function TGdkTexture.new_from_filename(path: Pgchar; error: PPGError): PGdkTexture; cdecl;
begin
  Result := Gdk4.gdk_texture_new_from_filename(path, error);
end;

function TGdkTexture.new_from_resource(resource_path: Pgchar): PGdkTexture; cdecl;
begin
  Result := Gdk4.gdk_texture_new_from_resource(resource_path);
end;

procedure TGdkTexture.download(data: Pguint8; stride: gsize); cdecl;
begin
  Gdk4.gdk_texture_download(@self, data, stride);
end;

function TGdkTexture.get_height: gint; cdecl;
begin
  Result := Gdk4.gdk_texture_get_height(@self);
end;

function TGdkTexture.get_width: gint; cdecl;
begin
  Result := Gdk4.gdk_texture_get_width(@self);
end;

function TGdkTexture.save_to_png(filename: Pgchar): gboolean; cdecl;
begin
  Result := Gdk4.gdk_texture_save_to_png(@self, filename);
end;

function TGdkTexture.save_to_png_bytes: PGBytes; cdecl;
begin
  Result := Gdk4.gdk_texture_save_to_png_bytes(@self);
end;

function TGdkTexture.save_to_tiff(filename: Pgchar): gboolean; cdecl;
begin
  Result := Gdk4.gdk_texture_save_to_tiff(@self, filename);
end;

function TGdkTexture.save_to_tiff_bytes: PGBytes; cdecl;
begin
  Result := Gdk4.gdk_texture_save_to_tiff_bytes(@self);
end;

function TGdkContentDeserializer.get_cancellable: PGCancellable; cdecl;
begin
  Result := Gdk4.gdk_content_deserializer_get_cancellable(@self);
end;

function TGdkContentDeserializer.get_gtype: TGType; cdecl;
begin
  Result := Gdk4.gdk_content_deserializer_get_gtype(@self);
end;

function TGdkContentDeserializer.get_input_stream: PGInputStream; cdecl;
begin
  Result := Gdk4.gdk_content_deserializer_get_input_stream(@self);
end;

function TGdkContentDeserializer.get_mime_type: Pgchar; cdecl;
begin
  Result := Gdk4.gdk_content_deserializer_get_mime_type(@self);
end;

function TGdkContentDeserializer.get_priority: gint; cdecl;
begin
  Result := Gdk4.gdk_content_deserializer_get_priority(@self);
end;

function TGdkContentDeserializer.get_task_data: gpointer; cdecl;
begin
  Result := Gdk4.gdk_content_deserializer_get_task_data(@self);
end;

function TGdkContentDeserializer.get_user_data: gpointer; cdecl;
begin
  Result := Gdk4.gdk_content_deserializer_get_user_data(@self);
end;

function TGdkContentDeserializer.get_value: PGValue; cdecl;
begin
  Result := Gdk4.gdk_content_deserializer_get_value(@self);
end;

procedure TGdkContentDeserializer.return_error(error: PGError); cdecl;
begin
  Gdk4.gdk_content_deserializer_return_error(@self, error);
end;

procedure TGdkContentDeserializer.return_success; cdecl;
begin
  Gdk4.gdk_content_deserializer_return_success(@self);
end;

procedure TGdkContentDeserializer.set_task_data(data: gpointer; notify: TGDestroyNotify); cdecl;
begin
  Gdk4.gdk_content_deserializer_set_task_data(@self, data, notify);
end;

function TGdkContentFormatsBuilder.new: PGdkContentFormatsBuilder; cdecl;
begin
  Result := Gdk4.gdk_content_formats_builder_new();
end;

procedure TGdkContentFormatsBuilder.add_formats(formats: PGdkContentFormats); cdecl;
begin
  Gdk4.gdk_content_formats_builder_add_formats(@self, formats);
end;

procedure TGdkContentFormatsBuilder.add_gtype(type_: TGType); cdecl;
begin
  Gdk4.gdk_content_formats_builder_add_gtype(@self, type_);
end;

procedure TGdkContentFormatsBuilder.add_mime_type(mime_type: Pgchar); cdecl;
begin
  Gdk4.gdk_content_formats_builder_add_mime_type(@self, mime_type);
end;

function TGdkContentFormatsBuilder.free_to_formats: PGdkContentFormats; cdecl;
begin
  Result := Gdk4.gdk_content_formats_builder_free_to_formats(@self);
end;

function TGdkContentFormatsBuilder.ref: PGdkContentFormatsBuilder; cdecl;
begin
  Result := Gdk4.gdk_content_formats_builder_ref(@self);
end;

function TGdkContentFormatsBuilder.to_formats: PGdkContentFormats; cdecl;
begin
  Result := Gdk4.gdk_content_formats_builder_to_formats(@self);
end;

procedure TGdkContentFormatsBuilder.unref; cdecl;
begin
  Gdk4.gdk_content_formats_builder_unref(@self);
end;

function TGdkContentSerializer.get_cancellable: PGCancellable; cdecl;
begin
  Result := Gdk4.gdk_content_serializer_get_cancellable(@self);
end;

function TGdkContentSerializer.get_gtype: TGType; cdecl;
begin
  Result := Gdk4.gdk_content_serializer_get_gtype(@self);
end;

function TGdkContentSerializer.get_mime_type: Pgchar; cdecl;
begin
  Result := Gdk4.gdk_content_serializer_get_mime_type(@self);
end;

function TGdkContentSerializer.get_output_stream: PGOutputStream; cdecl;
begin
  Result := Gdk4.gdk_content_serializer_get_output_stream(@self);
end;

function TGdkContentSerializer.get_priority: gint; cdecl;
begin
  Result := Gdk4.gdk_content_serializer_get_priority(@self);
end;

function TGdkContentSerializer.get_task_data: gpointer; cdecl;
begin
  Result := Gdk4.gdk_content_serializer_get_task_data(@self);
end;

function TGdkContentSerializer.get_user_data: gpointer; cdecl;
begin
  Result := Gdk4.gdk_content_serializer_get_user_data(@self);
end;

function TGdkContentSerializer.get_value: PGValue; cdecl;
begin
  Result := Gdk4.gdk_content_serializer_get_value(@self);
end;

procedure TGdkContentSerializer.return_error(error: PGError); cdecl;
begin
  Gdk4.gdk_content_serializer_return_error(@self, error);
end;

procedure TGdkContentSerializer.return_success; cdecl;
begin
  Gdk4.gdk_content_serializer_return_success(@self);
end;

procedure TGdkContentSerializer.set_task_data(data: gpointer; notify: TGDestroyNotify); cdecl;
begin
  Gdk4.gdk_content_serializer_set_task_data(@self, data, notify);
end;

function TGdkCrossingEvent.get_detail: TGdkNotifyType; cdecl;
begin
  Result := Gdk4.gdk_crossing_event_get_detail(@self);
end;

function TGdkCrossingEvent.get_focus: gboolean; cdecl;
begin
  Result := Gdk4.gdk_crossing_event_get_focus(@self);
end;

function TGdkCrossingEvent.get_mode: TGdkCrossingMode; cdecl;
begin
  Result := Gdk4.gdk_crossing_event_get_mode(@self);
end;

function TGdkCursor.new_from_name(name: Pgchar; fallback: PGdkCursor): PGdkCursor; cdecl;
begin
  Result := Gdk4.gdk_cursor_new_from_name(name, fallback);
end;

function TGdkCursor.new_from_texture(texture: PGdkTexture; hotspot_x: gint; hotspot_y: gint; fallback: PGdkCursor): PGdkCursor; cdecl;
begin
  Result := Gdk4.gdk_cursor_new_from_texture(texture, hotspot_x, hotspot_y, fallback);
end;

function TGdkCursor.get_fallback: PGdkCursor; cdecl;
begin
  Result := Gdk4.gdk_cursor_get_fallback(@self);
end;

function TGdkCursor.get_hotspot_x: gint; cdecl;
begin
  Result := Gdk4.gdk_cursor_get_hotspot_x(@self);
end;

function TGdkCursor.get_hotspot_y: gint; cdecl;
begin
  Result := Gdk4.gdk_cursor_get_hotspot_y(@self);
end;

function TGdkCursor.get_name: Pgchar; cdecl;
begin
  Result := Gdk4.gdk_cursor_get_name(@self);
end;

function TGdkCursor.get_texture: PGdkTexture; cdecl;
begin
  Result := Gdk4.gdk_cursor_get_texture(@self);
end;

procedure TGdkDrop.finish(action: TGdkDragAction); cdecl;
begin
  Gdk4.gdk_drop_finish(@self, action);
end;

function TGdkDrop.get_actions: TGdkDragAction; cdecl;
begin
  Result := Gdk4.gdk_drop_get_actions(@self);
end;

function TGdkDrop.get_device: PGdkDevice; cdecl;
begin
  Result := Gdk4.gdk_drop_get_device(@self);
end;

function TGdkDrop.get_display: PGdkDisplay; cdecl;
begin
  Result := Gdk4.gdk_drop_get_display(@self);
end;

function TGdkDrop.get_drag: PGdkDrag; cdecl;
begin
  Result := Gdk4.gdk_drop_get_drag(@self);
end;

function TGdkDrop.get_formats: PGdkContentFormats; cdecl;
begin
  Result := Gdk4.gdk_drop_get_formats(@self);
end;

function TGdkDrop.get_surface: PGdkSurface; cdecl;
begin
  Result := Gdk4.gdk_drop_get_surface(@self);
end;

procedure TGdkDrop.read_async(mime_types: PPgchar; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
begin
  Gdk4.gdk_drop_read_async(@self, mime_types, io_priority, cancellable, callback, user_data);
end;

function TGdkDrop.read_finish(result_: PGAsyncResult; out_mime_type: PPgchar; error: PPGError): PGInputStream; cdecl;
begin
  Result := Gdk4.gdk_drop_read_finish(@self, result_, out_mime_type, error);
end;

procedure TGdkDrop.read_value_async(type_: TGType; io_priority: gint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: gpointer); cdecl;
begin
  Gdk4.gdk_drop_read_value_async(@self, type_, io_priority, cancellable, callback, user_data);
end;

function TGdkDrop.read_value_finish(result_: PGAsyncResult; error: PPGError): PGValue; cdecl;
begin
  Result := Gdk4.gdk_drop_read_value_finish(@self, result_, error);
end;

procedure TGdkDrop.status(actions: TGdkDragAction; preferred: TGdkDragAction); cdecl;
begin
  Gdk4.gdk_drop_status(@self, actions, preferred);
end;

function TGdkDNDEvent.get_drop: PGdkDrop; cdecl;
begin
  Result := Gdk4.gdk_dnd_event_get_drop(@self);
end;

function TGdkDevice.get_caps_lock_state: gboolean; cdecl;
begin
  Result := Gdk4.gdk_device_get_caps_lock_state(@self);
end;

function TGdkDevice.get_device_tool: PGdkDeviceTool; cdecl;
begin
  Result := Gdk4.gdk_device_get_device_tool(@self);
end;

function TGdkDevice.get_direction: TPangoDirection; cdecl;
begin
  Result := Gdk4.gdk_device_get_direction(@self);
end;

function TGdkDevice.get_display: PGdkDisplay; cdecl;
begin
  Result := Gdk4.gdk_device_get_display(@self);
end;

function TGdkDevice.get_has_cursor: gboolean; cdecl;
begin
  Result := Gdk4.gdk_device_get_has_cursor(@self);
end;

function TGdkDevice.get_modifier_state: TGdkModifierType; cdecl;
begin
  Result := Gdk4.gdk_device_get_modifier_state(@self);
end;

function TGdkDevice.get_name: Pgchar; cdecl;
begin
  Result := Gdk4.gdk_device_get_name(@self);
end;

function TGdkDevice.get_num_lock_state: gboolean; cdecl;
begin
  Result := Gdk4.gdk_device_get_num_lock_state(@self);
end;

function TGdkDevice.get_num_touches: guint; cdecl;
begin
  Result := Gdk4.gdk_device_get_num_touches(@self);
end;

function TGdkDevice.get_product_id: Pgchar; cdecl;
begin
  Result := Gdk4.gdk_device_get_product_id(@self);
end;

function TGdkDevice.get_scroll_lock_state: gboolean; cdecl;
begin
  Result := Gdk4.gdk_device_get_scroll_lock_state(@self);
end;

function TGdkDevice.get_seat: PGdkSeat; cdecl;
begin
  Result := Gdk4.gdk_device_get_seat(@self);
end;

function TGdkDevice.get_source: TGdkInputSource; cdecl;
begin
  Result := Gdk4.gdk_device_get_source(@self);
end;

function TGdkDevice.get_surface_at_position(win_x: Pgdouble; win_y: Pgdouble): PGdkSurface; cdecl;
begin
  Result := Gdk4.gdk_device_get_surface_at_position(@self, win_x, win_y);
end;

function TGdkDevice.get_timestamp: guint32; cdecl;
begin
  Result := Gdk4.gdk_device_get_timestamp(@self);
end;

function TGdkDevice.get_vendor_id: Pgchar; cdecl;
begin
  Result := Gdk4.gdk_device_get_vendor_id(@self);
end;

function TGdkDevice.has_bidi_layouts: gboolean; cdecl;
begin
  Result := Gdk4.gdk_device_has_bidi_layouts(@self);
end;

function TGdkDeviceTool.get_axes: TGdkAxisFlags; cdecl;
begin
  Result := Gdk4.gdk_device_tool_get_axes(@self);
end;

function TGdkDeviceTool.get_hardware_id: guint64; cdecl;
begin
  Result := Gdk4.gdk_device_tool_get_hardware_id(@self);
end;

function TGdkDeviceTool.get_serial: guint64; cdecl;
begin
  Result := Gdk4.gdk_device_tool_get_serial(@self);
end;

function TGdkDeviceTool.get_tool_type: TGdkDeviceToolType; cdecl;
begin
  Result := Gdk4.gdk_device_tool_get_tool_type(@self);
end;

function TGdkSeat.get_capabilities: TGdkSeatCapabilities; cdecl;
begin
  Result := Gdk4.gdk_seat_get_capabilities(@self);
end;

function TGdkSeat.get_devices(capabilities: TGdkSeatCapabilities): PGList; cdecl;
begin
  Result := Gdk4.gdk_seat_get_devices(@self, capabilities);
end;

function TGdkSeat.get_display: PGdkDisplay; cdecl;
begin
  Result := Gdk4.gdk_seat_get_display(@self);
end;

function TGdkSeat.get_keyboard: PGdkDevice; cdecl;
begin
  Result := Gdk4.gdk_seat_get_keyboard(@self);
end;

function TGdkSeat.get_pointer: PGdkDevice; cdecl;
begin
  Result := Gdk4.gdk_seat_get_pointer(@self);
end;

function TGdkSeat.get_tools: PGList; cdecl;
begin
  Result := Gdk4.gdk_seat_get_tools(@self);
end;

function TGdkSurface.new_popup(parent: PGdkSurface; autohide: gboolean): PGdkSurface; cdecl;
begin
  Result := Gdk4.gdk_surface_new_popup(parent, autohide);
end;

function TGdkSurface.new_toplevel(display: PGdkDisplay): PGdkSurface; cdecl;
begin
  Result := Gdk4.gdk_surface_new_toplevel(display);
end;

procedure TGdkSurface.beep; cdecl;
begin
  Gdk4.gdk_surface_beep(@self);
end;

function TGdkSurface.create_cairo_context: PGdkCairoContext; cdecl;
begin
  Result := Gdk4.gdk_surface_create_cairo_context(@self);
end;

function TGdkSurface.create_gl_context(error: PPGError): PGdkGLContext; cdecl;
begin
  Result := Gdk4.gdk_surface_create_gl_context(@self, error);
end;

function TGdkSurface.create_similar_surface(content: Tcairo_content_t; width: gint; height: gint): Pcairo_surface_t; cdecl;
begin
  Result := Gdk4.gdk_surface_create_similar_surface(@self, content, width, height);
end;

function TGdkSurface.create_vulkan_context(error: PPGError): PGdkVulkanContext; cdecl;
begin
  Result := Gdk4.gdk_surface_create_vulkan_context(@self, error);
end;

procedure TGdkSurface.destroy_; cdecl;
begin
  Gdk4.gdk_surface_destroy(@self);
end;

function TGdkSurface.get_cursor: PGdkCursor; cdecl;
begin
  Result := Gdk4.gdk_surface_get_cursor(@self);
end;

function TGdkSurface.get_device_cursor(device: PGdkDevice): PGdkCursor; cdecl;
begin
  Result := Gdk4.gdk_surface_get_device_cursor(@self, device);
end;

function TGdkSurface.get_device_position(device: PGdkDevice; x: Pgdouble; y: Pgdouble; mask: PGdkModifierType): gboolean; cdecl;
begin
  Result := Gdk4.gdk_surface_get_device_position(@self, device, x, y, mask);
end;

function TGdkSurface.get_display: PGdkDisplay; cdecl;
begin
  Result := Gdk4.gdk_surface_get_display(@self);
end;

function TGdkSurface.get_frame_clock: PGdkFrameClock; cdecl;
begin
  Result := Gdk4.gdk_surface_get_frame_clock(@self);
end;

function TGdkSurface.get_height: gint; cdecl;
begin
  Result := Gdk4.gdk_surface_get_height(@self);
end;

function TGdkSurface.get_mapped: gboolean; cdecl;
begin
  Result := Gdk4.gdk_surface_get_mapped(@self);
end;

function TGdkSurface.get_scale_factor: gint; cdecl;
begin
  Result := Gdk4.gdk_surface_get_scale_factor(@self);
end;

function TGdkSurface.get_width: gint; cdecl;
begin
  Result := Gdk4.gdk_surface_get_width(@self);
end;

procedure TGdkSurface.hide; cdecl;
begin
  Gdk4.gdk_surface_hide(@self);
end;

function TGdkSurface.is_destroyed: gboolean; cdecl;
begin
  Result := Gdk4.gdk_surface_is_destroyed(@self);
end;

procedure TGdkSurface.queue_render; cdecl;
begin
  Gdk4.gdk_surface_queue_render(@self);
end;

procedure TGdkSurface.request_layout; cdecl;
begin
  Gdk4.gdk_surface_request_layout(@self);
end;

procedure TGdkSurface.set_cursor(cursor: PGdkCursor); cdecl;
begin
  Gdk4.gdk_surface_set_cursor(@self, cursor);
end;

procedure TGdkSurface.set_device_cursor(device: PGdkDevice; cursor: PGdkCursor); cdecl;
begin
  Gdk4.gdk_surface_set_device_cursor(@self, device, cursor);
end;

procedure TGdkSurface.set_input_region(region: Pcairo_region_t); cdecl;
begin
  Gdk4.gdk_surface_set_input_region(@self, region);
end;

procedure TGdkSurface.set_opaque_region(region: Pcairo_region_t); cdecl;
begin
  Gdk4.gdk_surface_set_opaque_region(@self, region);
end;

function TGdkSurface.translate_coordinates(to_: PGdkSurface; x: Pgdouble; y: Pgdouble): gboolean; cdecl;
begin
  Result := Gdk4.gdk_surface_translate_coordinates(@self, to_, x, y);
end;

function TGdkDevicePad.get_feature_group(feature: TGdkDevicePadFeature; feature_idx: gint): gint; cdecl;
begin
  Result := Gdk4.gdk_device_pad_get_feature_group(@self, feature, feature_idx);
end;

function TGdkDevicePad.get_group_n_modes(group_idx: gint): gint; cdecl;
begin
  Result := Gdk4.gdk_device_pad_get_group_n_modes(@self, group_idx);
end;

function TGdkDevicePad.get_n_features(feature: TGdkDevicePadFeature): gint; cdecl;
begin
  Result := Gdk4.gdk_device_pad_get_n_features(@self, feature);
end;

function TGdkDevicePad.get_n_groups: gint; cdecl;
begin
  Result := Gdk4.gdk_device_pad_get_n_groups(@self);
end;

procedure TGdkDrawContext.begin_frame(region: Pcairo_region_t); cdecl;
begin
  Gdk4.gdk_draw_context_begin_frame(@self, region);
end;

procedure TGdkDrawContext.end_frame; cdecl;
begin
  Gdk4.gdk_draw_context_end_frame(@self);
end;

function TGdkDrawContext.get_display: PGdkDisplay; cdecl;
begin
  Result := Gdk4.gdk_draw_context_get_display(@self);
end;

function TGdkDrawContext.get_frame_region: Pcairo_region_t; cdecl;
begin
  Result := Gdk4.gdk_draw_context_get_frame_region(@self);
end;

function TGdkDrawContext.get_surface: PGdkSurface; cdecl;
begin
  Result := Gdk4.gdk_draw_context_get_surface(@self);
end;

function TGdkDrawContext.is_in_frame: gboolean; cdecl;
begin
  Result := Gdk4.gdk_draw_context_is_in_frame(@self);
end;

procedure TGdkGLContext.clear_current; cdecl;
begin
  Gdk4.gdk_gl_context_clear_current();
end;

function TGdkGLContext.get_current: PGdkGLContext; cdecl;
begin
  Result := Gdk4.gdk_gl_context_get_current();
end;

function TGdkGLContext.get_allowed_apis: TGdkGLAPI; cdecl;
begin
  Result := Gdk4.gdk_gl_context_get_allowed_apis(@self);
end;

function TGdkGLContext.get_api: TGdkGLAPI; cdecl;
begin
  Result := Gdk4.gdk_gl_context_get_api(@self);
end;

function TGdkGLContext.get_debug_enabled: gboolean; cdecl;
begin
  Result := Gdk4.gdk_gl_context_get_debug_enabled(@self);
end;

function TGdkGLContext.get_display: PGdkDisplay; cdecl;
begin
  Result := Gdk4.gdk_gl_context_get_display(@self);
end;

function TGdkGLContext.get_forward_compatible: gboolean; cdecl;
begin
  Result := Gdk4.gdk_gl_context_get_forward_compatible(@self);
end;

procedure TGdkGLContext.get_required_version(major: Pgint; minor: Pgint); cdecl;
begin
  Gdk4.gdk_gl_context_get_required_version(@self, major, minor);
end;

function TGdkGLContext.get_surface: PGdkSurface; cdecl;
begin
  Result := Gdk4.gdk_gl_context_get_surface(@self);
end;

function TGdkGLContext.get_use_es: gboolean; cdecl;
begin
  Result := Gdk4.gdk_gl_context_get_use_es(@self);
end;

procedure TGdkGLContext.get_version(major: Pgint; minor: Pgint); cdecl;
begin
  Gdk4.gdk_gl_context_get_version(@self, major, minor);
end;

function TGdkGLContext.is_legacy: gboolean; cdecl;
begin
  Result := Gdk4.gdk_gl_context_is_legacy(@self);
end;

function TGdkGLContext.is_shared(other: PGdkGLContext): gboolean; cdecl;
begin
  Result := Gdk4.gdk_gl_context_is_shared(@self, other);
end;

procedure TGdkGLContext.make_current; cdecl;
begin
  Gdk4.gdk_gl_context_make_current(@self);
end;

function TGdkGLContext.realize(error: PPGError): gboolean; cdecl;
begin
  Result := Gdk4.gdk_gl_context_realize(@self, error);
end;

procedure TGdkGLContext.set_allowed_apis(apis: TGdkGLAPI); cdecl;
begin
  Gdk4.gdk_gl_context_set_allowed_apis(@self, apis);
end;

procedure TGdkGLContext.set_debug_enabled(enabled: gboolean); cdecl;
begin
  Gdk4.gdk_gl_context_set_debug_enabled(@self, enabled);
end;

procedure TGdkGLContext.set_forward_compatible(compatible: gboolean); cdecl;
begin
  Gdk4.gdk_gl_context_set_forward_compatible(@self, compatible);
end;

procedure TGdkGLContext.set_required_version(major: gint; minor: gint); cdecl;
begin
  Gdk4.gdk_gl_context_set_required_version(@self, major, minor);
end;

procedure TGdkGLContext.set_use_es(use_es: gint); cdecl;
begin
  Gdk4.gdk_gl_context_set_use_es(@self, use_es);
end;

function TGdkMonitor.get_connector: Pgchar; cdecl;
begin
  Result := Gdk4.gdk_monitor_get_connector(@self);
end;

function TGdkMonitor.get_display: PGdkDisplay; cdecl;
begin
  Result := Gdk4.gdk_monitor_get_display(@self);
end;

procedure TGdkMonitor.get_geometry(geometry: PGdkRectangle); cdecl;
begin
  Gdk4.gdk_monitor_get_geometry(@self, geometry);
end;

function TGdkMonitor.get_height_mm: gint; cdecl;
begin
  Result := Gdk4.gdk_monitor_get_height_mm(@self);
end;

function TGdkMonitor.get_manufacturer: Pgchar; cdecl;
begin
  Result := Gdk4.gdk_monitor_get_manufacturer(@self);
end;

function TGdkMonitor.get_model: Pgchar; cdecl;
begin
  Result := Gdk4.gdk_monitor_get_model(@self);
end;

function TGdkMonitor.get_refresh_rate: gint; cdecl;
begin
  Result := Gdk4.gdk_monitor_get_refresh_rate(@self);
end;

function TGdkMonitor.get_scale_factor: gint; cdecl;
begin
  Result := Gdk4.gdk_monitor_get_scale_factor(@self);
end;

function TGdkMonitor.get_subpixel_layout: TGdkSubpixelLayout; cdecl;
begin
  Result := Gdk4.gdk_monitor_get_subpixel_layout(@self);
end;

function TGdkMonitor.get_width_mm: gint; cdecl;
begin
  Result := Gdk4.gdk_monitor_get_width_mm(@self);
end;

function TGdkMonitor.is_valid: gboolean; cdecl;
begin
  Result := Gdk4.gdk_monitor_is_valid(@self);
end;

function TGdkEvent._get_angle(event2: PGdkEvent; angle: Pgdouble): gboolean; cdecl;
begin
  Result := Gdk4.gdk_events_get_angle(@self, event2, angle);
end;

function TGdkEvent._get_center(event2: PGdkEvent; x: Pgdouble; y: Pgdouble): gboolean; cdecl;
begin
  Result := Gdk4.gdk_events_get_center(@self, event2, x, y);
end;

function TGdkEvent._get_distance(event2: PGdkEvent; distance: Pgdouble): gboolean; cdecl;
begin
  Result := Gdk4.gdk_events_get_distance(@self, event2, distance);
end;

function TGdkEvent.get_axes(axes: PPgdouble; n_axes: Pguint): gboolean; cdecl;
begin
  Result := Gdk4.gdk_event_get_axes(@self, axes, n_axes);
end;

function TGdkEvent.get_axis(axis_use: TGdkAxisUse; value: Pgdouble): gboolean; cdecl;
begin
  Result := Gdk4.gdk_event_get_axis(@self, axis_use, value);
end;

function TGdkEvent.get_device: PGdkDevice; cdecl;
begin
  Result := Gdk4.gdk_event_get_device(@self);
end;

function TGdkEvent.get_device_tool: PGdkDeviceTool; cdecl;
begin
  Result := Gdk4.gdk_event_get_device_tool(@self);
end;

function TGdkEvent.get_display: PGdkDisplay; cdecl;
begin
  Result := Gdk4.gdk_event_get_display(@self);
end;

function TGdkEvent.get_event_sequence: PGdkEventSequence; cdecl;
begin
  Result := Gdk4.gdk_event_get_event_sequence(@self);
end;

function TGdkEvent.get_event_type: TGdkEventType; cdecl;
begin
  Result := Gdk4.gdk_event_get_event_type(@self);
end;

function TGdkEvent.get_history(out_n_coords: Pguint): PGdkTimeCoord; cdecl;
begin
  Result := Gdk4.gdk_event_get_history(@self, out_n_coords);
end;

function TGdkEvent.get_modifier_state: TGdkModifierType; cdecl;
begin
  Result := Gdk4.gdk_event_get_modifier_state(@self);
end;

function TGdkEvent.get_pointer_emulated: gboolean; cdecl;
begin
  Result := Gdk4.gdk_event_get_pointer_emulated(@self);
end;

function TGdkEvent.get_position(x: Pgdouble; y: Pgdouble): gboolean; cdecl;
begin
  Result := Gdk4.gdk_event_get_position(@self, x, y);
end;

function TGdkEvent.get_seat: PGdkSeat; cdecl;
begin
  Result := Gdk4.gdk_event_get_seat(@self);
end;

function TGdkEvent.get_surface: PGdkSurface; cdecl;
begin
  Result := Gdk4.gdk_event_get_surface(@self);
end;

function TGdkEvent.get_time: guint32; cdecl;
begin
  Result := Gdk4.gdk_event_get_time(@self);
end;

function TGdkEvent.ref: PGdkEvent; cdecl;
begin
  Result := Gdk4.gdk_event_ref(@self);
end;

function TGdkEvent.triggers_context_menu: gboolean; cdecl;
begin
  Result := Gdk4.gdk_event_triggers_context_menu(@self);
end;

procedure TGdkEvent.unref; cdecl;
begin
  Gdk4.gdk_event_unref(@self);
end;

function TGdkDisplayManager.get: PGdkDisplayManager; cdecl;
begin
  Result := Gdk4.gdk_display_manager_get();
end;

function TGdkDisplayManager.get_default_display: PGdkDisplay; cdecl;
begin
  Result := Gdk4.gdk_display_manager_get_default_display(@self);
end;

function TGdkDisplayManager.list_displays: PGSList; cdecl;
begin
  Result := Gdk4.gdk_display_manager_list_displays(@self);
end;

function TGdkDisplayManager.open_display(name: Pgchar): PGdkDisplay; cdecl;
begin
  Result := Gdk4.gdk_display_manager_open_display(@self, name);
end;

procedure TGdkDisplayManager.set_default_display(display: PGdkDisplay); cdecl;
begin
  Gdk4.gdk_display_manager_set_default_display(@self, display);
end;

function TGdkDrag.begin_(surface: PGdkSurface; device: PGdkDevice; content: PGdkContentProvider; actions: TGdkDragAction; dx: gdouble; dy: gdouble): PGdkDrag; cdecl;
begin
  Result := Gdk4.gdk_drag_begin(surface, device, content, actions, dx, dy);
end;

procedure TGdkDrag.drop_done(success: gboolean); cdecl;
begin
  Gdk4.gdk_drag_drop_done(@self, success);
end;

function TGdkDrag.get_actions: TGdkDragAction; cdecl;
begin
  Result := Gdk4.gdk_drag_get_actions(@self);
end;

function TGdkDrag.get_content: PGdkContentProvider; cdecl;
begin
  Result := Gdk4.gdk_drag_get_content(@self);
end;

function TGdkDrag.get_device: PGdkDevice; cdecl;
begin
  Result := Gdk4.gdk_drag_get_device(@self);
end;

function TGdkDrag.get_display: PGdkDisplay; cdecl;
begin
  Result := Gdk4.gdk_drag_get_display(@self);
end;

function TGdkDrag.get_drag_surface: PGdkSurface; cdecl;
begin
  Result := Gdk4.gdk_drag_get_drag_surface(@self);
end;

function TGdkDrag.get_formats: PGdkContentFormats; cdecl;
begin
  Result := Gdk4.gdk_drag_get_formats(@self);
end;

function TGdkDrag.get_selected_action: TGdkDragAction; cdecl;
begin
  Result := Gdk4.gdk_drag_get_selected_action(@self);
end;

function TGdkDrag.get_surface: PGdkSurface; cdecl;
begin
  Result := Gdk4.gdk_drag_get_surface(@self);
end;

procedure TGdkDrag.set_hotspot(hot_x: gint; hot_y: gint); cdecl;
begin
  Gdk4.gdk_drag_set_hotspot(@self, hot_x, hot_y);
end;

function TGdkDragSurface.present(width: gint; height: gint): gboolean; cdecl;
begin
  Result := Gdk4.gdk_drag_surface_present(@self, width, height);
end;

function TGdkFileList.get_files: PGSList; cdecl;
begin
  Result := Gdk4.gdk_file_list_get_files(@self);
end;

function TGdkFocusEvent.get_in: gboolean; cdecl;
begin
  Result := Gdk4.gdk_focus_event_get_in(@self);
end;

procedure TGdkFrameClock.begin_updating; cdecl;
begin
  Gdk4.gdk_frame_clock_begin_updating(@self);
end;

procedure TGdkFrameClock.end_updating; cdecl;
begin
  Gdk4.gdk_frame_clock_end_updating(@self);
end;

function TGdkFrameClock.get_current_timings: PGdkFrameTimings; cdecl;
begin
  Result := Gdk4.gdk_frame_clock_get_current_timings(@self);
end;

function TGdkFrameClock.get_fps: gdouble; cdecl;
begin
  Result := Gdk4.gdk_frame_clock_get_fps(@self);
end;

function TGdkFrameClock.get_frame_counter: gint64; cdecl;
begin
  Result := Gdk4.gdk_frame_clock_get_frame_counter(@self);
end;

function TGdkFrameClock.get_frame_time: gint64; cdecl;
begin
  Result := Gdk4.gdk_frame_clock_get_frame_time(@self);
end;

function TGdkFrameClock.get_history_start: gint64; cdecl;
begin
  Result := Gdk4.gdk_frame_clock_get_history_start(@self);
end;

procedure TGdkFrameClock.get_refresh_info(base_time: gint64; refresh_interval_return: Pgint64; presentation_time_return: Pgint64); cdecl;
begin
  Gdk4.gdk_frame_clock_get_refresh_info(@self, base_time, refresh_interval_return, presentation_time_return);
end;

function TGdkFrameClock.get_timings(frame_counter: gint64): PGdkFrameTimings; cdecl;
begin
  Result := Gdk4.gdk_frame_clock_get_timings(@self, frame_counter);
end;

procedure TGdkFrameClock.request_phase(phase: TGdkFrameClockPhase); cdecl;
begin
  Gdk4.gdk_frame_clock_request_phase(@self, phase);
end;

function TGdkFrameTimings.get_complete: gboolean; cdecl;
begin
  Result := Gdk4.gdk_frame_timings_get_complete(@self);
end;

function TGdkFrameTimings.get_frame_counter: gint64; cdecl;
begin
  Result := Gdk4.gdk_frame_timings_get_frame_counter(@self);
end;

function TGdkFrameTimings.get_frame_time: gint64; cdecl;
begin
  Result := Gdk4.gdk_frame_timings_get_frame_time(@self);
end;

function TGdkFrameTimings.get_predicted_presentation_time: gint64; cdecl;
begin
  Result := Gdk4.gdk_frame_timings_get_predicted_presentation_time(@self);
end;

function TGdkFrameTimings.get_presentation_time: gint64; cdecl;
begin
  Result := Gdk4.gdk_frame_timings_get_presentation_time(@self);
end;

function TGdkFrameTimings.get_refresh_interval: gint64; cdecl;
begin
  Result := Gdk4.gdk_frame_timings_get_refresh_interval(@self);
end;

function TGdkFrameTimings.ref: PGdkFrameTimings; cdecl;
begin
  Result := Gdk4.gdk_frame_timings_ref(@self);
end;

procedure TGdkFrameTimings.unref; cdecl;
begin
  Gdk4.gdk_frame_timings_unref(@self);
end;

function TGdkPaintable.new_empty(intrinsic_width: gint; intrinsic_height: gint): PGdkPaintable; cdecl;
begin
  Result := Gdk4.gdk_paintable_new_empty(intrinsic_width, intrinsic_height);
end;

procedure TGdkPaintable.compute_concrete_size(specified_width: gdouble; specified_height: gdouble; default_width: gdouble; default_height: gdouble; concrete_width: Pgdouble; concrete_height: Pgdouble); cdecl;
begin
  Gdk4.gdk_paintable_compute_concrete_size(@self, specified_width, specified_height, default_width, default_height, concrete_width, concrete_height);
end;

function TGdkPaintable.get_current_image: PGdkPaintable; cdecl;
begin
  Result := Gdk4.gdk_paintable_get_current_image(@self);
end;

function TGdkPaintable.get_flags: TGdkPaintableFlags; cdecl;
begin
  Result := Gdk4.gdk_paintable_get_flags(@self);
end;

function TGdkPaintable.get_intrinsic_aspect_ratio: gdouble; cdecl;
begin
  Result := Gdk4.gdk_paintable_get_intrinsic_aspect_ratio(@self);
end;

function TGdkPaintable.get_intrinsic_height: gint; cdecl;
begin
  Result := Gdk4.gdk_paintable_get_intrinsic_height(@self);
end;

function TGdkPaintable.get_intrinsic_width: gint; cdecl;
begin
  Result := Gdk4.gdk_paintable_get_intrinsic_width(@self);
end;

procedure TGdkPaintable.invalidate_contents; cdecl;
begin
  Gdk4.gdk_paintable_invalidate_contents(@self);
end;

procedure TGdkPaintable.invalidate_size; cdecl;
begin
  Gdk4.gdk_paintable_invalidate_size(@self);
end;

procedure TGdkPaintable.snapshot(snapshot: PGdkSnapshot; width: gdouble; height: gdouble); cdecl;
begin
  Gdk4.gdk_paintable_snapshot(@self, snapshot, width, height);
end;

function TGdkGLTexture.new(context: PGdkGLContext; id: guint; width: gint; height: gint; destroy_: TGDestroyNotify; data: gpointer): PGdkGLTexture; cdecl;
begin
  Result := Gdk4.gdk_gl_texture_new(context, id, width, height, destroy_, data);
end;

procedure TGdkGLTexture.release; cdecl;
begin
  Gdk4.gdk_gl_texture_release(@self);
end;

function TGdkGrabBrokenEvent.get_grab_surface: PGdkSurface; cdecl;
begin
  Result := Gdk4.gdk_grab_broken_event_get_grab_surface(@self);
end;

function TGdkGrabBrokenEvent.get_implicit: gboolean; cdecl;
begin
  Result := Gdk4.gdk_grab_broken_event_get_implicit(@self);
end;

function TGdkKeyEvent.get_consumed_modifiers: TGdkModifierType; cdecl;
begin
  Result := Gdk4.gdk_key_event_get_consumed_modifiers(@self);
end;

function TGdkKeyEvent.get_keycode: guint; cdecl;
begin
  Result := Gdk4.gdk_key_event_get_keycode(@self);
end;

function TGdkKeyEvent.get_keyval: guint; cdecl;
begin
  Result := Gdk4.gdk_key_event_get_keyval(@self);
end;

function TGdkKeyEvent.get_layout: guint; cdecl;
begin
  Result := Gdk4.gdk_key_event_get_layout(@self);
end;

function TGdkKeyEvent.get_level: guint; cdecl;
begin
  Result := Gdk4.gdk_key_event_get_level(@self);
end;

function TGdkKeyEvent.get_match(keyval: Pguint; modifiers: PGdkModifierType): gboolean; cdecl;
begin
  Result := Gdk4.gdk_key_event_get_match(@self, keyval, modifiers);
end;

function TGdkKeyEvent.is_modifier: gboolean; cdecl;
begin
  Result := Gdk4.gdk_key_event_is_modifier(@self);
end;

function TGdkKeyEvent.matches(keyval: guint; modifiers: TGdkModifierType): TGdkKeyMatch; cdecl;
begin
  Result := Gdk4.gdk_key_event_matches(@self, keyval, modifiers);
end;

function TGdkMemoryTexture.new(width: gint; height: gint; format: TGdkMemoryFormat; bytes: PGBytes; stride: gsize): PGdkMemoryTexture; cdecl;
begin
  Result := Gdk4.gdk_memory_texture_new(width, height, format, bytes, stride);
end;

function TGdkRectangle.contains_point(x: gint; y: gint): gboolean; cdecl;
begin
  Result := Gdk4.gdk_rectangle_contains_point(@self, x, y);
end;

function TGdkRectangle.equal(rect2: PGdkRectangle): gboolean; cdecl;
begin
  Result := Gdk4.gdk_rectangle_equal(@self, rect2);
end;

function TGdkRectangle.intersect(src2: PGdkRectangle; dest: PGdkRectangle): gboolean; cdecl;
begin
  Result := Gdk4.gdk_rectangle_intersect(@self, src2, dest);
end;

procedure TGdkRectangle.union(src2: PGdkRectangle; dest: PGdkRectangle); cdecl;
begin
  Gdk4.gdk_rectangle_union(@self, src2, dest);
end;

procedure TGdkPadEvent.get_axis_value(index: Pguint; value: Pgdouble); cdecl;
begin
  Gdk4.gdk_pad_event_get_axis_value(@self, index, value);
end;

function TGdkPadEvent.get_button: guint; cdecl;
begin
  Result := Gdk4.gdk_pad_event_get_button(@self);
end;

procedure TGdkPadEvent.get_group_mode(group: Pguint; mode: Pguint); cdecl;
begin
  Gdk4.gdk_pad_event_get_group_mode(@self, group, mode);
end;

function TGdkPopup.get_autohide: gboolean; cdecl;
begin
  Result := Gdk4.gdk_popup_get_autohide(@self);
end;

function TGdkPopup.get_parent: PGdkSurface; cdecl;
begin
  Result := Gdk4.gdk_popup_get_parent(@self);
end;

function TGdkPopup.get_position_x: gint; cdecl;
begin
  Result := Gdk4.gdk_popup_get_position_x(@self);
end;

function TGdkPopup.get_position_y: gint; cdecl;
begin
  Result := Gdk4.gdk_popup_get_position_y(@self);
end;

function TGdkPopup.get_rect_anchor: TGdkGravity; cdecl;
begin
  Result := Gdk4.gdk_popup_get_rect_anchor(@self);
end;

function TGdkPopup.get_surface_anchor: TGdkGravity; cdecl;
begin
  Result := Gdk4.gdk_popup_get_surface_anchor(@self);
end;

function TGdkPopup.present(width: gint; height: gint; layout: PGdkPopupLayout): gboolean; cdecl;
begin
  Result := Gdk4.gdk_popup_present(@self, width, height, layout);
end;

function TGdkPopupLayout.new(anchor_rect: PGdkRectangle; rect_anchor: TGdkGravity; surface_anchor: TGdkGravity): PGdkPopupLayout; cdecl;
begin
  Result := Gdk4.gdk_popup_layout_new(anchor_rect, rect_anchor, surface_anchor);
end;

function TGdkPopupLayout.copy: PGdkPopupLayout; cdecl;
begin
  Result := Gdk4.gdk_popup_layout_copy(@self);
end;

function TGdkPopupLayout.equal(other: PGdkPopupLayout): gboolean; cdecl;
begin
  Result := Gdk4.gdk_popup_layout_equal(@self, other);
end;

function TGdkPopupLayout.get_anchor_hints: TGdkAnchorHints; cdecl;
begin
  Result := Gdk4.gdk_popup_layout_get_anchor_hints(@self);
end;

function TGdkPopupLayout.get_anchor_rect: PGdkRectangle; cdecl;
begin
  Result := Gdk4.gdk_popup_layout_get_anchor_rect(@self);
end;

procedure TGdkPopupLayout.get_offset(dx: Pgint; dy: Pgint); cdecl;
begin
  Gdk4.gdk_popup_layout_get_offset(@self, dx, dy);
end;

function TGdkPopupLayout.get_rect_anchor: TGdkGravity; cdecl;
begin
  Result := Gdk4.gdk_popup_layout_get_rect_anchor(@self);
end;

procedure TGdkPopupLayout.get_shadow_width(left: Pgint; right: Pgint; top: Pgint; bottom: Pgint); cdecl;
begin
  Gdk4.gdk_popup_layout_get_shadow_width(@self, left, right, top, bottom);
end;

function TGdkPopupLayout.get_surface_anchor: TGdkGravity; cdecl;
begin
  Result := Gdk4.gdk_popup_layout_get_surface_anchor(@self);
end;

function TGdkPopupLayout.ref: PGdkPopupLayout; cdecl;
begin
  Result := Gdk4.gdk_popup_layout_ref(@self);
end;

procedure TGdkPopupLayout.set_anchor_hints(anchor_hints: TGdkAnchorHints); cdecl;
begin
  Gdk4.gdk_popup_layout_set_anchor_hints(@self, anchor_hints);
end;

procedure TGdkPopupLayout.set_anchor_rect(anchor_rect: PGdkRectangle); cdecl;
begin
  Gdk4.gdk_popup_layout_set_anchor_rect(@self, anchor_rect);
end;

procedure TGdkPopupLayout.set_offset(dx: gint; dy: gint); cdecl;
begin
  Gdk4.gdk_popup_layout_set_offset(@self, dx, dy);
end;

procedure TGdkPopupLayout.set_rect_anchor(anchor: TGdkGravity); cdecl;
begin
  Gdk4.gdk_popup_layout_set_rect_anchor(@self, anchor);
end;

procedure TGdkPopupLayout.set_shadow_width(left: gint; right: gint; top: gint; bottom: gint); cdecl;
begin
  Gdk4.gdk_popup_layout_set_shadow_width(@self, left, right, top, bottom);
end;

procedure TGdkPopupLayout.set_surface_anchor(anchor: TGdkGravity); cdecl;
begin
  Gdk4.gdk_popup_layout_set_surface_anchor(@self, anchor);
end;

procedure TGdkPopupLayout.unref; cdecl;
begin
  Gdk4.gdk_popup_layout_unref(@self);
end;

function TGdkRGBA.copy: PGdkRGBA; cdecl;
begin
  Result := Gdk4.gdk_rgba_copy(@self);
end;

function TGdkRGBA.equal(p2: PGdkRGBA): gboolean; cdecl;
begin
  Result := Gdk4.gdk_rgba_equal(@self, p2);
end;

procedure TGdkRGBA.free; cdecl;
begin
  Gdk4.gdk_rgba_free(@self);
end;

function TGdkRGBA.hash: guint; cdecl;
begin
  Result := Gdk4.gdk_rgba_hash(@self);
end;

function TGdkRGBA.is_clear: gboolean; cdecl;
begin
  Result := Gdk4.gdk_rgba_is_clear(@self);
end;

function TGdkRGBA.is_opaque: gboolean; cdecl;
begin
  Result := Gdk4.gdk_rgba_is_opaque(@self);
end;

function TGdkRGBA.parse(spec: Pgchar): gboolean; cdecl;
begin
  Result := Gdk4.gdk_rgba_parse(@self, spec);
end;

function TGdkRGBA.to_string: Pgchar; cdecl;
begin
  Result := Gdk4.gdk_rgba_to_string(@self);
end;

procedure TGdkScrollEvent.get_deltas(delta_x: Pgdouble; delta_y: Pgdouble); cdecl;
begin
  Gdk4.gdk_scroll_event_get_deltas(@self, delta_x, delta_y);
end;

function TGdkScrollEvent.get_direction: TGdkScrollDirection; cdecl;
begin
  Result := Gdk4.gdk_scroll_event_get_direction(@self);
end;

function TGdkScrollEvent.is_stop: gboolean; cdecl;
begin
  Result := Gdk4.gdk_scroll_event_is_stop(@self);
end;

procedure TGdkToplevel.begin_move(device: PGdkDevice; button: gint; x: gdouble; y: gdouble; timestamp: guint32); cdecl;
begin
  Gdk4.gdk_toplevel_begin_move(@self, device, button, x, y, timestamp);
end;

procedure TGdkToplevel.begin_resize(edge: TGdkSurfaceEdge; device: PGdkDevice; button: gint; x: gdouble; y: gdouble; timestamp: guint32); cdecl;
begin
  Gdk4.gdk_toplevel_begin_resize(@self, edge, device, button, x, y, timestamp);
end;

procedure TGdkToplevel.focus(timestamp: guint32); cdecl;
begin
  Gdk4.gdk_toplevel_focus(@self, timestamp);
end;

function TGdkToplevel.get_state: TGdkToplevelState; cdecl;
begin
  Result := Gdk4.gdk_toplevel_get_state(@self);
end;

procedure TGdkToplevel.inhibit_system_shortcuts(event: PGdkEvent); cdecl;
begin
  Gdk4.gdk_toplevel_inhibit_system_shortcuts(@self, event);
end;

function TGdkToplevel.lower: gboolean; cdecl;
begin
  Result := Gdk4.gdk_toplevel_lower(@self);
end;

function TGdkToplevel.minimize: gboolean; cdecl;
begin
  Result := Gdk4.gdk_toplevel_minimize(@self);
end;

procedure TGdkToplevel.present(layout: PGdkToplevelLayout); cdecl;
begin
  Gdk4.gdk_toplevel_present(@self, layout);
end;

procedure TGdkToplevel.restore_system_shortcuts; cdecl;
begin
  Gdk4.gdk_toplevel_restore_system_shortcuts(@self);
end;

procedure TGdkToplevel.set_decorated(decorated: gboolean); cdecl;
begin
  Gdk4.gdk_toplevel_set_decorated(@self, decorated);
end;

procedure TGdkToplevel.set_deletable(deletable: gboolean); cdecl;
begin
  Gdk4.gdk_toplevel_set_deletable(@self, deletable);
end;

procedure TGdkToplevel.set_icon_list(surfaces: PGList); cdecl;
begin
  Gdk4.gdk_toplevel_set_icon_list(@self, surfaces);
end;

procedure TGdkToplevel.set_modal(modal: gboolean); cdecl;
begin
  Gdk4.gdk_toplevel_set_modal(@self, modal);
end;

procedure TGdkToplevel.set_startup_id(startup_id: Pgchar); cdecl;
begin
  Gdk4.gdk_toplevel_set_startup_id(@self, startup_id);
end;

procedure TGdkToplevel.set_title(title: Pgchar); cdecl;
begin
  Gdk4.gdk_toplevel_set_title(@self, title);
end;

procedure TGdkToplevel.set_transient_for(parent: PGdkSurface); cdecl;
begin
  Gdk4.gdk_toplevel_set_transient_for(@self, parent);
end;

function TGdkToplevel.show_window_menu(event: PGdkEvent): gboolean; cdecl;
begin
  Result := Gdk4.gdk_toplevel_show_window_menu(@self, event);
end;

function TGdkToplevel.supports_edge_constraints: gboolean; cdecl;
begin
  Result := Gdk4.gdk_toplevel_supports_edge_constraints(@self);
end;

function TGdkToplevel.titlebar_gesture(gesture: TGdkTitlebarGesture): gboolean; cdecl;
begin
  Result := Gdk4.gdk_toplevel_titlebar_gesture(@self, gesture);
end;

function TGdkToplevelLayout.new: PGdkToplevelLayout; cdecl;
begin
  Result := Gdk4.gdk_toplevel_layout_new();
end;

function TGdkToplevelLayout.copy: PGdkToplevelLayout; cdecl;
begin
  Result := Gdk4.gdk_toplevel_layout_copy(@self);
end;

function TGdkToplevelLayout.equal(other: PGdkToplevelLayout): gboolean; cdecl;
begin
  Result := Gdk4.gdk_toplevel_layout_equal(@self, other);
end;

function TGdkToplevelLayout.get_fullscreen(fullscreen: Pgboolean): gboolean; cdecl;
begin
  Result := Gdk4.gdk_toplevel_layout_get_fullscreen(@self, fullscreen);
end;

function TGdkToplevelLayout.get_fullscreen_monitor: PGdkMonitor; cdecl;
begin
  Result := Gdk4.gdk_toplevel_layout_get_fullscreen_monitor(@self);
end;

function TGdkToplevelLayout.get_maximized(maximized: Pgboolean): gboolean; cdecl;
begin
  Result := Gdk4.gdk_toplevel_layout_get_maximized(@self, maximized);
end;

function TGdkToplevelLayout.get_resizable: gboolean; cdecl;
begin
  Result := Gdk4.gdk_toplevel_layout_get_resizable(@self);
end;

function TGdkToplevelLayout.ref: PGdkToplevelLayout; cdecl;
begin
  Result := Gdk4.gdk_toplevel_layout_ref(@self);
end;

procedure TGdkToplevelLayout.set_fullscreen(fullscreen: gboolean; monitor: PGdkMonitor); cdecl;
begin
  Gdk4.gdk_toplevel_layout_set_fullscreen(@self, fullscreen, monitor);
end;

procedure TGdkToplevelLayout.set_maximized(maximized: gboolean); cdecl;
begin
  Gdk4.gdk_toplevel_layout_set_maximized(@self, maximized);
end;

procedure TGdkToplevelLayout.set_resizable(resizable: gboolean); cdecl;
begin
  Gdk4.gdk_toplevel_layout_set_resizable(@self, resizable);
end;

procedure TGdkToplevelLayout.unref; cdecl;
begin
  Gdk4.gdk_toplevel_layout_unref(@self);
end;

procedure TGdkToplevelSize.get_bounds(bounds_width: Pgint; bounds_height: Pgint); cdecl;
begin
  Gdk4.gdk_toplevel_size_get_bounds(@self, bounds_width, bounds_height);
end;

procedure TGdkToplevelSize.set_min_size(min_width: gint; min_height: gint); cdecl;
begin
  Gdk4.gdk_toplevel_size_set_min_size(@self, min_width, min_height);
end;

procedure TGdkToplevelSize.set_shadow_width(left: gint; right: gint; top: gint; bottom: gint); cdecl;
begin
  Gdk4.gdk_toplevel_size_set_shadow_width(@self, left, right, top, bottom);
end;

procedure TGdkToplevelSize.set_size(width: gint; height: gint); cdecl;
begin
  Gdk4.gdk_toplevel_size_set_size(@self, width, height);
end;

function TGdkTouchEvent.get_emulating_pointer: gboolean; cdecl;
begin
  Result := Gdk4.gdk_touch_event_get_emulating_pointer(@self);
end;

procedure TGdkTouchpadEvent.get_deltas(dx: Pgdouble; dy: Pgdouble); cdecl;
begin
  Gdk4.gdk_touchpad_event_get_deltas(@self, dx, dy);
end;

function TGdkTouchpadEvent.get_gesture_phase: TGdkTouchpadGesturePhase; cdecl;
begin
  Result := Gdk4.gdk_touchpad_event_get_gesture_phase(@self);
end;

function TGdkTouchpadEvent.get_n_fingers: guint; cdecl;
begin
  Result := Gdk4.gdk_touchpad_event_get_n_fingers(@self);
end;

function TGdkTouchpadEvent.get_pinch_angle_delta: gdouble; cdecl;
begin
  Result := Gdk4.gdk_touchpad_event_get_pinch_angle_delta(@self);
end;

function TGdkTouchpadEvent.get_pinch_scale: gdouble; cdecl;
begin
  Result := Gdk4.gdk_touchpad_event_get_pinch_scale(@self);
end;

end.
