{ This is an autogenerated unit using gobject introspection (gir2pascal). Do not Edit. }
unit Gsk4;

{$MODE OBJFPC}{$H+}

{$PACKRECORDS C}
{$MODESWITCH DUPLICATELOCALS+}

{$ifdef Unix}
{$LINKLIB libgtk-4.so.1}
{$endif}
interface
uses
  CTypes, Gdk4, Graphene1, cairo1, GLib2, GObject2, Pango1;

const
  {$ifdef MsWindows}
  Gsk4_library = 'libgtk-4.so.dll';
  {$else}
  Gsk4_library = 'libgtk-4.so.1';
  {$endif}


type
  TGskBlendMode = DWord;
const
  { GskBlendMode }
  GSK_BLEND_MODE_DEFAULT: TGskBlendMode = 0;
  GSK_BLEND_MODE_MULTIPLY: TGskBlendMode = 1;
  GSK_BLEND_MODE_SCREEN: TGskBlendMode = 2;
  GSK_BLEND_MODE_OVERLAY: TGskBlendMode = 3;
  GSK_BLEND_MODE_DARKEN: TGskBlendMode = 4;
  GSK_BLEND_MODE_LIGHTEN: TGskBlendMode = 5;
  GSK_BLEND_MODE_COLOR_DODGE: TGskBlendMode = 6;
  GSK_BLEND_MODE_COLOR_BURN: TGskBlendMode = 7;
  GSK_BLEND_MODE_HARD_LIGHT: TGskBlendMode = 8;
  GSK_BLEND_MODE_SOFT_LIGHT: TGskBlendMode = 9;
  GSK_BLEND_MODE_DIFFERENCE: TGskBlendMode = 10;
  GSK_BLEND_MODE_EXCLUSION: TGskBlendMode = 11;
  GSK_BLEND_MODE_COLOR: TGskBlendMode = 12;
  GSK_BLEND_MODE_HUE: TGskBlendMode = 13;
  GSK_BLEND_MODE_SATURATION: TGskBlendMode = 14;
  GSK_BLEND_MODE_LUMINOSITY: TGskBlendMode = 15;

type
  TGskCorner = DWord;
const
  { GskCorner }
  GSK_CORNER_TOP_LEFT: TGskCorner = 0;
  GSK_CORNER_TOP_RIGHT: TGskCorner = 1;
  GSK_CORNER_BOTTOM_RIGHT: TGskCorner = 2;
  GSK_CORNER_BOTTOM_LEFT: TGskCorner = 3;

type
  TGskGLUniformType = DWord;
const
  { GskGLUniformType }
  GSK_GL_UNIFORM_TYPE_NONE: TGskGLUniformType = 0;
  GSK_GL_UNIFORM_TYPE_FLOAT: TGskGLUniformType = 1;
  GSK_GL_UNIFORM_TYPE_INT: TGskGLUniformType = 2;
  GSK_GL_UNIFORM_TYPE_UINT: TGskGLUniformType = 3;
  GSK_GL_UNIFORM_TYPE_BOOL: TGskGLUniformType = 4;
  GSK_GL_UNIFORM_TYPE_VEC2: TGskGLUniformType = 5;
  GSK_GL_UNIFORM_TYPE_VEC3: TGskGLUniformType = 6;
  GSK_GL_UNIFORM_TYPE_VEC4: TGskGLUniformType = 7;

type
  TGskRenderNodeType = DWord;
const
  { GskRenderNodeType }
  GSK_NOT_A_RENDER_NODE: TGskRenderNodeType = 0;
  GSK_CONTAINER_NODE: TGskRenderNodeType = 1;
  GSK_CAIRO_NODE: TGskRenderNodeType = 2;
  GSK_COLOR_NODE: TGskRenderNodeType = 3;
  GSK_LINEAR_GRADIENT_NODE: TGskRenderNodeType = 4;
  GSK_REPEATING_LINEAR_GRADIENT_NODE: TGskRenderNodeType = 5;
  GSK_RADIAL_GRADIENT_NODE: TGskRenderNodeType = 6;
  GSK_REPEATING_RADIAL_GRADIENT_NODE: TGskRenderNodeType = 7;
  GSK_CONIC_GRADIENT_NODE: TGskRenderNodeType = 8;
  GSK_BORDER_NODE: TGskRenderNodeType = 9;
  GSK_TEXTURE_NODE: TGskRenderNodeType = 10;
  GSK_INSET_SHADOW_NODE: TGskRenderNodeType = 11;
  GSK_OUTSET_SHADOW_NODE: TGskRenderNodeType = 12;
  GSK_TRANSFORM_NODE: TGskRenderNodeType = 13;
  GSK_OPACITY_NODE: TGskRenderNodeType = 14;
  GSK_COLOR_MATRIX_NODE: TGskRenderNodeType = 15;
  GSK_REPEAT_NODE: TGskRenderNodeType = 16;
  GSK_CLIP_NODE: TGskRenderNodeType = 17;
  GSK_ROUNDED_CLIP_NODE: TGskRenderNodeType = 18;
  GSK_SHADOW_NODE: TGskRenderNodeType = 19;
  GSK_BLEND_NODE: TGskRenderNodeType = 20;
  GSK_CROSS_FADE_NODE: TGskRenderNodeType = 21;
  GSK_TEXT_NODE: TGskRenderNodeType = 22;
  GSK_BLUR_NODE: TGskRenderNodeType = 23;
  GSK_DEBUG_NODE: TGskRenderNodeType = 24;
  GSK_GL_SHADER_NODE: TGskRenderNodeType = 25;

type
  TGskScalingFilter = DWord;
const
  { GskScalingFilter }
  GSK_SCALING_FILTER_LINEAR: TGskScalingFilter = 0;
  GSK_SCALING_FILTER_NEAREST: TGskScalingFilter = 1;
  GSK_SCALING_FILTER_TRILINEAR: TGskScalingFilter = 2;

type
  TGskSerializationError = DWord;
const
  { GskSerializationError }
  GSK_SERIALIZATION_UNSUPPORTED_FORMAT: TGskSerializationError = 0;
  GSK_SERIALIZATION_UNSUPPORTED_VERSION: TGskSerializationError = 1;
  GSK_SERIALIZATION_INVALID_DATA: TGskSerializationError = 2;

type
  TGskTransformCategory = DWord;
const
  { GskTransformCategory }
  GSK_TRANSFORM_CATEGORY_UNKNOWN: TGskTransformCategory = 0;
  GSK_TRANSFORM_CATEGORY_ANY: TGskTransformCategory = 1;
  GSK_TRANSFORM_CATEGORY_3D: TGskTransformCategory = 2;
  GSK_TRANSFORM_CATEGORY_2D: TGskTransformCategory = 3;
  GSK_TRANSFORM_CATEGORY_2D_AFFINE: TGskTransformCategory = 4;
  GSK_TRANSFORM_CATEGORY_2D_TRANSLATE: TGskTransformCategory = 5;
  GSK_TRANSFORM_CATEGORY_IDENTITY: TGskTransformCategory = 6;
type

  PPGskBlendMode = ^PGskBlendMode;
  PGskBlendMode = ^TGskBlendMode;

  PPGskBlendNode = ^PGskBlendNode;
  PGskBlendNode = ^TGskBlendNode;

  PPPGskRenderNode = ^PPGskRenderNode;
  PPGskRenderNode = ^PGskRenderNode;
  PGskRenderNode = ^TGskRenderNode;

  PPGskParseErrorFunc = ^PGskParseErrorFunc;
  PGskParseErrorFunc = ^TGskParseErrorFunc;

  PPGskParseLocation = ^PGskParseLocation;
  PGskParseLocation = ^TGskParseLocation;
  TGskParseErrorFunc = procedure(start: PGskParseLocation; end_: PGskParseLocation; error: PGError; user_data: gpointer); cdecl;

  PPGskRenderNodeType = ^PGskRenderNodeType;
  PGskRenderNodeType = ^TGskRenderNodeType;
  TGskRenderNode = object
    function deserialize(bytes: PGBytes; error_func: TGskParseErrorFunc; user_data: gpointer): PGskRenderNode; cdecl; inline; static;
    procedure draw(cr: Pcairo_t); cdecl; inline;
    procedure get_bounds(bounds: Pgraphene_rect_t); cdecl; inline;
    function get_node_type: TGskRenderNodeType; cdecl; inline;
    function ref: PGskRenderNode; cdecl; inline;
    function serialize: PGBytes; cdecl; inline;
    procedure unref; cdecl; inline;
    function write_to_file(filename: Pgchar; error: PPGError): gboolean; cdecl; inline;
  end;
  TGskBlendNode = object(TGskRenderNode)
    function new(bottom: PGskRenderNode; top: PGskRenderNode; blend_mode: TGskBlendMode): PGskBlendNode; cdecl; inline; static;
    function get_blend_mode: TGskBlendMode; cdecl; inline;
    function get_bottom_child: PGskRenderNode; cdecl; inline;
    function get_top_child: PGskRenderNode; cdecl; inline;
  end;

  PPGskBlurNode = ^PGskBlurNode;
  PGskBlurNode = ^TGskBlurNode;
  TGskBlurNode = object(TGskRenderNode)
    function new(child: PGskRenderNode; radius: gfloat): PGskBlurNode; cdecl; inline; static;
    function get_child: PGskRenderNode; cdecl; inline;
    function get_radius: gfloat; cdecl; inline;
  end;

  PPGskBorderNode = ^PGskBorderNode;
  PGskBorderNode = ^TGskBorderNode;

  PPGskRoundedRect = ^PGskRoundedRect;
  PGskRoundedRect = ^TGskRoundedRect;
  TGskBorderNode = object(TGskRenderNode)
    function new(outline: PGskRoundedRect; border_width: Pgfloat; border_color: PGdkRGBA): PGskBorderNode; cdecl; inline; static;
    function get_colors: PGdkRGBA; cdecl; inline;
    function get_outline: PGskRoundedRect; cdecl; inline;
    function get_widths: Pgfloat; cdecl; inline;
  end;
  TGskRoundedRect = object
    bounds: Tgraphene_rect_t;
    corner: array [0..3] of Tgraphene_size_t;
    function contains_point(point: Pgraphene_point_t): gboolean; cdecl; inline;
    function contains_rect(rect: Pgraphene_rect_t): gboolean; cdecl; inline;
    function init(bounds: Pgraphene_rect_t; top_left: Pgraphene_size_t; top_right: Pgraphene_size_t; bottom_right: Pgraphene_size_t; bottom_left: Pgraphene_size_t): PGskRoundedRect; cdecl; inline;
    function init_copy(src: PGskRoundedRect): PGskRoundedRect; cdecl; inline;
    function init_from_rect(bounds: Pgraphene_rect_t; radius: gfloat): PGskRoundedRect; cdecl; inline;
    function intersects_rect(rect: Pgraphene_rect_t): gboolean; cdecl; inline;
    function is_rectilinear: gboolean; cdecl; inline;
    function normalize: PGskRoundedRect; cdecl; inline;
    function offset(dx: gfloat; dy: gfloat): PGskRoundedRect; cdecl; inline;
    function shrink(top: gfloat; right: gfloat; bottom: gfloat; left: gfloat): PGskRoundedRect; cdecl; inline;
  end;

  PPGskCairoNode = ^PGskCairoNode;
  PGskCairoNode = ^TGskCairoNode;
  TGskCairoNode = object(TGskRenderNode)
    function new(bounds: Pgraphene_rect_t): PGskCairoNode; cdecl; inline; static;
    function get_draw_context: Pcairo_t; cdecl; inline;
    function get_surface: Pcairo_surface_t; cdecl; inline;
  end;

  PPGskRenderer = ^PGskRenderer;
  PGskRenderer = ^TGskRenderer;
  TGskRenderer = object(TGObject)
    function new_for_surface(surface: PGdkSurface): PGskRenderer; cdecl; inline; static;
    function get_surface: PGdkSurface; cdecl; inline;
    function is_realized: gboolean; cdecl; inline;
    function realize(surface: PGdkSurface; error: PPGError): gboolean; cdecl; inline;
    procedure render(root: PGskRenderNode; region: Pcairo_region_t); cdecl; inline;
    function render_texture(root: PGskRenderNode; viewport: Pgraphene_rect_t): PGdkTexture; cdecl; inline;
    procedure unrealize; cdecl; inline;
    //property realized: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_realized ;
    property surface: PGdkSurface read get_surface ;
  end;

  PPGskCairoRenderer = ^PGskCairoRenderer;
  PGskCairoRenderer = ^TGskCairoRenderer;
  TGskCairoRenderer = object(TGskRenderer)
    function new: PGskCairoRenderer; cdecl; inline; static;
  end;

  PPGskCairoRendererClass = ^PGskCairoRendererClass;
  PGskCairoRendererClass = ^TGskCairoRendererClass;
  TGskCairoRendererClass = object
  end;

  PPGskClipNode = ^PGskClipNode;
  PGskClipNode = ^TGskClipNode;
  TGskClipNode = object(TGskRenderNode)
    function new(child: PGskRenderNode; clip: Pgraphene_rect_t): PGskClipNode; cdecl; inline; static;
    function get_child: PGskRenderNode; cdecl; inline;
    function get_clip: Pgraphene_rect_t; cdecl; inline;
  end;

  PPGskColorMatrixNode = ^PGskColorMatrixNode;
  PGskColorMatrixNode = ^TGskColorMatrixNode;
  TGskColorMatrixNode = object(TGskRenderNode)
    function new(child: PGskRenderNode; color_matrix: Pgraphene_matrix_t; color_offset: Pgraphene_vec4_t): PGskColorMatrixNode; cdecl; inline; static;
    function get_child: PGskRenderNode; cdecl; inline;
    function get_color_matrix: Pgraphene_matrix_t; cdecl; inline;
    function get_color_offset: Pgraphene_vec4_t; cdecl; inline;
  end;

  PPGskColorNode = ^PGskColorNode;
  PGskColorNode = ^TGskColorNode;
  TGskColorNode = object(TGskRenderNode)
    function new(rgba: PGdkRGBA; bounds: Pgraphene_rect_t): PGskColorNode; cdecl; inline; static;
    function get_color: PGdkRGBA; cdecl; inline;
  end;

  PPPGskColorStop = ^PPGskColorStop;
  PPGskColorStop = ^PGskColorStop;
  PGskColorStop = ^TGskColorStop;

  TGskColorStop = record
    offset: gfloat;
    color: TGdkRGBA;
  end;



  PPGskConicGradientNode = ^PGskConicGradientNode;
  PGskConicGradientNode = ^TGskConicGradientNode;
  TGskConicGradientNode = object(TGskRenderNode)
    function new(bounds: Pgraphene_rect_t; center: Pgraphene_point_t; rotation: gfloat; color_stops: PGskColorStop; n_color_stops: gsize): PGskConicGradientNode; cdecl; inline; static;
    function get_angle: gfloat; cdecl; inline;
    function get_center: Pgraphene_point_t; cdecl; inline;
    function get_color_stops(n_stops: Pgsize): PGskColorStop; cdecl; inline;
    function get_n_color_stops: gsize; cdecl; inline;
    function get_rotation: gfloat; cdecl; inline;
  end;

  PPGskContainerNode = ^PGskContainerNode;
  PGskContainerNode = ^TGskContainerNode;
  TGskContainerNode = object(TGskRenderNode)
    function new(children: PPGskRenderNode; n_children: guint): PGskContainerNode; cdecl; inline; static;
    function get_child(idx: guint): PGskRenderNode; cdecl; inline;
    function get_n_children: guint; cdecl; inline;
  end;

  PPGskCorner = ^PGskCorner;
  PGskCorner = ^TGskCorner;

  PPGskCrossFadeNode = ^PGskCrossFadeNode;
  PGskCrossFadeNode = ^TGskCrossFadeNode;
  TGskCrossFadeNode = object(TGskRenderNode)
    function new(start: PGskRenderNode; end_: PGskRenderNode; progress: gfloat): PGskCrossFadeNode; cdecl; inline; static;
    function get_end_child: PGskRenderNode; cdecl; inline;
    function get_progress: gfloat; cdecl; inline;
    function get_start_child: PGskRenderNode; cdecl; inline;
  end;

  PPGskDebugNode = ^PGskDebugNode;
  PGskDebugNode = ^TGskDebugNode;
  TGskDebugNode = object(TGskRenderNode)
    function new(child: PGskRenderNode; message: Pgchar): PGskDebugNode; cdecl; inline; static;
    function get_child: PGskRenderNode; cdecl; inline;
    function get_message: Pgchar; cdecl; inline;
  end;

  PPGskGLRenderer = ^PGskGLRenderer;
  PGskGLRenderer = ^TGskGLRenderer;
  TGskGLRenderer = object(TGskRenderer)
    function new: PGskGLRenderer; cdecl; inline; static;
  end;

  PPGskGLRendererClass = ^PGskGLRendererClass;
  PGskGLRendererClass = ^TGskGLRendererClass;
  TGskGLRendererClass = object
  end;

  PPGskGLShader = ^PGskGLShader;
  PGskGLShader = ^TGskGLShader;

  PPGskGLUniformType = ^PGskGLUniformType;
  PGskGLUniformType = ^TGskGLUniformType;
  TGskGLShader = object(TGObject)
    function new_from_bytes(sourcecode: PGBytes): PGskGLShader; cdecl; inline; static;
    function new_from_resource(resource_path: Pgchar): PGskGLShader; cdecl; inline; static;
    function compile(renderer: PGskRenderer; error: PPGError): gboolean; cdecl; inline;
    function find_uniform_by_name(name: Pgchar): gint; cdecl; inline;
    //function format_args(args: array of const): PGBytes; cdecl; inline;
    //function format_args_va(uniforms: Tva_list): PGBytes; cdecl; inline;
    function get_arg_bool(args: PGBytes; idx: gint): gboolean; cdecl; inline;
    function get_arg_float(args: PGBytes; idx: gint): gfloat; cdecl; inline;
    function get_arg_int(args: PGBytes; idx: gint): gint32; cdecl; inline;
    function get_arg_uint(args: PGBytes; idx: gint): guint32; cdecl; inline;
    procedure get_arg_vec2(args: PGBytes; idx: gint; out_value: Pgraphene_vec2_t); cdecl; inline;
    procedure get_arg_vec3(args: PGBytes; idx: gint; out_value: Pgraphene_vec3_t); cdecl; inline;
    procedure get_arg_vec4(args: PGBytes; idx: gint; out_value: Pgraphene_vec4_t); cdecl; inline;
    function get_args_size: gsize; cdecl; inline;
    function get_n_textures: gint; cdecl; inline;
    function get_n_uniforms: gint; cdecl; inline;
    function get_resource: Pgchar; cdecl; inline;
    function get_source: PGBytes; cdecl; inline;
    function get_uniform_name(idx: gint): Pgchar; cdecl; inline;
    function get_uniform_offset(idx: gint): gint; cdecl; inline;
    function get_uniform_type(idx: gint): TGskGLUniformType; cdecl; inline;
    property resource: Pgchar read get_resource  { property is writeable but setter not declared } ;
    property source: PGBytes read get_source  { property is writeable but setter not declared } ;
  end;

  PPGskGLShaderClass = ^PGskGLShaderClass;
  PGskGLShaderClass = ^TGskGLShaderClass;
  TGskGLShaderClass = object
    parent_class: TGObjectClass;
  end;

  PPGskGLShaderNode = ^PGskGLShaderNode;
  PGskGLShaderNode = ^TGskGLShaderNode;
  TGskGLShaderNode = object(TGskRenderNode)
    function new(shader: PGskGLShader; bounds: Pgraphene_rect_t; args: PGBytes; children: PPGskRenderNode; n_children: guint): PGskGLShaderNode; cdecl; inline; static;
    function get_args: PGBytes; cdecl; inline;
    function get_child(idx: guint): PGskRenderNode; cdecl; inline;
    function get_n_children: guint; cdecl; inline;
    function get_shader: PGskGLShader; cdecl; inline;
  end;

  PPGskInsetShadowNode = ^PGskInsetShadowNode;
  PGskInsetShadowNode = ^TGskInsetShadowNode;
  TGskInsetShadowNode = object(TGskRenderNode)
    function new(outline: PGskRoundedRect; color: PGdkRGBA; dx: gfloat; dy: gfloat; spread: gfloat; blur_radius: gfloat): PGskInsetShadowNode; cdecl; inline; static;
    function get_blur_radius: gfloat; cdecl; inline;
    function get_color: PGdkRGBA; cdecl; inline;
    function get_dx: gfloat; cdecl; inline;
    function get_dy: gfloat; cdecl; inline;
    function get_outline: PGskRoundedRect; cdecl; inline;
    function get_spread: gfloat; cdecl; inline;
  end;

  PPGskLinearGradientNode = ^PGskLinearGradientNode;
  PGskLinearGradientNode = ^TGskLinearGradientNode;
  TGskLinearGradientNode = object(TGskRenderNode)
    function new(bounds: Pgraphene_rect_t; start: Pgraphene_point_t; end_: Pgraphene_point_t; color_stops: PGskColorStop; n_color_stops: gsize): PGskLinearGradientNode; cdecl; inline; static;
    function get_color_stops(n_stops: Pgsize): PGskColorStop; cdecl; inline;
    function get_end: Pgraphene_point_t; cdecl; inline;
    function get_n_color_stops: gsize; cdecl; inline;
    function get_start: Pgraphene_point_t; cdecl; inline;
  end;

  PPGskNglRenderer = ^PGskNglRenderer;
  PGskNglRenderer = ^TGskNglRenderer;
  TGskNglRenderer = object(TGskRenderer)
  end;

  PPGskOpacityNode = ^PGskOpacityNode;
  PGskOpacityNode = ^TGskOpacityNode;
  TGskOpacityNode = object(TGskRenderNode)
    function new(child: PGskRenderNode; opacity: gfloat): PGskOpacityNode; cdecl; inline; static;
    function get_child: PGskRenderNode; cdecl; inline;
    function get_opacity: gfloat; cdecl; inline;
  end;

  PPGskOutsetShadowNode = ^PGskOutsetShadowNode;
  PGskOutsetShadowNode = ^TGskOutsetShadowNode;
  TGskOutsetShadowNode = object(TGskRenderNode)
    function new(outline: PGskRoundedRect; color: PGdkRGBA; dx: gfloat; dy: gfloat; spread: gfloat; blur_radius: gfloat): PGskOutsetShadowNode; cdecl; inline; static;
    function get_blur_radius: gfloat; cdecl; inline;
    function get_color: PGdkRGBA; cdecl; inline;
    function get_dx: gfloat; cdecl; inline;
    function get_dy: gfloat; cdecl; inline;
    function get_outline: PGskRoundedRect; cdecl; inline;
    function get_spread: gfloat; cdecl; inline;
  end;

  TGskParseLocation = record
    bytes: gsize;
    chars: gsize;
    lines: gsize;
    line_bytes: gsize;
    line_chars: gsize;
  end;



  PPGskRadialGradientNode = ^PGskRadialGradientNode;
  PGskRadialGradientNode = ^TGskRadialGradientNode;
  TGskRadialGradientNode = object(TGskRenderNode)
    function new(bounds: Pgraphene_rect_t; center: Pgraphene_point_t; hradius: gfloat; vradius: gfloat; start: gfloat; end_: gfloat; color_stops: PGskColorStop; n_color_stops: gsize): PGskRadialGradientNode; cdecl; inline; static;
    function get_center: Pgraphene_point_t; cdecl; inline;
    function get_color_stops(n_stops: Pgsize): PGskColorStop; cdecl; inline;
    function get_end: gfloat; cdecl; inline;
    function get_hradius: gfloat; cdecl; inline;
    function get_n_color_stops: gsize; cdecl; inline;
    function get_start: gfloat; cdecl; inline;
    function get_vradius: gfloat; cdecl; inline;
  end;

  PPGskRendererClass = ^PGskRendererClass;
  PGskRendererClass = ^TGskRendererClass;
  TGskRendererClass = object
  end;

  PPGskRepeatNode = ^PGskRepeatNode;
  PGskRepeatNode = ^TGskRepeatNode;
  TGskRepeatNode = object(TGskRenderNode)
    function new(bounds: Pgraphene_rect_t; child: PGskRenderNode; child_bounds: Pgraphene_rect_t): PGskRepeatNode; cdecl; inline; static;
    function get_child: PGskRenderNode; cdecl; inline;
    function get_child_bounds: Pgraphene_rect_t; cdecl; inline;
  end;

  PPGskRepeatingLinearGradientNode = ^PGskRepeatingLinearGradientNode;
  PGskRepeatingLinearGradientNode = ^TGskRepeatingLinearGradientNode;
  TGskRepeatingLinearGradientNode = object(TGskRenderNode)
    function new(bounds: Pgraphene_rect_t; start: Pgraphene_point_t; end_: Pgraphene_point_t; color_stops: PGskColorStop; n_color_stops: gsize): PGskRepeatingLinearGradientNode; cdecl; inline; static;
  end;

  PPGskRepeatingRadialGradientNode = ^PGskRepeatingRadialGradientNode;
  PGskRepeatingRadialGradientNode = ^TGskRepeatingRadialGradientNode;
  TGskRepeatingRadialGradientNode = object(TGskRenderNode)
    function new(bounds: Pgraphene_rect_t; center: Pgraphene_point_t; hradius: gfloat; vradius: gfloat; start: gfloat; end_: gfloat; color_stops: PGskColorStop; n_color_stops: gsize): PGskRepeatingRadialGradientNode; cdecl; inline; static;
  end;

  PPGskRoundedClipNode = ^PGskRoundedClipNode;
  PGskRoundedClipNode = ^TGskRoundedClipNode;
  TGskRoundedClipNode = object(TGskRenderNode)
    function new(child: PGskRenderNode; clip: PGskRoundedRect): PGskRoundedClipNode; cdecl; inline; static;
    function get_child: PGskRenderNode; cdecl; inline;
    function get_clip: PGskRoundedRect; cdecl; inline;
  end;

  PPGskScalingFilter = ^PGskScalingFilter;
  PGskScalingFilter = ^TGskScalingFilter;

  PPGskSerializationError = ^PGskSerializationError;
  PGskSerializationError = ^TGskSerializationError;

  PPGskShaderArgsBuilder = ^PGskShaderArgsBuilder;
  PGskShaderArgsBuilder = ^TGskShaderArgsBuilder;
  TGskShaderArgsBuilder = object
    function new(shader: PGskGLShader; initial_values: PGBytes): PGskShaderArgsBuilder; cdecl; inline; static;
    function free_to_args: PGBytes; cdecl; inline;
    function ref: PGskShaderArgsBuilder; cdecl; inline;
    procedure set_bool(idx: gint; value: gboolean); cdecl; inline;
    procedure set_float(idx: gint; value: gfloat); cdecl; inline;
    procedure set_int(idx: gint; value: gint32); cdecl; inline;
    procedure set_uint(idx: gint; value: guint32); cdecl; inline;
    procedure set_vec2(idx: gint; value: Pgraphene_vec2_t); cdecl; inline;
    procedure set_vec3(idx: gint; value: Pgraphene_vec3_t); cdecl; inline;
    procedure set_vec4(idx: gint; value: Pgraphene_vec4_t); cdecl; inline;
    function to_args: PGBytes; cdecl; inline;
    procedure unref; cdecl; inline;
  end;

  PPGskShadow = ^PGskShadow;
  PGskShadow = ^TGskShadow;

  TGskShadow = record
    color: TGdkRGBA;
    dx: gfloat;
    dy: gfloat;
    radius: gfloat;
  end;



  PPGskShadowNode = ^PGskShadowNode;
  PGskShadowNode = ^TGskShadowNode;
  TGskShadowNode = object(TGskRenderNode)
    function new(child: PGskRenderNode; shadows: PGskShadow; n_shadows: gsize): PGskShadowNode; cdecl; inline; static;
    function get_child: PGskRenderNode; cdecl; inline;
    function get_n_shadows: gsize; cdecl; inline;
    function get_shadow(i: gsize): PGskShadow; cdecl; inline;
  end;

  PPGskTextNode = ^PGskTextNode;
  PGskTextNode = ^TGskTextNode;
  TGskTextNode = object(TGskRenderNode)
    function new(font: PPangoFont; glyphs: PPangoGlyphString; color: PGdkRGBA; offset: Pgraphene_point_t): PGskTextNode; cdecl; inline; static;
    function get_color: PGdkRGBA; cdecl; inline;
    function get_font: PPangoFont; cdecl; inline;
    function get_glyphs(n_glyphs: Pguint): PPangoGlyphInfo; cdecl; inline;
    function get_num_glyphs: guint; cdecl; inline;
    function get_offset: Pgraphene_point_t; cdecl; inline;
    function has_color_glyphs: gboolean; cdecl; inline;
  end;

  PPGskTextureNode = ^PGskTextureNode;
  PGskTextureNode = ^TGskTextureNode;
  TGskTextureNode = object(TGskRenderNode)
    function new(texture: PGdkTexture; bounds: Pgraphene_rect_t): PGskTextureNode; cdecl; inline; static;
    function get_texture: PGdkTexture; cdecl; inline;
  end;

  PPGskTransform = ^PGskTransform;
  PGskTransform = ^TGskTransform;

  PPGskTransformCategory = ^PGskTransformCategory;
  PGskTransformCategory = ^TGskTransformCategory;
  TGskTransform = object
    function new: PGskTransform; cdecl; inline; static;
    function equal(second: PGskTransform): gboolean; cdecl; inline;
    function get_category: TGskTransformCategory; cdecl; inline;
    function invert: PGskTransform; cdecl; inline;
    function matrix(matrix: Pgraphene_matrix_t): PGskTransform; cdecl; inline;
    function perspective(depth: gfloat): PGskTransform; cdecl; inline;
    procedure print(string_: PGString); cdecl; inline;
    function ref: PGskTransform; cdecl; inline;
    function rotate(angle: gfloat): PGskTransform; cdecl; inline;
    function rotate_3d(angle: gfloat; axis: Pgraphene_vec3_t): PGskTransform; cdecl; inline;
    function scale(factor_x: gfloat; factor_y: gfloat): PGskTransform; cdecl; inline;
    function scale_3d(factor_x: gfloat; factor_y: gfloat; factor_z: gfloat): PGskTransform; cdecl; inline;
    function skew(skew_x: gfloat; skew_y: gfloat): PGskTransform; cdecl; inline;
    procedure to_2d(out_xx: Pgfloat; out_yx: Pgfloat; out_xy: Pgfloat; out_yy: Pgfloat; out_dx: Pgfloat; out_dy: Pgfloat); cdecl; inline;
    procedure to_2d_components(out_skew_x: Pgfloat; out_skew_y: Pgfloat; out_scale_x: Pgfloat; out_scale_y: Pgfloat; out_angle: Pgfloat; out_dx: Pgfloat; out_dy: Pgfloat); cdecl; inline;
    procedure to_affine(out_scale_x: Pgfloat; out_scale_y: Pgfloat; out_dx: Pgfloat; out_dy: Pgfloat); cdecl; inline;
    procedure to_matrix(out_matrix: Pgraphene_matrix_t); cdecl; inline;
    function to_string: Pgchar; cdecl; inline;
    procedure to_translate(out_dx: Pgfloat; out_dy: Pgfloat); cdecl; inline;
    function transform(other: PGskTransform): PGskTransform; cdecl; inline;
    procedure transform_bounds(rect: Pgraphene_rect_t; out_rect: Pgraphene_rect_t); cdecl; inline;
    procedure transform_point(point: Pgraphene_point_t; out_point: Pgraphene_point_t); cdecl; inline;
    function translate(point: Pgraphene_point_t): PGskTransform; cdecl; inline;
    function translate_3d(point: Pgraphene_point3d_t): PGskTransform; cdecl; inline;
    procedure unref; cdecl; inline;
    function parse(string_: Pgchar; out_transform: PPGskTransform): gboolean; cdecl; inline; static;
  end;

  PPGskTransformNode = ^PGskTransformNode;
  PGskTransformNode = ^TGskTransformNode;
  TGskTransformNode = object(TGskRenderNode)
    function new(child: PGskRenderNode; transform: PGskTransform): PGskTransformNode; cdecl; inline; static;
    function get_child: PGskRenderNode; cdecl; inline;
    function get_transform: PGskTransform; cdecl; inline;
  end;

function gsk_blend_node_get_blend_mode(node: PGskBlendNode): TGskBlendMode; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_blend_node_get_blend_mode'{$endif};
function gsk_blend_node_get_bottom_child(node: PGskBlendNode): PGskRenderNode; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_blend_node_get_bottom_child'{$endif};
function gsk_blend_node_get_top_child(node: PGskBlendNode): PGskRenderNode; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_blend_node_get_top_child'{$endif};
function gsk_blend_node_get_type: TGType; cdecl; external {$ifdef MSWindows} Gsk4_library name 'gsk_blend_node_get_type' {$endif};
function gsk_blend_node_new(bottom: PGskRenderNode; top: PGskRenderNode; blend_mode: TGskBlendMode): PGskBlendNode; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_blend_node_new'{$endif};
function gsk_blur_node_get_child(node: PGskBlurNode): PGskRenderNode; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_blur_node_get_child'{$endif};
function gsk_blur_node_get_radius(node: PGskBlurNode): gfloat; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_blur_node_get_radius'{$endif};
function gsk_blur_node_get_type: TGType; cdecl; external {$ifdef MSWindows} Gsk4_library name 'gsk_blur_node_get_type' {$endif};
function gsk_blur_node_new(child: PGskRenderNode; radius: gfloat): PGskBlurNode; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_blur_node_new'{$endif};
function gsk_border_node_get_colors(node: PGskBorderNode): PGdkRGBA; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_border_node_get_colors'{$endif};
function gsk_border_node_get_outline(node: PGskBorderNode): PGskRoundedRect; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_border_node_get_outline'{$endif};
function gsk_border_node_get_type: TGType; cdecl; external {$ifdef MSWindows} Gsk4_library name 'gsk_border_node_get_type' {$endif};
function gsk_border_node_get_widths(node: PGskBorderNode): Pgfloat; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_border_node_get_widths'{$endif};
function gsk_border_node_new(outline: PGskRoundedRect; border_width: Pgfloat; border_color: PGdkRGBA): PGskBorderNode; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_border_node_new'{$endif};
function gsk_cairo_node_get_draw_context(node: PGskCairoNode): Pcairo_t; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_cairo_node_get_draw_context'{$endif};
function gsk_cairo_node_get_surface(node: PGskCairoNode): Pcairo_surface_t; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_cairo_node_get_surface'{$endif};
function gsk_cairo_node_get_type: TGType; cdecl; external {$ifdef MSWindows} Gsk4_library name 'gsk_cairo_node_get_type' {$endif};
function gsk_cairo_node_new(bounds: Pgraphene_rect_t): PGskCairoNode; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_cairo_node_new'{$endif};
function gsk_cairo_renderer_get_type: TGType; cdecl; external {$ifdef MSWindows} Gsk4_library name 'gsk_cairo_renderer_get_type' {$endif};
function gsk_cairo_renderer_new: PGskCairoRenderer; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_cairo_renderer_new'{$endif};
function gsk_clip_node_get_child(node: PGskClipNode): PGskRenderNode; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_clip_node_get_child'{$endif};
function gsk_clip_node_get_clip(node: PGskClipNode): Pgraphene_rect_t; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_clip_node_get_clip'{$endif};
function gsk_clip_node_get_type: TGType; cdecl; external {$ifdef MSWindows} Gsk4_library name 'gsk_clip_node_get_type' {$endif};
function gsk_clip_node_new(child: PGskRenderNode; clip: Pgraphene_rect_t): PGskClipNode; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_clip_node_new'{$endif};
function gsk_color_matrix_node_get_child(node: PGskColorMatrixNode): PGskRenderNode; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_color_matrix_node_get_child'{$endif};
function gsk_color_matrix_node_get_color_matrix(node: PGskColorMatrixNode): Pgraphene_matrix_t; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_color_matrix_node_get_color_matrix'{$endif};
function gsk_color_matrix_node_get_color_offset(node: PGskColorMatrixNode): Pgraphene_vec4_t; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_color_matrix_node_get_color_offset'{$endif};
function gsk_color_matrix_node_get_type: TGType; cdecl; external {$ifdef MSWindows} Gsk4_library name 'gsk_color_matrix_node_get_type' {$endif};
function gsk_color_matrix_node_new(child: PGskRenderNode; color_matrix: Pgraphene_matrix_t; color_offset: Pgraphene_vec4_t): PGskColorMatrixNode; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_color_matrix_node_new'{$endif};
function gsk_color_node_get_color(node: PGskColorNode): PGdkRGBA; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_color_node_get_color'{$endif};
function gsk_color_node_get_type: TGType; cdecl; external {$ifdef MSWindows} Gsk4_library name 'gsk_color_node_get_type' {$endif};
function gsk_color_node_new(rgba: PGdkRGBA; bounds: Pgraphene_rect_t): PGskColorNode; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_color_node_new'{$endif};
function gsk_conic_gradient_node_get_angle(node: PGskConicGradientNode): gfloat; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_conic_gradient_node_get_angle'{$endif};
function gsk_conic_gradient_node_get_center(node: PGskConicGradientNode): Pgraphene_point_t; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_conic_gradient_node_get_center'{$endif};
function gsk_conic_gradient_node_get_color_stops(node: PGskConicGradientNode; n_stops: Pgsize): PGskColorStop; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_conic_gradient_node_get_color_stops'{$endif};
function gsk_conic_gradient_node_get_n_color_stops(node: PGskConicGradientNode): gsize; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_conic_gradient_node_get_n_color_stops'{$endif};
function gsk_conic_gradient_node_get_rotation(node: PGskConicGradientNode): gfloat; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_conic_gradient_node_get_rotation'{$endif};
function gsk_conic_gradient_node_get_type: TGType; cdecl; external {$ifdef MSWindows} Gsk4_library name 'gsk_conic_gradient_node_get_type' {$endif};
function gsk_conic_gradient_node_new(bounds: Pgraphene_rect_t; center: Pgraphene_point_t; rotation: gfloat; color_stops: PGskColorStop; n_color_stops: gsize): PGskConicGradientNode; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_conic_gradient_node_new'{$endif};
function gsk_container_node_get_child(node: PGskContainerNode; idx: guint): PGskRenderNode; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_container_node_get_child'{$endif};
function gsk_container_node_get_n_children(node: PGskContainerNode): guint; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_container_node_get_n_children'{$endif};
function gsk_container_node_get_type: TGType; cdecl; external {$ifdef MSWindows} Gsk4_library name 'gsk_container_node_get_type' {$endif};
function gsk_container_node_new(children: PPGskRenderNode; n_children: guint): PGskContainerNode; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_container_node_new'{$endif};
function gsk_cross_fade_node_get_end_child(node: PGskCrossFadeNode): PGskRenderNode; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_cross_fade_node_get_end_child'{$endif};
function gsk_cross_fade_node_get_progress(node: PGskCrossFadeNode): gfloat; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_cross_fade_node_get_progress'{$endif};
function gsk_cross_fade_node_get_start_child(node: PGskCrossFadeNode): PGskRenderNode; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_cross_fade_node_get_start_child'{$endif};
function gsk_cross_fade_node_get_type: TGType; cdecl; external {$ifdef MSWindows} Gsk4_library name 'gsk_cross_fade_node_get_type' {$endif};
function gsk_cross_fade_node_new(start: PGskRenderNode; end_: PGskRenderNode; progress: gfloat): PGskCrossFadeNode; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_cross_fade_node_new'{$endif};
function gsk_debug_node_get_child(node: PGskDebugNode): PGskRenderNode; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_debug_node_get_child'{$endif};
function gsk_debug_node_get_message(node: PGskDebugNode): Pgchar; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_debug_node_get_message'{$endif};
function gsk_debug_node_get_type: TGType; cdecl; external {$ifdef MSWindows} Gsk4_library name 'gsk_debug_node_get_type' {$endif};
function gsk_debug_node_new(child: PGskRenderNode; message: Pgchar): PGskDebugNode; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_debug_node_new'{$endif};
function gsk_gl_renderer_get_type: TGType; cdecl; external {$ifdef MSWindows} Gsk4_library name 'gsk_gl_renderer_get_type' {$endif};
function gsk_gl_renderer_new: PGskGLRenderer; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_gl_renderer_new'{$endif};
function gsk_gl_shader_compile(shader: PGskGLShader; renderer: PGskRenderer; error: PPGError): gboolean; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_gl_shader_compile'{$endif};
function gsk_gl_shader_find_uniform_by_name(shader: PGskGLShader; name: Pgchar): gint; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_gl_shader_find_uniform_by_name'{$endif};
function gsk_gl_shader_format_args(shader: PGskGLShader; args: array of const): PGBytes; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_gl_shader_format_args'{$endif};
function gsk_gl_shader_format_args_va(shader: PGskGLShader; uniforms: Tva_list): PGBytes; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_gl_shader_format_args_va'{$endif};
function gsk_gl_shader_get_arg_bool(shader: PGskGLShader; args: PGBytes; idx: gint): gboolean; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_gl_shader_get_arg_bool'{$endif};
function gsk_gl_shader_get_arg_float(shader: PGskGLShader; args: PGBytes; idx: gint): gfloat; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_gl_shader_get_arg_float'{$endif};
function gsk_gl_shader_get_arg_int(shader: PGskGLShader; args: PGBytes; idx: gint): gint32; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_gl_shader_get_arg_int'{$endif};
function gsk_gl_shader_get_arg_uint(shader: PGskGLShader; args: PGBytes; idx: gint): guint32; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_gl_shader_get_arg_uint'{$endif};
function gsk_gl_shader_get_args_size(shader: PGskGLShader): gsize; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_gl_shader_get_args_size'{$endif};
function gsk_gl_shader_get_n_textures(shader: PGskGLShader): gint; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_gl_shader_get_n_textures'{$endif};
function gsk_gl_shader_get_n_uniforms(shader: PGskGLShader): gint; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_gl_shader_get_n_uniforms'{$endif};
function gsk_gl_shader_get_resource(shader: PGskGLShader): Pgchar; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_gl_shader_get_resource'{$endif};
function gsk_gl_shader_get_source(shader: PGskGLShader): PGBytes; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_gl_shader_get_source'{$endif};
function gsk_gl_shader_get_type: TGType; cdecl; external {$ifdef MSWindows} Gsk4_library name 'gsk_gl_shader_get_type' {$endif};
function gsk_gl_shader_get_uniform_name(shader: PGskGLShader; idx: gint): Pgchar; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_gl_shader_get_uniform_name'{$endif};
function gsk_gl_shader_get_uniform_offset(shader: PGskGLShader; idx: gint): gint; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_gl_shader_get_uniform_offset'{$endif};
function gsk_gl_shader_get_uniform_type(shader: PGskGLShader; idx: gint): TGskGLUniformType; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_gl_shader_get_uniform_type'{$endif};
function gsk_gl_shader_new_from_bytes(sourcecode: PGBytes): PGskGLShader; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_gl_shader_new_from_bytes'{$endif};
function gsk_gl_shader_new_from_resource(resource_path: Pgchar): PGskGLShader; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_gl_shader_new_from_resource'{$endif};
function gsk_gl_shader_node_get_args(node: PGskGLShaderNode): PGBytes; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_gl_shader_node_get_args'{$endif};
function gsk_gl_shader_node_get_child(node: PGskGLShaderNode; idx: guint): PGskRenderNode; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_gl_shader_node_get_child'{$endif};
function gsk_gl_shader_node_get_n_children(node: PGskGLShaderNode): guint; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_gl_shader_node_get_n_children'{$endif};
function gsk_gl_shader_node_get_shader(node: PGskGLShaderNode): PGskGLShader; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_gl_shader_node_get_shader'{$endif};
function gsk_gl_shader_node_get_type: TGType; cdecl; external {$ifdef MSWindows} Gsk4_library name 'gsk_gl_shader_node_get_type' {$endif};
function gsk_gl_shader_node_new(shader: PGskGLShader; bounds: Pgraphene_rect_t; args: PGBytes; children: PPGskRenderNode; n_children: guint): PGskGLShaderNode; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_gl_shader_node_new'{$endif};
function gsk_inset_shadow_node_get_blur_radius(node: PGskInsetShadowNode): gfloat; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_inset_shadow_node_get_blur_radius'{$endif};
function gsk_inset_shadow_node_get_color(node: PGskInsetShadowNode): PGdkRGBA; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_inset_shadow_node_get_color'{$endif};
function gsk_inset_shadow_node_get_dx(node: PGskInsetShadowNode): gfloat; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_inset_shadow_node_get_dx'{$endif};
function gsk_inset_shadow_node_get_dy(node: PGskInsetShadowNode): gfloat; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_inset_shadow_node_get_dy'{$endif};
function gsk_inset_shadow_node_get_outline(node: PGskInsetShadowNode): PGskRoundedRect; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_inset_shadow_node_get_outline'{$endif};
function gsk_inset_shadow_node_get_spread(node: PGskInsetShadowNode): gfloat; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_inset_shadow_node_get_spread'{$endif};
function gsk_inset_shadow_node_get_type: TGType; cdecl; external {$ifdef MSWindows} Gsk4_library name 'gsk_inset_shadow_node_get_type' {$endif};
function gsk_inset_shadow_node_new(outline: PGskRoundedRect; color: PGdkRGBA; dx: gfloat; dy: gfloat; spread: gfloat; blur_radius: gfloat): PGskInsetShadowNode; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_inset_shadow_node_new'{$endif};
function gsk_linear_gradient_node_get_color_stops(node: PGskLinearGradientNode; n_stops: Pgsize): PGskColorStop; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_linear_gradient_node_get_color_stops'{$endif};
function gsk_linear_gradient_node_get_end(node: PGskLinearGradientNode): Pgraphene_point_t; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_linear_gradient_node_get_end'{$endif};
function gsk_linear_gradient_node_get_n_color_stops(node: PGskLinearGradientNode): gsize; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_linear_gradient_node_get_n_color_stops'{$endif};
function gsk_linear_gradient_node_get_start(node: PGskLinearGradientNode): Pgraphene_point_t; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_linear_gradient_node_get_start'{$endif};
function gsk_linear_gradient_node_get_type: TGType; cdecl; external {$ifdef MSWindows} Gsk4_library name 'gsk_linear_gradient_node_get_type' {$endif};
function gsk_linear_gradient_node_new(bounds: Pgraphene_rect_t; start: Pgraphene_point_t; end_: Pgraphene_point_t; color_stops: PGskColorStop; n_color_stops: gsize): PGskLinearGradientNode; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_linear_gradient_node_new'{$endif};
function gsk_ngl_renderer_get_type: TGType; cdecl; external {$ifdef MSWindows} Gsk4_library name 'gsk_ngl_renderer_get_type' {$endif};
function gsk_opacity_node_get_child(node: PGskOpacityNode): PGskRenderNode; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_opacity_node_get_child'{$endif};
function gsk_opacity_node_get_opacity(node: PGskOpacityNode): gfloat; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_opacity_node_get_opacity'{$endif};
function gsk_opacity_node_get_type: TGType; cdecl; external {$ifdef MSWindows} Gsk4_library name 'gsk_opacity_node_get_type' {$endif};
function gsk_opacity_node_new(child: PGskRenderNode; opacity: gfloat): PGskOpacityNode; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_opacity_node_new'{$endif};
function gsk_outset_shadow_node_get_blur_radius(node: PGskOutsetShadowNode): gfloat; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_outset_shadow_node_get_blur_radius'{$endif};
function gsk_outset_shadow_node_get_color(node: PGskOutsetShadowNode): PGdkRGBA; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_outset_shadow_node_get_color'{$endif};
function gsk_outset_shadow_node_get_dx(node: PGskOutsetShadowNode): gfloat; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_outset_shadow_node_get_dx'{$endif};
function gsk_outset_shadow_node_get_dy(node: PGskOutsetShadowNode): gfloat; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_outset_shadow_node_get_dy'{$endif};
function gsk_outset_shadow_node_get_outline(node: PGskOutsetShadowNode): PGskRoundedRect; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_outset_shadow_node_get_outline'{$endif};
function gsk_outset_shadow_node_get_spread(node: PGskOutsetShadowNode): gfloat; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_outset_shadow_node_get_spread'{$endif};
function gsk_outset_shadow_node_get_type: TGType; cdecl; external {$ifdef MSWindows} Gsk4_library name 'gsk_outset_shadow_node_get_type' {$endif};
function gsk_outset_shadow_node_new(outline: PGskRoundedRect; color: PGdkRGBA; dx: gfloat; dy: gfloat; spread: gfloat; blur_radius: gfloat): PGskOutsetShadowNode; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_outset_shadow_node_new'{$endif};
function gsk_radial_gradient_node_get_center(node: PGskRadialGradientNode): Pgraphene_point_t; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_radial_gradient_node_get_center'{$endif};
function gsk_radial_gradient_node_get_color_stops(node: PGskRadialGradientNode; n_stops: Pgsize): PGskColorStop; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_radial_gradient_node_get_color_stops'{$endif};
function gsk_radial_gradient_node_get_end(node: PGskRadialGradientNode): gfloat; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_radial_gradient_node_get_end'{$endif};
function gsk_radial_gradient_node_get_hradius(node: PGskRadialGradientNode): gfloat; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_radial_gradient_node_get_hradius'{$endif};
function gsk_radial_gradient_node_get_n_color_stops(node: PGskRadialGradientNode): gsize; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_radial_gradient_node_get_n_color_stops'{$endif};
function gsk_radial_gradient_node_get_start(node: PGskRadialGradientNode): gfloat; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_radial_gradient_node_get_start'{$endif};
function gsk_radial_gradient_node_get_type: TGType; cdecl; external {$ifdef MSWindows} Gsk4_library name 'gsk_radial_gradient_node_get_type' {$endif};
function gsk_radial_gradient_node_get_vradius(node: PGskRadialGradientNode): gfloat; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_radial_gradient_node_get_vradius'{$endif};
function gsk_radial_gradient_node_new(bounds: Pgraphene_rect_t; center: Pgraphene_point_t; hradius: gfloat; vradius: gfloat; start: gfloat; end_: gfloat; color_stops: PGskColorStop; n_color_stops: gsize): PGskRadialGradientNode; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_radial_gradient_node_new'{$endif};
function gsk_render_node_deserialize(bytes: PGBytes; error_func: TGskParseErrorFunc; user_data: gpointer): PGskRenderNode; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_render_node_deserialize'{$endif};
function gsk_render_node_get_node_type(node: PGskRenderNode): TGskRenderNodeType; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_render_node_get_node_type'{$endif};
function gsk_render_node_get_type: TGType; cdecl; external {$ifdef MSWindows} Gsk4_library name 'gsk_render_node_get_type' {$endif};
function gsk_render_node_ref(node: PGskRenderNode): PGskRenderNode; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_render_node_ref'{$endif};
function gsk_render_node_serialize(node: PGskRenderNode): PGBytes; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_render_node_serialize'{$endif};
function gsk_render_node_write_to_file(node: PGskRenderNode; filename: Pgchar; error: PPGError): gboolean; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_render_node_write_to_file'{$endif};
function gsk_renderer_get_surface(renderer: PGskRenderer): PGdkSurface; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_renderer_get_surface'{$endif};
function gsk_renderer_get_type: TGType; cdecl; external {$ifdef MSWindows} Gsk4_library name 'gsk_renderer_get_type' {$endif};
function gsk_renderer_is_realized(renderer: PGskRenderer): gboolean; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_renderer_is_realized'{$endif};
function gsk_renderer_new_for_surface(surface: PGdkSurface): PGskRenderer; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_renderer_new_for_surface'{$endif};
function gsk_renderer_realize(renderer: PGskRenderer; surface: PGdkSurface; error: PPGError): gboolean; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_renderer_realize'{$endif};
function gsk_renderer_render_texture(renderer: PGskRenderer; root: PGskRenderNode; viewport: Pgraphene_rect_t): PGdkTexture; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_renderer_render_texture'{$endif};
function gsk_repeat_node_get_child(node: PGskRepeatNode): PGskRenderNode; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_repeat_node_get_child'{$endif};
function gsk_repeat_node_get_child_bounds(node: PGskRepeatNode): Pgraphene_rect_t; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_repeat_node_get_child_bounds'{$endif};
function gsk_repeat_node_get_type: TGType; cdecl; external {$ifdef MSWindows} Gsk4_library name 'gsk_repeat_node_get_type' {$endif};
function gsk_repeat_node_new(bounds: Pgraphene_rect_t; child: PGskRenderNode; child_bounds: Pgraphene_rect_t): PGskRepeatNode; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_repeat_node_new'{$endif};
function gsk_repeating_linear_gradient_node_get_type: TGType; cdecl; external {$ifdef MSWindows} Gsk4_library name 'gsk_repeating_linear_gradient_node_get_type' {$endif};
function gsk_repeating_linear_gradient_node_new(bounds: Pgraphene_rect_t; start: Pgraphene_point_t; end_: Pgraphene_point_t; color_stops: PGskColorStop; n_color_stops: gsize): PGskRepeatingLinearGradientNode; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_repeating_linear_gradient_node_new'{$endif};
function gsk_repeating_radial_gradient_node_get_type: TGType; cdecl; external {$ifdef MSWindows} Gsk4_library name 'gsk_repeating_radial_gradient_node_get_type' {$endif};
function gsk_repeating_radial_gradient_node_new(bounds: Pgraphene_rect_t; center: Pgraphene_point_t; hradius: gfloat; vradius: gfloat; start: gfloat; end_: gfloat; color_stops: PGskColorStop; n_color_stops: gsize): PGskRepeatingRadialGradientNode; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_repeating_radial_gradient_node_new'{$endif};
function gsk_rounded_clip_node_get_child(node: PGskRoundedClipNode): PGskRenderNode; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_rounded_clip_node_get_child'{$endif};
function gsk_rounded_clip_node_get_clip(node: PGskRoundedClipNode): PGskRoundedRect; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_rounded_clip_node_get_clip'{$endif};
function gsk_rounded_clip_node_get_type: TGType; cdecl; external {$ifdef MSWindows} Gsk4_library name 'gsk_rounded_clip_node_get_type' {$endif};
function gsk_rounded_clip_node_new(child: PGskRenderNode; clip: PGskRoundedRect): PGskRoundedClipNode; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_rounded_clip_node_new'{$endif};
function gsk_rounded_rect_contains_point(self: PGskRoundedRect; point: Pgraphene_point_t): gboolean; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_rounded_rect_contains_point'{$endif};
function gsk_rounded_rect_contains_rect(self: PGskRoundedRect; rect: Pgraphene_rect_t): gboolean; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_rounded_rect_contains_rect'{$endif};
function gsk_rounded_rect_init(self: PGskRoundedRect; bounds: Pgraphene_rect_t; top_left: Pgraphene_size_t; top_right: Pgraphene_size_t; bottom_right: Pgraphene_size_t; bottom_left: Pgraphene_size_t): PGskRoundedRect; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_rounded_rect_init'{$endif};
function gsk_rounded_rect_init_copy(self: PGskRoundedRect; src: PGskRoundedRect): PGskRoundedRect; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_rounded_rect_init_copy'{$endif};
function gsk_rounded_rect_init_from_rect(self: PGskRoundedRect; bounds: Pgraphene_rect_t; radius: gfloat): PGskRoundedRect; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_rounded_rect_init_from_rect'{$endif};
function gsk_rounded_rect_intersects_rect(self: PGskRoundedRect; rect: Pgraphene_rect_t): gboolean; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_rounded_rect_intersects_rect'{$endif};
function gsk_rounded_rect_is_rectilinear(self: PGskRoundedRect): gboolean; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_rounded_rect_is_rectilinear'{$endif};
function gsk_rounded_rect_normalize(self: PGskRoundedRect): PGskRoundedRect; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_rounded_rect_normalize'{$endif};
function gsk_rounded_rect_offset(self: PGskRoundedRect; dx: gfloat; dy: gfloat): PGskRoundedRect; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_rounded_rect_offset'{$endif};
function gsk_rounded_rect_shrink(self: PGskRoundedRect; top: gfloat; right: gfloat; bottom: gfloat; left: gfloat): PGskRoundedRect; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_rounded_rect_shrink'{$endif};
function gsk_serialization_error_quark: TGQuark; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_serialization_error_quark'{$endif};
function gsk_shader_args_builder_free_to_args(builder: PGskShaderArgsBuilder): PGBytes; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_shader_args_builder_free_to_args'{$endif};
function gsk_shader_args_builder_get_type: TGType; cdecl; external {$ifdef MSWindows} Gsk4_library name 'gsk_shader_args_builder_get_type' {$endif};
function gsk_shader_args_builder_new(shader: PGskGLShader; initial_values: PGBytes): PGskShaderArgsBuilder; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_shader_args_builder_new'{$endif};
function gsk_shader_args_builder_ref(builder: PGskShaderArgsBuilder): PGskShaderArgsBuilder; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_shader_args_builder_ref'{$endif};
function gsk_shader_args_builder_to_args(builder: PGskShaderArgsBuilder): PGBytes; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_shader_args_builder_to_args'{$endif};
function gsk_shadow_node_get_child(node: PGskShadowNode): PGskRenderNode; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_shadow_node_get_child'{$endif};
function gsk_shadow_node_get_n_shadows(node: PGskShadowNode): gsize; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_shadow_node_get_n_shadows'{$endif};
function gsk_shadow_node_get_shadow(node: PGskShadowNode; i: gsize): PGskShadow; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_shadow_node_get_shadow'{$endif};
function gsk_shadow_node_get_type: TGType; cdecl; external {$ifdef MSWindows} Gsk4_library name 'gsk_shadow_node_get_type' {$endif};
function gsk_shadow_node_new(child: PGskRenderNode; shadows: PGskShadow; n_shadows: gsize): PGskShadowNode; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_shadow_node_new'{$endif};
function gsk_text_node_get_color(node: PGskTextNode): PGdkRGBA; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_text_node_get_color'{$endif};
function gsk_text_node_get_font(node: PGskTextNode): PPangoFont; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_text_node_get_font'{$endif};
function gsk_text_node_get_glyphs(node: PGskTextNode; n_glyphs: Pguint): PPangoGlyphInfo; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_text_node_get_glyphs'{$endif};
function gsk_text_node_get_num_glyphs(node: PGskTextNode): guint; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_text_node_get_num_glyphs'{$endif};
function gsk_text_node_get_offset(node: PGskTextNode): Pgraphene_point_t; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_text_node_get_offset'{$endif};
function gsk_text_node_get_type: TGType; cdecl; external {$ifdef MSWindows} Gsk4_library name 'gsk_text_node_get_type' {$endif};
function gsk_text_node_has_color_glyphs(node: PGskTextNode): gboolean; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_text_node_has_color_glyphs'{$endif};
function gsk_text_node_new(font: PPangoFont; glyphs: PPangoGlyphString; color: PGdkRGBA; offset: Pgraphene_point_t): PGskTextNode; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_text_node_new'{$endif};
function gsk_texture_node_get_texture(node: PGskTextureNode): PGdkTexture; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_texture_node_get_texture'{$endif};
function gsk_texture_node_get_type: TGType; cdecl; external {$ifdef MSWindows} Gsk4_library name 'gsk_texture_node_get_type' {$endif};
function gsk_texture_node_new(texture: PGdkTexture; bounds: Pgraphene_rect_t): PGskTextureNode; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_texture_node_new'{$endif};
function gsk_transform_equal(first: PGskTransform; second: PGskTransform): gboolean; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_transform_equal'{$endif};
function gsk_transform_get_category(self: PGskTransform): TGskTransformCategory; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_transform_get_category'{$endif};
function gsk_transform_get_type: TGType; cdecl; external {$ifdef MSWindows} Gsk4_library name 'gsk_transform_get_type' {$endif};
function gsk_transform_invert(self: PGskTransform): PGskTransform; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_transform_invert'{$endif};
function gsk_transform_matrix(next: PGskTransform; matrix: Pgraphene_matrix_t): PGskTransform; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_transform_matrix'{$endif};
function gsk_transform_new: PGskTransform; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_transform_new'{$endif};
function gsk_transform_node_get_child(node: PGskTransformNode): PGskRenderNode; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_transform_node_get_child'{$endif};
function gsk_transform_node_get_transform(node: PGskTransformNode): PGskTransform; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_transform_node_get_transform'{$endif};
function gsk_transform_node_get_type: TGType; cdecl; external {$ifdef MSWindows} Gsk4_library name 'gsk_transform_node_get_type' {$endif};
function gsk_transform_node_new(child: PGskRenderNode; transform: PGskTransform): PGskTransformNode; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_transform_node_new'{$endif};
function gsk_transform_parse(string_: Pgchar; out_transform: PPGskTransform): gboolean; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_transform_parse'{$endif};
function gsk_transform_perspective(next: PGskTransform; depth: gfloat): PGskTransform; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_transform_perspective'{$endif};
function gsk_transform_ref(self: PGskTransform): PGskTransform; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_transform_ref'{$endif};
function gsk_transform_rotate(next: PGskTransform; angle: gfloat): PGskTransform; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_transform_rotate'{$endif};
function gsk_transform_rotate_3d(next: PGskTransform; angle: gfloat; axis: Pgraphene_vec3_t): PGskTransform; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_transform_rotate_3d'{$endif};
function gsk_transform_scale(next: PGskTransform; factor_x: gfloat; factor_y: gfloat): PGskTransform; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_transform_scale'{$endif};
function gsk_transform_scale_3d(next: PGskTransform; factor_x: gfloat; factor_y: gfloat; factor_z: gfloat): PGskTransform; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_transform_scale_3d'{$endif};
function gsk_transform_skew(next: PGskTransform; skew_x: gfloat; skew_y: gfloat): PGskTransform; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_transform_skew'{$endif};
function gsk_transform_to_string(self: PGskTransform): Pgchar; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_transform_to_string'{$endif};
function gsk_transform_transform(next: PGskTransform; other: PGskTransform): PGskTransform; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_transform_transform'{$endif};
function gsk_transform_translate(next: PGskTransform; point: Pgraphene_point_t): PGskTransform; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_transform_translate'{$endif};
function gsk_transform_translate_3d(next: PGskTransform; point: Pgraphene_point3d_t): PGskTransform; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_transform_translate_3d'{$endif};
function gsk_value_dup_render_node(value: PGValue): PGskRenderNode; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_value_dup_render_node'{$endif};
function gsk_value_get_render_node(value: PGValue): PGskRenderNode; cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_value_get_render_node'{$endif};
procedure gsk_gl_shader_get_arg_vec2(shader: PGskGLShader; args: PGBytes; idx: gint; out_value: Pgraphene_vec2_t); cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_gl_shader_get_arg_vec2'{$endif};
procedure gsk_gl_shader_get_arg_vec3(shader: PGskGLShader; args: PGBytes; idx: gint; out_value: Pgraphene_vec3_t); cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_gl_shader_get_arg_vec3'{$endif};
procedure gsk_gl_shader_get_arg_vec4(shader: PGskGLShader; args: PGBytes; idx: gint; out_value: Pgraphene_vec4_t); cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_gl_shader_get_arg_vec4'{$endif};
procedure gsk_render_node_draw(node: PGskRenderNode; cr: Pcairo_t); cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_render_node_draw'{$endif};
procedure gsk_render_node_get_bounds(node: PGskRenderNode; bounds: Pgraphene_rect_t); cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_render_node_get_bounds'{$endif};
procedure gsk_render_node_unref(node: PGskRenderNode); cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_render_node_unref'{$endif};
procedure gsk_renderer_render(renderer: PGskRenderer; root: PGskRenderNode; region: Pcairo_region_t); cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_renderer_render'{$endif};
procedure gsk_renderer_unrealize(renderer: PGskRenderer); cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_renderer_unrealize'{$endif};
procedure gsk_shader_args_builder_set_bool(builder: PGskShaderArgsBuilder; idx: gint; value: gboolean); cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_shader_args_builder_set_bool'{$endif};
procedure gsk_shader_args_builder_set_float(builder: PGskShaderArgsBuilder; idx: gint; value: gfloat); cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_shader_args_builder_set_float'{$endif};
procedure gsk_shader_args_builder_set_int(builder: PGskShaderArgsBuilder; idx: gint; value: gint32); cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_shader_args_builder_set_int'{$endif};
procedure gsk_shader_args_builder_set_uint(builder: PGskShaderArgsBuilder; idx: gint; value: guint32); cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_shader_args_builder_set_uint'{$endif};
procedure gsk_shader_args_builder_set_vec2(builder: PGskShaderArgsBuilder; idx: gint; value: Pgraphene_vec2_t); cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_shader_args_builder_set_vec2'{$endif};
procedure gsk_shader_args_builder_set_vec3(builder: PGskShaderArgsBuilder; idx: gint; value: Pgraphene_vec3_t); cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_shader_args_builder_set_vec3'{$endif};
procedure gsk_shader_args_builder_set_vec4(builder: PGskShaderArgsBuilder; idx: gint; value: Pgraphene_vec4_t); cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_shader_args_builder_set_vec4'{$endif};
procedure gsk_shader_args_builder_unref(builder: PGskShaderArgsBuilder); cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_shader_args_builder_unref'{$endif};
procedure gsk_transform_print(self: PGskTransform; string_: PGString); cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_transform_print'{$endif};
procedure gsk_transform_to_2d(self: PGskTransform; out_xx: Pgfloat; out_yx: Pgfloat; out_xy: Pgfloat; out_yy: Pgfloat; out_dx: Pgfloat; out_dy: Pgfloat); cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_transform_to_2d'{$endif};
procedure gsk_transform_to_2d_components(self: PGskTransform; out_skew_x: Pgfloat; out_skew_y: Pgfloat; out_scale_x: Pgfloat; out_scale_y: Pgfloat; out_angle: Pgfloat; out_dx: Pgfloat; out_dy: Pgfloat); cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_transform_to_2d_components'{$endif};
procedure gsk_transform_to_affine(self: PGskTransform; out_scale_x: Pgfloat; out_scale_y: Pgfloat; out_dx: Pgfloat; out_dy: Pgfloat); cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_transform_to_affine'{$endif};
procedure gsk_transform_to_matrix(self: PGskTransform; out_matrix: Pgraphene_matrix_t); cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_transform_to_matrix'{$endif};
procedure gsk_transform_to_translate(self: PGskTransform; out_dx: Pgfloat; out_dy: Pgfloat); cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_transform_to_translate'{$endif};
procedure gsk_transform_transform_bounds(self: PGskTransform; rect: Pgraphene_rect_t; out_rect: Pgraphene_rect_t); cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_transform_transform_bounds'{$endif};
procedure gsk_transform_transform_point(self: PGskTransform; point: Pgraphene_point_t; out_point: Pgraphene_point_t); cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_transform_transform_point'{$endif};
procedure gsk_transform_unref(self: PGskTransform); cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_transform_unref'{$endif};
procedure gsk_value_set_render_node(value: PGValue; node: PGskRenderNode); cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_value_set_render_node'{$endif};
procedure gsk_value_take_render_node(value: PGValue; node: PGskRenderNode); cdecl; external {$ifdef Mswindows}Gsk4_library  name 'gsk_value_take_render_node'{$endif};
implementation
function TGskRenderNode.deserialize(bytes: PGBytes; error_func: TGskParseErrorFunc; user_data: gpointer): PGskRenderNode; cdecl;
begin
  Result := Gsk4.gsk_render_node_deserialize(bytes, error_func, user_data);
end;

procedure TGskRenderNode.draw(cr: Pcairo_t); cdecl;
begin
  Gsk4.gsk_render_node_draw(@self, cr);
end;

procedure TGskRenderNode.get_bounds(bounds: Pgraphene_rect_t); cdecl;
begin
  Gsk4.gsk_render_node_get_bounds(@self, bounds);
end;

function TGskRenderNode.get_node_type: TGskRenderNodeType; cdecl;
begin
  Result := Gsk4.gsk_render_node_get_node_type(@self);
end;

function TGskRenderNode.ref: PGskRenderNode; cdecl;
begin
  Result := Gsk4.gsk_render_node_ref(@self);
end;

function TGskRenderNode.serialize: PGBytes; cdecl;
begin
  Result := Gsk4.gsk_render_node_serialize(@self);
end;

procedure TGskRenderNode.unref; cdecl;
begin
  Gsk4.gsk_render_node_unref(@self);
end;

function TGskRenderNode.write_to_file(filename: Pgchar; error: PPGError): gboolean; cdecl;
begin
  Result := Gsk4.gsk_render_node_write_to_file(@self, filename, error);
end;

function TGskBlendNode.new(bottom: PGskRenderNode; top: PGskRenderNode; blend_mode: TGskBlendMode): PGskBlendNode; cdecl;
begin
  Result := Gsk4.gsk_blend_node_new(bottom, top, blend_mode);
end;

function TGskBlendNode.get_blend_mode: TGskBlendMode; cdecl;
begin
  Result := Gsk4.gsk_blend_node_get_blend_mode(@self);
end;

function TGskBlendNode.get_bottom_child: PGskRenderNode; cdecl;
begin
  Result := Gsk4.gsk_blend_node_get_bottom_child(@self);
end;

function TGskBlendNode.get_top_child: PGskRenderNode; cdecl;
begin
  Result := Gsk4.gsk_blend_node_get_top_child(@self);
end;

function TGskBlurNode.new(child: PGskRenderNode; radius: gfloat): PGskBlurNode; cdecl;
begin
  Result := Gsk4.gsk_blur_node_new(child, radius);
end;

function TGskBlurNode.get_child: PGskRenderNode; cdecl;
begin
  Result := Gsk4.gsk_blur_node_get_child(@self);
end;

function TGskBlurNode.get_radius: gfloat; cdecl;
begin
  Result := Gsk4.gsk_blur_node_get_radius(@self);
end;

function TGskBorderNode.new(outline: PGskRoundedRect; border_width: Pgfloat; border_color: PGdkRGBA): PGskBorderNode; cdecl;
begin
  Result := Gsk4.gsk_border_node_new(outline, border_width, border_color);
end;

function TGskBorderNode.get_colors: PGdkRGBA; cdecl;
begin
  Result := Gsk4.gsk_border_node_get_colors(@self);
end;

function TGskBorderNode.get_outline: PGskRoundedRect; cdecl;
begin
  Result := Gsk4.gsk_border_node_get_outline(@self);
end;

function TGskBorderNode.get_widths: Pgfloat; cdecl;
begin
  Result := Gsk4.gsk_border_node_get_widths(@self);
end;

function TGskRoundedRect.contains_point(point: Pgraphene_point_t): gboolean; cdecl;
begin
  Result := Gsk4.gsk_rounded_rect_contains_point(@self, point);
end;

function TGskRoundedRect.contains_rect(rect: Pgraphene_rect_t): gboolean; cdecl;
begin
  Result := Gsk4.gsk_rounded_rect_contains_rect(@self, rect);
end;

function TGskRoundedRect.init(bounds: Pgraphene_rect_t; top_left: Pgraphene_size_t; top_right: Pgraphene_size_t; bottom_right: Pgraphene_size_t; bottom_left: Pgraphene_size_t): PGskRoundedRect; cdecl;
begin
  Result := Gsk4.gsk_rounded_rect_init(@self, bounds, top_left, top_right, bottom_right, bottom_left);
end;

function TGskRoundedRect.init_copy(src: PGskRoundedRect): PGskRoundedRect; cdecl;
begin
  Result := Gsk4.gsk_rounded_rect_init_copy(@self, src);
end;

function TGskRoundedRect.init_from_rect(bounds: Pgraphene_rect_t; radius: gfloat): PGskRoundedRect; cdecl;
begin
  Result := Gsk4.gsk_rounded_rect_init_from_rect(@self, bounds, radius);
end;

function TGskRoundedRect.intersects_rect(rect: Pgraphene_rect_t): gboolean; cdecl;
begin
  Result := Gsk4.gsk_rounded_rect_intersects_rect(@self, rect);
end;

function TGskRoundedRect.is_rectilinear: gboolean; cdecl;
begin
  Result := Gsk4.gsk_rounded_rect_is_rectilinear(@self);
end;

function TGskRoundedRect.normalize: PGskRoundedRect; cdecl;
begin
  Result := Gsk4.gsk_rounded_rect_normalize(@self);
end;

function TGskRoundedRect.offset(dx: gfloat; dy: gfloat): PGskRoundedRect; cdecl;
begin
  Result := Gsk4.gsk_rounded_rect_offset(@self, dx, dy);
end;

function TGskRoundedRect.shrink(top: gfloat; right: gfloat; bottom: gfloat; left: gfloat): PGskRoundedRect; cdecl;
begin
  Result := Gsk4.gsk_rounded_rect_shrink(@self, top, right, bottom, left);
end;

function TGskCairoNode.new(bounds: Pgraphene_rect_t): PGskCairoNode; cdecl;
begin
  Result := Gsk4.gsk_cairo_node_new(bounds);
end;

function TGskCairoNode.get_draw_context: Pcairo_t; cdecl;
begin
  Result := Gsk4.gsk_cairo_node_get_draw_context(@self);
end;

function TGskCairoNode.get_surface: Pcairo_surface_t; cdecl;
begin
  Result := Gsk4.gsk_cairo_node_get_surface(@self);
end;

function TGskRenderer.new_for_surface(surface: PGdkSurface): PGskRenderer; cdecl;
begin
  Result := Gsk4.gsk_renderer_new_for_surface(surface);
end;

function TGskRenderer.get_surface: PGdkSurface; cdecl;
begin
  Result := Gsk4.gsk_renderer_get_surface(@self);
end;

function TGskRenderer.is_realized: gboolean; cdecl;
begin
  Result := Gsk4.gsk_renderer_is_realized(@self);
end;

function TGskRenderer.realize(surface: PGdkSurface; error: PPGError): gboolean; cdecl;
begin
  Result := Gsk4.gsk_renderer_realize(@self, surface, error);
end;

procedure TGskRenderer.render(root: PGskRenderNode; region: Pcairo_region_t); cdecl;
begin
  Gsk4.gsk_renderer_render(@self, root, region);
end;

function TGskRenderer.render_texture(root: PGskRenderNode; viewport: Pgraphene_rect_t): PGdkTexture; cdecl;
begin
  Result := Gsk4.gsk_renderer_render_texture(@self, root, viewport);
end;

procedure TGskRenderer.unrealize; cdecl;
begin
  Gsk4.gsk_renderer_unrealize(@self);
end;

function TGskCairoRenderer.new: PGskCairoRenderer; cdecl;
begin
  Result := Gsk4.gsk_cairo_renderer_new();
end;

function TGskClipNode.new(child: PGskRenderNode; clip: Pgraphene_rect_t): PGskClipNode; cdecl;
begin
  Result := Gsk4.gsk_clip_node_new(child, clip);
end;

function TGskClipNode.get_child: PGskRenderNode; cdecl;
begin
  Result := Gsk4.gsk_clip_node_get_child(@self);
end;

function TGskClipNode.get_clip: Pgraphene_rect_t; cdecl;
begin
  Result := Gsk4.gsk_clip_node_get_clip(@self);
end;

function TGskColorMatrixNode.new(child: PGskRenderNode; color_matrix: Pgraphene_matrix_t; color_offset: Pgraphene_vec4_t): PGskColorMatrixNode; cdecl;
begin
  Result := Gsk4.gsk_color_matrix_node_new(child, color_matrix, color_offset);
end;

function TGskColorMatrixNode.get_child: PGskRenderNode; cdecl;
begin
  Result := Gsk4.gsk_color_matrix_node_get_child(@self);
end;

function TGskColorMatrixNode.get_color_matrix: Pgraphene_matrix_t; cdecl;
begin
  Result := Gsk4.gsk_color_matrix_node_get_color_matrix(@self);
end;

function TGskColorMatrixNode.get_color_offset: Pgraphene_vec4_t; cdecl;
begin
  Result := Gsk4.gsk_color_matrix_node_get_color_offset(@self);
end;

function TGskColorNode.new(rgba: PGdkRGBA; bounds: Pgraphene_rect_t): PGskColorNode; cdecl;
begin
  Result := Gsk4.gsk_color_node_new(rgba, bounds);
end;

function TGskColorNode.get_color: PGdkRGBA; cdecl;
begin
  Result := Gsk4.gsk_color_node_get_color(@self);
end;

function TGskConicGradientNode.new(bounds: Pgraphene_rect_t; center: Pgraphene_point_t; rotation: gfloat; color_stops: PGskColorStop; n_color_stops: gsize): PGskConicGradientNode; cdecl;
begin
  Result := Gsk4.gsk_conic_gradient_node_new(bounds, center, rotation, color_stops, n_color_stops);
end;

function TGskConicGradientNode.get_angle: gfloat; cdecl;
begin
  Result := Gsk4.gsk_conic_gradient_node_get_angle(@self);
end;

function TGskConicGradientNode.get_center: Pgraphene_point_t; cdecl;
begin
  Result := Gsk4.gsk_conic_gradient_node_get_center(@self);
end;

function TGskConicGradientNode.get_color_stops(n_stops: Pgsize): PGskColorStop; cdecl;
begin
  Result := Gsk4.gsk_conic_gradient_node_get_color_stops(@self, n_stops);
end;

function TGskConicGradientNode.get_n_color_stops: gsize; cdecl;
begin
  Result := Gsk4.gsk_conic_gradient_node_get_n_color_stops(@self);
end;

function TGskConicGradientNode.get_rotation: gfloat; cdecl;
begin
  Result := Gsk4.gsk_conic_gradient_node_get_rotation(@self);
end;

function TGskContainerNode.new(children: PPGskRenderNode; n_children: guint): PGskContainerNode; cdecl;
begin
  Result := Gsk4.gsk_container_node_new(children, n_children);
end;

function TGskContainerNode.get_child(idx: guint): PGskRenderNode; cdecl;
begin
  Result := Gsk4.gsk_container_node_get_child(@self, idx);
end;

function TGskContainerNode.get_n_children: guint; cdecl;
begin
  Result := Gsk4.gsk_container_node_get_n_children(@self);
end;

function TGskCrossFadeNode.new(start: PGskRenderNode; end_: PGskRenderNode; progress: gfloat): PGskCrossFadeNode; cdecl;
begin
  Result := Gsk4.gsk_cross_fade_node_new(start, end_, progress);
end;

function TGskCrossFadeNode.get_end_child: PGskRenderNode; cdecl;
begin
  Result := Gsk4.gsk_cross_fade_node_get_end_child(@self);
end;

function TGskCrossFadeNode.get_progress: gfloat; cdecl;
begin
  Result := Gsk4.gsk_cross_fade_node_get_progress(@self);
end;

function TGskCrossFadeNode.get_start_child: PGskRenderNode; cdecl;
begin
  Result := Gsk4.gsk_cross_fade_node_get_start_child(@self);
end;

function TGskDebugNode.new(child: PGskRenderNode; message: Pgchar): PGskDebugNode; cdecl;
begin
  Result := Gsk4.gsk_debug_node_new(child, message);
end;

function TGskDebugNode.get_child: PGskRenderNode; cdecl;
begin
  Result := Gsk4.gsk_debug_node_get_child(@self);
end;

function TGskDebugNode.get_message: Pgchar; cdecl;
begin
  Result := Gsk4.gsk_debug_node_get_message(@self);
end;

function TGskGLRenderer.new: PGskGLRenderer; cdecl;
begin
  Result := Gsk4.gsk_gl_renderer_new();
end;

function TGskGLShader.new_from_bytes(sourcecode: PGBytes): PGskGLShader; cdecl;
begin
  Result := Gsk4.gsk_gl_shader_new_from_bytes(sourcecode);
end;

function TGskGLShader.new_from_resource(resource_path: Pgchar): PGskGLShader; cdecl;
begin
  Result := Gsk4.gsk_gl_shader_new_from_resource(resource_path);
end;

function TGskGLShader.compile(renderer: PGskRenderer; error: PPGError): gboolean; cdecl;
begin
  Result := Gsk4.gsk_gl_shader_compile(@self, renderer, error);
end;

function TGskGLShader.find_uniform_by_name(name: Pgchar): gint; cdecl;
begin
  Result := Gsk4.gsk_gl_shader_find_uniform_by_name(@self, name);
end;

function TGskGLShader.get_arg_bool(args: PGBytes; idx: gint): gboolean; cdecl;
begin
  Result := Gsk4.gsk_gl_shader_get_arg_bool(@self, args, idx);
end;

function TGskGLShader.get_arg_float(args: PGBytes; idx: gint): gfloat; cdecl;
begin
  Result := Gsk4.gsk_gl_shader_get_arg_float(@self, args, idx);
end;

function TGskGLShader.get_arg_int(args: PGBytes; idx: gint): gint32; cdecl;
begin
  Result := Gsk4.gsk_gl_shader_get_arg_int(@self, args, idx);
end;

function TGskGLShader.get_arg_uint(args: PGBytes; idx: gint): guint32; cdecl;
begin
  Result := Gsk4.gsk_gl_shader_get_arg_uint(@self, args, idx);
end;

procedure TGskGLShader.get_arg_vec2(args: PGBytes; idx: gint; out_value: Pgraphene_vec2_t); cdecl;
begin
  Gsk4.gsk_gl_shader_get_arg_vec2(@self, args, idx, out_value);
end;

procedure TGskGLShader.get_arg_vec3(args: PGBytes; idx: gint; out_value: Pgraphene_vec3_t); cdecl;
begin
  Gsk4.gsk_gl_shader_get_arg_vec3(@self, args, idx, out_value);
end;

procedure TGskGLShader.get_arg_vec4(args: PGBytes; idx: gint; out_value: Pgraphene_vec4_t); cdecl;
begin
  Gsk4.gsk_gl_shader_get_arg_vec4(@self, args, idx, out_value);
end;

function TGskGLShader.get_args_size: gsize; cdecl;
begin
  Result := Gsk4.gsk_gl_shader_get_args_size(@self);
end;

function TGskGLShader.get_n_textures: gint; cdecl;
begin
  Result := Gsk4.gsk_gl_shader_get_n_textures(@self);
end;

function TGskGLShader.get_n_uniforms: gint; cdecl;
begin
  Result := Gsk4.gsk_gl_shader_get_n_uniforms(@self);
end;

function TGskGLShader.get_resource: Pgchar; cdecl;
begin
  Result := Gsk4.gsk_gl_shader_get_resource(@self);
end;

function TGskGLShader.get_source: PGBytes; cdecl;
begin
  Result := Gsk4.gsk_gl_shader_get_source(@self);
end;

function TGskGLShader.get_uniform_name(idx: gint): Pgchar; cdecl;
begin
  Result := Gsk4.gsk_gl_shader_get_uniform_name(@self, idx);
end;

function TGskGLShader.get_uniform_offset(idx: gint): gint; cdecl;
begin
  Result := Gsk4.gsk_gl_shader_get_uniform_offset(@self, idx);
end;

function TGskGLShader.get_uniform_type(idx: gint): TGskGLUniformType; cdecl;
begin
  Result := Gsk4.gsk_gl_shader_get_uniform_type(@self, idx);
end;

function TGskGLShaderNode.new(shader: PGskGLShader; bounds: Pgraphene_rect_t; args: PGBytes; children: PPGskRenderNode; n_children: guint): PGskGLShaderNode; cdecl;
begin
  Result := Gsk4.gsk_gl_shader_node_new(shader, bounds, args, children, n_children);
end;

function TGskGLShaderNode.get_args: PGBytes; cdecl;
begin
  Result := Gsk4.gsk_gl_shader_node_get_args(@self);
end;

function TGskGLShaderNode.get_child(idx: guint): PGskRenderNode; cdecl;
begin
  Result := Gsk4.gsk_gl_shader_node_get_child(@self, idx);
end;

function TGskGLShaderNode.get_n_children: guint; cdecl;
begin
  Result := Gsk4.gsk_gl_shader_node_get_n_children(@self);
end;

function TGskGLShaderNode.get_shader: PGskGLShader; cdecl;
begin
  Result := Gsk4.gsk_gl_shader_node_get_shader(@self);
end;

function TGskInsetShadowNode.new(outline: PGskRoundedRect; color: PGdkRGBA; dx: gfloat; dy: gfloat; spread: gfloat; blur_radius: gfloat): PGskInsetShadowNode; cdecl;
begin
  Result := Gsk4.gsk_inset_shadow_node_new(outline, color, dx, dy, spread, blur_radius);
end;

function TGskInsetShadowNode.get_blur_radius: gfloat; cdecl;
begin
  Result := Gsk4.gsk_inset_shadow_node_get_blur_radius(@self);
end;

function TGskInsetShadowNode.get_color: PGdkRGBA; cdecl;
begin
  Result := Gsk4.gsk_inset_shadow_node_get_color(@self);
end;

function TGskInsetShadowNode.get_dx: gfloat; cdecl;
begin
  Result := Gsk4.gsk_inset_shadow_node_get_dx(@self);
end;

function TGskInsetShadowNode.get_dy: gfloat; cdecl;
begin
  Result := Gsk4.gsk_inset_shadow_node_get_dy(@self);
end;

function TGskInsetShadowNode.get_outline: PGskRoundedRect; cdecl;
begin
  Result := Gsk4.gsk_inset_shadow_node_get_outline(@self);
end;

function TGskInsetShadowNode.get_spread: gfloat; cdecl;
begin
  Result := Gsk4.gsk_inset_shadow_node_get_spread(@self);
end;

function TGskLinearGradientNode.new(bounds: Pgraphene_rect_t; start: Pgraphene_point_t; end_: Pgraphene_point_t; color_stops: PGskColorStop; n_color_stops: gsize): PGskLinearGradientNode; cdecl;
begin
  Result := Gsk4.gsk_linear_gradient_node_new(bounds, start, end_, color_stops, n_color_stops);
end;

function TGskLinearGradientNode.get_color_stops(n_stops: Pgsize): PGskColorStop; cdecl;
begin
  Result := Gsk4.gsk_linear_gradient_node_get_color_stops(@self, n_stops);
end;

function TGskLinearGradientNode.get_end: Pgraphene_point_t; cdecl;
begin
  Result := Gsk4.gsk_linear_gradient_node_get_end(@self);
end;

function TGskLinearGradientNode.get_n_color_stops: gsize; cdecl;
begin
  Result := Gsk4.gsk_linear_gradient_node_get_n_color_stops(@self);
end;

function TGskLinearGradientNode.get_start: Pgraphene_point_t; cdecl;
begin
  Result := Gsk4.gsk_linear_gradient_node_get_start(@self);
end;

function TGskOpacityNode.new(child: PGskRenderNode; opacity: gfloat): PGskOpacityNode; cdecl;
begin
  Result := Gsk4.gsk_opacity_node_new(child, opacity);
end;

function TGskOpacityNode.get_child: PGskRenderNode; cdecl;
begin
  Result := Gsk4.gsk_opacity_node_get_child(@self);
end;

function TGskOpacityNode.get_opacity: gfloat; cdecl;
begin
  Result := Gsk4.gsk_opacity_node_get_opacity(@self);
end;

function TGskOutsetShadowNode.new(outline: PGskRoundedRect; color: PGdkRGBA; dx: gfloat; dy: gfloat; spread: gfloat; blur_radius: gfloat): PGskOutsetShadowNode; cdecl;
begin
  Result := Gsk4.gsk_outset_shadow_node_new(outline, color, dx, dy, spread, blur_radius);
end;

function TGskOutsetShadowNode.get_blur_radius: gfloat; cdecl;
begin
  Result := Gsk4.gsk_outset_shadow_node_get_blur_radius(@self);
end;

function TGskOutsetShadowNode.get_color: PGdkRGBA; cdecl;
begin
  Result := Gsk4.gsk_outset_shadow_node_get_color(@self);
end;

function TGskOutsetShadowNode.get_dx: gfloat; cdecl;
begin
  Result := Gsk4.gsk_outset_shadow_node_get_dx(@self);
end;

function TGskOutsetShadowNode.get_dy: gfloat; cdecl;
begin
  Result := Gsk4.gsk_outset_shadow_node_get_dy(@self);
end;

function TGskOutsetShadowNode.get_outline: PGskRoundedRect; cdecl;
begin
  Result := Gsk4.gsk_outset_shadow_node_get_outline(@self);
end;

function TGskOutsetShadowNode.get_spread: gfloat; cdecl;
begin
  Result := Gsk4.gsk_outset_shadow_node_get_spread(@self);
end;

function TGskRadialGradientNode.new(bounds: Pgraphene_rect_t; center: Pgraphene_point_t; hradius: gfloat; vradius: gfloat; start: gfloat; end_: gfloat; color_stops: PGskColorStop; n_color_stops: gsize): PGskRadialGradientNode; cdecl;
begin
  Result := Gsk4.gsk_radial_gradient_node_new(bounds, center, hradius, vradius, start, end_, color_stops, n_color_stops);
end;

function TGskRadialGradientNode.get_center: Pgraphene_point_t; cdecl;
begin
  Result := Gsk4.gsk_radial_gradient_node_get_center(@self);
end;

function TGskRadialGradientNode.get_color_stops(n_stops: Pgsize): PGskColorStop; cdecl;
begin
  Result := Gsk4.gsk_radial_gradient_node_get_color_stops(@self, n_stops);
end;

function TGskRadialGradientNode.get_end: gfloat; cdecl;
begin
  Result := Gsk4.gsk_radial_gradient_node_get_end(@self);
end;

function TGskRadialGradientNode.get_hradius: gfloat; cdecl;
begin
  Result := Gsk4.gsk_radial_gradient_node_get_hradius(@self);
end;

function TGskRadialGradientNode.get_n_color_stops: gsize; cdecl;
begin
  Result := Gsk4.gsk_radial_gradient_node_get_n_color_stops(@self);
end;

function TGskRadialGradientNode.get_start: gfloat; cdecl;
begin
  Result := Gsk4.gsk_radial_gradient_node_get_start(@self);
end;

function TGskRadialGradientNode.get_vradius: gfloat; cdecl;
begin
  Result := Gsk4.gsk_radial_gradient_node_get_vradius(@self);
end;

function TGskRepeatNode.new(bounds: Pgraphene_rect_t; child: PGskRenderNode; child_bounds: Pgraphene_rect_t): PGskRepeatNode; cdecl;
begin
  Result := Gsk4.gsk_repeat_node_new(bounds, child, child_bounds);
end;

function TGskRepeatNode.get_child: PGskRenderNode; cdecl;
begin
  Result := Gsk4.gsk_repeat_node_get_child(@self);
end;

function TGskRepeatNode.get_child_bounds: Pgraphene_rect_t; cdecl;
begin
  Result := Gsk4.gsk_repeat_node_get_child_bounds(@self);
end;

function TGskRepeatingLinearGradientNode.new(bounds: Pgraphene_rect_t; start: Pgraphene_point_t; end_: Pgraphene_point_t; color_stops: PGskColorStop; n_color_stops: gsize): PGskRepeatingLinearGradientNode; cdecl;
begin
  Result := Gsk4.gsk_repeating_linear_gradient_node_new(bounds, start, end_, color_stops, n_color_stops);
end;

function TGskRepeatingRadialGradientNode.new(bounds: Pgraphene_rect_t; center: Pgraphene_point_t; hradius: gfloat; vradius: gfloat; start: gfloat; end_: gfloat; color_stops: PGskColorStop; n_color_stops: gsize): PGskRepeatingRadialGradientNode; cdecl;
begin
  Result := Gsk4.gsk_repeating_radial_gradient_node_new(bounds, center, hradius, vradius, start, end_, color_stops, n_color_stops);
end;

function TGskRoundedClipNode.new(child: PGskRenderNode; clip: PGskRoundedRect): PGskRoundedClipNode; cdecl;
begin
  Result := Gsk4.gsk_rounded_clip_node_new(child, clip);
end;

function TGskRoundedClipNode.get_child: PGskRenderNode; cdecl;
begin
  Result := Gsk4.gsk_rounded_clip_node_get_child(@self);
end;

function TGskRoundedClipNode.get_clip: PGskRoundedRect; cdecl;
begin
  Result := Gsk4.gsk_rounded_clip_node_get_clip(@self);
end;

function TGskShaderArgsBuilder.new(shader: PGskGLShader; initial_values: PGBytes): PGskShaderArgsBuilder; cdecl;
begin
  Result := Gsk4.gsk_shader_args_builder_new(shader, initial_values);
end;

function TGskShaderArgsBuilder.free_to_args: PGBytes; cdecl;
begin
  Result := Gsk4.gsk_shader_args_builder_free_to_args(@self);
end;

function TGskShaderArgsBuilder.ref: PGskShaderArgsBuilder; cdecl;
begin
  Result := Gsk4.gsk_shader_args_builder_ref(@self);
end;

procedure TGskShaderArgsBuilder.set_bool(idx: gint; value: gboolean); cdecl;
begin
  Gsk4.gsk_shader_args_builder_set_bool(@self, idx, value);
end;

procedure TGskShaderArgsBuilder.set_float(idx: gint; value: gfloat); cdecl;
begin
  Gsk4.gsk_shader_args_builder_set_float(@self, idx, value);
end;

procedure TGskShaderArgsBuilder.set_int(idx: gint; value: gint32); cdecl;
begin
  Gsk4.gsk_shader_args_builder_set_int(@self, idx, value);
end;

procedure TGskShaderArgsBuilder.set_uint(idx: gint; value: guint32); cdecl;
begin
  Gsk4.gsk_shader_args_builder_set_uint(@self, idx, value);
end;

procedure TGskShaderArgsBuilder.set_vec2(idx: gint; value: Pgraphene_vec2_t); cdecl;
begin
  Gsk4.gsk_shader_args_builder_set_vec2(@self, idx, value);
end;

procedure TGskShaderArgsBuilder.set_vec3(idx: gint; value: Pgraphene_vec3_t); cdecl;
begin
  Gsk4.gsk_shader_args_builder_set_vec3(@self, idx, value);
end;

procedure TGskShaderArgsBuilder.set_vec4(idx: gint; value: Pgraphene_vec4_t); cdecl;
begin
  Gsk4.gsk_shader_args_builder_set_vec4(@self, idx, value);
end;

function TGskShaderArgsBuilder.to_args: PGBytes; cdecl;
begin
  Result := Gsk4.gsk_shader_args_builder_to_args(@self);
end;

procedure TGskShaderArgsBuilder.unref; cdecl;
begin
  Gsk4.gsk_shader_args_builder_unref(@self);
end;

function TGskShadowNode.new(child: PGskRenderNode; shadows: PGskShadow; n_shadows: gsize): PGskShadowNode; cdecl;
begin
  Result := Gsk4.gsk_shadow_node_new(child, shadows, n_shadows);
end;

function TGskShadowNode.get_child: PGskRenderNode; cdecl;
begin
  Result := Gsk4.gsk_shadow_node_get_child(@self);
end;

function TGskShadowNode.get_n_shadows: gsize; cdecl;
begin
  Result := Gsk4.gsk_shadow_node_get_n_shadows(@self);
end;

function TGskShadowNode.get_shadow(i: gsize): PGskShadow; cdecl;
begin
  Result := Gsk4.gsk_shadow_node_get_shadow(@self, i);
end;

function TGskTextNode.new(font: PPangoFont; glyphs: PPangoGlyphString; color: PGdkRGBA; offset: Pgraphene_point_t): PGskTextNode; cdecl;
begin
  Result := Gsk4.gsk_text_node_new(font, glyphs, color, offset);
end;

function TGskTextNode.get_color: PGdkRGBA; cdecl;
begin
  Result := Gsk4.gsk_text_node_get_color(@self);
end;

function TGskTextNode.get_font: PPangoFont; cdecl;
begin
  Result := Gsk4.gsk_text_node_get_font(@self);
end;

function TGskTextNode.get_glyphs(n_glyphs: Pguint): PPangoGlyphInfo; cdecl;
begin
  Result := Gsk4.gsk_text_node_get_glyphs(@self, n_glyphs);
end;

function TGskTextNode.get_num_glyphs: guint; cdecl;
begin
  Result := Gsk4.gsk_text_node_get_num_glyphs(@self);
end;

function TGskTextNode.get_offset: Pgraphene_point_t; cdecl;
begin
  Result := Gsk4.gsk_text_node_get_offset(@self);
end;

function TGskTextNode.has_color_glyphs: gboolean; cdecl;
begin
  Result := Gsk4.gsk_text_node_has_color_glyphs(@self);
end;

function TGskTextureNode.new(texture: PGdkTexture; bounds: Pgraphene_rect_t): PGskTextureNode; cdecl;
begin
  Result := Gsk4.gsk_texture_node_new(texture, bounds);
end;

function TGskTextureNode.get_texture: PGdkTexture; cdecl;
begin
  Result := Gsk4.gsk_texture_node_get_texture(@self);
end;

function TGskTransform.new: PGskTransform; cdecl;
begin
  Result := Gsk4.gsk_transform_new();
end;

function TGskTransform.equal(second: PGskTransform): gboolean; cdecl;
begin
  Result := Gsk4.gsk_transform_equal(@self, second);
end;

function TGskTransform.get_category: TGskTransformCategory; cdecl;
begin
  Result := Gsk4.gsk_transform_get_category(@self);
end;

function TGskTransform.invert: PGskTransform; cdecl;
begin
  Result := Gsk4.gsk_transform_invert(@self);
end;

function TGskTransform.matrix(matrix: Pgraphene_matrix_t): PGskTransform; cdecl;
begin
  Result := Gsk4.gsk_transform_matrix(@self, matrix);
end;

function TGskTransform.perspective(depth: gfloat): PGskTransform; cdecl;
begin
  Result := Gsk4.gsk_transform_perspective(@self, depth);
end;

procedure TGskTransform.print(string_: PGString); cdecl;
begin
  Gsk4.gsk_transform_print(@self, string_);
end;

function TGskTransform.ref: PGskTransform; cdecl;
begin
  Result := Gsk4.gsk_transform_ref(@self);
end;

function TGskTransform.rotate(angle: gfloat): PGskTransform; cdecl;
begin
  Result := Gsk4.gsk_transform_rotate(@self, angle);
end;

function TGskTransform.rotate_3d(angle: gfloat; axis: Pgraphene_vec3_t): PGskTransform; cdecl;
begin
  Result := Gsk4.gsk_transform_rotate_3d(@self, angle, axis);
end;

function TGskTransform.scale(factor_x: gfloat; factor_y: gfloat): PGskTransform; cdecl;
begin
  Result := Gsk4.gsk_transform_scale(@self, factor_x, factor_y);
end;

function TGskTransform.scale_3d(factor_x: gfloat; factor_y: gfloat; factor_z: gfloat): PGskTransform; cdecl;
begin
  Result := Gsk4.gsk_transform_scale_3d(@self, factor_x, factor_y, factor_z);
end;

function TGskTransform.skew(skew_x: gfloat; skew_y: gfloat): PGskTransform; cdecl;
begin
  Result := Gsk4.gsk_transform_skew(@self, skew_x, skew_y);
end;

procedure TGskTransform.to_2d(out_xx: Pgfloat; out_yx: Pgfloat; out_xy: Pgfloat; out_yy: Pgfloat; out_dx: Pgfloat; out_dy: Pgfloat); cdecl;
begin
  Gsk4.gsk_transform_to_2d(@self, out_xx, out_yx, out_xy, out_yy, out_dx, out_dy);
end;

procedure TGskTransform.to_2d_components(out_skew_x: Pgfloat; out_skew_y: Pgfloat; out_scale_x: Pgfloat; out_scale_y: Pgfloat; out_angle: Pgfloat; out_dx: Pgfloat; out_dy: Pgfloat); cdecl;
begin
  Gsk4.gsk_transform_to_2d_components(@self, out_skew_x, out_skew_y, out_scale_x, out_scale_y, out_angle, out_dx, out_dy);
end;

procedure TGskTransform.to_affine(out_scale_x: Pgfloat; out_scale_y: Pgfloat; out_dx: Pgfloat; out_dy: Pgfloat); cdecl;
begin
  Gsk4.gsk_transform_to_affine(@self, out_scale_x, out_scale_y, out_dx, out_dy);
end;

procedure TGskTransform.to_matrix(out_matrix: Pgraphene_matrix_t); cdecl;
begin
  Gsk4.gsk_transform_to_matrix(@self, out_matrix);
end;

function TGskTransform.to_string: Pgchar; cdecl;
begin
  Result := Gsk4.gsk_transform_to_string(@self);
end;

procedure TGskTransform.to_translate(out_dx: Pgfloat; out_dy: Pgfloat); cdecl;
begin
  Gsk4.gsk_transform_to_translate(@self, out_dx, out_dy);
end;

function TGskTransform.transform(other: PGskTransform): PGskTransform; cdecl;
begin
  Result := Gsk4.gsk_transform_transform(@self, other);
end;

procedure TGskTransform.transform_bounds(rect: Pgraphene_rect_t; out_rect: Pgraphene_rect_t); cdecl;
begin
  Gsk4.gsk_transform_transform_bounds(@self, rect, out_rect);
end;

procedure TGskTransform.transform_point(point: Pgraphene_point_t; out_point: Pgraphene_point_t); cdecl;
begin
  Gsk4.gsk_transform_transform_point(@self, point, out_point);
end;

function TGskTransform.translate(point: Pgraphene_point_t): PGskTransform; cdecl;
begin
  Result := Gsk4.gsk_transform_translate(@self, point);
end;

function TGskTransform.translate_3d(point: Pgraphene_point3d_t): PGskTransform; cdecl;
begin
  Result := Gsk4.gsk_transform_translate_3d(@self, point);
end;

procedure TGskTransform.unref; cdecl;
begin
  Gsk4.gsk_transform_unref(@self);
end;

function TGskTransform.parse(string_: Pgchar; out_transform: PPGskTransform): gboolean; cdecl;
begin
  Result := Gsk4.gsk_transform_parse(string_, out_transform);
end;

function TGskTransformNode.new(child: PGskRenderNode; transform: PGskTransform): PGskTransformNode; cdecl;
begin
  Result := Gsk4.gsk_transform_node_new(child, transform);
end;

function TGskTransformNode.get_child: PGskRenderNode; cdecl;
begin
  Result := Gsk4.gsk_transform_node_get_child(@self);
end;

function TGskTransformNode.get_transform: PGskTransform; cdecl;
begin
  Result := Gsk4.gsk_transform_node_get_transform(@self);
end;

end.