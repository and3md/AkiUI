{ This is an autogenerated unit using gobject introspection (gir2pascal). Do not Edit. }
unit GModule2;

{$MODE OBJFPC}{$H+}

{$PACKRECORDS C}
{$MODESWITCH DUPLICATELOCALS+}

{$ifdef Unix}
{$LINKLIB libgmodule-2.0.so.0}
{$endif}
interface
uses
  CTypes, GLib2;

const
  {$ifdef MsWindows}
  GModule2_library = 'libgmodule-2.0.so.dll';
  {$else}
  GModule2_library = 'libgmodule-2.0.so.0';
  {$endif}


type
  TGModuleFlags = DWord;
const
  { GModuleFlags }
  G_MODULE_BIND_LAZY: TGModuleFlags = 1;
  G_MODULE_BIND_LOCAL: TGModuleFlags = 2;
  G_MODULE_BIND_MASK: TGModuleFlags = 3;

type
  TGModuleError = DWord;
const
  { GModuleError }
  G_MODULE_ERROR_FAILED: TGModuleError = 0;
  G_MODULE_ERROR_CHECK_FAILED: TGModuleError = 1;
type

  PPGModule = ^PGModule;
  PGModule = ^TGModule;

  PPGModuleFlags = ^PGModuleFlags;
  PGModuleFlags = ^TGModuleFlags;
  TGModule = object
    function close: gboolean; cdecl; inline;
    procedure make_resident; cdecl; inline;
    function name: Pgchar; cdecl; inline;
    function symbol(symbol_name: Pgchar; symbol: Pgpointer): gboolean; cdecl; inline;
    function build_path(directory: Pgchar; module_name: Pgchar): Pgchar; cdecl; inline; static;
    function error: Pgchar; cdecl; inline; static;
    function error_quark: TGQuark; cdecl; inline; static;
    function open(file_name: Pgchar; flags: TGModuleFlags): PGModule; cdecl; inline; static;
    function open_full(file_name: Pgchar; flags: TGModuleFlags; error: PPGError): PGModule; cdecl; inline; static;
    function supported: gboolean; cdecl; inline; static;
  end;
  TGModuleCheckInit = function(module: PGModule): Pgchar; cdecl;

  PPGModuleError = ^PGModuleError;
  PGModuleError = ^TGModuleError;
  TGModuleUnload = procedure(module: PGModule); cdecl;

function g_module_build_path(directory: Pgchar; module_name: Pgchar): Pgchar; cdecl; external {$ifdef Mswindows}GModule2_library  name 'g_module_build_path'{$endif};
function g_module_close(module: PGModule): gboolean; cdecl; external {$ifdef Mswindows}GModule2_library  name 'g_module_close'{$endif};
function g_module_error: Pgchar; cdecl; external {$ifdef Mswindows}GModule2_library  name 'g_module_error'{$endif};
function g_module_error_quark: TGQuark; cdecl; external {$ifdef Mswindows}GModule2_library  name 'g_module_error_quark'{$endif};
function g_module_name(module: PGModule): Pgchar; cdecl; external {$ifdef Mswindows}GModule2_library  name 'g_module_name'{$endif};
function g_module_open(file_name: Pgchar; flags: TGModuleFlags): PGModule; cdecl; external {$ifdef Mswindows}GModule2_library  name 'g_module_open'{$endif};
function g_module_open_full(file_name: Pgchar; flags: TGModuleFlags; error: PPGError): PGModule; cdecl; external {$ifdef Mswindows}GModule2_library  name 'g_module_open_full'{$endif};
function g_module_supported: gboolean; cdecl; external {$ifdef Mswindows}GModule2_library  name 'g_module_supported'{$endif};
function g_module_symbol(module: PGModule; symbol_name: Pgchar; symbol: Pgpointer): gboolean; cdecl; external {$ifdef Mswindows}GModule2_library  name 'g_module_symbol'{$endif};
procedure g_module_make_resident(module: PGModule); cdecl; external {$ifdef Mswindows}GModule2_library  name 'g_module_make_resident'{$endif};
implementation
function TGModule.close: gboolean; cdecl;
begin
  Result := GModule2.g_module_close(@self);
end;

procedure TGModule.make_resident; cdecl;
begin
  GModule2.g_module_make_resident(@self);
end;

function TGModule.name: Pgchar; cdecl;
begin
  Result := GModule2.g_module_name(@self);
end;

function TGModule.symbol(symbol_name: Pgchar; symbol: Pgpointer): gboolean; cdecl;
begin
  Result := GModule2.g_module_symbol(@self, symbol_name, symbol);
end;

function TGModule.build_path(directory: Pgchar; module_name: Pgchar): Pgchar; cdecl;
begin
  Result := GModule2.g_module_build_path(directory, module_name);
end;

function TGModule.error: Pgchar; cdecl;
begin
  Result := GModule2.g_module_error();
end;

function TGModule.error_quark: TGQuark; cdecl;
begin
  Result := GModule2.g_module_error_quark();
end;

function TGModule.open(file_name: Pgchar; flags: TGModuleFlags): PGModule; cdecl;
begin
  Result := GModule2.g_module_open(file_name, flags);
end;

function TGModule.open_full(file_name: Pgchar; flags: TGModuleFlags; error: PPGError): PGModule; cdecl;
begin
  Result := GModule2.g_module_open_full(file_name, flags, error);
end;

function TGModule.supported: gboolean; cdecl;
begin
  Result := GModule2.g_module_supported();
end;

end.